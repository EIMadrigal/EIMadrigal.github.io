<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中途岛海战</title>
      <link href="/2022/01/13/%E4%B8%AD%E9%80%94%E5%B2%9B%E6%B5%B7%E6%88%98/"/>
      <url>/2022/01/13/%E4%B8%AD%E9%80%94%E5%B2%9B%E6%B5%B7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<p>中途岛海战是第二次世界大战中太平洋战场的决定性战役，其地位堪比苏德战场的斯大林格勒战役以及中国战场的平安格勒战役。从小学至今看了无数的资料却仍然稀里糊涂，但愿这篇blog能解此心结。</p><h2 id="战役背景">战役背景</h2><p>1941年12月7日，日军偷袭位于夏威夷群岛的珍珠港，以极其微小的代价重创美军太平洋舰队。不过这次偷袭并未对美军造成致命打击，尤其是美军航空母舰依然完好无损。为了逼迫美国进行谈判，日本决定彻底摧毁太平洋舰队的航母。为了将航母从珍珠港引诱出来围歼，日军最终决定通过“围点打援”的战术在进攻中途岛的同时伏击并歼灭美军太平洋舰队，即所谓的MI行动。</p><h2 id="战前准备">战前准备</h2><p>日军方面：由于珊瑚海海战中祥凤号沉没，翔鹤号被重创，瑞鹤号也需要休整，因此日方将剩余航母划分为第一航空舰队（一航舰）和第二航空舰队（二航舰）。一航舰由日本海军最强的4艘航母组成：苍龙号（常规情况舰载机52架）、飞龙号（常规情况舰载机54架）、加贺号（常规情况舰载机63架）和赤城号（常规情况舰载机54架），此次进攻4艘航母共搭载248架飞机以及12架侦察机，一航舰包括第一航空战队（一航战）和第二航空战队（二航战），一航战包括加贺号和赤城号（旗舰），指挥官南云忠一中将；二航战包括苍龙号和飞龙号（旗舰），指挥官山口多闻少将。二航舰拥有2艘轻型航母隼鹰号和龙骧号。需要注意的是：此时的日军飞行员毫无疑问都是顶尖选手。</p><p>为了掩盖真实的战略意图，日军制定了极其复杂的攻击计划，并且联合舰队司令长官山本五十六要求路途全程保持无线电静默。一航舰的主要任务是：夺取中途岛，摧毁岛上的飞机和机场跑道等重要设施，为登陆部队扫清障碍；寻找并消灭美军航母。因此南云将一半的舰载机装备对舰武器（鱼雷），防止美军航母出现。二航舰负责占领北边的阿留申群岛作为佯攻，试图声东击西来分散美军注意力，行动代号AL（Aleutian）。</p><figure><img src="https://weaponsandwarfare.files.wordpress.com/2020/06/midwaybattle.png" alt="1942: Japanese Options | Weapons and Warfare" /><figcaption>1942: Japanese Options | Weapons and Warfare</figcaption></figure><p>美军方面：1942年5月，美军已经部分破译日军无线电密码（据说破译了80%以上），还通过经典的“AF缺乏淡水”钓鱼行为确认日军的作战意图，因此总司令尼米兹上将决定提前设伏，将美军航母部署到中途岛东北部，在日军攻击中途岛时发起偷袭。珊瑚海海战中列克星敦号航母（CV-2）沉没，约克城号（CV-5）被重创，但是美帝损管仅用了3天时间就将约克城号大致修复。美军3艘航母分为2个特混舰队：第16特混舰队包括企业号航母（CV-6）和大黄蜂号航母（CV-8），由斯普鲁恩斯少将指挥；第17特混舰队包括约克城号航母（旗舰），由弗莱彻少将指挥。5月28日，第16特混舰队率先离开珍珠港，5月30日第17特混舰队紧随其后，6月2日美军航母在东北部设伏完毕。</p><h2 id="战争过程">战争过程</h2><figure><img src="https://upload.wikimedia.org/wikipedia/commons/5/5a/Battle_of_Midway%2C_Movement_of_Fleets_%28ENG%29.svg" alt="Battle of Midway, Movement of Fleets" /><figcaption>Battle of Midway, Movement of Fleets</figcaption></figure><p>战斗前夕，中途岛附近出现大量的美军活动迹象，由于前期的潜艇侦察并未发现美军航母驶出珍珠港，因此南云认为美军航母仍然停留在军港内。1942年6月4日凌晨日军所有战斗力量就位，0430战斗正式开始，一航舰出发轰炸中途岛，4艘航母以惊人的效率在10min内放飞了108架飞机，队长友永丈市大尉。同时仅起飞7架侦察机搜索半径300海里的东部180度半圆形区域（能覆盖才见鬼呢），由于气象条件不佳，加上南云认为美军航母在珍珠港没那么快出来，因此日军的侦察形式远大于效果，最终因此付出了巨大代价。但目前来看，7架侦察机中只有从利根号巡洋舰上起飞的那架晚了30min，其余一切正常。</p><p>0532南云意识到自己的一航舰被一架美军PBY飞机发现，意味着中途岛的美军飞机可以提前起飞避免被友永炸毁，事实也的确如此。美军轰炸机提前起飞后直奔一航舰，只留下18架老式水牛+6架野猫战斗机负责岛上的防空。0620，留守的24架美机在距离中途岛基地30海里处拦截日机，被日军的零式战机爆锤，13架水牛+2架野猫被击落，日军轰炸机随即轰炸中途岛。0634日机开始轰炸，美军防空火力击落11架日机，击伤14架，也因此导致日机轰炸效果不佳，飞机跑道只有轻微的损毁，因此友永丈市请示发动第二波空袭，彻底瘫痪中途岛。</p><p>0710，日军发现第一波（中途岛共起飞了4波）美军飞机（6架TBF+4架B-26）来袭，30架零式起飞迎战，美机投掷的鱼雷均未命中，5架TBF+2架B-26被击落，一架受伤的美军飞机试图撞向南云的旗舰，最终差之毫厘，日本仅损失2架零式。此时南云收到友永第二波空袭的请求，南云可以选择让友永返回航母补给后再次发动空袭（大约需要60min，中途岛可能用这段时间重新组织防御）；也可以选择使用航母上的预备队前去空袭（但是山本要求不能出动这些飞机以防随时可能出现的美军航母）。此时7架日军侦察机（按时起飞的6架基本达到航程极限）并未发现美军航母的踪迹（云层帮了大忙，从筑摩号起飞的侦察机没有发现企业号），而且自己的旗舰刚刚差点被中途岛的美机撞到，所以南云认为中途岛才是最大的威胁。</p><p>0715，南云无视山本命令，开始在下层机库中将一航战预备队的对舰武器（鱼雷）换成对地炸弹准备第二波炸岛，俯冲轰炸机则直接在甲板上安装炸弹，这顿操作需要大约90min。0745，从利根号放飞的那架晚点侦察机报告在中途岛以北240海里发现了10艘美国船舶，南云吓傻了，命令停止换弹（此时有64架还未换装炸弹，换装了15架左右）并开始分析研判，有2条路：其一是立即起飞所有飞机（挂炸弹的去炸岛，挂鱼雷的去炸船）；其二是等友永降落后再去空袭船队。</p><p>第一条路不符合日本海军的作战操典，而且也没有多余的战斗机护航。由于无法分辨该船队到底是普通的运输队还是航母编队，并且按计划船队出现的位置并不属于该侦察机的侦察范围，要么侦察机偏航要么报告的船队位置有误。如果报告属实，那么该船队很可能是美军航母编队，因为这样可以从侧翼攻击日军编队，可是如果是航母编队为什么要逆风行驶呢？因此南云觉得大概率是普通船队。除了这些情报外，时间对于南云来说非常紧张，燃油不够的友永编队大概在0815到达并且最晚要在0915降落完毕，整个编队的降落过程需要30min左右，所以最晚0845就要清空甲板让编队开始降落，因此南云需要立即决定到底是选择第一条路还是第二条路。南云从0745获悉美军船队到deadline 0845大约有60min时间，但是排队放飞所有飞机并清空甲板需要45min，所以最晚0800就要决定是否起飞，因此0745-0800中间的15min才是真正供南云决策的时间。</p><p>0753，中途岛的第二波16架无畏式轰炸机接近日舰，日军派出9架零战，美军飞行员战斗经验欠缺，因此无一命中并且8架被击落，日机损失1架零战。在0745-0800的决策时间里，日舰还要走位躲避美机轰炸，虽然也可以起飞但是风险较大，并且此时45min的放飞时间肯定会被拉长至60min甚至更长，意味着即使从0745开始起飞，0845也很可能无法全部放飞并腾出甲板，友永丈市编队大概率就要坠海，显然此时先让友永降落再去组织攻击是风险更小的决策。另外根据侦察机的报告距离来计算，美军船队至少要到1015才能进入攻击日舰的作战范围，因此南云认为有充足的时间回收友永后再去攻击，加上南云本身的性格非常保守，所以选了第二条路。</p><p>0810，中途岛的第三波15架B-17从高空投弹，IJN闪避，双方均无损失，飞龙号差点被命中，下图是其风骚的走位。通常在这种规避转弯下是无法放飞飞机的，只能等待美机攻击结束后再放飞。0820晚点侦察机报告美军船队可能是航母编队，机库里的飞机为了攻击美军航母编队，又将炸弹换回鱼雷，由于匆忙便随意将卸下的炸弹扔在机库中。但此时仍然无法直接放飞去进攻，因为友永编队大半还在天上，因此南云只能等待，别无他路。</p><figure><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b1/Japanese_aircraft_carrier_Hiryu_maneuvers_to_avoid_bombs_on_4_June_1942_%28USAF-3725%29.jpg/1280px-Japanese_aircraft_carrier_Hiryu_maneuvers_to_avoid_bombs_on_4_June_1942_%28USAF-3725%29.jpg" alt="IJN走位" /><figcaption>IJN走位</figcaption></figure><p>0827，中途岛的最后一波11架老式俯冲轰炸机来袭，但很有自知之明地选择攻击战列舰榛名号而非航母编队，11架日机迎战，美机无一命中，损失2架。与此同时，一架美军潜艇鹦鹉螺号向日军雾岛号战列舰发射鱼雷后被日舰发现，雾岛号躲过攻击，美军潜艇跑路，日军岚号驱逐舰离开舰队追击美军潜艇，“带路岚”最终返航时带着企业号的美军轰炸机（麦克拉斯基少校）找到了日军航母编队。</p><p>0837美军攻击结束，南云开始回收飞机。0910，友永机队全部降落。不过最迷惑的是这段时间南云的编队竟然朝着美军船队不断行进，而且日机比美机飞得远啊，为什么要主动靠近呢？接着，南云只需要等待45min放飞飞机攻击美军航母即可。0918，美军航母编队15架VT-8鱼雷轰炸机来袭，被零战锤爆，最终全部被击落，30名机组成员只有1人幸存，日舰没有受到任何伤害。0940，航母编队第二波14架VT-6来袭，此时停在甲板上的日机重新补给完毕，满弹满油，事实证明日军侦察机报告的距离有误，美军完全不用等到1015就可以打到日舰。美机9架被击落，日军损失1架零式。这2波攻击虽然没有造成伤害，但却拖延了日军放飞窗口。</p><p>1010，12架VT-3+6架野猫继续来袭，美机采用了著名的萨奇剪战术击落4架零战，仅损失1架野猫。美军的护航战斗机吸引了大部分零式，使得轰炸机可以抵近日军航母，在日军航母上空巡航的零式不断加入舰队东北方与美军VT-3和野猫的低空狗斗，造成日军航母上方防空力量空虚，这一波美机损失10架VT-3，日机损失7架零式。其实这一波又一波的饱和攻击并不是美军安排得当，恰恰相反是由于航母舰载机起飞管理混乱造成的结果，也算是因祸得福。</p><p>1020，50架美军俯冲轰炸机（好巧不巧，分别从企业号和约克城号起飞的2批编队飞了不同路线，并且约克城号的放飞晚了30min，竟然同时到达）几乎没有受到日军防空的零式拦截，这一波南云好运不在，加贺号被命中4发，并且引爆了飞行甲板上的满油满弹日机，苍龙号同样如此，赤城号被仅投的1枚炸弹（贝斯特少校）洞穿机库，引爆机库内未被妥善放置的炸弹，只有友永所在的飞龙幸存。1030，南云将旗舰换为轻巡洋舰长良号，日军此时已经注定失败了。山口多闻意识到自己的飞龙号是唯一的幸存者，开始组织反击。</p><p>1045，飞龙号的6架零式+18架俯冲轰炸机奔袭美军航母。1050，山本获悉战况，召回阿留申群岛的隼鹰号航母和龙骧号航母，以及其它佯攻力量救援南云，可惜远水解不了近渴，此时美军航母舰队向东行驶远离日军。1152，美军雷达侦测到日机编队，战斗机升空迎敌，重创日机编队。1210，日机剩余的轰炸机开始攻击约克城号，4分钟后约克城号瘫痪，日军13架轰炸机+5架零式被击落。山口多闻自信地认为已经干掉了约克城号，接下来就是1v2的局面了。</p><p>1331，日军第二波10架轰炸机+6架零式由友永带队，山口多闻要求再干掉一艘美军航母，这样就可以出现1v1的黄金局面了。1430，友永发现30海里外的一个航母编队，看起来完好无损，他认为是企业号或者大黄蜂号，但是美帝的氪金损管使得这艘还是苦命的约克城号😂，美军6架战斗机迎敌。王牌对王牌，萨奇击落友永，日机损失5架轰炸机+2架零式，美军损失4架战斗机，约克城号再次被重创，1500舰长命令弃船。约克城号很坚强地活到了第三天并差点被救活，可惜最终被日军潜艇I-168击沉，同时参与救援的哈曼号驱逐舰也被不幸击沉。</p><p>1545，剩余日机返回飞龙号，随后山口得知干掉的仍然是约克城号，随即命令飞龙号撤退，准备休息后发动白天的最后一波攻击。又一次迷惑操作，飞龙号一整个下午都在朝着美军编队行驶，可能是已经杀红眼了吧。此前1133由约克城号放飞的美军侦察机在1430返程途中发现飞龙号。1705，企业号+约克城号的24架飞机抵达飞龙号，由于日军没有雷达，13架疲惫不堪的巡逻日机直到美机抵近后才发现，4发入魂，15min后大黄蜂号的机队抵达发现飞龙正在沉没。</p><p>山本最后希望再赌一把，利用其它战舰在夜间和美军航母对决。由于南云被撤职，近藤信竹中将接替指挥，直到2330仍未发现美军航母，不久后全体撤退。6月5日0255，山本宣布取消MI计划。</p><h2 id="战果分析">战果分析</h2><p>日军损失：4艘航母，1艘巡洋舰（三隈号），250架✈</p><p>美军损失：1艘航母，1艘驱逐舰（哈曼号），144架✈</p><p>经此一战，大量的日军优秀飞行员、经验丰富的机械师被消耗殆尽，后期只能神风了，美军完全扭转了力量对比并开始在太平洋易守为攻，采取“跳岛战术”不断迫近日本本土。退一万步讲，即使日军勉强赢了中途岛，也几乎没有可能战胜美利坚，强大的工业制造能力背后蕴藏着巨大的战争潜力，后期战舰下饺子就是铁证，这绝非战争资源匮乏的日本可以匹敌的。</p><h2 id="reference">Reference</h2><p><a href="https://en.wikipedia.org/wiki/Battle_of_Midway">Battle of Midway</a><br /><a href="https://www.youtube.com/watch?v=Bd8_vO5zrjo">The Battle of Midway 1942: Told from the Japanese Perspective (1/3)</a><br /><a href="https://www.youtube.com/watch?v=BXjydKPcX60">The Battle of Midway: Hiryu's Counterstrike (2/3)</a><br /><a href="https://www.youtube.com/watch?v=WHO6xrSF7Sw">The Battle of Midway: The American Perspective and The Strategic Consequences of the Battle (3/3)</a><br /><a href="https://www.bilibili.com/video/BV1Rh411v7de">再来亿局能翻盘？中途岛海空大战</a></p>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> History </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冷静思考 拒绝盲从</title>
      <link href="/2022/01/08/%E5%86%B7%E9%9D%99%E6%80%9D%E8%80%83%20%E6%8B%92%E7%BB%9D%E7%9B%B2%E4%BB%8E/"/>
      <url>/2022/01/08/%E5%86%B7%E9%9D%99%E6%80%9D%E8%80%83%20%E6%8B%92%E7%BB%9D%E7%9B%B2%E4%BB%8E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="739c8fec141cfca3e03dfdd9953da73747ebd6989dc0fba5b0cb69bb82178590"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2021</title>
      <link href="/2022/01/01/%E6%88%91%E7%9A%842021/"/>
      <url>/2022/01/01/%E6%88%91%E7%9A%842021/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1bef302f2256732ff3df9e0b76e314e1df593d09af332e633c4b84872982e471">418fac4f173397084caccc18ab9f089eaf702aae8c906633ee725339826bde4ebec23ac7f20a16eaf981ffe22bfb7a3499015a81686afa91db1861abacbb176df1e94c96b801c049372caec75a543b9e364abe51c5ed77d20c37e7d43545c1c0a2510f6fd2dd06cc42980d17257e4fbad82e9369d85dffd9723d3abd468c55f7ca194627ca3afd9a9bbc0583b3761b60958dc579825976d025c787a9116dd6874ffdd782e55914a06bd768bb24fd7e71f1e6fa9fbff74596bfb59cf66b7d91c19d118aca31cd1fb95a411fc6bd5a286ec459c7ace6b32f8f392496a5deae2ec57aff0218f533a49f81f9e9ba820cd4d532c9c319d74622f0ddd669c36177356cf623d68dca635e0bc695e7095334375c4c867027afee9628af94e83c363ab864bbbc03e1c402e4793a6208e524679ab314f923a1e59ec51589405539a8b7868dbbb8671f1e89d62a1f90dc483ae851d7630f58cc76164af1fc7231072af13687100cab5026046e5f04084e2a5f8b04b02cb364bc18b055f3f963723f38d0dcbf458551ab1e083882689cd95f51d4bc2b03b8e15609f488bc6b736559640135c441409104f091df3af6b27bc6e6916d94f7de5cdf1504668e7c0e0dbcd475562cff0a09a31cafbf064a0c54cb18a7b09cfdc5f405ef88af622ed0d7c52f6c6daeae87c5cdef73cf692213a607501c7ab11524dfdbc0cf4a4dcdb91eec1e1942c59149a7c2cae8a3416b4aa5840f5a041e3e2c5a9b2e61e5309576e3733b21e2bd7d8115639d04dffa3f87751b10b7954be00fdcfe54af5db6457d2db4a8f66f60d305e9a7ac3c9d7007fd157768567c5836c2735310d7650de4827cadf2722d9a7b20e35e160f2c7ffff2d3ec0c4253159e6d1d8752d2cae9e2105b2a900b57c2dd29f0b46944d891f1b6d4e2962fe96cdb089aed2d1b9363f2f7386a20c49313e4187206441c56086edc4eb27a77ebe85b7d716b197b9eb90de18ec27792ff18189ff260e93f2f8766088492e45a42dd23093f98e331812abc997c553bd8d8960a0a4011d43791ff07b2fda47703968c10cb67bbb4b1ae57e1cc36692e2fa08de043d82c19e5f73917d8c2578b13a62d6f750606de30c1560b090e8247cd8c03427e582cdf0f4cbe9e54bea52921b9260d6e9ac6705bcdf38a06f0b470ccaa60eed4f9d95dcc60f67cf8b28ce68ec8aacf5b24d396f073f5519088a66aed4ec9b0560cb5ebd4e5439499e42a3e1d439bcd27bbba402dae1bd99c23a8c4fe67e57ccab568f1e47edfa7bced946134658ce88d2aa5de0cb920742a77186a4cf6ba57ef53948fc0f74b6905b70d9553bda30ede83a9b0d78f96c02cf49a58e8bccf5d63f6a142874f4de676ede77e937c556ffcdf31e434ca6f6d92e35c7ea999a4636760b300339225f269f36c3c4bc64a91eca2598c49b3936e0a113af2de7439a44674c9c7d8d08cb7c3e2fcf7bb9fae44595c9df36b43db721e551f7cf531a4d130f44234af5f1c27b79070f524e9b4227fbde10f8a04df6aeb367cc387219d1273e1942b531185a98c85c31cbefb25a5d5ecd161c0759fc017691a2318936563c2893083bd29dbeef16673f48cdc33baf8c1429813f826c8c1e8b34a7a2af75f228172936a1f13dcb974f7455d1dda9dfb0cb54573081a0778fdfaeb056a878ad0406b01eef0b73fca26fa568cba559022ca8332edbbacff728dc1a982f7ffcf58c4e3da1a4cfba971e79dd1fd8c9178250a2cb8fc852c086ca33a4405ea9417d555487bf12fba245a798039ead92a713d34498c9e4e3933e15ed9afcbe48d35cc154348eceb64ac4d2d05a581eed7fb3de9364940a32cfaed0302164a140d377bdc5ef24aa8b14ced9ac186078f56923996233f00e043a8a9855fdb7842838337c30953ea3617788b1cabad8ebb239c9f91adef41009025d6ffea7d002717a06ac843f068c134e621dc6226cfa8a7fb9623b657c1d15a75d6b0fef76f5ba415b8137f66bea058fd5c14a7fac1b88d0ba98be3dfce8231f396e1c820d4a2a287929efb4e46252f054f067b7b9757f42b0f2f47684b8816f1ae9c06c4c387ca229a2be1e9857f4408277983818b51d3e67c443c33f1631ff46b48ddd0bcc4e4741bb08feda16cf9a5b5160f4fcfc0965060860d185a60c3d4ec2bae4560f451ff13cc5078a1afc963c9d3912acc95ddb790dcd2c237c3704d3fb1670dc538ffcadb017771e34384d5a957bbed61ddbd282ce92b63b474406a2c126ecc81847c73d4a9714965b40ea6ed1002e4577745799d73292253049803145d403e331e684a6f8083cbbec6e0a5ad7039132ca8f5a392be0c2638df72db66a4bdcc652651d918079ae8d06b0f1b3f34d85bc52a5146b57590e4a441435febf190d9f85c1174b27cc047f388e0550dae0ec4be6fff3de3422b611e1b538fdab1879843102a55282e8f294e5424eada6b49d131b48f6aa137c7332d9ff36268ccb47b5be287bdca6ea5f9c4a6d2708f548425c98261a72530b266ecb8112904d9e5a645ed844804c0c14b40e5e7f296aeafc952828882d1004043c3e1ea3923c7de768cb8488248199189b43a88702b363cfe27da5c0564a40e572806340df4fcba96305a8873dcb9a5df827dce79ef3e459c5d5b11515ae4d884816043aad526935d9e2098e6ec15f9e90d762801b7e16badc13c714c8e0105f91b6a0b566f050c3939ccdfc5cbe8bde3bbff1ef481241bd68674c9ea4678c0f18045f03542ddf987a040a7ddb776ac163ff8b56a061523402d80b2d0432bf38013cca2fbbf9482012170494940884265c6c7de7eea1e9364070101cd7f6c69941989edc2c173bcc42dedc74c78d90b803dbb96494853c1958c3bfeb56c92801e68d056c6d817490fcfae15b2d8138a6d6fd741422959fa35644243cfd3df4df5722b565fe9cdedab214ed37f720f115c7a3f5e3ce3999f10df557d73d2cb8e749ced40f4b1b735073645df341b89fb733a15e7d7c22f25f14915c05a6b5e28c08d91a3e1c870303802ebd1b3240657d42b9416536a9ff998480a13dc63bb99c9734493a3560dec937e8ac83d4d45453e8932df5073b1d82657e677f7aeec755634d979deb8214980db9ef4fb06ae2b79275b58bedbf93dc2a910498c00cc3a1f4064c05cba82cd7228a7b8de4ace0d433e1fcb6d0358ff3c13db23788edf9992138ddae616129bc4190f1683410de706fcfb5887f85424c3ccf3f482bc06cd9e508bdd0ba3aea2f519a04f95cabc6460f1dc533ba08a0939b2a4518548a4675fe2d6714977ab972e1adcb632fda2b88068a52e5fd971df2c0c0730ac64b907c0258d6ce3c95584eb17cb5bdea677685f3bb6e828a02f7f855b2c6a0c07313c0dbc90bb68348bf4521501fb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面筋</title>
      <link href="/2021/12/28/%E9%9D%A2%E7%AD%8B/"/>
      <url>/2021/12/28/%E9%9D%A2%E7%AD%8B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f3f89672cc755fe8b200bb52af67d7612f147511df232bfad09913cd70730908">418fac4f173397084caccc18ab9f089eeba8f1415a4aace19a1c87072f40698035a92cff6d744b153b060eece73dac34fc89e831bfed3cd8e3d3d1954d32c96d30ffefe3467df4f5a30d7291b62e27098c8bd6df7f7067f500eafd0d0c7c3d890e23df2dac0e00edb1d834c415cd1cb9d40c4e6f0a0bb4072744fea2ad6422795901d48a16b92d56bde809ae38033621113ceee4e261bab849788f26c49ac7898d3b4a79f5a98abebf3d11567aced0d29675401376f0994cb8c385a215bc176c3a9e1a9d64bcc73097030606e49c47807d0cd7a438be2abd02fbbe70ff508a5526b688a3935e16b19f449b14e127437ee73f7412e71bb9891a25610c24bb73ff61cf3de56ca91e0a121e90eb08394375b756699644152ad89fbb3676f815a44c14941723985c048c5b84fb4ec07ed7698ed557df32b5d0c272ba417083ff30db9de38b2bf64889e161a8ef1dc3d801c614ad708c52866ba5e243b465664d276b56d367779a97a08b44ccc55e4407704f269f3d867b4188637137ec0cbbed0a00c6e5aa255377b2c3f795225b22f15bf0ef6487d1d5a31cefba0f0fefcf883dba13e41eca75024229fcccbd62f121bb6818e35eea5f920b6e1c556669490e33a829a19dc5526614584a366c27bafec03992ee5aa33b4371b1b0d624a49dbe78efe7dec01b6fa49078c4094c9b0f9dd11c9e18fb6c6ffb95356269bfdfdd4a0a8fa2c5bb58f64f2c2fb1455a791ae5b0ae3c6cceb4e148585da0a0c63638fe9f02410e42a3f45c913568bfb1694f5294e4e97dd6e409483c720e521618bc5aaf9d8537cd4372a6159e3ad12e80901d2a97a3f3a330e9c84a7db4cfe600349f901d43f8f2536ab518f707ae6babdbb47630a270dcad67a0d183267cfd997821e7d9d06244870ff3eb309798e0356fe2d67aaf3556d4a11dc3c9501d8c16ff1edf97c5fcd353e57160826ef1b60bd8c4fefbff9e3b3a185d1b3d67df7946b30c3b408d3dc9cb0ad955846330668324d7eefdf3baef28f626943b51281eb8a5b726d20312e6498694ac341ca461617e33945fade5a0fec8e83396baf2a8d8282361ef6dd9d9fa6bccc58545fbb30547b003e9d23a179c96daaa7c1b09cb95bca652986c65ff705a107cec28060ab168331964506cc43506f3d957ac191bae1ec613b900f6cc0853dfeb3577eee0347b351dd247f450978d7ba0b1ee2e24cf3376f89ca195fa4f98d3fc35feebfcc617aabe9e227d2552014101be286beecace21929489f4f9c9a94c5aa9a8117f26e17f392866264212d49a74b5a5bc3b74e2a101114e35d86defb54fdf723c067c737d7fce5ef5c7f1732cf074577e6593782c24d30477478de36c89d60d368bc6eccd2adbb4896773cf5978022d88c99395a350a62bb7c5ba6a733143dbe77e193fbd1e480473940f89273021a2e4120412e5e3aed14df7f93466311517521fb7f0e1912308afdbf3773b9c67cf6af81518a8920d49a7aba3307419f88305142944bbab87c3b2259a6ee285ebf68cd080a182b803033303bc379b3b26eb6528bf136a37f65efb83077490839a4fc6cf0884075e715bdf32c30b5fdaa4fa5141ffd044ce9a35386081c551a8d5c201ead9bd5c4054bca0e6a93c586d7cabb3bff0cd9e4b9ba4f0aa387b035672b366113fdd080f3e4164b19d777e0c9dd09097f70b03f4bba9620a3629a3638c1e53d93d17272d264f7a95b594d2a242440cc71cf870d4b35b8e58f932d4e88b76a24551eab3494a7fc6059b1e16bdc3a68d285d8691157705ed7da9cd292106e26de9f65260059d03169e11c6252ce363c6d60ccf620594a8fad6271791b1273a6388f3790d0303bab89d0c160b3cc1e4349b34e878854c833b25015341abebd1af956863d8b55dee1f8fb16553e9f5de5d986cf5afc58cadcad559ebfeb39f823e58ed7aa309fb207dcaa25776df5b6a7433b574cddc36ac9bc1fdfc186fcd2029301ef124ce63a9abfd2a116c63bfae731b603efa79a458ef89b6317ef37972cc4f227714f20510b6964810e58ec5db9ab3ff695143ce880846fb1791851282b1eecab67b012af2fa0fec4cd2620a9595c894a78183feb9d3fe7c3ff4facefa28f478a0d02b6f73162395c87b46a681fe82d74b47496205a65d2ce6ada7d04916b4fdc5016ff01ce6315254874e750148c64a5ad45825eaf8e2363884619bc043808615c5915da49a1d775e5278c2d12773452e0ffa8827d18d9fea1ac52541f82bed8dc9ae0f43f0b68b55900789730036564e142999883cb4aa126592ef5d6cc8f9dd762fe68dca4211afa4facca0fb83c697ad0188b07f59df5c5550d54a07bcb06ab8c42e54811da92dd31e6a2dda3a0df395bd17c38ecf2b2ed967ba5714bd011b9af70eee9508a328bb74a75da0239f8f6f0ec4b53725ec82201de8a07504e09801644517cf025c12f180241ab6fb98cea00e80af9c5aa501c5234c282fe1fa3ad5d38db63dfc0fa2821f5a651ab197ff32236ee6201eadbfb78fb6a4a79a39c1c3f6edaa6339369a18f51935d1341a19f78362d53765065f2a274cc1e0b1554e24d636ce120ca15b92fc7463ef82cad733af177c2c190485f5fb56a67dc3454dcf0596babaeff54d3b69ff8a2703b92893f474a3f6bf2a143f2f9c807c5f880f3979c8b395b24c429e7fc48a2f5952d930b088f3c2bf64a80261b43525d979386ba56f3e43b2992830f5b3e0fb7e37064b0dfb964629399229de93f046db01bcdb6c829752901db45002bcfe00a14a376dcd4aaa1602178d1fcef93df044f5067ca94493979185f4861d987b52cbee70e9720862d73072d90fb607b52464660b0a87597d9f1b819b22a6d6a3658a8037d5195056f642007957ae57b9fdbcfdb0a5d304959fff0063d96dca1ce5b111de4f731e8a62de39dce8250e4cddfcad82a5b9aab31a46d870dfe38d081a6caef14b23cdb7c486f532bd2c1caf7e313fdbbbce1c48e67cc85bf1b9f0daa9adb5d7624400710dcd14a3c42008cc36532e435869522a2b84e10ea0d09f4a8a63649b6eb8d1a9ce73897768635de87676602ee038efcf019cb24cd5a28f3c07601a709cafb2d1342abdd6f360ecbd078e3b422f9e7a2a85d71312b9060d2cfc35fc71634aafefeca9cfc58d1ff0af5a698997f905cdd2711a04b514ad02298cae92cb5d7df012bdc89e8c7819550411ede9348bc395d7faf9b3028717022fd7861dd76aed5573e4271685c8dbc09548fbfc526abcc984e50ac45d59e87472519403c124b9eaabf06a34680f835af9a31e1bf48b72c144fb2f99d1f7790f56d7514ece59ca4e7aed751ed51427abc04b7c716f9c829426a2566b284fca0abc8d91d402df584fb87cdebc391a739ce44fe7cc532621174457a8ecebd75d4d796df1b1ee2420f580c7978fa698abb1627f6aad91edfdcae5bfdd59b5001f2cd000824df63f03b2768c94f68df002b07a04b1b5ac2e9b95e30a0cb84d292fda477fb355d3dca5fc5893868e42d7df755dc3ce3edb152a7393b7060e21b91637016a00db972afd975a7a931496b335077eae1269f78f9c7297bd8189025c900a41b2c2da1eb64215d705111535e7f0815c5f7e1aa6335d0e6168cffd19ce172ae5fb6c4c19f97daa11db60c8eafbc1a55ce4d27ad95323a02ad8fd12a44c1830e1f888a6c8c97f2754355cc1669a494228138ac923c207ad8e68d23cf150d61e6d59c7ebc86b34e1faf4dda55c5487e9a50d75aaec92d958abd33b2efed81a4826c77812ae1bed8fb12a705f663ffe7c20fff9e31bdc7061ea94aabca2f66c5571cee287bae83ab2dc19906f85f3739dc995622530a582338f763a0778de22074a014b278e4588bc312430f2ef75be3d81d9f41302f58fbbffbad9aff29e95cd536b75abcf70bbf49da053315f4607267e783687c65f8014e81f8241f9e72428d62674b292e984a2643b622b32aaccfe051840b7d86aa3cd206e7893995e251a3929eaf4bcd30129aebf40b81851cfeedbc5bcbcc2732600dd0d9d7415265cd033a2bb81dda44ca14f56f99329df811defeea2c78b0989528583b074724068a1e4f870010f645db927fb6c81384c39908f489bc8a905f93c32e419c53ca1a26cf31d796711590230d5f532a87ab1666b1f69becdfc034be67eebc57f5a9be2b1c17748002b50ba089635c29c6e88e39a907b94ccf1fc01a121fb02908abc9caba2fb36a3c5d7a9d59b1386f7ee890aace247d18c362e362056a0b67799aaa2cbcae0ddeb3e4097fb649a0f17d277d6656a68dce4d8380842f8dce5581357966c10c761f20d698bfd80041bf5fbafe2a3250fc719397823d126d57ce49518f37cbe1d9e0b1891679b397aab7be1a817054cba90025f8ae80724baa2be1445a722fd09a9dc129bb4db6f272c7240d12aa74cd48155c51959b72ee77059870d5c8d951732a382951be8b34ddfc9c635e3541d7ae194b4590fc03fb24d3ce0bafee8c26a2f58ce17af0bab355a1a8ae98838a3a81704f5e38a602030b7c2dfb217aad0ec249319e7a6558ab163751c127a1d470cc2ed05cf94baa1dcb20405d56cb84cd4a773c61167906053408ec714a8a0d7ed8dd60b2d68534c75753810ccaa451457cd68d56387c437e8618ad9625c4e9e0f81b1f9812cdf21296e4f057a6490e17f64ca30b7df0a33e4e0f6b5e96118577da20f757859da7ea4440ece323344644d7f103a14a7e3c02a0b976d59b25dd298a536afa37a4cf97f9bfa3fbf760ee49d114b95b6f2ab38f5f8cdcfcfbd06d842f97646466fd316c8c5aeba8f919c6f1465b80237b18b65e17a32ce100533efe8d005dd008607cce495a441f3d8eaf801e25d4dd5b00e0a0b5750622530af1d865bfdf545c76f35310d688ef69f2e1c6dbda9503e96466d3a248b7795cdc20b841c1005048890a8c57c3f2f1ba5723e93bbb4a6cf72f339b6c5e768d77d0895705cd0c3ee31cbacc9727885646c3f27d5f95ecd1ed0167f884b096009bd18fe44343367c3e633f6b38ffed74c1cfd2c554b9028f5f536ba79f5abab6ed9de146e4da3666418ec6be67f39b54f6be6d66879b4b6afca36643c2c41e8b634d224e935b902a0ff3706ec74176cde8af13328c8f23b0de71a6b3b238c5876c46624e2fbe608f8ea5d6ae6b8f8faa0c0596c5c129c6577c805a37ea2be1ff9f61eb9e78d3a1ea8c72a36840c7aef3d080a99798c149f16cc54c42234b61b979ca05f87f1a9ef7c9600728407f8aa2cc04030f89265e1ea17afa0d55917751d7dd97a4a60ffe2682cc348512ff0a1ecc234d47c873add226341722f3737a3c918e7aec41f171318e1ee846f19eb1b7e66d7e1d23c32899e6aa6dbc8a51bbbd1ee51a69ab92b20d8f9e8391d08877806cc15a94299679f47599a1ed48bc51d67e5ce4e38fcd0e8d82d3c3f24e39c8d16a92ecfaeb5c07a34e5c9ad49ddaf151bffbeda8b08147c47407a9a3f0749bf014daa877bb2ed2042dbe2146c0da73a6175d9a68e1479b369354c3ced639f3d209a05c228ed29aa5483266265d538a2dfcea0b377424242b417b9d22e3cf10e15ca190ac215f669c50c5a362ebd8310bf0ce7a993c42bf9c83ecb5a32f1a95741313547e862e594d8c088bebc832edc79d3495cc01f97329cab552f77409cc4bdc202f4159562ebe0732e5276bf17cc451d4e1959fd9e7275d796f3021a3bcd02b24e9035dc703545abeb9b432991d3413e9d26fa42154994fceafb3817bb70cdcfb9fb63bee56f9c379fb0886357ed7484292650d82329e96e70d1df58b105a588c43c69a6788dc12227b930d33981663de0e8dcbbeee57752c473b494386e1c99638250a235a8e48b504f022835b122b6ab5f0c97ce471ac41749c39803e4dc257af8095ff6644510f2d46bd19163f8baca557ee7a914a4329722cfcf61f1bd68c549c1dc528d25df05c92dc7beb8f60f56a1ba9141076ef58b295b9690c2c92751191ed8237ecd0dabdaaa19ce73b5b21cf9643adf99f2abd438fedada386b003ba1aa8a322d0990f94767664648bfa6c3de6e876180aad52d0e268c6af60c8f6fd3fad667825b20f7c345a7e368d5f8740826c0d2c05fb746cd4847d10ee2a2e7d52a3e15f55ae18c5ec84b0996661533137cd253b5960bbe0dd35840c80b23108146359721bec650fb81cb607af93f72b6d9af88b62d863dc65bc22620d1ae818d83de70443fde83e38719f4d2116aaa05378e34d57260118740cbd5a28bb7eafb37f06bfac19f3740642dbd2e8d63ff709c76601e59993f86780f0984c10eee78a4d567a809543fe9f332565cee898e1807301d04f6c63355994547624697fe41d265c2d239b74c9c285867d316e654b37fd81ffecedbc153cbc0e3d67090892c0ed4afd35f0680e9c8fd1b2ae06fe82996673844d922a19a062551c3f3ab039e10e9bb3324001fe5457609a065ddb5f5dc8ee0259e6bd01c94baab408545e455d8ee564e80cdf6959e97d85c77aefae30385a6fa02d23c833afa14ad76ea1b40b9deb3411b78476c3668db4566ac1701527e616d7900929bd66a51c2b17c54b0c693c66a8ee1e5ef799e2badc64abd4417661eae8f068065efc24208112da868ccc75ef1a72867f92548a524bf9feca6262003be9bb02b1a267cc62dfbdb162b0ca0df1f433bc877d9df5dd37d3e9fdfb1682f39685a6f49ffa8d58941bf3af20221e1d39a2d5d83679e991d39fcb3295d25b57e244e4844b046434227ca28e9d2a9a03101715df9cf21445d1b94879502be78b5cfcfb1a46f69d7b0e3bcb449f80eeaf5ca48dc836eec32533a8ad8b8d071b6803b6248fbdc11f50de6a83f8ca1dc51b399c4d1801bda9eb825f1dd05a8cafbad8f58dfc35ee1413c75e288a44c822c1c1e39caf52f9d53575156e118da20bc904145432edd2b1b59d0949c2746ae9c2a27219f5136519e0c6f79b8e6dbf18e4e188f3ddd673afc0f7ecce16e76d3c0be4624f8909449b0884faa73a94bca03406148022184bdeacd454cb132ee0256b3f995976d67b69c79b0c18f13439ce2ede5f8f9bc00069ad224b03df5d5f5ff50aeb0a904b7e903b9cc9d03778c64da90eef0e3d91ae2538497bc5adfe49b0ebb92d355bef61ed5fd13c035808cbad44cd5a9f3c3b2d902d40a5e1b9de3a56dd0c86115abe7300a2b211c36f84ba2b3fb8ea880f4cd31fcc6e6b14420cc682bdca113276945e8a77f5812054ed29b920fd15b17f778272f7da54d964b8c307f4595d17fdcadb3852eac2f8166069a269e74e6b6a37d7c88bce5aa21983edb52df6046658b7f58af645a521f17e328b467b7a6cb1844f50b7392fc1964405b942725931bc2a58c5aaf802233566734331e7fbd16af02432ddb5155b02c0124bb2d23581265380fc1c0bbf2ad6987dd4a0b774953580a697fc7977af93c2692391861f3f228bcb05f0e9b26e199c777d6716fa545edeb27cdbdb5360ce781155a394a2cafdab0669aaff788e5f36735bfb8d5410de4093ac51192f16e4321d04bb9f767a9b780c98bf20d242c19d1160bb9f61483bed08033536504d9998553caa6c7580645298bbad4cd00afaedabdfa1620107b7a658e22a278b8627262dcb4571825272ca5a2677e77e069a6b2c084abd1fee78fbf25378669a137ceb3200886e1132e19057230eee6eafd201fe9af3708578339d1280158516c54708afdb39661745c72b5a8efd3bbcd2e7dd70942e49990772df399a54c70d575654f1170a708504ebc0d7c21163cfac83c0ddd19f28ce5bd0b838ca108dbac3b446e8f0c9378f7de6501393ba19cadff934841df8445971630ec81d7ae735a5e98573e0147fc966d2bac5c9334dc9571de977137ea6026411b3342d876b1017c780d2663171795d0a8e1e05a44525f4efeb9225a8e18fad954a50c1d58318cf8fb73555ba42fc627ad38a926911ca747d901d7e77eef3adcbba8472910d972f3fa4daebd854209a9e6d634e49383331259adb7ef94e6a777a1554553489c62f0ee8915de818160445e42536852bd0f66117dafe7bb91d60fabfcfb8c5932d32392a9fe254684908da133cac88b59ef145147b2d8da9fd0d5e14a30be613988afa3938f9df70a5b53e9b58b91dd3045e0a16fd374474891b495d54149a089bc5756acae039dd33dd20c1703c6b84dbb88eeb7047394f8aa66fef025e7b018e298c7a66434b79f2e318922003f014993d39a6b702ab6b8837ed60f5441ce8f41e6a0b53533f848680245aafd8efc138bde8abba00b4fd7c86fec92c0d2d00c1cdc0f0bcbad5ed10e354831c4f15bb64d0450864292e7720175368184b35f24c27d0da4d8840fba9bd46121e6f75e8a3a05ab33216a17f1e9b0b35097d9651473aefe2d2ba95e3fb0bd005e7277f816c29f4cada558a9b9519a35d394f93e03883c5754189b6fb272cb2e9eb94b119ecdfc5ff6c7152eee0c6829f50d02a583c5891b6c30d3b76aaa6b73d4b4b41b5ed332ed7de855707d6d37ab627498592b294dcf8348fc598feb0b681402f226d61d1eae1d2d51f2939c3cbe769f6b4a43a89fcb46c0ddceb3d28eab2dd3b3b78ad2eb957ff0fb0490d0085ce58451ff90ef521a8b762d4acadd86881d9b16fb8acd566ef6720b4804076b1e918d63fbf1ad21147b5a45f1311e3afd18c83fe967b8b585b74bad1d1b30c4d89d2819d9e1e6b7e2bef2de88c37ce6adec9578d8b5673ff4ac9342a35bdc20bda3e3fa919074c817dfe013ed730c3ac718ed4bd7918f58a9fc13a5f001105d2e3c2ab86cfbb1d07bbe6f0e7881df969b6e0f0a4a4a6bea44ea50d4af1f1f6a39f24f05227391c845dcd0a56f9ce54d28b205af07adfb103fb873ba3cc1513e7b2302b26f35852d8d1d9087edcf81c38189c7d3143cd75af4127b0464ae64bdd6da101c74bfce508e64e6187242f5f87f64a7f9b27d3250a8efda5ec7b50a7946e9ad01e51948b6d76c54343d47985ea5923dca4c78a8935255008332549e7a4e69814c88444239b30555a1d6faf2b89c9876103a3aadd89ddb81d96dd028507b7e58aca62d628da8823bc345be321b5c1370135ebbea6db44e182b25ad3f1292fc571036dbb4bf9063ed6e27d5e6dcd3aeb01632ad92487d0ebac22bb314a16295b8d27d319c9250de01244036147b2ff6eda2a6f1d515c8387036eb318c0c223198b3d58798a7b15f298285ace91a20aa6df0380336c05755290f574eb6ac7674741e8e85ed24d5967a826c4c0cd12455db33c1823d804edffa0c0b41687e27937969e3f9ed66b2d92478b1827c5e09cd58c36f016acac93cca15be0800d6c027c15d0a1df89d2f12a78ebc77ed684f68915d8d870ea4317c1c5a4e7d1c5ec1669e5dc261ee1221e5348b6b66182985dcfdd2f02ddbfcd06045dd91e8de1c00d1d8f01294aadcf4d7d28edfaa1fad3865053827cc057d5f347d87d99147c838224bd7f2fc9cadbbb9bc8c1949761ed9bc2978d5d10582e7dd86b227cd72272adf5bbc34d848e27201855cd54245d0317d187959d6c9c0562fbb728d4a7f6a5af21e39257cce0b6ede2b72e2d8fdd8aaa05576103022ca2c869070e62966ec8c28700a2edb3db7c14ce25785760890590ed3ae58c69ca584aa371cc34340a544cca32fe5c1202e19156c9e7051dd5152b8b921ef075527970f0f14686b87261839e91dccdd84c391ae2c6b8ab712db2d44900aeb7e5bf77446734c283842de9931c0e3b9a3c4d18cbce6b1f4248e5a90d844a0e727b6063d41ee5eb775b3b46b66f6c248942ab04f042ac4fe56151c90ce41f623a7bcd1d2750316e497881cac260b7712a0b583fd6afbcde06026ad4026b35f8cf161008c421e907f11ae55cea3c28cfea5afb6e43ce2440c668568ba112e9747af5fa67e63be45deeee424acf1a7a673ea1b978b863695821d0512efee418d264bc250f8890fa6056b486b8344f29684d20e5718b3430d71ff41a62ed6b36aeb7f12ac12cefcda984cf0ef6eddaa632b36cc7ab1a938688b28b3b4c51b2c939de7096ad701499f541ce8de62298ef887c7935715ea691132ef7ea5fbd72e42d211a7b9e385e92e4b093330f942383f4da0e797c1620746e51a8c3e0d9d3ad0b07188f2d3f11172a6de55a7c2bd056da6e08b2d970200f44b4ab2e7ec878f9261b6d8c85306234db4d1c830526786f00596ffdef37d5b8852701641be77f9a27dd2ae859b891d5dc6b83fc04618ad7ec0b641614dfd97347a87430a36ec6689479714278a23a46e715ceda867c68ae4540b1e805b78d751f5e7f31c3bc1572fa5f9289ae1d944a44cec5991caa28d9dffaa879023261d2eeae246f1650a869a405beb5133a1596ce3e0fd492da5b9d73e5d24bd052031c65da30f359d059b6a3740f8f93ffc5d52623a9ec6d584eda809e19a581cc845cc08d26156fc67ab07582f20a7ba9c7807894877eca44b58c664b30807bd95fd8bdf2dcf14a6478dca7f47a538aaf9311c62d93979b67856888eb72333c114eaefa16a7fe28b412c3f356e092ed724e2b48a802ea89bb0b64c6c88005fb136e7c7e01bf01e22f9aab3414369b489d5edd7c22f093b67f229ac369c2e61f749590f049ee4c6640e74e9599d58489686fe279eff78fd0c8f66ad40801d7712f9bd00f196510f3826ea2e8d9260a19420d90fc16b9c0b0dd30f36bc77e52cd5c8146b64e8cddb5a3d370edd8741c157d1ceb07dfc1c5b30c2c26dc92bc97b7fd4239f4b1608366299d0bf2305a7c36300dce1e3aa1dc4a2397bdb994a86b216887f9a79fe2cb70cbb819ee9319f9628cc47005b38f673e9ca547525541243bb07686b4fb2559a341c72ff2c92954f621e03ec51ba23e613aaf4424609eea35e6f52682b4c80b051da3da0803337b203a5dd39b29e4ee6d101619f37b5e8e49f6c0a8b04702d9a45861701be62f7cd04e23e7dfacd6ab48a8095fac2d96c511da811e440273e1a7619dec1d0faa904d5b2097bb422fa7f3817a879a4460c056af586b3130f69b0b1d38a009a9d0ec93415dfdd63d5e41d14ce16d85dd4770cb49ef754b0ca48431dad6cbc2dee26815b1109cd732423d3416d5e11fc948ac5183add309fa7e72bd06c05c50016a558f99795a657f46c1bf320831d7df565a2a657169b88a8b413b16582fb25f51a8478f8a133610e14e900c02b25fa2c79b00636ec0afe538e7bd24fdc577ae68556d86728c95e0097680654ae0c9bd2fb60d023d806cd00dfd56ef9b34b4e9098d206264ee04a4aa884c73c8494c265ff04be521cf72c3e92f71495dbaa736f73baa54a1948c432e42a5ab260208a0864f5a8107d691e8f497c4f682b6773e0ff7eeb16a1841050e4c9b3e18e57a1a90acf04e646d0e9fdfc9bbc0870a84adfea643b227d1ae25f8e61d68f02aca9acaf0d9c2d43e5d1cae497ab9ce571902daf693c040de2f5acc8e4cacf36e44ddeab2beb277398c20a7b7c13dacbce773ca403a30475ab990800fd0ad346a3ff4d32c26d8f695cda73c00a987f70ba92de8abf2397a7344e803a7b3c60edf6927a20e9f3e18b54e657f0db33fa497f1f93b607595ca9e19a112e1aef47b4409216761aefde9d234eb2b7fad3639f8c56fc1f6dd26b17e4a8b827c156d66d9638033b64f378c0dd1b8e06abf9d828d49f9dd563852eafb0fe7c20a87a6dcd1585f8fa743505fcbdf6a12588dd9195efdc07d974caa5d8cb61542ac4ebfa74eb2e296b2884b13895637ec421eb2642e0f53588903d3440108c77b2c5e3f5b0fc39d1c0bbd9519506d24acc4a7c65f732bc885f8362fc96ad26f4f78a43fb3adcf9d5c8079438c21575b9647be1708af9162a4662a6227a92f1d8f1c343a0725337eae05140c21f324238c581a78d0650b46dfcff0b1caa12e64052f6f4e7fa4754db28aeaee290f1bfaa80780af7616b08db8c50a37645c4c666df0aea30d7a8cd9338315fb996252b6c6242edb5eee9c7ddc9795271ca82046980763b85f81354f5e766b96aad8cdddbd7f0dce62ec3f192b0a871d224bc4a29d69808200def3849b64d6a3f377ce39448bc577a1631efe1a6613c8c476863a8af0525a0d0b0b12149e303a5048b0ad550526bebc42c4960bb4790376f8c17e3120c392b02f9775e7d887c3cb4b42e0482504dfc5c7f6a297e7b924b3a052750325113d08ad864dbe2006671496653fb184e32e6c41518ca08b44210b535c9b28d9374ae4bc653fcc77a618c7be75652cc7aa928913934053caa25121a465a2bc1e7fb08e05211ff4044cca99bfed143d5f866479ea30b611cb6a9aeb2a3145fb5ecea1b5785f51e024f462c1029fdc757bb3e9b268e25d69a8e910103de2af67aec52ead0d1c3f34fb5fb2715c06a4f329600d720a566887e1fdc12379c345bb7133840f4f32f205c09547de7a910823bde4fbcc93e3587b1c5efb8d0290b6090a5ac6a184712a956e7bc781d93ba4b296003bf54f9badc3e37acbc0226ed0009743bf17ff2bd0a12fe2a291aeb06d5a7342fce1196109c9fb8d9e14e8ef2a8fd82c1924636075bf516361230387e62cdfcb1ac3c05b2b1ea1e35874e60ffa8c1913304cccb92efb65931bf0be1450e867047b8f40ff0926caadbd2f977e07a1788fcd6d1203008cc638563fb8b44814f899c4c782834c6bbfea46d6ee8a0a636372b4d3567995b5338fc18585fbb449adc46d3c0c490b6c23528151dc325acaf096cc194a860282e53877e15c898585f8a19583cfd2a80e42f0f18192a47d9e167124a4c7ba2e6cbaf23500f178ac8c774d4590cd4af6ee2ea6065e20c74c117000248725fa4e43cdf15e1d33dff8d50eb377d1ea112ddc098e59a758d46c7744e1ce1e4ebbb37fbae4902c2ab1ab94d3f2d670b2e833df8e5ea8adac12a3b606e2123165f65c4c4712cadff0bad80753684ac530668ed5d51f4cf9448bab02942a9d226fdf8765b4d5e12ef684d148a9caededce152e62c4615ce17701765e9972b616b573fc8b87e8d21bbd8e19ecb4a48f1f7d079921d2968cae8518255da1f344f16e7f2793648c79a2d2735fee6ab738fb8a909f703bb2043286961ca11eac61156b121bc88dabc9542856178bba35d5d7560ad9357e3ea50bec0bda685b82d5281b7133ce263108277312353bd3e470c31a9c1832ab2304ad81b1941345efd2e908448562f9c7816713e138e3776339b1806a706b260dcb82a33936013ddf9ca21fb75d4800f1e4f483f1e50cbf49aeb2b771c4f1b3825bc8593d56ea790f2a67cbe8a3f0274fc9e8bf81a50523479056364668966aac97d4e5e4fe36096b0ac1043c567559ebb21593b4a503626b1685e7b1aeff67604f96000ebee234e1befdb448420a72bfd82dc3d986e2efef2e5c8f561089f95d7e08f1bfc08d9d0c82ed115c824547c813e3369525da22d3e3bd5c3050fca7b9344702fcecd0a9f2cd370fd26de0b858edadde35b21ceab8e8c2b3217b7f6f5fbae77f1d6d5a64dfcaa54f87edcbc54d4e4882b24ffd7beceb544e2ecbef6a17d6d287477070939f4d91522ea3e61c530d2c30619c4f0554486eee228325b76afd446d4083cbda7939f29114d41b6f08b097b89be813ac02071b8ab79334d218f0b8481e209274ebc4f45d6e20af062fbd787129af43730259030602bb120a61ab2dd6aa580c661778e206415df741857d305d2961b1f124539148c84e804e9d3d416ca7637d99fde1a4eb340e4e93e2e355657916c5d79292a9adb573a60b52421cb6bee24c37e92e0e5b7d0380d5af3c35496ad038f99da2c9695e919515e284b9acc3106361d5a53f173a146282ddd6e8794db03ad443613814dfab9d58dc56fa65c449928645cff64e701f496686e5e1b2d788a747743306479b8e6ef8a68cfecfd88aae0782b2b370e64fab4523ebb820018be4fbe32272c3519bf993f583d9074b51018209a0985b346b6800b609effeaf7b9a5047a5fc3f1cc30577974b2c9b80b46bcbd8a3ce4ff96591906b7ed58633672e0e598544fb309de4409d8efae330b1f29aa496fa2bc1be4761045bb1c1b5b1e83471f3271ad91b6e99dde53ecbe5412ddb51dd90bf4a598e6fba248457d07ad510a4b1796a1d2c1566a36725d6a7d168fd76c6c16d22db27e1480a4dfefa4c0901993122051cc1b017a6c58187c19bb73545d599d3e45abf199d2e68fbdd767e9e1511a9f6f1889226aa3082e4552b5c57cbbf33705576837fb848dd5ffa4165d09483b5148b8819c8625ce0a927bd0277386554bbd37b446008e60dc6c4edaf4c4238bc14add4c420e062f26768c3a88dbd7e1c4b3e6b81f303f804b63a9c7ea7cb60bca39813200d6acd7194a2153eaa078d62315419c3dac40169e686ec85eec8eeb11e0d8f7f56f4518c11c5885c943c13b91edbf938db41881f6e8c915a57dd5d3f54854b7ce623ad7260ccce5d3a4e8353c1635cb660fc3c078707e2632697e96c5c7535581656da5bb35b469270728ee036988ca61fee9cb2fecc716bd9a67fd7b6370999dc2ab31a1fbc10ec0f38f579909e0f89ad540f516b19921e27d1ca3d177f417d91a7c3f147c2829541b7b4ba89df58cd573a09af7239f9982e608057b2ba2e32488d37069ba70622497182debfc1474641bd5f146769e6f7941b23612300ec4e50125b7217aa2e95e2d53fec3383d5e0966e6a3e7bb2169c3ad3630afcaeabd6021d3eb47553d8bbde90a2c3919780979c539c01145547bf0301148a71f985fd90020b42bc268733392211344356d674b1877da8c4389e7ad8f08fe0ff8d49cf33ad8f4d68b00966f0444f9cba8fddc3c77efe433e886c3c6d3161fb2476d8bf193d75e78299ca0322c6ed30e80517bc3517aff71536022aa73d97b2e93bb9e3291504e89c690ab96831b247815b0297b901885680befb985779d8040cce4bc4e27d3eeff618fd363958ee30bbdf925990760c5e9fb9bcddda0d9d596e45a44b8734f4955ad2647a29b76cfded8024ad9acf307e0dabac362d12a6aea23ed35c196d88956eb20d137667d89cf7ae914bdc339e59e79d3a669e9593cc10253b74e9dfdac7f0403dd686234c07f8767ea838a99aa81423ba05c782f4db9b0d98bb88a6b0efddd99dfe776e0cc32de2736e14d429dd0f0bad6bd21693ee893058e9a5e42e9aeb5d36fdaf1a6a291b46a95c84ad5cb8ceb45211079d5b8b9b42a2fe77c4d244c8292b7b926cdb3cb2acb3ec5287f243c834b900fd618522cdd994e7207f5c67b315c538c52b3f8a5c1217e6db11d1ce581bbf18e3d06f7263763387bf83aa44082c5b164463788140fb19a77e602475301469d12aab30a5dbbbc7d9fa03e7cffea653a314505956510a08ed2a2726b9c1f56dff280d6935c9f369f43741d75de4536f424e4402efd626d6e78b179345c60cbc43e4fb4e999d67fd1c8671456f248865bfd6ac6e40a4c11e18cb92565d90c8b771d6cd4eda99279dd68d97c144a5a8059d0bbf62fe290de2bd522c7b69ae0bbd0d7060da6782afe3e2429cef83f994f9011f3330eee4d7e4c036bf0995e6652ca06c1c0a78f815c0381e8807a0fbfc7f9328ea4379fa42c9a3c25469364fc168273687ab0dcdf1112d598d97bfa48741bcf2795e554bc6cd312d86237ba6df84c1cf9d08f271c3dc7bb6f38cc10613e144035c2de27e711d8f280b822be686e1826253e080b28d13160dfb7806e16594b0ceaaa7febff78e58c9bf4d1a3fde96f0ab974b0cafa7f3c148e5502ccf03178f94106408674a5ba4fa53d541ad0215094c29beae6aafd78cc0187ab3262145623fb58d53e88f7ef7403766ef5ecb53dd5bfcb37e7cb2f9bbbea2ad0a9cdff1b8c73ad77f2e62a7b668c97dce46c0d56363a6dc7d1202e38a2e9fcb3bc70b9683f157a7dcd7425e6175c9ebb0c13a8cb92a4416968e27607e20ab646252900aa140730454313d36b4a2307f7008eb17924578957913cb7d98228595486efc12b772be35507b79a6a235df8a5c118f9767aae470613fdff9ec05f0eadcaeb91ee25a593f533185980cd31c25e725bae3a619cbae32d10889f842b2f04cdeb53c4d9964ec38a880d7f34653c8d6730da56b8f281c988bbf7355494deb6d1e9471265434907e45b26b91ac32c05187c4609c1a1e39c9876a2908a1515c12b9c0298656d6cd6d49e071d165effea58ba27e09c70e1254d61272573c251cc8814939e243f21973637a6d90dac504d0734b6f79ff3b7661bc48b27b66abe148380f1a71491b20b4986658ec70a91d7fac2f1562f37e34694b8440c782067e7b6bcbb54bbc30a1df5db3009ef0968ba40c4c71bcfe630a7d2bffb4a4beee070011788dcd5c1184c18e4b41f98ce7e8e6e9d9aeaad546d9700909075d8ebcb6401426f64f96ef3a3e6fedc4c44eb4b6dc6fe1136801851895962d2733ad2acd86a5375d9564b4deb1d8c2c664138c6e5856df90a645b6fbbf003809ada3f23247187477a5623ff4a1af1c4711f20054f51b003bd77aaffad1e0ad9ef3e42ca2f00854126e2bfd4a0c4a144544ecabb281303e67dd0ff12251e3823b2b64751b583c481f5856c00940957e55baa0493d60089b340d242c5da73249965d5971b1f9e675c9c762050b618fdc334a995e3ad29542619f8b483e212c6b7b4c0225c1dc239a933a023cc63181fd20c712b27cb5f5f989f07819f7d37001c88350d49c889ddb25aaeaed11ab532ed947b6bbd35cc310ac24b1c654da0d7bc6a87fa44789362d17f1d495dff672560c8657f329a6fdfa5185b188266f17d0c3ce0d54330ef0b07446265adab76a1425334dd003afceced5e1a58fcd525e067314517438ec646a00976449735ea222317313d0a736fa3b996988904031c85078f36f1eda245d13e91ab36883959cf8fa7bd46e459bae8068104fcae6c44d5fcb62e71217552256171f08b1a8be2f86104ae3838f85a783ee0f891fb469ca306e483b02375baf5023bef12b55c6f32ce864df49cff4745bb45dcf5c14e484c95529b68cf34a23abf26baa9ccf246dd5a0864925f9c1be4b6920e16ec0cba69efcbc7ab9fd4f6e7e777ffb3357a88c63e52e9bda5f16f2019429fed351285682b241fe3f3ebe15e5598b6ddc28d740d58fc678f8e19086358f962944bd34eb4b10b0474d3661c3358c2de1c9003819dc9cd9a11c99f894ae248d4f8a8e38d3d04c6d86a709c91c9eac98725f949c5b649426cc4352784c6af9f2e839bb0ff3a44fee3de8d63a25b2eb162ebbfb744ced724ce83d599251c3a0759476681c4383ff9b0f629dacc8f40f822c6398e74b7e4f1de211fef19b5e59181f6f7f203e2e3214a082fc136bd68d9e1f4ea14e101f816a3b10c2e87e009775b6a8c1ef82825161477e352f3d786b39ae3347c7029d87b1d301b45d234b6289a8518ff57679971cf0516deccc6600f750c7de56fcf64619f6cacaa65e5639c863d7c089a345a73b279285f2fc6a6b1da248a1c0e8c7bc4eb9acd252db03555f7a8b2a7efb6d2c7ea9c960b1a7ff0ff5de6eaa7eb463632c37b7b47aba810ea9b5be9711810a02d11c2e55803014f878ec60bf69090fa6bd78d11c184a2cf9c04080b649dc329fd655672ac2b910e6a8356b5fa4994cf68d6ea87b34702f493b4784a0ddd916207c0ca43a698f06d845505a2b4870be403e682f672de025b3a8a47f891d7417d923ba342809ab52546bcc6970dc5c3f31ebaf22282bdd10ea9e5d16e95b3a31bf4e2489c182d6837ad32bb15f8a5dbc5ab3c9df4d8c6131042839a456085f51ebf124f1d7facf31b478bf85a4558957e07ce0a0f0d09ac54686692c663c1757072ce6f0fee29e1c564f043ea02e70dfcb8de047ab035dfb86e3db522d3a55cd7de58c5dc3e5a1ac679316f2111cd8204e4e798eeb92fb2c6936259b8d389c885cc73640a3ab4a5b80f6cdedd8830f606dfd2a20157a01d4a76c35a3d217494a18e77cbbb344f339f96aaf3ab073c427878fe8be688e4d6bd1c1f40be52a84331d28d6212fb0be5c883e89d340f12d8da9c5eb54cb0582b879a8d046252ec07c99bb13bd89b35318724e4840479b20d9e02f05fa7f23af5560b3580882148be7466f08fc8db5087a85e1b2102970e9d37831d05325404fc5903c1c01eac0c301b130853ae17f72bf6d1ae2cf855912e839a0ee82da935a198d0279d5237eb9a2e66bbb8efc9ea7aa58265a93901ef2b06d7e4dd622ff7412fc635d28af6d471b3d2717d226dbc3cd563cff62ef2e29de9d94f1f38aa3fe2294469b0f35a402b73215e2d93316acb06d1189911c82031ed8d1e1db0d963e7e79b814cd5ba2691532a9067d02fe8de61eeecee02c69c4d5991c249d162b79bde639608c1223b38e2198470ac6351b71806fe261f269848f3cb7be5b47177d36e0687caf1c6fdf823fa71d2cc8be1a2521a03ba17eddaae3d8872f15fffc6902efb62ee37ad34e211b3035200d8d0f64af12566d9c98f55a1201b3667916d67fecf76bdee520d357b6c6fc196988f8dfa23e29d1ed86c088814382d8921577891a9739bddb65c204fadf03028af801b00ebbe9507dbd5ce0102a6808a5b65e95c3d384406a8ac691b929dbcd987a8cc6a1287c4e3493f1689aadb7c9fe104e6812cea5d00d2b96300b22db69f01440b944aac2d35ab9b8302c12ce13e46cef480c31e9b99b64cd19414ba20c9379352b753ea14ebae31afe4e1703035d8f97f77755c68da080cab73561c9e52dd4f823721e4327c112790d7e79d720f959b7af50a358ccde82ee098589eb2816fc25f1bbf6f1bc3609c9d1a90be74b693b34381d74744bc4278c4f79829263ce27b59ef2d39d8a680548e85e40b0bf102bf309b5edc08fd8b1eeaceca1f3a6095b1507bbd70f896c959dd15ad5c20fdb12fc2e45bef998496c5d104ad1d4d9897e4be0af1a07ef1097991d707ac7fc6bb5f3c49e50ecef024da9dd19d6e334a521d22e6d7b3eddbb5fcec3500a022c1f73256556a469fdebaa41a076d3200102f14eee90893507d1a8a3f60599e54d04f3dbdde8dbf98d0f5c68d76dc1f69ec2de1d7d2306fcbb607562ec2378eb251f14b3b8fd9bbbca982de9757aa03a942f032063eb73e72e12457dc6409f8a131c185cefc15a998819026801828e45870cd8634b052bc2936a0a4c8811eb26c900e5b32abec0a464b37d356d65596363cd05643581e3b01b66bf4d15b802d729faf1d803edad8aac254764ac6863847209d38a807657328389ff7e58add0406e9da329c299a7a84677ed9ff52c3048a39286f1509f7a3c970062f34274a08e81aac80a83d28374a01fb00371b083614ad833040d095cf486349b7af5aa3bbe0a75349c006c10ee7dfaa9166b00820f0bc6c07cd1b7afe2251ece0648b4ff9b4667b37f1fd80332f67e3d622a160a54ad86c2ba63fd1ea273fa39aa313eff533ebce3d11dad79fcc3d9fb4ecc6aaa2fd5c67280a54c6b412933feada28122c8b3dea96ed9b97f744e95a637836cc26651de73ba56de1dccb39f91d8ca61d5a08fe21aee511de3e3fa13da47eb68fe01565dc52100372ea807984caa1e287bd32e60a000bbf1b68d4c766c5ab1d525ebdd86a40d6fb0e95e708598edd6249d2b31854e5de4199c9cb3ba8b488bd308fa7fec87eab281b19fc9318cca615e986b1f4038f5ea6cf7f4e868f1e8c2b2e3168b1371eb53344d50c8cd5afe06130580b1e1d7e4a41969012b8951812a656620aff56c4ce373db8fb853576dd6ff040ec2ccc0ee911a3eb017323e7aa6bbfc22afec233c768ee58e294fedb428b132c99604daaa14f5e02064628bb9ebcd0340e4d0767919e1bb58f32d75173c61395f89f4f2e9603dd2c393fb2f1358fec463ad1e11f45d531e40964250644a00c621166fb8e329855bd59a77fd1f1a42e6d22e7a158dfe0fcef6ffe02de6864629e64718dcaf56768e5153774891b975c7c8993d8225b9cece6c45efaadd8daa9a6a6d07436274432640d5c957b64352591fde0dc222adb88b7cfb30279e3c32e31224d6fbe2b18687d0bf0c86e0e5e92ef4a6cd8c35d575cb93bee9a9fc75d66a256a3d6b0b6c808c30f8c0d89da52431b4370bfc737a72dea4bdffd0e9a0b88a36af81c477e075e92294ba016aba38701f3caeeed0a5c56206ed8e2fff4d27ee5abd87cc7fefcb19b181376d73bc38573457920e2ec6473b262e4a62ebd4386ebd8b4b47f6e22fff14f578ede3143f6c6eb4db9894cada513eafbd8f1a97021891da17b1fb96dc537481b0d8f299458e817cf8485af0f36162fd44da42a621b73e1cf3351601daf42885c01c516fcb6cca6600a78fb9e96c36cd8c34c006501c46f524f7f0780d7ebfa63645516c2701b18f03d9101bfb8706647510763ae962423d2ba38d68736361307aa09b95fcb5b3e76bb1fef52dcc647f524701f0508a60e7344ca8fa7a2dbd16a6bbc7d2d63422d0511a8a187b146d60f35207a43a47dcc095da538dbe4930ee44de13129cbbbb0c680886496d828ee9b1b102c7b0ba851e011574408b2a2df87d430aece99e55d05f34a47271189424b80e7d43b16ad9a7f0bc6f1bae026d2ffe4bd16ae03b0c181203cbc9cc77f3cc847bf035f92b4ad3099e12de1cf5854b1bcf1e2866a831c892bf3b50b12290e261fd3188e5d6d1dca6efb81a4f83af61a92bd777369d3489c856ff883d7cbf54539bde8e3cc1f637b8a2ff534de3cf45f40faa6deab906dc76fb285819fbc40d789e3dfc7d45b949d04a0225aa3702c77cf59f281595346e91be1168627cca2dab5ef57274d2e4a499987aab26eb18c638dd47cbd9e6a55212234dd69c49b3cb1dfab479f8680c50a5cd00f3a000d0340a8ac199d7c54183e865577c9a76c0a7abac2077423da76e56dc3042503c670f03fe33125e04450d912bbcf38feb03bf2d4daa56547a64952ecfafc966676ef81bbbe409c84597241007ffc3c78483e793f8cb1e78085d7f1ffa585ea701be24d2f00a72124f66a9217e391d46041e506865f59949503278f0372558963db6d474dd534187e987370fce721053c3f037b69b53ef8533bc124541f65a1178e9f33fb696a8ef7858f9a33a21d795e8b8b0f6b7183a0fa07f61f79185e9b8748912a90f094a18a0c61fa4bb0597ae8761c9934c776490a55915f2126bae6dd161860edbb1ddf2b934739f80f0b81f7ab787cc7a28dda48f25e230d938d316f597834f0ca13398a7f2200e836b3bbe39dcf792340c1c709139082dc1355b2495914a1c8b9d83d8014a3688ffe15eb6da0b6e5431fbee2bb8c681036f77e541a794809150b381068dc45097847af54bed876d3451466a4d149a6e167a689d8e2f2f4e23f044604f9b3ad90e92def18f32bd0663f73bedd551c99f0420056bb9ff0e95fa8b9bbb9a50f63a42006c99cf8e1b39a96a19d2631a8d075e0cde4c3a866dec7dd63ee50fff439406a7cf4f4473650036a14f2f138a21c2e2d77d7198feb4f055058984014dbc0c6884869d74d9e787dbb77d57830820c39acf563ded48386af10fb30b0ef7a6faa6e4d1211b2f9d51691b6dced0d9186c2bfdeb75006ff3e7aa5eaa80f4eba153313e2a18e281d1ab5247c12ada5676f13613db0a06457ff493c7312a4171c6fa1f118484790bedb7d7d68a2227a70149e15c39954dfa04c5860c0e174151597ff8f66d2b6bcd0b5ef5cd045d9a2a0d0bd45caa962202864131d60935349ff4b20f494046862ca99da0b97baddf601a792eca5f1db29808c76f857f12061c25bd903cdf1f1b7c57003b4719f27379de508d29c23c2c9a6df8ae22ea361642fd9aa67eb25fe9c59c875aa66ef50a238eb99dfe8f1b89c6ece6e62931188324a8e77f260ff54d4acc3e12999a36ee981d311091e0cf80e68e647bb8a5e2acd16c6fbbd4933037c635c3e85fdfd1f96ee3f98ca448ac72599c3e2c91c2fc31198c8d0f9fb2a90e1fb5c30a07469c4045dde418b5652e017cbfeab28fb7d4d180839147d3006933f74727cf4083dfd990f062f02cc7d639aa1d346a6fed7a78b9ed6012af4076277538097fd6881459b14cb6ca10765c67ca557a55a16b8d9fda15b01100893b7fadaf75d51e7e5c85666fd2fc5b393f24f85f1f7077cc30b7eedf337d7d1c6b70013d70f78c44c052c4cba1391328a06e3a137c3085331aea9a0b8601440cfadd19d8138d60e251735572f4e5c3067f91f4b3c73942aea1c53a1bd418d7b62faaf2ef80294a5efeaeb179725194a3c6e88d0cccdd68522286d3206f8943bc38a9c54b0cfc1e837c11019f96dc30bcef13ed2dc8ffb5a6c0ce91fa3ce76f580a519e5ad5be1f1370a7cdca8373d81defb9b4b60a16f5b273e015e492b458867fed9ce5008a3e83ffc374f63bded0d85d1d71df471d29db5cb9d945f91c7c0c6b70be58515581d8d258f484fc3a141e75aac0dbca53166205d5e800fc8671efff4c7513bfc2e3474d1a9c9be393e689e1f6ed0c0d2c0bd39128f7a7a00064411de4707a2b0c4b1f3de403dd20a2f220496dac9acf4421520c41ecde2a5e1acff9a12aafad88614c8b29a42a42ae93e5579b901e561cf765e4797e802af213b9531b6f8ec68bec4237fbf0a4000b73e7c3ba16d71dbe93050df0b86fac9c20896cc1cc21fdb09ee2ec876ab874293553b770b31b666ce4f531fb3b47168fc4eb4fa7f47c720b2cf9d278e8ba1a144518795e56353ec9d3f7e37479dd71f2f3447d8c21cc42862634813ee32f40f6ebc320f83944633ea89a317eac3157591a42fc99617ec3974583bcfa3323cb5e6f4ac1cbabccc747b9aa16f6577d80a4b0fda63d5989797e07ffb90510ff3783747dd6c05aba042ea151d1b228a4a9d60429932f3e8d6af7a2ee7042caa5ae60905518234cba707176ede0f9f98538a2664780f83b2627895d409bf120b77b408ac83a8ae4409011d796c99d254c612ebbb2d08d7e1535eeab3d1b31b3ceb21e9ff3f912c4fe055195a2e422ec9b58df8e77088bacf87f031972e690def6ce5c64d7bb1b9eafab88b75d50fa9bda1d0667c8cf57a33d422786e86a4962ed2d024cc305f462503d5a4f0e6f7515776c0d9b80bca43b0ae11d7997c251dd5741e3a937e8dad5283732c7bffe38655402d632e190b1870cd3850b752e4a45fdae5c715024a2bca01f59ed1f1457ec135f801cd84a6bd3b3f1255321de74b948116e0ef15c05ce830e008e722e4caeb5e3b7fc5aedbbf6c94d98d862bcbb37baad9c811b2ea1889bb97222268b133eba37488d088a1d4dce017c9a9c7cf104591114255fee1c34b1504a8d7b9211b3a7ae7993357a8713a5cb417ff69552d25ec5b59183c1f08df4f555caf0323b44ab83d04bc3f050cce54055dae80860e1592c9ced0c155d68ca91e6b95515ca260fa0d8f3d776eb176c54b00f052dd2bd7bb60119c864c07b8b9a9f001ba9d5966a16cfeee2b6e2f206b30588c53beb671e22864db9250c3cb745a4f8c494963a3724da330fc0bd380171014449505ffb8bc3030424fb7083bb99b3ce3067d7042ed33c5f9482ecd7669c1b75ccca2f7dff601b9766f2595e65044b37e7c41c22ffb9e31a877cb8934b90d02163a2e318ec8d72b8ff477e54e272e526e79374eb9efdbe01688f4e77d9f3a30b0e93e80f28e9a0c12567c082caa6f257b27e21949a6e4f587dd9d33c2f3b02ae59dd54b8c86887716d734393b43703ed1b854c232e4ed61a0868fafb5e255caca677bf20022975a38b501df8a65f0c7f6e43f749145e8ed0d972b450f42243c64694179de98a6c322046b640063359f3763ae0e924f93e6e1c9992b8d9bd7c185ec6e736994819c132168ad80f057284d4e5937a3a1c8d07cd98be0ad0f302f3368f345cc5a12cc3b1ebae9dbbcaeecc78030ccc545889fcd9f3df32dc6959e314c6eb2537e5f6ee21047c576c0f1ddc61e21f5b9dccec4a554c9c4600cac1c3f1269c4678579414f39563a4297f9bd70843083177dc852bec8a5c8e854a2913b8cc4150ecd55f4ed04ea8c49c7ea7b9667e3d42033786a98fa56b4dbfc4a79b5e7618ee66c43487ceb41d32452d0d2435ca38ff7f24e845b2f7f841e73ed0ed42472aca54d498ee00f74d371e4aa6a90a8e1d5d8039d4adcc103e27163f139298993bb69fd04b6204e2b9f8a19e6d473a1e7cf435b245df25b13b5466ade56f9007f063fb1415b170553577af7468c81a4e3241fa1c56c9d60c47cc7c88c2ef345e6186015a98c6f4dfc9e7aaf06b4f8e6a79ec6ccc5fd7ec90a168068e5eb08c700523ebbce7f381cb4a8a180f9c1b6aed3a22acbb4407436ea6e7d0f295f1107f572a5fb6a17cc8fa931fd0bd7aa27bccaaa4caff75f42e25db76b894ba91c002a11d24d5972096ea93f6355ce44717ad7b12e45a6064366965d226c87d281abd9311c49342a079be7350cb79a9ae0443c0a7c7278914c98d1653823e610bf233c1a11d0d9bf7a632d6cf4c37d0f323b2bf315e8124731533a5fae7220a864a9cea97f78de5dd016d3f821688221ce7cc493476d716e70111c71fb810f98e638d51234da67b67bb579e8456a187e0541a2ed7b1e9eef427981c0b43c7d427ad4d43b718d4c5ceb7f891a6e95d6fdd5015679a35df56222e475be7e69ab45fbde7ca98cb5282c90a06191afbbeefc0dc9fc4e9f16d2e822bcc2de314a594c5cdb6d3e63bd5412a8e8ab443574f9096dc90d592d93d469d5a02f2fe09369117180f8a5cbdd18017ebc7de677c167dadd6b98b722084ec76c92037c2c6f31acd3daed1bb33ef6cfd170765047359712b17192376cfc12d6104bed268253714e2abd16152c70c33dd8831818a5e73d4050aed5b578c27152bb902029ee236a72a02d9b87291b54d0da66bbcfafd6b0a4c2f09626f48766d3d9e9bdd4b0b5393d7973ea5d61afbaeb3d73234089fad2d5dc03ed0cf2e904534eed74627590359a906123ba19744ff1cf0d349984f365faf5560ee7dc2d29c4cadc7aa57d49d2d0496438825bc3ead64c2b98367c06244bfd010363a9329fa597c4fbfb8097e1e838d7e95d6d0628549f5764dfd07ad5c20f808dfafa40bc027809f35a2c981aff0bed90e6501dfd7ca31369a502b02f4292fa6126d907c1231a40de19a2737f3530ae579b9b6853dd6e175744c71b854d2790d6340ed97d1ac2f52572d3372aff8bd3e5940e5b61d9441373090ab42dcea4b2ae2cedf7d3c5ea621e3cd6f28f89ca8c2c7ba1bca4e539dade871adea8a402364c937b78f3431c8bccc304a2ad85bf721af340c4bde32d52ebd5eb0e1cff455f466b4d5360bc425d3ae98592eb2b8e84a98c17522ee0449e80e672bbbac2d4e2787cadfe1c1bf4612c72f82fcf0d1328b9bef03e55f76084c91b881023d5038057670966ff599c27e0bd6617ec4a9575ce13b963715d41be7d7171e433410a7d4bf4df078a35577edef42923536a8c1c0a248d97fe23f37116b758327a5a289826e7e685411c7c93bfebfb16fc16a3a721254108e6f03ebf19862f0b9038c636d00116e5792e581a8ee0d8964ff7c17d45822b3e9034873fc4bf572c6de6de3f274aef1064fad0073bfb76e6d1bde708de004394bf3810809271bae88dbe671222fb6ccdeebe778e4d2ce53baf4e9dd2c0572fcbb84cc611034fb4cf8ee28f022c202df0c49f42dbaecf84d505ed8366da46039d1e92c687d4065be42855b9cbd94065423ae3d4ea81fcf5682d4e402d8f194ef4f7eceef1373d88112c6e4e69e57cf6b9ef057beca42e735a4efe227580c03872e42246c9a145b9d2c9df597dfc7b0d7324e992c6f8f65cfddfe4bfd8a3d80f055febf084db708a467a4d4bc7161151027a6505bebaf2822cc6cbb993e301d88f22b0fd11642221e14ad356705729a48832d088a5c2e67d5e1a3c2f9e9ecaf0ba3dac029234509c407475716e96f6b7b5a49a2681db560526dfbc2053eb69052c5833cf1861f7f19eb8e2fb1ae35e68413b1ac7a4a7180a2ab976dfc38878798c78444a1fcefd1c885b67f4bdcbf5f62ccb3855f2e4baee53aad8027cb3d3967cd7639c3e02f7cba73d3642546e79e8e3dbca23d3993cd14c462585416602b710e8871569e5a41f7f9939352afa16b7c195f3de008378c891ef13d7afc263c491989324e077f6ea1436ae2b4445e0d7a1972f8ea08e6fb5d4166bd88fdcc584ee1547dd07fc7099394e423d9189e7c7b5803339506d624fe5dd353480b57da1e9a8ca03f6f5f0cce80d7276052005df0471887bf225e2878a6f0b3a4ff0f582c019ac434b00593e3085debc9e9edc82783e9bcc52f04f281b985cffc946c7031abcf6dc4079e77632b36ac6c770d8d7c5147e795233ddea51da32e7c359eca635159c1d255190a4839649cfce41ec74c15a28d27768e7fa568a0c22f5db9f641b4e265f3588874d3242c4fbfc54bb6c3d93da8480b58a6ff0f12497c489cda37125fd8d65a70dbf15bf085293add19527cdd8cd2b2124947855ba5139c8e574057c65f0c84bbc1f7547264e0d8e52fe7b139d9e5c8f40b586c01a2dd95fd6adba3f97e3eecd5f3128e91bb19dfb310335e87a9451329e2ebf3422d0a13896bd588639b9c4dd34fb8f7a10edc313bd7028366b26d9a3e73b80b393ab9daf961cecc0bbf5211ccfd65979373ba462b4400a86b7c0c5c89a81e6d02452aeb9b6cb1bc7fb442bbb0cc92a7422c7ea7e1a48eb5b49a621444576578cf8d14c6364472bb5df464828b776092015b02f2f021dbee01e52b520c9f2c971c88c20153e818c7379d8959d47b9a1d8a17e1bd88c9e9b1ee5e7d4b4afb71b4ecb957e39ae9be6014a7b3ef25f6e4a8a8e4d15d85488e6bc1fda9e3e43be00bac3835e0f161cb70b1c3657b94b7d1a5a8880619556948246065f441472d9321fd93f7d87dcdc133c2c0a61070b7753209ba5b8a253586b6c68969208574a4a2994e352615ea2bc3d5db52af7aecf5ee5b892491e8a6265aacfc14d77de3146e9f5a0cac147436cf56ba2332bcead43a286c590e38c817a5c5c136e5419e8c12c3b0f60b0fe39d909f73948160c1e44a547015039fa4df8bc8f55efe53b4d06dd1521399217ba84af1f5df57d1baaf158e69c829d59ac0a60c4bf26179a529c81239fa07e2e1ca90fd3e29c0e30919645a791e6431da2f7c550ebc5b6f0300770257375bf8dfbeb4e06d718c40429a445b882f0f1c1f308f60067fe71bddd836860809ccdf176e31f2be91a131bf8b6c3e5b6fdeb11d9d261a8ba8a5d516f63acb860d4bfe0449795fe9a87e08f91450dd69dd5a00550ac6f4f0ba96b420ac034b6fccf8cf25c395c0cce16f70fa6902e1b8028f59b296c2edc5a528dde07e33738ee828f0cca41c2fd43639361afff7a962408308fd6b07748c5ac9af7cb8c7c801a0c380b429ba7a30d36c10af7ce0d4cf16d953866199f55afccfeef57d48ccd2ff0b3a0824b2da10e6e350baad05c2c112a18aa561d5ace31cf12d88433b76f4fa1186836dcdeacc1d16c03b512e60801ac33e31ee3a1f5572a378cb4511f0f008fd457c43184eb41a3f946b343f0ce3bfcc5cda8ee276b70b812f38e976337317a6873d6b7648f80a241a04986c5d8903789a938d079e5178857dc395f26ab504a2419331ace8e8457af8f08d8f8853afc6879d7059f69ccb3384838d48992ef1c579fc46a8df0e7d7e3c92da11d55d0818b2b0b5b29e021d08026538890ec55df18045778abd99a3c0d90c58bc3d0c8d8c6b2aab4cee12ef8465051c1a0447316afcd2504ca948c52edb96bf52c94f922c177f20666f04f8227e8bf064f46b2c65a14ddc78a0cc2d8ba315cfa808301da2ad05b52766802da96af82c5fa83e5cf4b7d999512a38699a5b9b8f6ce880adf42335bb34d394229ed4cb46bbe4e17cfb6765f479314869073a9334fa683a7e8409000fe647d559c6dbbadf60a05ff91ceb6c5aa086d920dae564326ef0c936bd364f8e603ae606a4097905fb15a1de593fccd8b881727b78ec2fc20ee423eefb2fdc6d9cdfbedd3489ba23a09a99aa9d3494060486f86c4e0160f03de2ba7e9cabe8bee015fcd43762233c06f96d07cbebfac21b97fba9b9839390facaec5ad0ddacceb650cd8317fdfa8381192885c50afc2e1c57701d526595455098a9d3a21f68dc56204dc9f6bd2d16b3b613aac14bbacc66a6248485dc37202ab182e9bde8c885d2481922814590f909b9b6f3e5f951ff7348db052c3d62ccbdcd63fbefad517623a8b05bf31ce0f14d0457009bd56a8e025c4fdf5a226cd7a52d91aa2677cb5e738c7ffbb86e94c47041838fc5f93144d1a1d1da91972b1f292e9f87a8154a02c867f91b01f320d5207027b2d7c4410a5dac7cc99471e88d21dd603c5f5625259ff22a390ff750b14655e9c920c85ab053e6428b2bfb8a8363a05f85faf14cdb56b2c0649b8448d210423e43920412824fc70610169b22bed98408d2d096e27f6bdc252c89b2d3d4d3370673e7dbace12ec74ef5e27e2226d18b93e6bc164de6cf1060ea2a2d7521c135da5130c47f30f46084d5a800b64e669640bda67656ee1d92ec167a5f588e9848f6ccb61683091c3634eeb0215b12f9dba362761205922eca471b8b2f63bd775576f1d43dbaeac4eb8fafe16724653076aaf1b558097578aae8e98cd6f67959f8a487a1d8fd60baab2f57b739d252cabf12630a168ae21f67ee45f78fab924f7600888bd7d0dd854935a663eb6b427aac094ecd0c06fc0da7800b228c123e5a6f36eaa08b8f77430a28e7130730c8afe535912447b3171da2006b642d7d350076a1c9e928b130eac97f843a454897c38232cae98b857b4e86c265eb78589f580268c03f61bd872cd8bb38c4bc8bd4feabd82784b440ff79787653e6170bf1462dece788ad1d91276d25990df235a24c669f647d38e4499623b0d84c9b12fb961f335b3268cf54cd06d5d6e40b2c01ef1a40f842ee6d5abe8dc3d44fbbd21e94f394ab1c5abdb3037e20d9b229e4e6bf8da21324a050516af4cc90d390c73630a4c68177c9bc8bd73e3130f48921d3f6f7eb32a84b5385e8affff9f8388da378b3dc4fc9e4a0f391e5e36538102797fdc0585aa3a7112ff3a04c9cdf6a93863e74d79b81aa9e4ae5e4fdc577f2aff23c46e06c9757e63d5d3ed6e46def8ab05107fa98f8c8f8cd5db4f3518bd82f34e4d57136b7316217cbf631a3f0207a833d567e01a5ac3e27bca7238286315f432ea811894788eab7b0a4ab0a2ccef878d72c34ab6722b83b2ade2e6b3ac6253a1f5793cb509f3f79d756e8f1d35791d2b4311c165fad8855fd1989a7dbe6aa12d65202288bee764f5318fd171ea105d8a1c08aa1a9d617a6788b3fdfb6f6d0cd66fab444bce782ec0081b822a8709947015e5dac7a8cf3acbc78632be6a5dc703c638ab4a55174fcf005c07b36427ec4cb46ba6a927da60c37f2d3ae19c4184fcc0f3765e01c626a02d1c20a69782f7c6445b48c900a71ebad99343546207a5b616f33e4be0945865587a6c0b5bad0c1f6ec080a81708939516dcdf5f2620a95da3718fe68d390041ba59f45c7690074637c6c5ddb03e250429ab6caeb8f8af46bc6f353ced9774a50fae82303b73fdd567df2052626be2e6b6b1fb8b55a01b0c8a92e476200265e0b92340333d8ca534e9d25987e24c8f164c545bdd9915040f5f2137bafd3f6fcc272d57d0522fb20a8606421141769d0e6eb750911981e3a7131bb4428f2ff89f2344360cc23b48e7f5c19e4975226dd23020dce642f06df08d1ce1d3c53e12a9b89cf381caff1525446ec890e1e99e5e3476e8d620a532787c052f21efc236cc422e19fb3e50162d4ceebb8edfdd9ba156c362001ad2f4b7d211ab5537c1a657bc9c0a9fab87e0515f6058135116628a3e461fbb91e7709f99005054cf7c0e62ab0c17ede4b34916db312e90265bb159c633ecef62ca5df466d6fa294661d6cdbbf36d01bcf3d5f8da0b27eb8a26254c806ea6e5b8547a75ef5a7ed7d37b40667855df2c64fa20d8aa5f34ca53d16d1ebba4d613202925ef0976b30a93f44b0637f3ff3508b026618077ece633cad65beaf509f4bca1d684dfc457995c539659ec4f7d1c308f0604a928bece8bae19b2e48f3eeb23207f2ba7c3cc2ee70556f9cb5cdf070e394da13fff3dc1e38637862fdcbea59dd8920c79c50e8fa4d854c7424a9962a34122cfdad9d105a58a257545f2f3e0fa9a34dad775248eb600020f94a9fca69666d4004e15a0f353a12d7c73e19a69a9f098fe6d388101f7e8aa74b13b04f2f80f68dd07c1132edc6abf05da3f416716505f400d9f21ad44cb2e447545ba21789c96b54b9aed8e54692385210bd84d82159fb804e44de6781a16013513b5d89c8013f684d6365964f6dc192b7da9c2b060779fd3f33c3ce30c3b596a1be021b456659a905b3d7686c41b69402bc668cc41864254037c64925f8583ec4921bdfd5675eecabab0fdbdddbf394ac3ce68ce91be1f5ee69414bbf596bf556f2e878f032484a0485b10c93cc6fd8f9513f87a712cbaa80cab78e91862d1cff591e03cdc23150c16182d54397bfdc05df5cfa6f28261451e6081bf0f297286dc5ad446048e78bbeb0a55b0c30eaeb634e11c46022891aa6defd5ff354a45cb012ab99fe5c6293c4571e0a0ef66f1dfc587d247ae2bece8e35fdf9abb9c5a1dbe2ee948e1bd81099fd67fe941dab3d89b639da529f127ac5180dcae1b5c65dc08c6aa92d31d8aeb46caff6b48702940bd8b372b64da6d270c2c01388655d4eed3ca3ee5d8bd4c6766272ee36143674de3619a4f3455bcad4a364a7494bfad63974e70d9a1b8fe87bd98ab1b6b37b0ed02e5c15a5f0869077227205a0a2a21a8296e2e2557feae236e6c87810294a7a9c15ac9f7fd6b61d0253b6a3b03e624da3317ef35d7802142bb6ba2b60ad6092095091926f73cf9c21300e3e5d732186dd63b686b5ba82d27ec94c67b57c14498ce65fc7e3ed2a9d0b54e00116a23a5195625005c420777bb85e67c8ad418749eae2b46dc83e526b2a1911d46aa00013408eb6a281dcdc538cec3c485b73c3538769f88194a7ddf3bc6617a044d69a709382493a1a1922a0f494bd31986edf67130f8567a77d7d4fe8e1e2c67248ec3f6c18ef54f0fe297964a306508bef841d11d97c4a96422b44a1752e903bb29db030753863923dadfa79235ac9dbce7cb335485f7dfc631dd452929d484952d558dec4b37d73eab49ae266fa0909d704e569edbb5e87fcb40b50a7dbaa9510586f618fe702c5fd0c38401cf8aa8a59c1bc3ca67269e47b7c151d59cf479c13d4af8f1a87aa7d61c3f531a42ad46e376443f30a86bcd58d77792176e74b69c6d049ea91b8b0e560c5969d0e06838e399ac69c27ee0b44d5f575037c6459750519f14cf93403cb396e14a9dda4f1fa7cbb7a0529946a2bf4cb36c2519aa52d17f8c340f7dbbba1689ec1321b740e1ea847ff632df4b0d6bb2ab7769cc836182ea418b5d7f5a9f3cbb9fbaca15a2f4241a9fb59cb4de1e39d5ddff8c381a7e0e8cca4a0b8e5ea4f8250627f2b545b28d44ee7a2678fa0246da383c9402f7af68d2f5270bb8574e7f58b8f226d255b4141af4b1d3db5e6d6fdf8b2be9d497e57e2788eb5cc95f59fc24c9441ec6162a3a4b6c2baac8e343d924696c67309a18c2b7e217c65da4776b9e4c353e35343860e605e6587b958dbbe95e880a15df6a1cd5af17dd674e9c8cbed51a4232e8dfd645e4af7696db8586d08ae488fd4439b5eefd2280196cfee6a5391a06b4233dcdf08308520c76f927f64be881d33118bf2e0edccfe0eb2dc87f61f46c0b68baeb6463a5a1dfaccda8a0e6093bacbd4e61bdb668041b84046c7836cbd191589cf0de4d1cb65a00c7b523b41fc5de5052e0005a27d1f809dd9f8a721f882235efb1c3e25db783b32ad660950b1c32506ad6e3da494e5155a7c8ee3c9046cdb9588d6e8b9ed79e4a17899642e182882154bfd6d1e213946de5cb6ee6957d7c1ec456107ea81a9793bc6a26282c677ef3aff4ff1b55bcfe6a3bb874beec7c1ff6cc76e133f35a1e8b727591b5e681650ebcee5a1b340f42a943d668fb9176166ad04e4759aad26d213a8c3604e8c8efb524f2ef8f6c84c85f43f48022d0e782b1279d6e8ecebce6fe7c265bdb00643aabd81a650b71005700b6b7d3bb4511de9528f6c70438ba41de21e261c7552efb619f12647142d94246aff85bbf8d5d1c1261d84a140e8ab3615ab5c6c55b30f1a9308e3769b7caeb08195f28c9a409d504b34853bfde069cb1ee2c877e62380e13d5ceb707247380c292077da9c629f98adfc15dcc871ee2e90b85ead03b8d46544e37115b19c4dba7b5e6b2f3c8175ba224c76e08cb3e668e9b108a7789b8983dd7483bf30f0d858ec17bdcd5ad7aa44cc458c6d7f18d283403f91672321b01fa12b4476b632768f2f083e55c0802d42443dc103b75326e35a7654ce4dca270b3682a07872e270262c42e2d927e9946aed9baf974812dd3ea6eca38d1667bfda63fa0dce877b0e75f60fafc82e3e4d633000133f2fe109738c668b987160f644f8ff651f4135371112dee15a7d45ca09b4a8ab543cbf4957bc7350db0bc496008b6b05ce22d686f8be4dcd644c2c5ec311ee141e77773eeb3f8ff3bb11f9f36d9f586e2c04daa9e3e083661ac2f617a4c962a2289f1c5afcabf02c8ff27dab7c09e4dae47df0ba1a49eee7043015c8b15034adab101e72427b2e8679db00c3774890919a403cc39d14d946c5c16d02c2d2365f629703eb4c01b2de76f65d55b2c32a6506cd424836260b3d6d06efdc3588e112d9eaecf4f0ca884ed4ad85ce2ec744e004a895e6be43486ce392383e55e1faf0a3fa7675d4ef9ff25fbf963ced6f341cfbb1c141c1838196577bf431dfbfb94a9fea200a7b67d0f4615540b95d67ad1dfcb869cebb2e8bee1c01088986b49d9db35c1995c4f3273f07cf18745e0f6299c8d36309e032e7e3418701f17ae8c22974ef889cf04383df55e263d6eb8512b9fd6412d6f5e3ddb7a8aea378b352305c47cb28aede68a9e51ba149c042e2a6824b19e9e814749f86f1b9d52958fc2cd2810d76e0346f997c2e2da9f1923093c7c71242e84c1ab39124a2f0aee2199adebc688c20a142c06065d84e4de591cd1f06c27ef7f896996201ccd0835b0389994ffe9090455df1ad87bb9dead80c9c5ddd6897bd05f015a2591d7a3936d015da32497d099739bb3cab9a81baa59ddc8e640061113920ebc3dec529c642ab7bf5382fc28befc979ff28b78202ebef5b2bb4a3622aa7b48de442180496d86155be5a51e0334aed0b860f4923da9c43ab70a96cb26ef04785d406bbc8a33c22807b464558819a2ce8b244bf0f40f931182a5b8caca266417fe9c6e227832f7164b84930ea5fd331cdba6f5ec3077888b37ac681b59d277b69debc7d47cdcc4574392e03b3b2d5794b327762056581ac1bb3d77673f0c510f0465c81ec12daabc18217dac54aec1034b2712525f387c63c0a1ee4f264655f570b2e429930fdc1a248be2c216bf4521fa0197c1f9496383e82ff54b3cabf9d276bbb2bfd54fca71dcba892222518883e97d0820031d64426c5edabf446d9474c874b386ef35e63a92e66ec9b414e5a6b5407802e77eae42018affa2a19281ae80587fbb5ac8eb833231c9847f00b1f8e8a436a9df2c6d01c1215b23258f85cea3d426e6225f10d35f397c8cfaffd814ee462eddfaf0334a93e0c93afd488f3b4973427b3bc22a977e44fcea57fd9ee520c62bbe9cc3d364f292f966f9792d1d3eb3b587df8a6fae979b2abba7acdbcb40b1b654952ca909f2c2d76ffef1735b6354d4554744a1c561230c919e688890c3a4f69041aad0c6cb344d53bb1691db4224a6c22ff705da6406d7130ba5f630e74483e470d034846ddfab2046e5b47a300a750d901536b2ab95f1ca258d6b9edc22c34e7449a4721062b3e530f633c134ba106dbcc78f02fc4ba8eab529db2c3e6c0419d6691213ccdd5023dcd9f84ec4f6938c4109f163360341001b03b582200a84adf0b1f5eb26e3eb853da7b1800253622057c757765a6a0fc8b9277b3783b908eecc7b0f72e3536b641222b9b152f874ad72a0e0f71fafb694e76cbb4394f31be567b086e851bffce885c62c308db0315ce08977e36ea1237ce99b765127da760ac1651e4e09cfbcb6ea951896ca637678da344bc28edaf39bebe09b457d641e861c1d8ccf9e2fc8c9150cc2304e2582250ef1f03755eb46d4cdceb530c2663bba8e1e804f3fe3b7047766d2fcac4e2dd657052cd6d5ef4b80531a26f9f72f55f94bb22c69bd56c253d629d77817a4263ca08ee7ba5b7d6afbb5960a019743b8c916333683812717d9b29cd2390493fe0232654df6b7be072c78e29f09f8a95e2b89675f17846e76b5d073a5a7937d539c38efd23c6d54c556e7700ade65f47e4dea0b88374864ab32f75a0b423e8572e41a136c54c5ecf2d09c0709ff97ac30c3055c8415034710fb4c2847abaef986dd9032f0c8ac51ab272dfbab06e45a6e0ba11cccd0c571cada22ceb95c7b6aace6a1ed1165bf59c0cf9abcde1173d54978256dcbfdc2c95a78bc6d7aed8dfb150185c36ed13a1680953f21c59df5b936793d4d55b6a80c817acee67118ac51f3aea48ce9e210844bdc9240f66f58cc1bc0a552f5b093ca347c5201988c4597d8e6ea8f269de093f9852a1edc31b674228f384f0253af8a9c8580164f5917bdd241c4e5b57ac6e2d591764ff0c7be9046658b2fbfc7be9af560ac0522dc8c66b8ac50842fe7816294832e91b0d4454fb8ddf4ca916cf385ff98b0d2e1d4ba74e6a10c17f89b5ae2eb793436571adf18f0a3229eab3904ce8900b5f26664969b11e0b9e8e56c82b251a88e2bcb6c3d4ff33f1ca868cbdbb7379dadbeb181594d8cfde9ec205146e0cf07323d3873e59e3aa01c34465f1271120d5e045c767fb87967106c207ef0caef8be63a701c069b90c42cd087a5480a2e00ff720e61a578d8e3ea8d2b5dc5d01795459a6aae673332adc8a7fb0b9e1d85b204e7878f2488d68d3a172dbb3f48b5314bb6830254a5b2ff91ebbacaa01b86920fe9c1bbc0cded48f5ba29485812ffb5467fe4b1f1ddb91d321937ed99f2fac675438c4fde5ef3124f5e43d3fb92692973cac0ddfe5151734fdfa3bcced9673c5a06b070d3de58b060a061cce12cad7e092d90ecbfc43b890ec89c3e7046ae51f75999ec394164e144cb053baa4c49ec8df6be444f058e023dcd5f200c31eaa0a4def91d288ecb24b86b7f066e26f963df8d50e4f4262b98253d4075b2866506742e48e2d4434e6def59b52e1ff748a194d6fc4fd7487f99365bbc433bec412593a7d97d36949a329d9c5d09188ebd006b2429c9b5d49ee6ee1a12bf8d006141c8620748abee7810a0b0eb18a3f2b558147720cc3738c3fc2f9ecba2fef404d368cde152fa19a012501d9194cfad1650d8eb977b12b0421681e42c961ddad0040c621f3aaebdfb6e3489bad43ccd40cf35fbea51e1f80e7ea626ed3d18b778afdc28a3f9d01b2569c12a57176301131da9ffeed7ae77fc17d831f240ad0afdd77c0b598d241ba2cd016e9632bec2e602112a9790e8243181fc5cfc0b845506be521108ddec5f9ce7b0ded713185f70622a421c890a498213feaa4de9ebeea3bdc8a967296cd3d59ffbf33825ca40daae14730efba0225bdb2e73f865cde92706e79a79c0f05b40436b82c8bba79d8ea3bf62e2fc0695abe0330a754ad34f0719c09bcef6a00292cb38c22d7eefb792214f9db8944c0f00fa1cc1e7d62d72138cd0575f85934884cdaae93486f6ad4781955f5c93dbb6ffadd032ed02fd3e2be741c52beeb1cedfcf6976275c8393bc6e2e79e74071766ee8f75625b46335e836495473294362c2d9feeb8602ed2dbc5893c13acaa5df449633decda32781a449613476adb7d3d7186bb7256199faf2e3210829d92c0a28ae22e408b3fd9ae85f2e0760408de2d890045d99cfe36f4f09fa49d5b983d3baa5d334346ec7766a06870a01eda45c5198e038fa11899fdd1d5577a65d5c1e9180a2d146ffcd215b3ca7cbcce314780aea76757194cec7b749b3c54aa23394459cc3f249dfca1bdea02031f9bb0fc28fe350306bb2f10a5dd1fdccea8f54345189a6d3ebb308aacd583112e494a00252fdb63748edabb41d2ab274fc15275afbfc1bebbbac4c408bf40c9ddaf758298f346dd0a3626cc4cd288fc11d9de42ad4313a72eac3c225fbd24c95cbf8ed0c08fc80b0900da2f036244e083da56e55606f4b1a16478a926c3c5461fc0de1d42d0b96c89fce409b0d78c76b08218fbde111f135f08bc57c0115d66e4b0cfab802f4c8de0e4ab9f0d914d666b723d85b21053133a3ef602099332f123ef9b6773e72c0c4fb776221d4472c67fdb5042792cbc795449eb15a955b7fab838a177d2e926dd46dc18537360b7dac312c124d6255c07f076340ee1a4d0158c0cab98da0c9f690105d56d48a660b070ca78a176a011a4c219f18ebf9d0df0c90dcd0041b636b5d1e48a6e21cb3c7af4a5616a1a33a6231d1843b10ceb2935c434c92ab482d7c8c0bf72ec012cbb30fc35df29e4913c9c5de8e38e821ab680a4ab834d3dfdb7101ffe440beab85e7147abf63dd0ab8b697eaeba6ca831351123ada40f28f8ec62546ff49701bac180883c2a07900c8cb1853db8f7c6f4fe87b3a0eb0b6de5f836a071933599e758599f6d5f0f987139757d7144f28150d80568e6fe8a8fea7afe212ac3b37724e49d8fff4166078469382e3d5f4a8158ed39e51ca3428f838f364a116e55aa7f926ebe3a45c8407a8de2f3c4c0e37e2f8e246db7c2e73fbed36b1ebcfc0bbe3e47db5058e09a50fbecae7e7738980f074ec16a3d39593aaada8a73883987f3a3190feb8a2b2dcbb5d643be154e09c79dee97c9a84217c9f2520e0066462a5862e71805024bf9f9b336475961ec0eca3bef2193f8e416a432c5469afbab0d123051ac97627262cc3b59b25448d935c9c72b3839ce3d0f9c5d00ac655e46aca374495df392dd71336c2ee72d24522ec72d4795748d14db2b3b570706f2f6b58b76675bd339d97b65679f29238f0ec70b0ff7999246158e1d670285177c71d5eb0f87376d3479096300d1d79111a74ad298f5a171c7f0a0e96c14b703889be38b2a3301e49a96699c2803043dd8f58cbe9947a46509558620ff9f53e977f7414c084732e6a43880ebfc12e5d065f08890b70a51b3ac4fe836fd4497240a371ff260488eef9305fa883e1a25ac6a74913844e02b2de666950a3f30cb3c4504666f5b58898544fb917d282624a8d9c685e4afef61c8b09587460f00f555604d022238a9d71e74d83e9b135728e6e9f9b181abd319b8858a11b73b95a7ecd7d58721583119bfab03e77c4a960b65e023e46a242760e4e9981370188c0f468292fb078c10cf85c6fe08dbdf29476ead55d836694d85e09be20bad5ab2501d0a6e0f92de500eaf48acfae5a7f67ce461293b198645dba1b71d9c2e6c74325d624350fd1b65a9775d539452518d7ab9167f778d8c9249fc6da330d0e10a2b5f94a34b4f6d5dbdb588a059b80b545899e101a50b36bd5794abd5e5c5c324f5f28240e8dc89b2e6c634567fc2498977a2a5042143d5a59cd6dab7623827b95abbb2d7ab7994f5f31688e909ca6c0f06cfe814c585185490b0b6e34cbe3bd617b314c22a0d6558a34778b9aa938d2b0617dd39d905acad1ef73c5d6c613562a03ec4b46bef7babf317a02547640410162e5794d4576a08a82c638904d5224dcc117318944459814ef2827c7bd66487ba1e27c728c4c5578e4e3ccde3272415b6f5f558972b3d8071db242514f143ac40097f492605cc4724f115d4104eb3d02ebff98debbe9b1735b25d42e18544b837e687f833534c19f8313a9bea5daf0762df9020ffcbf00c779d4acd5ac48ba25241a0294d58b4bdca0821fd0de180c7609c7c11a037a26bd107be97a08a302febf89792638e0d369aca4aacd2198ebc03e6f97709193d7d22e9d8a890fe885e71dbb4d31a7ef368d2241a8c55fc8a4aa15c8ce31b6657af896250e0454544f22b5db24ead0828ee1bba3c4e1792a60759698368dbeaa363c47c417c1ccd69a52a6f8e856654b40e523246f7d46393280da223a11d069e4bfd33221e9ba2915ad97a303dbfabb16d36ec9495cef09a33afe3afc98221ed24ca4282bb88b6eb8bea55b25b304492956ca6ec747d5381ba3db75c8ef0ba697c801a693cb2d81d5bf640fc32efc6b7aac28fa886de76cf1c3250fc048fa33c253f793660b1fbcecd469da06555a01ac569874bc732e90e6e150f9cf30c9dd63360ac5e9f091ca528a383546df6981267e7c527c1502b3a61931998fd68b449c0e1088a776fdd690fbbc66460e33dd3044c4fb8c7e14d7633d30670319a2e8e4d85817e270d67d1352fb88eec4503f38d4b9ce5a3b18ff981d9f32a4732cb4085395135aea293f4ef39b716ae37283c9b3cee0dd06fa9891cc9d7aca1b20a97dceeebf715b9eeff623f982be14a3fc66d3e63dfb5dc7de1a77ce4ba40017be6cdd94628e928d64dc49a2aac19d4897b8e8a6352bc0c42c3e064431eea54412c0cb973e5093d0b3a624608d32df1d15e992d4a7ef021790a08b09a062c12887e0e7e66d722116cce400543cd21ccbde5f789ee303ef9b7ecf6baafcec76b7b006ff4dfa299452ec5060ad8476dc1dde822cdc273c4aa87076a73113c055eb194f10ca844bdd60e6ec4d2fd903fb83d4add53402113259f0422494862537418e1292df05f91477a96e3f55e2523c3273890be340a8378e2625fd61eb6131ff6386d67233007662acaf06376511f348c16e53b1132f243bd157d27aa489c85415546878e0072bd550d0b3f7874d901265f9ff3f61bebfa482acbe6e13728ff38260b25b0958debce9ca93b71de79d09e84ea5a6cccbb3782323ba7f938e1a6887882777fab75ae335f9351d73900fa36c382a9b4c9ff6159315e291d3de261c562e532dd6e70099606a4ccd59bc3e857df7411df0737759e50e8e6d1b7f26db0255283ebd0bf6eaea2f01d49c852e1180c57b905ec22938bd8286ee29a4b9ec47bed3539c0040478b95e3e03e84099092184bac25740648a3eded24a7c033b0f5c468e1fc252e1d7e034f6f23b0391c1c46bc698234b8d7fe0697cf5840830d6f177491bfdb59d42c1605d668baa1c106a73eed642cfa3ebbbce74782edb7e808b7a798c199d8a14abbfa092fccae4f08a4c4b082b3c94f84f709a46f2d8aa92d9081995e99711831a8f545b8439d920a69b8d444a5d111888da7e80f376948c6efc8e097ed1c57ff5137234f830468631636a18902c383dcd9e248bc2c7b0013729ae5651f47f24b936f833aa4a8e39961e255b3d097172f5201e34dad6c683bc2bc4edc0416ae79c9f04f5b7535b8409e548b1dc0b8eac13dc4d934718d9e9c4f6505b5ef9c877d26787f2a88b2e14f7f9dd161ea946f90979d25eb1f6def0709d01195faa3333b202ca1afb6cb4039e2e57f16bf873c6c7fb167a2e8a5b498cc8883df79dc14f021d7ea5983f478d837621605873e7cf3e62c12daba094d784f06a297632c6a27ecb150115a103d5b27fa2b0a398b74b758c9686af56e4dda231b7fce90ddc2c8456974907316113724d4e823942c8e913b895bf6e4514136f6cb377979c2780e157f228764621b045c42f7e572d901145a2d6fcc6cd4b5968ba3d1e1480bf01bc33b09deab154b9abddd334551a333b1b48f762cc397a926b9a7583ceccd5b27da9c988d0a84ec0fc352125b62003f2757305ed3a3bdb84c1552ba4784ea89aa05757616d8c903d5d2cb424aa0dd96e2df27fc5beb6720ba3610c03f204f500a972891c80277fa2917f82753cc03c0a1f2abea24f43f13fc57564ce63a8cb7e7cb66f59667f7e95ee71cf975e62c015192a9b54c7453fc55d0b79c137e4ccae79ff94c503658f6423c9dcfc07d3660bc371be24035927cc65f0ecc6e304269f571775cc2be91ec65d136ed3c9c4f25321d2c8f6812e967da8fce897d07330c2fd38973d0758451b82e9f4951561c11f6e29de87f29c6b3b0d61882bcabbdd01ed96db7a4331ad4b9c2510eff7c45f66cf97daf450017d2b7f8125f898d70bf7802cb4a67ee0237f9336976caa5b3539026e4796e1e02e431abcaabe087e42dbc8262e812620e7e1c20eff2bb341fe83b17e2bc452b3709e9216417791d8e19084b6c0bc812c91d19c83be607cf4ac05a55c02fc9377cf659852f09d924ffc3962e3b1e021fa918dc08ecfab4ebc327c50a6d128ba967a1202b082173fdbe7f1594ed58c5bf8ac599658a48037ec457f6a5ab83f689c279abdedbb4420994f19271f40df6cce8226b4960f5ffc873f24bd4b61ba9849f925436cb8ba5e6285be7a0782c112bdab653a33d6c97fd81f7d8837ae4b83df247aeb3573817a14d1d9d52c9d38721868113356f4b4b7d48644c41870d875a22e53bf92a3d58e4592d36aea1335f73035d9849d2060f83e8e03118a6661a62cf1600dcb074f492d63e9a2b7b762febd03bc999bce38802821f05e5ef19465702925ac5535b9f0770ebc11fb59cfc048cc357e8c9edc5191ef595868102587d3b2c4231b8e2fe48f26d5722108765bd43ce580e43d9aa226fa8eb6a25a53c543bab41f4266082a38a3971ecc7bfcd1bb39a30f537740318c4873043633c091b0b6cbb1057c93a7c08f8361f42f01852bc38cee771d5c3468cc23a3e6c8044fdef5b1bc27d4b745c8b0b9fb4dfbd877e8fc362e9125d7cc7cb1c989e31fda150ab9a0dca455dee169d6065cf4c0447ea590cfd038993673e0b531d921b70b846198e0c853e748b16a602afb25dcbc083482b8c96f17b04ae924b116d86dcaf870fd8525e7c11d243b21d2143243397335ee28452d97ead401ee31f3132349e88a3e1f6858f0f5a152bf0355d3629d0d9de28f7f67dd30e9316f6060be55f431936f63a4e1bd1b74a07173882e05e0ae3474bae1b4fb0db6b51c9dad5794f67e69b74ebbd29c1c1389ec2661ae3f0bf8a56a51371c984e3ab03ed370f3a5dfc7175a736935981bafd082df2b1634a922f4d30d7e0a401a747364d4d8ea00259a24f72167156d3c057b291ddebf6c4ed5e3743715f69b259e31df28cb8546c9dc715040bf2ea2f8c173a4f3096b8dbac5ee2addbfa914572aafee659b4e798cce453fa9601bef0d997c4c70d29c36ecbb34325233537a2eaeab67d15a566d02c06fa2b562af3bff573714c16b933d45734ae52c0532a6e5a48ca475043fc43dbc41bd5d045701b1212f17bc14520d6ab90a21d17b6ed64933a01007f63bc4c8ba80c94c24809c5ea8632faeb1aaa342089723614d3e27b5fd98843d98292bad669ef653b56a8dab622ec362640c1590e2dd3daa065ffbb31b9e2c8023ba0ebbdea29ce9036f803ab2c81d0f87b50a9dce690634e225c47571683b0ff5a52be44e26cf683421b66daf5f2614d3348a492b1bc1e7b5bb539c61f85ee603f0131b1049d998e5347928e2a9e9a16d13ee7210f505cb74516e451452a148a69982c081ae5ea494720f723d28d820720f92a90f9cf9282aed9d4c7f0a803173066725aaba605ed25a3155729a392926220c05862c75f946e6386de7eca4a1653605206f5a382825266c2b35cf6daba620194941176b21577e9ae14f4a5e4ab9389e9a8ffa5ad7b48b15d22e893b378859e2fafd887c0fcc6114c1ee1766170b73dec7ff95da412caccaa8f4a1a3044480ae094c1758e9a072e2addb502e9304a50b2c5a0b8c69b4585c2c4d2c75b61c65929c3158b7b1349b09a149621978a884898a9b193b30af589f8740611c0e444887df1e7bf0e5a04bcf4c18079ed2e7dfd72f6f3c18e6e4b9961112fddf5af64c7022a2eedbc8c1a4bb76966742110701aac9c7f8b9e6248caed57b56e5463a6da64fd75585b636ea827a3add025c0a4d33a518ab63ca8b56f86a21e5dca24ae97737fdcf4d521280599651a770fe0209698154c53a519f20cf9ae49416f248470237b948dad94ef8edc9a5bbce70e6385b184201282b6ba12eff06cb64b6286921bb0e20e9003e33dc45df1992a25d0d76049b10660da2a5918a975e07be724e537e3c9373227ecd3d4d0b45c6f97134704cda731bf66ced11d7ad9afea0041875cbaae8e04e840997f8971ff73eaf0f266d6fd309a91e4a7b9ea048267c6c8ccd8267d6c6955349db138a7dae05a15d695bea7796f8b84d4a579a66cd556823035b9eadd6173e99ae83fad8428d9704e2ce2c0b054fb0762c3604eb26f06c33f29e7d5a1bd4200a1053c7a6999b302bc2f0227c7f6f4312aede9695962aab915fe58ae9be97bd0fb64b11b0405a20db2828e35b89f841c2b3235af0782da149d47f48920d36afe9b72631ca88d2cff77d1bcf96b5f774190988bc692b123d991d665b5b264f546bcc1031535218c682a2c89d920bde00dc11bea37445944c4fe614acbfc7d52da0e23eab799e2d5eead57edcc4af43c5c500b79fbe3de9eb4eefe16cd2755471c0a607af31c2ff9bb72a5e506717bfabe5c2c0dede0b8142fd28dc7983079b8a07acc38e7a525dfa5ea690813a6da053cb4ad90fb06834c70c139439362840e2ced5267cfedec42cdd1185184385244669240ddf77c271f136ec3b7d47cb997489d86dc0c4f09c9499f8bfeb11a134fd15895c8a118010e623d328ef9fdfe5fa28c7819cee710e3bc5f0ca3590b6774476794b209f2ca5dc78f2f1d125a30c8eeb17022fa4ee0c01804ea68f555345f5884cd60c14792496c0921345c1d32c4afc341cea70f9ddea7d440d1481219544afde11d6ac8afd6111a579e3b625eec01a54a3d4944fd6d9c70c86c6915d254adfca5f59c444a2124e46ead9d22629515a00abbfee7b6dd0a88a55c87d15bd4ba2b830ce8f3c55d694c8e976fbc150521af7b7557173e4e34cfa5ff969a7543c7848a09ad379c5aefb3c68c71735ef5fb2a104c2c456c2d06a3be559070b28004ab016c54d5b4bbd28549cb26b4f08dff09930e91a2480a4a44c241f030020d5d404863fee022f33a08b7a7839bbad306dcbcaf121420fbf6181c1084a97ca66a2284d5965c1a3faf846f4cd41b2b91820c0b290bc2d76ce03d43a98f7be0046dea31cc3bc4a2d196b83b868793b6e5e5b36634ebe7e6ed1a4fafcbebd0286a0c4fd6323bcec9ed0f76033c42e633dbd49fecf786b6bd4d1ae94e3ffae9d824455476ee7d4a21438bc9e23fa6b312c524d1c7176fa324cd445fcef5cf7f2e84c8d3f8638df2b4d2875983b371d95b945a8893fc2d69e432080f7976d8ab7e9bf3d17b23bb681eeb7b035134d1926849d22a903d4e5b747b28869287778eedf03c2a243e3e14f6518f0d707710295193f67409114d2878642974b7c564f3a502056be019fa012b63351327b391bad29d13b2c99734d1a3fbf70bdbdcdec570ca44c2273c461f2c875b8663292f4f5d0c0f5f23ceb71d71859e359ff44270b5a73e3aa7d9b60caa313c61eb8727ab7a72e67a9a006d9b3cd5e69b7c77fbcfc67eadd7542173b4ff83008883f58d9ff07e145cb7879d559513301f668999551a68223780d9e989c821adbf88374dfbc0abe1404797de1022fb9e4ef0b03a597708fde1ed1c1c6a5ddffe7f5784e601c673254876afd33a1750d987e4e53454252349c998adbeb53616e9b9b358824e5126152b6c7d03019e0fb9ccca6d8ca03577a2b8895a069687b875de26e287bb8c0fdf295b63af3dd5e430556bff3fd0d27b65159ed71855bf5010b55bbda216f4fd5ac22201c20a0ed8c579f7355ce6a4c06e9d9829707c8d094692bc568493b5a7e9a242d8b0aabc77f52cff9f986c8ff9f3ea2e228b8becd98347ac54213cd9d722b5c89d2d94885880ec577e1ad7bc27505e954f255cd7f5f4ee7117f23bac44d0d0d5b8b728532c3a05e69f2b02d2445a1a349f7d30e201a1f067abeded404fcbae651cba92f8856fbb7caeda9b1fe9bb2b4f7c024566ace84fed4b778ef01c61ed1b67773bbca0542c5564a53d4e217d5a44c1e477d7bab0d1647c788d37873d1d96acbed6d0ed24462bc22ef6bc2ac0562a212fa9ab4b70c9ef69a88027362b7014af62391e71da6bf86a3ffc7c4f30f22aa5209aaa4f69c2179a902cd4fe015101f47ac8ac66d0051aa6f97f3528c0659d05891218731082ccb23c1940771429a5ee1fdcb5192d4485c57cc8d8c36fe242310deccb1c041c6f4ea579c467da45c5f2ea3fcec6506430a0d46f825fcc717ab301f1f8d1a8ab9ea70dccf4d0e4507deb1169406ddf636947a211db66ca4edaca8cbc07d3e7842d4db61b5e02341b245baf28c1f48e329f1c7a564e6546da15bc9e32a8ed603db5c0765d3bcad5add01866e6a3d062fc4e21b931188a86b11ab3c1bd423d184283b3ab45d8755d32b26ddaa9d1f74db82d1640c3880e93613730234656a45f58eeafb146fdd8bc8c7078ce191db9b397376b07e13f1233ee1396028f4d75eb66052da1d42ebd20bb0e8301a217108180416bca71016c2279c5c8141825888c3b6f3ea0108ec4a8cf19646592ae4868220062c48f036bcd9b7b988ff50615283d2c088b556d9729272f39df3febf0d85766b31b7699e70c9063c040383a0aacc95831b316cec06ccdbf7812652a2168e14d5ad2c99b104239f54bac280c06ba73cb05879cf8b04b7f83468df9da5d138eaef98610b97fb965a5c0d0142d1878366e3f13de875f7769274b33980bd3fc5dc788fc96ef83d0cc5c344518a7504f10fbfebc5269d5be1e8d1790c834f952b6664431de3be15d1380b434069efeda1f1e6c4a583401b7a38d92d828ff6cef7669902f2390f7cfbcc88cfb71c90a3a5fb5e33592548c271e96906ab656454306fd1c85d2a2786f598b27d319cc6e026ac0ae33cf1125d31880236ad339b909d8b9c1674464eca8fadf97f64bfc7c7d2f2c9986fbcb04ac10aeed9fe80e76299f4f2cfa6d93c90c71f23d652cc6e89c5615ad644f456dc91cc4d558fee8d9f53cfbfc543b8d2814f5042136090f743b67f5371535bbe7699a73ef138c49c819ff473b159a3684603e489eefc74467ae7f73a3f6a271b09fd30ffa07c97ba8ec79b0f36c870c01048682c0eb51c9c5467fc905a162970a3d78177a0a391db633a6306291eaf9adbc0a2ca17eaa5f6fff901c19d233f6da0aaf2671b6cb5944a84944f7e4cf94cb7a358c0fde5d9eb49e7cd8b57b8565c062ef6224b66ba31b80fd83f4e6be2e84577f37bb6103f104264bdbe44219e42c1771b6d7c27d4f3b7cae4027f2344ff369214a192a58fafcb79b4f0cf10a626a68faa57450cbce2333a750fbbb390ae374a044a0ffc7842df264c8874eb0ee21a3bbbbc6efecc02f9ca7b54f953bc6bd08c9ba0ae6bd34e063a5ab12ff855f7a8739d3a879c71ca70839746b2547ffec922d08a22e6739d055ec038095b68c01df27648446d0497eba1fe6732fb545a456622551691ec7ded8f20d00223a122ab1745a70c0b3986f35ff46455359ae37a6183de28319e30ba20198c0c3574b45d672fb95d45d580de8ffe9b342a0d61ddad561c4e2ea12c5d8853e28191e8e145841ba6a435cac9732e4fd511a3a2d02d62b0819132188753a3b53547a60e93a021ba358b57588adca60d22bfd80a068b4a9303c6d24a9280eea16d54d35da7e571edd4d8e1df7388e3b5c14c2711be6257c252c17108cc95966c7931a51c9fb2ba4d8717e23592ca5a217a2f3f968799d48cf5550fbb993e8ce8d05adfc1c357864a4b97984aa0aedd38b2d8ac8c487879c8fc9b8bd06d120bccd5eaca6fa2577a3c07f1802a8c7f832150672e7c437d4c4f9cd492d981796f25ad2130359e7b9b17c25b6ef545d15bda0cf79e6e93bda33ecda8b87125843d3f8b8e5f93b51ce386ce57f6475345460ce24592204085aeafb47a8d2240b31b3f715cf60870c48a8c60ddc98547ec55428361ac376935dab74ad82db24b7e2b55545591a511b69c5a79ab12db35b2db12e6def24f2a834bdb4a2a99934ff944408ca1a29337fffeb24b211034086c53410bae65f7f9680b95387d8f1da616b3f991742e53d12fa58e6e673b7779cfd3f0df67662568dcd522adf0296607b20d7302edf08f492dd8e9a1fcd8ee858e62c6052b19fe3af1b2921c02711785c874a9731135a9f3385cbbcb3c87a986e38a07fe2c910cc995a201ea5706f1d9e87c3ab0c9269b45d5cab2a321da60adf02604a539c3f5d21eab911b763b9efb5bd0576fa2f739f68c84b78548306f15c5dea5a308e230414497654fdcfce54d473ef0f2bd4f294efe29dcc38931838d7f7589dd754dfe9b7fb8718ac847d818848d0d62e015333fee1ba29a230d0e7feb3dd9f79b897f356d0119791c326a934a3504a0f1c36040a7eaf7f210a4fd00e62fb43ef735f53b888e3b78d93b25aa9e048a6460301028ade2272b3d2d223dace891e8e5d22bbe98c230e3d4eaf6ab3e887d949dbd652b8c6142fcb41e9b4d26ad752e11838f73b007be9f53364e7f76cd6e9065a7dc8000a3b1bcd7efbd3afcce8d96e314445ecde8aba5da1ac923252162bc533ce6988c37d1776fb7874ad9d271c196d585fd6f7aebeaf99d38286e2fc7b6e6d24c62cdfad150b91b5b38bdbed1448726ee97b0f92d5f377a385f48fabdd9ad7871d7a98b90e453c75db7600a4ab5cceba4f668a2e55572630db7b4f77a06e03cc49db46af4b1693a81908eb452666df7fc14f28e530ca89ab838cf0292cdf8ec5bb24f86ddb9858c6910b967355b7263f87abce6aa1e210b914fb1113f52719baaf800945a03dc855a7b8899e1e286af8148d1cf4190349ef118a7ddde11e7e4075675dae733b9064aff744a65988043cc011dd2d86b45d17da17fed0f5cc8a3142f55ad61f0e79818c1e3a8ba09c663c3f8b22ba797dbab5c026000ba439874d5d66b42d2c76f26bef4a7bc943df233ef670cf11e6f14242989f57222273bfe0d2452f0fdd2d25e0351eeb31144e7a40d05c1135aa1d4e00e5fdd5c11bf8030d30497d42a12376943773e37ceba59993de55cf1f5328a52c17f9d28bb695a20ada11df9b7722b8a15b4f3cfb4dabdb75e95ebcbd87786b8da84c6902686ecfc6066009086eb3b473bacc5a18a75c09d101d089d1b928a00052d1cb6d161bdf725f92cf9e19e4ba1ea372ae623593c1dd823be490938adffb82e0fb832e4f93696313e2dc774b2447d53901ca8e9ee4e08877b1fd7e56b488c5640d10534409ba9270022f127b561fbedf6c41a7a655c4e404484bc6eac46d6ed2ff87b68adcc411dd18054dfb94d40dc5fd957f848f7aa76af82065cabbb5ebea9b243e6ef0490bcc380c4086cf2b0a13793b9ad7a8bd58fe06510294483e4e8abac8c98cea1dc09660129c916e08c0b05e86f69c1e4b33bf223c32df647afd910ea373665437d28dd780ff72163f8a1f73f7433cf7607db8e1302ab136b7d50bf8d9f759a84918e023a05f89b33ec5c8f241c464e16e4e01bf10081ff0a89ace617f46198b5a52b1d0ad089cc62a95f359fd9c6d86e0499c3310384b6241eb13d61168decaeef347d98a3725c2eeed53301149bef2f0322bdb83ee7f878e69e7f8ae485856e1942bdc31ed04218bbdad3fe74aee876341e8f68a61a3ae286b8907a34f8829ccbee7f1cfce593cf0901ca67cbef80ab57fde0746a3bfae7af03335a6a1050481fe77d0ae958cfbd924f6f166e5ffc2cb8a8735670f9120deaf164066c52dbf97367ed34cf1e095da88721e03597ee0698655a52b8b269f8538013e13fcbbef82b802a66e20d9fce35903f07ee301342828569e29e74e257f34e4df57fa710c5154ee23aa04e0dd0bc53f0483cb6dff77e83db759623cab6163e32067aa59a868fd718fb2cdd10853b528688def09d8a1f3db48c4e19826ae26be700f4e6cfe2077d2cd5fe9baea504972a8bec74680d8315f6160217e6b2de970d635e42091a68569aad8628d0274ab732985128beb7b835bb218b7569126d7a73f28cce8bbadd140464ec5595e130b5c9f1121b6ae2cd254cab599ec438398c37c2d127ae1d24cee43b49ac0e5cc23295ec33fea6e4e54278c681ddb2c11fc768ca59fb7692ec4a5d486e3b8c6d7071c3c59b9e40f64dccd8a881b97c2eb915473a1281d6111c8e75b2e4ecbcb7c6779bde721dad50546fc736351e4518dcfa2b4dcbe1f83afe8470f7a20df5dfd8e6e7d2f1560964dad2a8d8961711431944e6699fcde1d9c242463bb55d8afc4e6b647f1368c3bf53ae3560d47978102fdd2d5deef7946d527ea2d4a1ce04870706a94cb1d124398f4dce89db2a520e6f58fc1a21594dfa222319fb9c5766d550a47916c3d2fd657a424eb7cb33b25201bc5a511cedfe18f79b6366168ea00016b575e9a21f6b574cbe63e86c5a88ef2c91eb960cbd310d48c38ce3f8eb0350dfe17e20855b1b817ec234947dd10657340c3af18d3ad7caa3c8e8c43dd3594d73150130403d48b9fbc2e5061b3e8e8997a047749169e6033c4365218043f4d4dc39e1222b349b92d08024b7857bc18cc7830e3a55de047c16f899d003fbb0efae26df19474d15c616e782ec1aa6d4449862907ac03d75121be45c989a0ca24698eec0249fc5f97f32d8f341f5d3cb84886b682dcd0587018f727538b3d1bf8c590ee15d8eb5f75e651ed08b721a82a5172bd220af6a66c9100c0b96497e15f1bf2aea922f5346c50d16894bd4a0cd80a923bfcfdf64151dbdb0362ae2a7fcb2012af361f811b8b065aa40503d2a87d1ba5eac561694fd80354c40395ff5961d2edb690ac9a7344b8f11af08c9f912b299bb92f7182c1e3d33a49f65ba8c560f424fdd9bf7130117be12f2e70204863ab728623764f3a54111e92a373d8523e7dc148e87dce03e09e783baa9c38dd0baf8b95b40349aed83bc95ccfb32de4e7b4a600fe71768893cb0fb597e67b1bea6e37b99b4f64084f5536203c7d6ec0d5da510f628ec2cd8cfab5fa75eb0474fdda210b8fde262c1f79d1a2da763f9de6755227568a7183a263f169a69c6334aaa3af2d144f590f23d655079d065bc6bd961079a6803922211fd0922057e494019ba6ebacf68bd2d344a7c3eb1d771d78aab18e9fd0ca9303289a6bc94a0f02db6e007babaf6fabaf246acb598f1f427161e77165422848e7112082a81581dfb57ed07a67e2060c4fac7f50a62ef4fefc9783d4059a74a1769cab82c92e079bf13bfb23103e810c91885d75fb6b575ab3f3785d1b93a9e1c4ae281d219442b4a353f875db94f945cd045a04acf358ea63e6e2a5aabbcd0efe7a60cc5756c051f10e1e5f341b822905c48dd452c9b1298bc569cb8b3b9586c7840998a601191ea8da4b291e27ad8438aa48d7fbf12edafb9fc1bc3fc70b53f85b733916ce46c899116316ceffe039b94a92ebe3bec8fab18b88f9439349550003c0a8bf5ff9184c1b1ed963ca13f0946db6b23125785f999e8fe912ad0d63491c5384e96d89c77ba8f896b972c2d701471214c22aed34a9ac72d6bd3cb29d55dd9f2dc000c51f05cc873b3a4a99947ffac43a6bd9c639335cc4bb2f166e600b317e96edb4319fe82d8bb4bed902e505daae2eb0e567302c3cd71b841ace94324710b480e5abe9515dff7e92bc7673605365897d777360968e8a7bfb1d9da4e4a9fbb480872f54eef03f41a60440d02068dc9c26f538c8055096c5d7e7b274b61c5970a8c270d972975353860d1c6ca898352f245a39df3ffe66fafcf3ac3affb4097aa75272aca77b703206cfffd07447504f865ed6ce3d19fd7b188f5009af7b1ba090383b6990eb992991ae129d186990d30fb818651e655b4530a321cd4badacda4d9f31db8ba90ef6ff528711d02337fe400300c41bac0f4245909f53d731228462ce169246228e7516d9c931d2f5e39fc4738f702c343d043c1f89ad7b1b7e90f5a791fcc56353039ee01361deb52eb56784bd5d40f4010b3004bd9aabe4f9236e3f5de0a9cd0236d8e634e436657ad02b5f8dd7f065afe38a62a729354318fb12ec54f30f7237e7f69b3e44ba6abd1a6326687ba9f4f6292d44d92cc77194f62b09307cb37588e7a282faeda466896238142a8891f14dee6a78b2329409d81c26b3211e9850c2fa4ad88fd74f99e96a7cac056decfb6f70c6386160cee57e26d526b80f40e97b6f96e57fccbf55635fd9ba046fcceab4bb1299db07ebd41c23c77b6389ade1a4ef1c7194920b9b67cfc243d602e8f3a4e8ec3a54bf92d9a2fdac415a256b4f0e4990752efbe8d65d312cea73874d45d31018fd377a5a2923faae89da5e641606148e5bd298613a7b5c48435557b072937701c6e10b6397293633318164c4c4533f7a8770942814c58e99518c6ab3b77b81e20702418347c34ec2c7096829f34bc65b6852528dc99870e9a628586e730a10d168bfd8aa7c767491c8a15297b228730f19e8f77b2c5cd0e04c60675c6e72fc214122ac3233bf5234acea147ed984627df3cd0f399185dd8a06dc9b8557ecc0efdd3c9d169fbb8827bf16341d27d123c2773153331f1b11a204802d182d5ba0fc13502569c62be838791cc26cd9b5b07d9745f83178beadaff0ac2432622f41337158023ef9a2b1fabc9eaf2c3853413098684a49b6d3570ac3e62b517489d2909608fa6ac99a2132031e9af3315f6165742b37732d5f0cfd7c88d6abc38eb36bc8b04d606695d9029e657a1c373dd1a7ef6a6f6fbb32e28ecbc5efb1ab215a265e295d30b126a559e31c6eb49d5f209c8a6e1274277d6a4a23aa6fa755fbb3b76514cbe1d24916e7ce2cd7b9a68615c6c8ec902ca0028e606500e44106771593799dd11f7be73f783cb6b9fa45d17a777842c44f1313fea3ce5fc5394bc33da2ba1fcd28b93ef0af415edd453b3f065670f14ab624d76522db3b81a4567c2e813b9b8f5990a50630d8a07d212fb1c61a87345648a9e993914201de80d4e8309120a73d3bfa3349e66094c6f25f662d70f9d6f0e53ecae9c2a22ab093aba8de604b8422576675125c9505c4274eec6868f0eefc975d7bc4436b99733a4808edf6e761f3056b88a1bb78ecdf01ee6304f65c069f5fa4bc3294ff5116ef7c1062bfab8cb4e786c6935a3313af1c4e43ce098f8c78ab9ad4bd50fde72f92ab88f4cbee25353b2d66c3d53e31011cf8331346e5875cc5caa8f85a5394ac46743ce71db7ae644b13e863912853d3097fb63f35a62f06ab3028392eb4a68c4e02cb5129e04795eceaf520d43ff80cacdfb50fb09ca9a53dfaa7ac008383a29e260e19c265480539dc75f8303b0a2a57c36862cd3c1ed64d3b2fdf7ff2e149341bb6f8720636e9fdee102ae46a47509fe0c427089d1f118915fc0853d365a51a4951905b0a4222d1cf8325e1f2fa8231498d2771f1c43c25b019008524b92a48b5a3ad1695bc34dbd47bce7d0607ed7894a2b9fc93553d0cfd85228c1feb4767d57c8ff340c73f1d153476faef9a60b5dff2d00394d934faf2147751d4f43acab893dd3c113e58dd9f14d1db825c966b054de7b53749f5ea074b0faf8fb8b375fb43e58ab66b5688a307f53fd21f0b18b5481cf3627f973859810123a3a3a2d4cd504dfeb8dd628ee1bf8a4f79cc1de41ae572d1bcf021016f11bf3097f1ef6323dce83e3042876b63fa3557d3791ead28b5ca23be091455c46df6006e29d0b1e01672dd686971573808916c3b62422ed7ff8423bbb602e578ed9d299eca682b03696da715d14663adfc72c7d8bd147c469528fc9bae00d148af2383eaebdcd408932507eeb1798a6a0afc671d29425fe7d27fbf522f3451b0bdf92efe1ab248113434c9a0832b2c455212e8e5149b84a4494791c7a3181f7c854e4b27f01d3afd6082ae96aa8a49436276b0a4341f1cb689c1d68ba4011153b80f4a59ced535c926d46428ae34c925d513b74385ad9d5937783725d51eb367261cabe42d893465ee7dadf0513ec1cde647055be2d1fffbfe5780ea6e46776d525a78973c77114ebc3b75b1b3f4c6c602e42a30354cf21e59d2162885645ad2d2c4252faf22f4f2777d472021c9fe83a399cc193fd6f7b03d193338e45a438183047c944ce1f2305f4f11a5a8bcdeed835ac691ad45a098b5406ed227054edab2dcecfc36c55dc7c86e8199204f9f60f2f4f0da86b8186ff2a67ba55d37cf0647285cdea7dbf85075bb041873fe0a3293bd927186566877da13c126f2fcd48909cde59db3e4b3d1ed0e39f53dd981f2b12b047c16e9a65ceb5b6d88bd3d00416bbe2a7ab901f676293559262c00cebbb18f34c6bd5434aa6862b0984119a8be9471488267520a3dc3745f10d3f6054d387518022f9e69a93278b3855b4b89c7d49a4138c073a1ac6d510fce3f80437b745a657a3b98f069cf9d01805814d1a513f97faab661c56d763aa80187e6f35ce90d35a8b7b9adddeb6dfdea273683963afce74e7488129e8f9d3451ae2c2e0da4d8e04d29ebeb5a5fedd329a1eb37bf1640df70a3ad36fdccea116029ee9bad5d983b95073568f96b2b4b1be9b093f1c0927645babc88cfd87d9a5bc397214ba703826e2271053a0dc118f893b4f4834cffe565426631bcc4ed769e9ed9ab01ff8a5dfc1a56549b300b5452f62ceebc79a7ee0f7a456bcf2230d7491b149a7309bedcabb7f345212f1894c78f3195842cf57d10d9e2599773d8cfa16da5dd63dfd10811de65f1a25bd36c4b50f951c876d38faead65170d927524f154f221607226004eaf213b4e3f92464ccdf14ce31c6e655bee7fb45c4805520ac5c049f90325bedace65491534cdd55e07db589ae20197eedfb92ed2335a6c380161b52dff5fc15f2abd728af7adbf18dffd5cdd5f0e6dcaef09c1d9471c25f25073a5c80d9e49cf4107208fb062616617235c760e0f28cdd8c496cae078ca91b8fd1e7912483c0be2c41a305a6e0a6619f9973ce577e884d80636f5f9755a01fd6c5ce3189eb037c3356907fc3fe7c5bb8c74b758c53236fc2616a26e446b787a0721f0882c43cac4438f9c5f284a8f57a6b41583e6dfeffb0545096534f6ac69605f12da42659d09847adc28c7d6a06df124085825496c5ee50e4812b03954e2efdcc7848d1e153c71d989ff37334a1b1039e1923c1d3cdc8183b6a7ddf7e9224038d131b71e879bcbfddb6c00ab36c2edcc28f99c145a01cef8824635bd635f88302f0f09f30ed2f4ef463fb6d2b3dd952a88c3cc334c3a0542b167567d5a764d33c0d627e9229736beccef5e73ba4ec32f69178c372543d1df02e1d29e9e2a6992c5cff3899802e98167ca5440aca67f42e8d2352d5a7cafbd441e8d1f78039a6ef967cf814456b90addb367520c79e384b840fde20706b6c75ca4952f6a461fc0e5130083d9259a30b6efbeefcecc46ccbe0ca3c4b0dcef05ef35bfbe74a7268428f3420a544eed7efc56eeb5c35134de8874ff1007b48a2bbbb8984591efd0b7a39235464be2be25ff3d229e1a5733a3c383fa46576c0d0a7d4673295e38daebb48b22d33a14cd7f338254c685f5048bf9fd35928b2b2be2e061e890cdf84ec4f9f60631dc2e9c8f449e5cec29498c68e3ac0a05ef35e6fcd3fce618e71ee67896bda65c25c1c3c8795b4d04e80bd2c897bec92a5e1b7822d10e2c2f07c82bb713cbd33d06305d8a86a2f651a72493a076c7c820889b70bf11386fba4bd3b1da9747b2e3e9585a5bdd23e30944625d4d2e91ea76d39f6900f9ede0ccea1e0709501f902d394e3ddb1b2008446c3d93668a873d9c20610fe123af53478958454e072a31bff69b15d3444438ba298c0c4825683053c31cfeaf7acb170733d40bf5f92a5cf5382b2ded9501d9f44303582c7fc28c1c585e6fa407aa43b494fb3a69442eba9aaddb55b3c83cab3f79577fd4d66fa11703c103332e4c13ea7c383bc46d480f7f505dcc923a6e8bef8c3fb1f8964918556e3ab3f511ce49bc51c88fdf82ecabb525ec7359cc92022748e47a4e70fffadd353598eeaad6c7ad9f0765e5df7b1b3a0ea2bcd04a323f5c8c9b0a574f79618aa4b2016510fa4b9866988fa69bff9b5482a4442fb9a726ce10f569441d4923d37a153648838cca8207660fc2b1538e2e7656be9c301689b80ceb82ca925caee6eefe99a3907bde571d0b18bccc8dd5fa3bcc7409268b5b7430f7afe74b5729df0d2bed02ef8b2b82d6e274369db269c4a1c386b9ccfe29364a69212c7c5dfd61e1ef65a34b43a95b359c47dfb1b60546e3ac0d51255162f1fae004490925522893274f0fcb159fbf9dd08d102009b0b9fa7b55e6a13181a03b911231e188a33b1f5a47bb1005f34986751ef4a42ad48497fb036667b327fbd2e835ea1b33cc5bec230695a1b9bb3eabc45eb3255e17307a50e95e9347ca0e8ea573e58375b18a9ca80b18d0d16ba1f07cbcb7ce9cde1b71eb6c0e3e7c96c3862bc5962eae8725f04f73e70ced417be6d5061479b656472bf1967fb9952d507611cbd1a28dbe087a275c2ed3790bbbeb82dd0897bcbcc3c9d31ae1aa8bd1c57e13420e0fc653df9604f6428e1ad6100075c928574f945e20ff5cf7bbb1318c3760c72b4b7fc7670f1670ca4444d829541f5704c7508c58541073686da3340cd4b940eb4415161e3278d7b0af50c3182104eb1b2c92d15e96ec36c298cf913116f76db66c12f6f64b3750ee42ab5b65bd4cf8452616fff138d3e32b4c14df7d0071ae074875c16a5c8008d7857a3d30d286ceb71da761296df87f450092703082d71fcaa7b3245f9577a7dae567f3c87173e2821e600c6d2f1e83d792a03fb4e46fc72d52b701ed97b818e4758c96bde96f3415a7a616750b3e40348c3461475511ff1852f5c9921fb85680a3eb49e2c041febc564ca6d40689250b0123aab0d0a69bf9f980e7e2fcaf813a0681bc0d29846c0b1c7913b951bb00d412c39b458d3a0176bd656d85d91c6babca798e705e577298d9b81a97e7625d43a2847866bfa71e9fe3fa0f7cb7035cddac0b63e20f072c9dce6b89f1b4b3f18bbd525e721c64c312dbd3646e1d0db17d2e424e6139c5ea778d2d1c60337d4d1f286faa034bb08126b864a2c7a422e27934c3bda7dbbca02ced9d3df0dc940a6ad944f2b801b1706d51544496bf1324645d8ce3be4719ecb4fc710972809c5abe14c1e714ede742cde2851db3b7f1cc5fa04aa3a0bdf84dcde98328ef50432ddac6d3f55b97871aa29b7c62a74279523336351fde9c66dbfade11c3e110381a7251be95ce2bbdff140bab8733e8414d7dd8046562f7fd2719320107a4cf6ece15fe72d44e8e6e0106b1f30d3938ad7da95f5402f2746e7246df8f372da6a37635f944ad4c449e7920d3ef796b2a59e7f66bc25a98666471c7fb19975273c049cb9827711f6b4e884b94a41ba5f190b35ff3e84df0b3598f15255928b00881850ed8a31fc10ea18b73e1936b93926f8e032e5fac648ec7701abe0524b7b239730cd9bce4b161ba929d59a24d26ad013fab35908d09e116af4fae80d8cf9485124f82c99358dfb458770cbb2713393b848ca4d0048cc8e22ae04b0eac5bbe44252267b27aea975d0a4a1aba8d5846fbed1a22d31e885db4778609cc51aac45dc95233a1c4fe49d4c20c4518429917c21220866291bdbbd12a7921495dd6487470967d712f56e12e84236e237dd33865da5fc086c7b8726a4a30a5f93bb60b2d557dfeb8facbd0e0d30bc9ab8f9dbe0301083d88b5138fbf33f7c4c06f0deff06c9ab6a22eccc5f848b6589a55576002a2fdae6582906007dede1b410d2451fae6d95ccbacafb78c8f0292f4e862b758df43561f1ae3fd982d1b1aac51ee03fdeec688dfe1d11f20004e529a8469e807dd5ce61de2171515062b5e92118bb5c5b7e4e7131d1b2b2832601d3af2d429f9d760f5a2b9a177fb2cafcb10cf1c1ff2fd3725e1228fcf91e916ec9c4734e9cf0c02897d60630d9e986609ac5f8e03e897c9358f370163cc1efc9529f1ed5cdef5eb5157996291af49666c293939d448ccb447bb6b779595f729663a7a77d135d91c0732db62f29095d129f7fc77a2a56231393ffb466a17f50cb61814f1b0deb89feffe5b0f9de0456dfb4fb01089f7b67209fbf38a6bb9291906831eef1ba20b2c464a42e0cce216a0fce76260582727ee641c09ca43bb408aef1654ac16c58ce42ac6e48b2214ec215aa6746d100b4880085015292e223fca787f0185fd6d2fbcfddb654a5cf09828799b8aa7a68aa0cc3e1c4eefe2ebc95e9c85da9c9f7a74440e6ca0cc859d1528bfe1a87d4b00af234f0b11ff3ded358459fac87e58c5f5f26c6bfdeaa07b0eb431f86d23d0947a4b661ba86479dee4e27f1e5b68e5ee6339a96acae67458ac9b85b3b8070432651ad112ff7e2d2aea462b44f3b8f71b801a0f1372971c300192ecea4ae58972bfc336b4fe14b6aab81e9695787943dc9b9d96fb8212de0149800fa9842e918523f131d32114c80ac6baae22bcbdb150d87c124c201153e489ed257680c109ac21019aa5729984af8ba13059d76c83be1b11c108893f19f8742d5ebd4713d84d119764a85a3896e3cd8ce97ad0bdd750e6ee9ed89e8ac5d4e62cc3e4c532059e429e9de4e1d61c272fbca840335956cbe830b38dc7d1050256324a84fd67568997a3d8c781d9e587ba8a5b77a2b57828690a42e6bedbe652e96c69d8a20b6413f7fb9eb72e1d60a6e811ade335cc9315d3442707c953cd90b5af535e3156be2fdb13e7ce1517d30d8a951d523f020b2013cd4cb4ee89122858aceebd154204ecef10d0a1635c0aa71665c7f45cbf1452051fcb9ea104d44e5ffe245d4828136ef7a97ac049ca11110b8cfc5919ada505bac6463a99ddd16e9830e4accf2c96a159e1d45d41bfdbc3ddd794a1ea8348e6376a1c5299a620fc24752f365874f57f8f5e0bac4224491d82acad31f94021995bb8c3888b2b086893287ee93829262afb2f71afbd7d5dc3a66d3272c8d1d237321756ce42f7781a00a5faac2669e7fc8b06bc8ad73a3eadf0fe5b82c6c3fde4f62177ef6e3dbfa6f2e1dad9793a5e184b4258cc64da907f590ef64888b99572ad2dbb3fc53b0d6839ccfbb5824db923a45fca57c7eb8985f6d771fe7c959daabe14ac7e070f94043c5cd82303a1c4932e51355736d7269a1e20820e2203a23efef68617310eaf87c1a2115b1c07b979f6f517373ae129b47ec0d1660b733abd66d7e1ae2bb44748c5a01d91db1999822bb9174d4a6fc2f3c633702a039b3b53dd9e74b7d71eaa16d139d2169fe5c9e7768f5b1b53ba13a2ca256e5621d729d29025ca5f64983c060f9f5ee37c7816bb4641427276a8b9c7602ec6c7b6ef3a26f000c48df535a84647aa4e3be1a269dcad2d1b16774695c7751c509264ba9b6bcb385b9c80f739970e991253a90d99c7ef238a32ed1d1eb3d932779164829bfcf6848f4dd172be4e4d4ed3dfd3662c6c8b0ea72a5935e247e3d6376e3dc7b47b60ffcff1a5df9dcf1d75b84c889119da412056841921f76c622b44ce13da81cd87e6d729c18676195b312c266599229b3908cb8f540dac75fccbe8465c51448c92be79183e79611efcc66a3bc9dfd5e1f4219c4760195276dcc7828fd69716801ef296052091c2f7eb1b1e398e073a19d15bad51812afc353ff1457f19bff626a3cc1858b0ef6af891794b1d172c92fc1cf8e41de3754ca7decb31160bca2d6d1b1975c0f6be27a7b88265510f7464007fabfcac3ce801fe4cb0868e9f10bb0d02c13474126b0301257cbb90d8bb0c6670cb8065f9bee89b1fc11c167901ba4a981e52088cee10b28d57bdd11faa74bee7b634bf21dadfa56e7dd0b29c92df12b0ba8a7abe5366a7014a85bc3f144c6b3de233c6809cca036ced1b30092b44ea090dff6ed54c9890979d1b810688c40c4718eb52a4cae30ee875a2e6f2bfd2f5e7504e36442846f3e0fde20561fce03f5188e692e75150d2a07b9d6d96a457e25ee807843eade72cc58ef2baeb15dc6027b7c1de22c7ab122f8c21ac9f09fb43b6dd8a18ab7e021f92756d92ec3f97419ff8908c7e99c17ad3b24462420efb94d6573a1f0bc20c4bd46876cf4ced5899d62f376557b7081c66939fb76a1101ee9f931531689a1fc2f8355b628903bf35a2e73aa918700eac05d8391ee30a53c8528887c90329e10cfb98ba104e47bd5dd14f7cf9ae409a4cdf0c24b6bd91a53e3c1a1e9e2eb383ea462573598a834f65babcba0786f87b6c04becfc886d6ec7940f34681f8d88a14ce98c29932b867342744b8475bcf6b2980c25dd0a5829fc31bfdc7c7985699cf75e8b983385d62d972f43022bb3b6136c2d6f724f8190b4d6e3d491eb8321d04b7341f91cfb987befb26f9130e5e4e526d49890096e0b726c22e9d051225de646f16059ab002bf4442af1f4d591afb6fad65b8e9f998e3468b268985fa964acbbb1410fbb0bc1a2428ab90b27f67dffbf97f035136bf7124554bfe81dedaca9b10c6e116f12154151663023f74635f3c02543e3da567156e01c3874503509ff88a7a406cff555d3cf2b0d47d6be0cc70ab4ed82da40322d57f8a4ed3c899eae5848fb17ed7148ea9ddf018dc3d4c5b8480928517e8c86728f92090397a7df809c6a5053438783a60983abb97047d9fca968e4496ecbd348be9ddda10d6a3d8c9b377d23ed51c5bf0cd96a55be1b95206a595cd98cf0f173ab1222218378be1449cb27d0b241f3556f650b52154c7b35e2875331766ff99a4213da019dd12383264ff3080fa3cbca05512514e190ea3d88539217e60eead03491655f287087709030e9b50709899b8b29ba3fcca34819bb16f71e94a44e34721e52bd3a095a4a838eb6945ad2a4cfd41713e39e509dd44013a772c0b0feeec2304db16e5cdc1cbf15fce1b324973a57e2b6b87ca1fcd8c5f481f587056f2e90398bb5bd11610e1490e298a871c8933d4583b401b2708f842cbb50a59d3aae673b20c5521fa9e9a187969e011b531b018e00c88c5431b7dcfb6bd2b3746c54552548c4c31dd6538f694dba94cdeaafb48dec0f23afba47716febe882ccf6f2f7dd8aa8e8acdc6643bab3c0e57239e0258fe52aa53bd156d08b558c10ea39ba21137268fa76110c053f04326210dc1e6c4cda3f147097bd8eca82f4624b761ca46f4ad7263c19ff1e43b7af12b5c425c9a37a418e12b152e29004b096445085684fd618e5fe47b1af402546434fd386505fe02b8913d5c1aa7cdc77657a634e8062ba1a7a2df645b86afa1f71cf21d6e1a94faaa605c7a5eaa7043151885844a2cfe56f494e3cb4eb0482eb877cbd6e21e106ed952d2bc647dbaa4b82729871545717bdef01549960e475cc24d80942c927be6f01a3d5fbf4920deeaf68cd4b5466cc1496fc2b3cd54cc504f3f57893668b03f245c15fbbe09fd6f9676622da3b8011c20049939e03f4d4aed1636817d33abcb496663c7d2d469c1a2ef1a659c98dd3922a1f837160ce7438db24e64653ea4fc5b5c7e4bd53c95a00fb577e2e3a715e6ae12a18cbc3182167eb9724df5c88d0e96b1f4308f0f7081d9d1848c2e2a3c535ac08a476eeaa98702dfaf66951d1542b688ce62482d1e65a4dd3fd4c10320150dd19bb30c454466bc86c9f18e41be64266c03d0703b879761005509673204da62180256c81738a80226cdf140280183973ec498f8df70309f095e75f43abb01c26cec31795931f6dc3a2dc2effecb17397d2103ad3aba1b61c0e5bd0d8b732e3931f5b22ac78be21f39d68a89b3edd813a4daf13c9f87eb68b3b057d52d46035276bda68390e2d141166c882c00b774642187dd52a4d97102a0922b54011ee253e6799366e91e6299eee2da023808fcc0e58f382ad2d3b7be1284913ee47856787ac5477b1ff480207a045c2edd35bd2dd1f21b49f42feda37a56ced70323df6276f5e2a2aaf071563db5d46fa0c284dcbc47500921482bbcb69adba41fc2c00aaf7fdd85e51b2b68cf98da40c964e9e0fccef575779ef713093d448f00c22dd8fe88f4298b145664fca7e3c3ddf5d86098e8e8a7d764ffe5326166f0933de65417cf72482eeb992c96dd5462caa2e1ae142ffb230086740ebda021834422a81ea3d805ed2dca5d7a7c4e632be38e153db8049d89a2cfd162dfa0a45d72d0237fbd2d09a8acb6997c6bd76f4642cbd1fa099e66faf34e6d3177f929ed2d9f4b23d3909d98a5be9669600942e209a2a39181037efe971488a7835e6ea7ca4a12146d38603e4822e9b223a8935f881b3ab47f10d50a651f037d0cee84a33d6fa319a3a176708667f63a290962cce167981bdce56e28d290c9d94cc311c428bcabec61c746e7a11cc444ac4ad0345e9aa5fafc600f422944a18803721cac81ce60526e9b5e700958cfcfc53ee1962f64b1b908727eb9fd699aa194638452d91d6ae3826532c7223f47785937b213869716cc4fb5ff7a6fe7d42e2aea7a92377d504594c42406dbab3bc47c12e5c3bd17cb607968e953d3c2ea3ce97584eebee53ca8f99140dfe0f6cc8cb98f9e9c5aaed61162c8090fa31a53d743726a15f01547ff11cec1bdf0c03d8dfc2efd640991cfc3ee07c2405081a7dfb2afc6fcf89754fc1b3f9eb0eb23f8fd2a56ef791ec6e8bb8f719951edcc92ecff0da4867b3c820884ada1d395804592aeccc1fd8d084eafef3a0300e6b270b8c6979c8082baf17624b4b0c5c55fb35fe6ba439ce0eec0d86c9de0bc502b89c02e19a65f5eb34661d4af626bcf6a73702f3f6dffb4ec08b7ef5db2942868b051905e79d1059481cbdd28582db13aa6fc8ce2255ee9bf03ee9ec45496158ccd1fd774756f230aaa11a9ad8ec2f000b5895ed2bf31b4c568f4b09f2086b88f7a79a0384617afcabdc610e6b2653c251008de189c965e7b3d57da4aed986f1ecdaea796de6975d91a91d3d3d53eba6dd911b61e3066c66185a4e9525e7382519c360bab0e235fdc1e6952bda52fec80d377a2c11962423fe155514340f9de4b9bdc581166a55052f7d1cb060a333e115aab7c50fcb03eacf5d92465c6c230a4de4637da18784b86c1804d48739ff2397d292132ef0f028ca331018f52312ecc64501d13e28746260a1132b00b10a300606dff18446c536b6de0c892aa870b40321b1675ed145847c9078a85923aa8133d904531be661f30d87e4c66e3ea8147d4e2d46e1d13543ad4318b9a7d7f8d6985edbb48d92e046183fae4c856269f61e695462401a2adeb565b7cdf48051501a62e1499f570a67eee731bdef13a52a2ebbaa89fa0f12f8f2274bf7665620e8c9bf4e3447ebc9db2202cfb4458e5148b7596334ea227db624b81df7335db3012a3084a4e84ab4db226339eff72b93e2d82813f24b582c9521817429d1b27765a28ac0698e0f6d61974a05dcef6f4918e3a5d11a212cd16b1bd2cd2197c335de16e4b688cf545b0b630d3af45df3cf812426437ac1945cbfbb7bc7e624b4595b737ea4251afc711aa5887e4aba65a6882f3c74aa6adb5a906bf7d8f603e4bde9c33e18268b83db274f7fe0f1efc1a83e5ac9df094b1f1590129d245ddc0bc43f7e366a89ff63f0266d22aa4e3513fb1eabdc2b3c3e756eda31ed24cf2b046d6d24897b17a8fb989afbf18af57508f5ab71dcbf39d6f839341108513b0484f03a1d4242bb205abf1b9022f218184944817fceb6f1614e7f358c340559b8a4ecb8e772d35f90ca993fb4afbc07c723a4cfc852e561cdb8f7bc89ef95926b75f099cc5363ccb8c178776c010b51177611345634010fdd3af62cbd7d695e67fe315997771369949a2efbf0930a8edd36f24fbe2abe99f84f12c18f091da8cb1d3d3f93223469e428796f61236d9fc789faefff4fba776eac21438895d36d7a067b8e9bd61245a3d8d11915dcfcbb2eb3c92c3dd79f4b958cd22a8b261f823e844d494674e4d67bb74bac553209d0dd9f566876b59c7def0347b00a737eef3feced86894f752df24b931ad002af1fb9be0506425a9b9724cdbf411938927fd9620831ac85abfe17e329959bac69d8e47362e323b5b7c9e049eca40bf5a7a22305aa4d1c72ff64c35397be8f16607dfb4b2fdd6b84720cb26eb9b6a91f25b8e4ac16338e385353e3e9198fe33781ea2e1c25b7518fcd8f69b6f208647451658d268be764b488ca12324e6179a2699b2fa4d41006b596739af7bfbd52b86a7c2c643fd485f9cafc229477f8a32f35d94e6bd194a88d83344ddfb9955c47e9a7d1e4df47ba9ad29413befda8c7be802a1bad1d51269114e076f8470e4734069b6bd615093e0697300b53bbbd7f342aac5697dd59686ad796cac6c41d6415af84d88b84643a314ad9d16850be50ee70932c0bb11ef32118019e099ce9df14323250a64e82071bbfde6f5d3382138c69a68e7033e6f30e8c05d1793dce0f0c60930d56cf2dd1bbdd2cbd8e5c5c86f3dcb7725410a047e31a5054fa717688dc096899b1822829fd4eb7912e41eaace87b9ba5968b8a04e5b4fd3103c4e5d6b74c25f8f6218d4e8c1ad7dc5aa6dae5f6bf30dfab00ee9b70620ab9928c729be17aac15f97b4fca04b40d758ca9c3399e01642491c8875159ebd68050278d9d4d1bf25e37c496d34088edc719f505372ecc34bc18cd618fcdb2180db9a24618351b2926b1080da05c529a53b04f1d239e7754980d4cfbb0951bf2c2c112882d1fbcd3349c462abc02e26776662eb48cd8e18d9bb35426c1f5055741a16f9484858a4b8de228af418f4245c3fea4b3fcf7a839681b9b3d6b7913af5c14886f94a1d6ef3604226187cd319ab0778ccf7a0080e783e42aae8d667b33171ba4785947359fc1db06ab6e30c659010e632bae3f8b9833f0ae7cf09da59a6c4b74cd211bde06d4599267a0386429490c847cf9aefa6757cd620a1ed38c034cd1e9ddb0a6fc37b452ce24821a0d9dd99adc688f4cf30eea6efec1e7d3110b292ca29ad2e998705008be587d6f3706fe1815a2c76f336a7b7f0358bfac9ca58fe29933bf4d3b47da5acf93bde02c256d1455aedab63526e156d55aab3be8e5b4992ede85f8119609bc7f4727c45779b315514f4443dc29aabfc1367b5137008f6fd58d3020e468ca56fd0eea30c4490932d13076a62955114c61fbc3af9a16d667ed5dce025094c53de6fb3bb3ac758feba40683bd0f688cdb340a9306bbcc471805a3c214dc426ae95ab819cbf5cedeb74516cc82d5ed281afba79e4f11edcda1f44cbacc2ec28ca6139850641fca8e067d8b6ac62b7008449b5598f2bb6ece23a81f7189cfc3fc5e9758d541afd31ba6fa490148f9c572a78f2f1dd83064d350af321706d783a4ee77b64df683cebe101f265d6a5180d9136e3e16d7781dcf37a28275b741207013f493d612081079f593417d4c2a180e7b9b843264ff38801753a27ba96195da09f2e39c8f6710c427e5be105b26a28f96e7a9c6ef37ce798d28adb7c8dae4e37810a96f4d8b9974a09da30a8a1b55c3d59bf0285ae51bcbe6c8eecd68a95c42e5e6d39bd44d259da7f24aa569a0b57c4a762597cff7dcd3e7bcc5fddb4709452900325ec25e71979986388c20ba6500c1040709dc523c5f0d55536fd54e02b759e983249e86a4b5db5d02d7e1150e23ddb8b9746dd8c05ea274f142450aa6500f85679323ad50148908ae2c77a13fd1f0e051dff2f93594075324b2a2276e19994d0285d6ac86a158b096fd0fefced137bedc197458f6476201c9e5d3652a2ef4c6fbd8204415565face81a15e92d727f3d9badb8b36e3acc3b565aad5e6f43f7ced2779ad9fb21cfc61d660c773804f125ef3966fb53c083e19222dfe4ddc6d2670857a79ce03e72501662c5ab45d26a252582ef3ddbd082393ad69e966a96082b6a80cbceb7f9cb2e9f4c6b8ea862e59778fd4800dee238c10a0815812b11a8be3d4e748bd2354afd552e5ded8ad461be358c58bde70dd8e101dd5a63495205f9d0fcb3800e288ae6f700b8f5ac9591779e76a0866ade6156651225391932e7e3b91473f3625219f730f0cda0778e635a9b1de4f208455fe0e7cfe2f664fc393d2fe1ffc069b2c085250158a9594508c47aecf6e360c6df28e1830db363e9135cf0172c6312e129c3a3cddb60e53d77b2323513f1c069ea4f059c1715ca018aac97414dd5d9c13c507e5fc5eed20716433ec4c22890a681b7df098e1961e48d786887b86c4fb7695fa3056c2993fa43f5d3c7eae9c60d948a31703ceac840549b4aa123b1685bede0cab3a773560a4cee7c2290edcd0b5c266eb66b8e09e66b277958b9b1b105a3d7ea3f19269e83107850f286562443d5b5fe19b14dfc34881419251b0ba20eab9296f10a683d2479e9fce3af8ffa52530e5afd0a80c1d03a4f5764d3a82ea95784a4f79361ba8c7043a63d02e14a52e3f867631c850f9f520814c5072131fd7dc6f65b92ba7ec238cc50e6e86543d2ea9fb540d29dfc47711fda0f7ed0bc56472705ef496e7608de0607937708abd11b5dcbce0d7c1ecf9416df6c848225f4c01b17710ba53d0ecc77d0987b3cd8750071fdb1070bcb9bf1c392a7529da4e07e6ca2c1179a086b4f70d1397894b2afbd3c051c959c52dfe66e27f3b5dd17ffd0b7d912e2cd25b10ee62da33836f6399e96d32cc7c3c8d370ed3d5948578c021f6d4d9c6594584107d3b34ead3e16dea236d5db465f1c13ae3b6192e8c5ce8a399598130901dd370a383f24c18c6d8373017e2245bdd39102eec0a0e750a73cbfcb8a9c37bdb16861e7f7f5dd8247b376aa62c2b6d082d9a9e1acca1e75f16c8104f68dda94ac356f88612e37f1368480b02f0cce330fbfca6f679f97c4dad431f9e72103be5f0cfbd8e2e04a1ba253ece105026794e7d282c9f7371aa060e044a3f48ffc3cc6163a7e47930cb40ac7a8080b2c87c293f6b4f77f333526c2949613aedede477652aca0ff4ab452c74bd8a6fb25e73ac317a62f40de1158e0599830c663f4e26f02a657d4a987ce5394f264d4151bf96ab7b40237feca509323d0c72b16683437aebefcd04e2c70e393f00ecf544c2aa86c4ab4d9bc3b11121fffc0cc6dd8b93b608beeebb4c9966b5634e573fc492d319b3a0f701279a15a035479d1524b63ba8669c59da15944adb4c2addcc9865d9b8c76e4d4e901ff95f52c705c24714c02789e343b116cf91d664c5bdf28ade25d1d039a01aa716f6e9f9f634c243fda006f82e2e00f458c775515fbc4b3fe675212e10b7765637ca583098c18bb5669a4b54e4c72c40565937144cfe7088850d2e78d80f6f73909ee497e558069683a93160feaf6089f4d380af831f85796d2c8b23f74a0d4f25adbf8ddfd28ad88d00a8c019e11f87589a96e9e099b1b1872c4b223cd32da2d78db2b5a474531665a5b95f653d35927bd618f44c66ca9bbe2c852ea2ad88194782c52c7ddff3f62b0f25204b8f81cd001bafe2088de43fddd5fb2e5130a1498a3304972665415169e99b8c95682de6f42d69bd54b082df08debbd49e32c973ebcc653c6a27507e38e93df776aeb0df2b2b880125d5fcb3741db3e5d0b17821210c45739a0fd15fcd701cfa635934f722873552818db93e923a4672f84c9ea8bf46de07dc721754759a59c18edfe6d04a3caa3b071577bd14876416f9a988008aba88dfd53bf9680e8103bf3a944c4100821be96aac720d8123db66adcd3c88b187406cf2481d1451608eb791f9db7b50c54b90a107e2ed5e65bc5a046d87d13eedadc06d8031ad14d0de7065d2eea8b891d24eef2418870e1df875e383d9afb00c388632cc084bbce1e28dce72face080015481466934457c287d946988139ccecbdd91531a0cc487d912b8d8802cdf6d0e72f1e610157addd16a09ed41b95fcd11bc4c9eb2d3b8d2f7f9429591fa62f626155785ab0c682a58f39209b5649917ccb4c75de7a90baa253535482bf1669f4f3d00967d1c91fe827206b88db0648c00dcdad70554fd55da9914354400f610fee91ef6ab65a397e711d265ee9b627cd7dde1747b4c4332109c68e72f9f39624af228d5f6e209125fe919cc1f1f38fa8800bf81a3fd677d31cf5eebbc44c43361b67d791cb0594cb8e644cab2743c2163cf7c0c5f35f191ffbcccabf1ea51c51d6f42c33f25a7841696405312067d4f2a2ce4c0f8d0c322c950208a690ac56d8a7e6925b084a6ba32d6e93118c2250a935911bd747bc8554953998b97414b21918dbaad25ee81e6c4f0a6cf99e5fbbacb2bdf0890458bff79ef6c9621029c9fd13ae551b1b22972c7f3eea3b8fbc822700c11c03db1e08c648c62c2a34362b31d9b3c342c66b447ec915689f94fc38f35d51aeaaf1e547b4345f01d8a1b7c7ddc178b10e927948fe53734fe5760160ff916053976775e5cab042ad7b5b7bf5db3b6c4fa89306e6067a47845e1ccc7f4eb3ad0d53764f9dbf9134776ddedcfd6257dc2b9a674e6898d23885da54a07a9c5b45334c7362be850bfbcc1ef249072d3f3da6a3660dde7d880a64c2a02d727a64bacac381dd8facd3a3ec5ba77dcdc3a24057d165c451df45d11fee4dc12dcec2d2852b71acf494948e8eb0a5dfbc3102927e8bb837b2a704acfd2b9c305eae4c2d753b4dfe04e042cc46a3a18a441c4b035d3bc289474f31f8c61cb5847b6e4518a2d002ed3b247f19dc3e2feacd25d592ebfc14a76300a34b50e25edcccd6d93faadd35e8d5f3155915be9877f0fb8947417ce315e57ac715b0a07119b530c3608c85d94f5a2dae238d496bb6d3aa27e1978f2b46cc8d03ffae9ff8825ec154e2ea7d4dd6cbea33b4cbeeaeb7bfb367410227883bd9b04d41d5cd00977b43fd59394cd815c46f6457713b79b29d5c313de3cbf4f1dbbacd4615026b773f8deb7e00a826477143cf27da07dbcf8c51f85a72716d3795876f7964ff4e2bcec09e90a8b5f425c30b8e77cef0361ced386e4849d9d0d050145c7cab99718fb155d6a115a30254eb4002758445d59a0c4c2509e628a56f423d3ff3daba79cda183ebde959b8158f2d4239d43d3eedb73c36ef79ad4b183034a352076072d7bc56164cae3c0ca7981dbc6c5afa3b0dc3dbf97241608dcfe4aa41a00c8389ddb72d10ed2b99a8ed9f02a9bbdef4a9cacb5736f48f7bbee6d45e2876c4c07bafa919b719676b1ab841f276b773cf5599c3c7be621c0f22b06e6cddee7dee51ec622948f820dcb6d46787fb00bc6acf31af2351e4a45ffdf27c40529add7c8bde2885fd4ac88b535ab4dd48678a7211ae39e42a10b24c834150c2b89878860eb3d11ca3ebe9feade6ab3434a179f09406a965fa43e832c468487a4d1f7446d33485356c6b3b785a4471ec49c1d4e193db6364831fb1721821543dc26534f84c1062eb2074376edb15b389563ee547fa90c887ec92d07a03797a386d816876b03eef2266046ee413d217bff8716543a74e8d8e1d804190425a74bbedc86e25204f4329000498d626e034bafe8dab9ca399794f3d021df8166ad34e83b8646b9e943f86cea22e9c0a762c4d541ace1c676cf944371b1750ee0d6901ac2ab032899743ac0428a2aa5bda97acee23f71bff6c3145b76f5085ae8d6dd4cf03419e3f700e6663da4620e76684af34c6d4001169e1703725b6fad9c4c2057ec5450dc1d7c1b33a287cf8b7066598d3eecd19bf270d0a68fd7a362fbc46a63ed34c51e9a6c9b0076f74dc43e6ee43e47015f9ef5833e7c9315ac4322613509b555e2d558c7320db5fa98d0a7b8b6eeac788ca73c0082d1614b8bd326b84b096153f0a81b3bc8e7070f2312b2c72cf899931b2a255872ae070155bcef8260a024c19cf67afbc6edbda10b8bd122752de9bc7076ee4ff02e6adf6d5cb14fcd1e8d3098fd95d367d3752a3d21c5489df0f623333d57905227a76aae338f9c7c986be4a199591770f9675fe8839f818c4aabae7b100a330cd49b27ee28a366ef2e01b5a9527783d620cf0da5a332f3c838edb24c4f8ae057eef75160b9fcaaade3d2f881ea392ba1da306b4d3761809e4b48ddbe1c67fd4bf440215c18035a04a0864bfdab00a9e742dcb63df7f24eb2aab2ad026d762aee6d36b26a26791a240d81af1304cf1f1a9a88efde1e019f9f6811ed67c3e8ecbc9bf51b27be5dac7eb4b32f05c7238752f55db20c72fe3019fb76f2a435e2e83625dc0885868f5add176fccf315b210c0f5aae61199cda246f9d44dea174433cfe33730510bc37a2bdaa09ae20f7de543fd5dc74cc80112319504cfc5f8a7bbd71c83d2645186ee2466e107c181798cce89f7913abf6cb0b807085c0aa9ff41209659007b8e1228539406221a7976e79f754400fcf2c6c6c4be00b2b7a3fa3cdde6a7f31f130ab61109c713f50941690395c7a353729d5e0ebf1bb2a527f141f2c3640d9d91b2c9a541ec5b7ccc029deda29a3d860853d427081467384125605921d800a7778b890d11b88490edffad00a15e97eb550dd7984dc8ba59624638f328cf2acb248c52a6272c7d88f80a114f6ebda14adfabcac9cdb638a4d3d3209269e729ad66108a238025c435c17d7ed310c8bee9291e9f58ee71228b00406a4293ef262987d862514ad83f2e45361160f4cade35cc243157b7c31d027220459c6c7a276130a77b1c8d6c4c52a1cb85ec4579be8d6f509b2ea93629cf590f0947caaf25c90033987eda9ee3284039d8aa21b59978ece0868fb954b9460453f7bfc08971a3ca5abf65a87524e80e6f5542e86160c7dff057304d8c3adfd9c4b91dab9620dbc5ece356a4c3c2b4e63bad93c8ac24d78db9b985a704bed223339956cdfda70aad88bf6736e88512f9edd1444dc7e5008ee51727d56d7500bead392a154a53ccfe472cfb2273f24f8d0afe96bcec094d57fcae33a53e9668351b37a8847177db54f779d3c21321fb5ca248908bafd309556442b2c170bba9501187f9430cd017d14d8905484d9009e51bd451ca5887a8070a5a8ca57f5d19b640b4f5adbd04e2923953265b55f00565cb1ed67aff5bbae6807a9e11fa75fbb643604f63ccd6cf9e445179e9e6649e401cf8331d5d4648d91b51996fa9df5b4a6d87a9428b8c5eaaccc2e6b45e64b85c329b968bcc85e6baf6a5212e3056cfe60a6e98be41b15079a15f2c5964d0af2466dcacf5a221dd38a53dcbf8e4aa781b882c71dd8e53879b558a543b38079294fe474a0979560f0247e506919fed697d332e3d54818c5d1e3bfb76ace22fecf627345552bbef4d53f1f12fd4bf0b1749e79ee3d505440a59142a9659f5fe80c7c41d12cc41e8177a1908fbeb81d12d0d9ea950c099bb76ca3db56db216a3d915307d3f08f1ea4703913aab53ffeef65906b62e29b31f8097c5273ddd791b56401059c9ce3c449d74a3454c10974e4226124df6386ac192d3960ebba54c177019010805748dc922f8f715634b0c06fbe802a17894c2995d5b4b535278363ae560517ed6485864957cd92971be2ba6293b7a9c7fbed309624c6adf00398b2ae9baeff451de24c356a5a9f4e5ad1b69e037ef2c57588ecf1c66bf15c2560c588d084e870f01bd2531f62ffa6a09bede3ec526efeb007cfbc4df94d9c128d73dc88f4c16424e18cd90a0dcabf06b842009767ca535800fa996df757ad51b5d62601c9296abf1f4862b633ed4d2a41e289604eaeffff9d1113ee1dbce1f6accf983e7a1049fa132a45402021049df62cb7cc156098f40918f69b98db35aa3ccb2d129196a0e57b9a4259bf932e66545f29598cd5a6dbce8e184bb5c5293864fa472f431ffaf8f9876514b850ccd63f32ab1000403268808170ec0c78bd67c78451a9e9cfaa14c3a447a97b4c3db22a3da434e556584491add5a9189347055b2cb11fbddb6a3a4d695e2de996e3af35077c613c7c3f3373b01e61205d25bb7d87ffcaf4ffc5ae400a318516fd206950873fda1928fb2099f814e8db7088b869a7a91036d00865ac43a022cd9a2e08bd6de08f998b3ff89166c811a50410afa8a79643dd9d41ed556e333b5b03697ad16cfb80780212ac8654d90b4a237235e3236d6daa5aa253968efa4093b0b72b6eed16100bed6e4d749adaa4b86a85907fd92de36a56de0aa8a7b9d51a3800cbf23e440dfa4be89c00321f786872d598db897f5530c4e062c6c7a52fcc9a41c96e2ef716c7220341f94fd6d3630b7a426e8a54cdd91c62c85f7898ba6c820c1c16db680d094d5760c2424d95d92f5b0cd3abd770368b102c76d333f2e7a3eec9ee7799940289b16ada80f97ff4343c5b3b2b3323cc1f11d0f6949fc43f890cc6ea4b6c127fc3316a332e05e37de07e278ac262d5147fc09a6d01bdf7b73f114046481cb48799a8c6167e69b25c07c444b79d221787df97ab50063250a1585f3f005637881040a126d50d72c14070358365f8726349c13ee23ba0f8d14060967976d80b6b1b953bc05fcbd9c820aa0aaa52b4d9b33f4c5034a014b2ba40c4b3910371a39239a26222a2d97a95d1680f3e24d7c70a111fda4d4e568a6bd69c4faa3e62783a8b0e5c3f1d2b2dab1a2ed5e30c593c651100efc442cb531eba8face41ee05dbfb39488f20bba31b49f7bd534e5a8e20e14bf3cce68980e0455fe66f16f56b266de34d7330575e5f3dd5844eea833778a690ea69733b3df907d35f6997ceb0f50206a3e7379d6d8763fdd2fdfb790d8bca40c26ef84e2a9f78bc3f4dbac00c595c8bba2a025dccd18f1dbd0d6e6944e5f221840dbf5c53e378c75022046e68736db7645b7d42a9b69f49b6b3651413dadb50a34b32903161ff59468a72951a3e7a54727fa90ea3f31b97ee670b963abc1f7c5d7b0bb34b47f445c35a036fca2708077e9aa465eb7338470121400e03d506db55f0ba8b177908908363018f1eb170010c4c3cf387d492052742abcc6811b72b4649e1bd1b5fb4748c61ca28c97c865dfcc483d3c75c1940dc4a9f0ceb5f99dad76c7e00b79c6a80a80884bb40224aa0202710df7089c01d86a985c9f190dcdff9d0aecae0ccaa7e5fdd30bdfeded888a06c5f0e0eaaed1a44c5bd7f00dd56e766d02061dd257286913d55aa1e3dd596ecd08a2d79950fb61c24d5b602f02589a70f86b1b0ca58d1c4c3b976c4ffbb03c7cc2d3da4be0b05f121a7b34010dd9b85dc7e59e3d35411e2b0a9d290edeeffc84c149926fdafd2f7efc7fd0082d165712cb84bce8b45e6fbf49dc393cc496bd13c9b564f07f39e5423742cbb5da3534689dbeaa91cba9a6027c04a815389bd62350808f4f643e88aeb734c439274a1de83521c166c45202fac51b97fc4b33f422bb1f37da0a91efdf5282a2e76492fe3f5e6d394bf00ebbcf1730247535945f87f3e035c4e3998d4edb8e89b408f7e57a889d97d3f4f37242ebc064514434a75e2699e46e72bd379b42a3ee66508767ff63dccbc38a19b5e1f9912ffb7b5d86a630eb4ad21337cd6419fad45027a8883c45b052554211f0067cc3fb6351588dec0a678c5f4d7911591a39067e8f53a916f63117dfa457685cf4b2c0d1f92f8e55ebf19462ab0bb60a4e06724e727dcbc39da9135f295bdbe8d440ab962bf4d2fee5fd7855c10058af776b290455c2128363ad95ddbd982bd997bc9a4582fbc259f5376fc4d6b285cf4e9c942a1cff0ea4cf50bff726c3a16bd1978f74ff047129b29fe7897daf1557f4f1c317b57ca28ae1993a3b6a89841214b7698488e4db61f91fb1b717a4a5145e7eab2b147eccc9385b175c9b0e6ceeccf4a4aac3206dc8f346ea308f0f62ba4634edff07229bc16d46b6296f2336974c35c91d65dfc2469f3e22566ef6d0bce418e590c10a984c18fbb0adf508a0e937e7352ae3f16a176998e5e18d9a6cdc51a1e5bbc559adfbae3c4bb8a82b92d75f2c5a5d6ccaaaaf9dc868a4e692a8663f14af6063a6d19333020cfd8dbb3cf8218ac4b79f7c0f5556d8d4b5a40e77be2c66f8f2d570cb38a807f827c8a39a1689b42e2d8fc7df3aa5163044cc9b925efc9861caf80627e637ca1cc138b4a12b3d3716b8abfdae27adee7ce3eafb2c869dedcefc4c526e50ff104b8e29ea26c1f3ce20cd9c96926d50414a0dc3c63a63c51415156f99e70dc49f5f0b15bbe987c28ddae1692846b7631a8ec9637fa75d03ba22ae3cb4a3816d9bc10e109654aac1a7802e76d413a4cbe8f59f6aae4cf694620b825331c38f6246ef19d27012a6e0482c05ac8ee9021d0b0fcd22869142b5b2e4f67bfa30610eff61792ce3f4e0f0174fc7f8d65647def1a6d2b972eb5432d9183535543b0a18ed2742bac5d1c95c46d23311e74362df2630206dc4bbe8b4bf4d19f157c35a40a30644a1b0ae04acdb58d1fd4b7e6ec9fa43a78571f6ad8c0adaf6fd47c8050d9403a278b28234503dcf67d7e532c7c6e0016c8a25432a02308183db689c3271e41caa7c1a253d104587ce612675aaf9cdc75418765d7cb8bba4b872f0ea4c59b3c80461409ba2b492f745675fc525604628f62437c61b9845c28e432c69fb6a19c99ca8528a3b0d16761f4ece80127b7a55b5f0986a1ff1a5d99465f183b25ef2384645fffb0bf614ecfabb500b9c1c4db3c57e4fe6da91304e8c72c2540007cf11d7e76aa3a758dbf72dfc30637c318e2365bfda5e7b03267c8ed92ba2b124f78372f860c752d73bfd01fd468dfe15670982f1a0a8dd9f1a5c92622b3673979f8e93defc29a9ad2d1f7930b690009b9ee1fd1563c0cbc0fecb74b7cf74587f02dbd2d5c35a9fd1588772cc2ce05575de3843a335f9cf467a0304935da6669e25ed2216d68047c5fcd06a0afe816f27464cf82317dbedaa774b0499bdb319108a4e018a3c3d833d218b02fe5ed8e70c0a2df754fad8a165560b7259f8198654b8c20718fa430bcf122f80aae5271e2df8bd8f58b83f1510a551feb177b0e3c9098bd90a31f18f818cdbf6c677d83965f80cf24c2b8eeac6ba3ec31579c09e250fb3c8e3b89fe33f36b446bfb8f0ec0c9ce49ad3a290a46329e59cc90456a7f804e45dd476bbdc6468b8203e29cf795dd8e7662623bc2e2af0ea3897ec7e0aa5bec7e17b100a466b96fdfaf78b174a6d66f21e8aba2d0f8b0abb222542cca86882faa5e182448cda3d90486d888811f874294a603fd211fbe073a4422e92bf22b2fc056f2a1fb09def6546f6f59a8e8b855e8048161dde91db034c35047810bc5d0b39a2d931bb553f477fe767cfceb59baf83ae95b9b440fe76819c08b9eba88f8786994d1f00d4e95bacbabcfa4d3e2a85d772168439bc1e595ad0f7406cc076b37bbce9d24d022be78d84d971f79e30a134b9228c2a14ede3bef96915caaf8517a8bf3b608f13f512182ccb9168dca99d7aa84f9c749c866facaf3362abeb4229f14074dc1b03e1a72455be8a8c48370ea9d9b44f8cfa4df8c288144a0ad88b6a93c52cb4d2ce9023b3b44dcb0124a93517cc429fea114b5cb0e54c78da2b8be7e61d56c63014275bcf53fde1e3ab15b49a8e4c332e8a7b369df9cb6a805d7007e9263ca8df1be6082648407f5e829340a5405c19a456b3e6f78fb1db1b988d8e83d75ff383ad5d37f4ac641734034051a6a6a5c6d706f208d92b4130175312937708a89058d6daaef9ead86a1b53db8288d79d984c270a796e8cdeda816b941fafc4e356fdc117cda4f12e698bb014b9525e12f1ede7542888049d02452d7458d408944346d0aee06f54f0718533216da97d0844179a397ef724b1150ab4e968290f539dbcc2ac20923116f5377ba4f4a8b57375136987e9de7323e34d8d0dfae3de4c1d75b6a9dfda44c86fd9eb9ca50e4e5fbe5c8e99c8b28e0cb56f37eb861d9d0789c7db67f11d2469e38ce27995e7bbe0127c3101dd7d51ec3d543902184be8bc0af7da3d01f78f83a5fbe8430c6b70e51ab0db8ef55f847c6cceca5aef5fa066a0945bc7b16b44db15ca2a8b590c90a7764bfc5c583644662f496dd0dcff41dae08d52a49ce0dbda91c2b615d60bf4f5ea482993486c1a000a121c3b5c749577d54cdd6f689e3a673cf8e0ecb4457bf0f9b231084953012c9196fdbfebb78203733d6ea26d43ad1327575e96fbc8e5861d47f800fa73fc014987ce7206130bf24cfcee1da5a7f77b12ebacc973e4ae5968708d8db9f1fe8497678ca0446b00a530b2dddde4e13ab2c1dcdfe3a580beec5bb13d869933db2abca1a72d26dc6b91d02406ca676c905b214378753413a62dc231d43d13838a0e3b9373fb91707a5958584133e3cafa077ba3beda9202c64fc2c0542e2a18168ddf460eb0d760e4e6d8f0f41b1a2bd36f3d70b9c51fffbc755dd59f0b33824d1758f2f643edb3fb01bc4736e378a42e1a854e0f6d339360bcc3ed2c61a9bb9d269dd807c6ebc83a9abf18a9a6dea1987ff71901669c490585925d9aa3e23aa92a1480f808fa58b51217f250e2e505a739b10e52e302dccab7c4f1481d0f61bfc1608739eb999fb45be08474c9f93dd9494a9b49ec3bea47fc301d7ad3b1e0d9345bfeec71b09c2c98f609d8d7f3a4c3ad350ef6c84b2b42314797bb52be893981ebe1f2c60d4415f222e1e9ae72026a659a13819fcfe3f5de7366e09736b430193f09254ffbd6b22e90bc12917c37693748d16c5c11b04ba96ef5ab772a78b69d58dab0693e96f80cadbebeec672728df7514c522b61606b734a812e7d1108be51fc9a1a315ab0b0a6ba197bea8d93de9548f6899b7571e700a8401af18afd1171a7690a074314140f677a6fcea10695423a4f14fae201486a33b64ff89d699bbcff0b9ff106fffb80ae266d57a41187aa13045afd2ea0d6b0ca0a67fbecf03db9e427514e3e67290f27b1e85634ae06eceeab24c9058542f30f2c86467cc222afcabe8442845da830d898b10aac338de2f9d9bb912da531505755b5180436c34e494bb710bd1d89728357861df715e5178b0f97c011265e0f10d1e0633a9788433e7129078a8e53f0b967b2571e18b552f0802425d66e670278fd34a9650cf17e9f03b0f9653742ee4405f1f278c001826be25aeac8bebd51a04e8971155171acf5a96d805bc0b6f42171ce5cdbe913ed9337fc4829d297d188251b7da3da0429f07f25cbc799a3b3c58fc859900b54f9a7257aa1629769646f8faccd9ed9d13d312cc8212a5298a281c5efd893cf94018610aeb77ee65f5294a3596e0c32e177241c5eb05ca25ace8c8e633205b147cba1f77fb6b0d6d7d98e8b84d40f72b0ce73249fca8d5ea7ed86c6ed74832cd41fff01caba43eaf19bc29bc65432639c6dc4756cdb98f8f4e923e9aa41063ae28cf8db23f5fc2772eac30076d0192b642599321abb754cf833158f699a1260a1abc5bdf0b8c81268aab7a8b67ac5db6b535143696b59aa6f4a4096afee208e6840a282425a7fb7e33d51df6f456da79b2848aa7665adbd3c04992ca9d2cc83bca83cb04ef33f86d0f2a28168f45d1ce31017eb2435e980fb84db012f1e3b6af61ccddb1fc7cd4c116a0897b2f1a2c656a4b2ef5d6ca06004a1978af3b74a777d12e88e74d2fc51640c8ae756e7ea31bd43a4dd20cc67c949e0208b95ee6a1a0791a5714471236b24a44198af8f8b061c87d919e5d0c74952fc5b091856290bb933c5e22cd21e35b1b8a5968a402321762ee0eac57adfe0ee55bb27e5b48b1fb738ae4218ae321adf902893b52a8bedd3e234b9ed58dd426c80add9252ce8ee6f6c718fc7f16561ed98faacc4e3997dd8d483b834c7f16ba62da184af12c7079c9a0098090db39e9e2cc540ce246a422cae2db6fa730d05d65ba45b81e3b1151ee52aca63ba7b080cf66efd2e83ea661a3192653c405e14e6550eaf97c40c60056c69d5f7c7536f60323836624358ddb48cf91dac04306d844082ed7b153225c2f92785982b897ee4388acf74790b669cb6323f6b8b75ea1f2bf59d2276d72d865a2abd50937384eee82426bdaae515100a6b6d849f83b4b9c037388124a4c5b34a970aedda2f2f30806a041c78ea548ef8eb9289ef628260bed0bd63cfd9df21463c182e45c226174a6224a1209140bea58b6949029465bc6c485ccce6442a5607e484c116499939e03abd51543e26d74e02d83cd6ee9a0f4b8483c6cf2934907b0ee04d34f416c76a22c0cf951e4361f1692cec30084f27b83cc31285544da3c8c889e22f761bce9410aaad742232a170c8791f0f9a958fe263ebc5d675c690f754d26ea5a9afe7f06f7cf41acc5c7f088510b545d0b73e5bd4a165f69440905871a7f2e1244558e6664023a5be950654d4c56f79b517c105e6390f519fe0c6affff644ec332141ea398349aeb703156346ae0570faa75b0b76519f8709496eb009c794755759e27aad2c5588198861a24ed65a5bb79a7335a17c77526e10ec5a17b0b2049a269279050f8b16b083a2ed1f628b350d68753c21ef276c698ff2161df230bddd247336bb32cc9e3215744a68adbc7e6a2fe9d9ef4334022e5844b0558f5018a3e25bb048c166cbd38ad73d2bee94656db3f8ae92a1bd681470959a417a8f5c4fe0ecf18f6159414d383e7369a9613bb5ebc453e87f5c563231d41f51f9cc241ce6e6474691a76d31d76252f30335f780dc415e7167f6e98608d71e4c0e1be88123e0e383645cf72badd5521d6f8b4603fd64747ba74ff443d5cbc09ebb66f4c09b73b325089eaefea4bda80dd2c0f93b0c3829f2e2dce0456ea1870c748c40e1da5bbcf2e955c7861ad5444e50d70bd8d41fdadab25872c3f88764a416f7d82026ca6bf4b20abd83f2c6da6ccd84af9190e35364abc05338eaacd8694b5b3687e399076715790a6d11e97e08843e2a34b9c651ffab3e184ecbc017c03ac9eebc2e8881e613a47d7edd9c9ea266247d65ca050cdb4d41dac4b527597af2ab270fa66fdb93b604586000e3c308a84854e6d831345c7f244f17a5b0d6dd1145f8339a51929c1ff4b91df96c7a997d5d9e8a20aa6d2235355635dc549f4f3147f8c34099db2b4bb9c57b047dd18e29c29c4dd539a633b4cc7a01b958dfab5d573deb223f8b9490656dd7d240ed630031cfa391b64fc9e2f2bbedbf59768afb15ac8505f90e5132f1f38f6b244601997f167da6343b817a86e96549155dd17e45871acd93db63b3a8f504ac4541a89cdb8571688c8fad13bb9ae37b1d7a50e11e7a60633ecc73f7b1e641cf13a02da36a6407d93cc06faef47eb91260d6774a5380f281787f127c289ca0bf4aec80d133bc64f074c2f227f5d444e73fe759b837220f93e90f6c452983a57ab7bc62067e205c1e32853c0bd9c7025d3f012c061925f81d82184149d33a7954de08fa3651fac0c8c6f3d5cd0bb4e8521a88787b88909eaf934cf5247afd390429a44c28bce62c1daf337d0ae8338487b9ec79af02217eaabf1ebcd7153f23efc0847a339c340a1df7cb8a4d0861be7ac0323581c317b748044cb5e657760cac0c9c7eefeb1bf76de45e82f8a98b8ac5fb03c99c8de87019d0dcc3799e851b3cc3fe21e93ea097b4f339e868e13e073404b8463c41e89eb126cbdc50b6fba1448be269181d37937c4ad44e3d267a1be356e84462a32c17dca943a3d95879ba9b57977e1c1c4c824b19fb318f458ab857e9f94712d40ab0fbe1c771af7570e9b7ba5c2681b89b2807fb5207275198ef72f756147bbcc8f5220cf0ca0260e4c0f5a6f73ac6c2feb3704334d6b92856bf5c47f1d163011993e964a2764568ad540502fa56638275549522b10cef98c1bb828efef3b87365a6a7120d7f46e1d699b2f4162cd8b8b85b3e999343a9aef7b9c983479414bbf2c1e2a9cd54ef332b2fc3af2f06a244af3a2600e10d2bbdfad59f8eff4987b7e607f0668034c9b28c954479bf0eacadc0eb5492cffe9403b186c787edbe6032d0b939fde5b9b616ab47f98dee089249f89bb046e02ef394811c89a6ed50c0fc0d94c4d039ffbba78d337146ce501d68f5f3920ef644fe7b310f919a27e5f7876db3eab481f7f9ff6ee282479c8583efc1dbdef8343b5b6cebe81c4626a3266f9f469e470a9460d6ed3f4480975ca3b1a47fe5ebb3e31b6863c263af0b0e1d899e0abf9ec85efdb85c9a9360027cee9f28dff221166010e8071d6b3a4dc16e01ab04c23654204243d6cd126577acb013aa86819c8ddffb25eef98f4c67a893cf279dd8e1314f1843d0ef7661f93486fb9ae11985b896c995697606ebe3be773bece02ba8e4f93c5347ffb5b6a29bc17e97c2865ac204eab6195a2f61d6408deef196a516e3a05c88eb8164bb76f1677d2d5558c1cc22ddcecfe99c5725dd8923d6cbb41bdb5a969e53ac2a5cab1804a08b2637656f94f09d2919ac9971bc186a5ac0353a928c74300504fe9f40649fcd24a08404d6cf0ecd8a576d339df31b7907386953de45976a98fdbed7ec68439d7d131cb8e99462c03f17453f70fb554861e0efd48b51b55e2ee4f5c864686db5a6f0b1f1d674028e5afa7f19a48e1a02a2b55dc28609892b819da499f7680934112526a8a29d94b0fecaac254ceb6c2d42a0286b6b3dd289e2702a7b1234f8ab6cacaadd44bfdd25a953d77d0242a37f0dc42c3ff990ae6b24726cd15b0f4afa766336cc431d21e65ef401167e8757daf1d17d4c7afe2be292bee650a5b9d46f14b85574952709c5888f684e4906f1fd145d85a5c8de30dc9a4f827b6997ea5f274988013427dd2dd218262a7464e62cdf2da1d4a090f1a9e085d60d709cb3fd886c7a2217ec7ae161303c2aad5219c6dc1ee51d104b7b6df9a01d6ecb0a246b156739d05da106c4a0c80fc5afe0f915b253f8617ebc792b318353421c9b579d9fe6997a5ca779e26d329f7dd1eb7ae014f680def06bf6c3cdd5063f06703166f42ce7b7930fc69db8275896cc5802c53a92244ad2633f5bbea1a5db0f12cf43f3c19b799de0328aad389ef0fcf5d8b207f1ed0434b27600fbc6e4119e58d76497e49030d946bdbaf7995d60960907154a6635304bf4149f3e63d4d314e7a19afc68016811f2fd077df19889baac6ff80066e6057e542efa3598a6bc358409d4d0a067249c37cf46b48a88a3b63cbb81f251d59582e7016f82fe12ae034d14de13333dd5344df031348d5aa164756d5047e05fdb22e14a83162806ec9e3d500f6ecc8bea8c58b5aa09b9cfb45592b5efc85ab17b4826663e5c00093a847656d5ef657d056908ec04d59160238c2db66dc8b4e5d8f00ac3beb21a331e43b7c102e2d13f03dafd6d0dcd681d19f7a987ad46c2cd09afc2425fce2f10a025cd38c18bc6546857cc684b2b6f87b86c6d2c9c4317cfc82d0a545e5e4e48166bceea21aab71d5e813d2f8ff38e7a60feadb7e274907eb185cbc336647d605e6dac7792fa31b9b3c615f5a2d025882599d91b0897635fe77611aaadcb38aff9207ee8ebcc9f6a991e49fafe07834fbb71a2203e7f7fa0c8625268b56b2dd7cb86159c6d3da713f2ff7ed1f23e2441b18d4627896acf07271cf287294db0e8c71796c4189656c6c1d07c54ab4966f49a73468febe693ae7014efabede17e6aa8c41d50f478982aa518d190e222579a6f3d926392ba80f3fe46aa662aa4b0c3285ce3a77162fb3d40c9bcdab43368e8d4a36e2efddf55e36f5a6110e0dc10685509ac7a56d1de74e9c2d13c65c00e9d4f261b614ab867d0eff41c86a619c3438cbce1fcdc013a1cbe7080024e07ce01013f4324304b459404c73a5c15a251b32f93a6375b97e7bf19adb34e8e6a8faa3f3f0cef8dc6c9de8311d7a9f6b4c3e9c2ba18e425a32e0b83bb7c894d9a6260ddfac90b1ba513266838b11c159c28636c5093b47d5885931fc31e71033ddaa2e3b9dd41ef1b756363f46f602e8af2199756095b94753581e8d63abb45025b03d42553988c0cb6195c3da48940216dd9ea68e0952ad569c733af312ec345e2b18c09ca0aacc91b4e50f759b13a6a441ff27186f44d760e761546873befea41f98b77b2564dc919cca876553c9c6e6bc4562e0c8055187595de6c49005ac867008b6b72b68f12b64884733e2783b315f746d842fd66e34cb2b96d766e386b1a1d5a46cb9594f4c1967a73afd864202d1cfca6303a5361cb0087bfd1a147939ba4c50755f87c215cfc5d525da6badc43c825a12ce89b2b227e6cdc42e9db1b444a959d27abcb667376052429c5578cfdcb21c9a2f7940dce0345c09511146ffcfb42c91f6090aca86d9f777e100bf212928177865c3634351e36da1da5ab9c1445cc8230c5a81ae6d2f1af823cf3b21c199cefbbd94caab7fa75a938da415658168c8951ae3876220596e8c757721306709280ff1bf04e0326395cc09e1eb3756f324f998afd6aaaee8169b0b054eba66af8ccb016f6133886f58654772b9e7f942486ca35912cb0ef9f33e5884fc348cb21a5d731498ed13bd17143df3598d61d4aad53b2bcbdc09825081f25c7294ea6c94a047e6491c3b175193469ff95f34e6497e71aa5523cf6cfbf8117b7207045fec3d7f8d8b80272c802ab8a0a75262bf57899bc6827d70b211c44d3b800f231cb81ccf2d92927a0eb0e77100d64c622152774edd5c404d9ca270558425709cc3679035922545b30ecdb67afe0c8f0c91f374d841463c96e20a1578be797b8cd46ba31ab436f6b8a7ca9fde57cd892c2dffbf528711b6937533a17c006e6f85adfa3e6a56171bf8c74fef5cc8321242f49a159fa0f6acc6eb1eb8fc6c3bce2c61c7cd0372dfa3d491288d3c7deed364a5dca5090cd7f3125febd496ab07cc007b70d7200d1112d31487115d1319a2e3619538bab13d94c3422181a5f2efa3a57d3bfe910d6702dc9bc920eacbf4b58c85d09bf0c00ac8262ac95d411af1e3d6161c2d6d49c03559304a5542688d8a40e6cf07bcd6bd32affc826316af57af7786723782db9eb83009a3ccbe7d2cfc10bfc1b24f3a3d09c80d5f4b40e159c095ce74f676b1818bd646271bd41db297e1e3ec63898c4cfc7b2255e1b2bd0b366468cd4da8b10f3f0559041a6c581e56949b73843095151dd99d9670f1c7ae4087e4dee6734c5091aca4c978b4291fce29e7ebae5449a06f956e9e2348b751a1b9a78f274b68aed78f520be7c3b467d9b4de13dfb3c97628c180c9cec3bc5d6150c503236658d72f093d9e287072ddbf7c9d917f3a81ad12f093e7d47ac7eea2515bba4b15e2409cf6d2c787b480ce24b87a7a8335f4e71420c8bc1b4b4b174b2e6095bdb9ee1b2e91b5a3c497aff0137b0e669e82cbdd6cc5aa937ce3c76b925c1413ef2ad5b8f37648fdf1691974cb3529fdd5068438864b042088a1b3683c0f3f2c7fbd11011843d91324cd37643bfe0b7f73f943e1828601f26ad457f622ca07fbd3dddc5bce2641a48ae548782b05938d228daa9fc0f12ae438797cf1bd03f2da9ebdda365cb1193d4997e9f0157e30af9169da77b0fee9e469480d827ad580a29f2e1cbe4ed0a39d1d52e1a4826ad9588eb38057d6ad7314804582d7dfe084c9a8246338fa94a13cb59ddf5c8c1925d6226420d029a30a4b869a323b1b54996c7375b301f98dedd0166f9ee85935ea1a7e45a5d1569e94a6026779f276d3e8030af18270405c503fccf46f8b7e1e4712f78717781dd07e9085f01ecf8a30e52e7176955aee840bb139d74ea85b56a7c5307da7eefa819c3f28ab854995729754a701edfbc3de7de4afc0f5d727972c41a0b59972512e785ebce5783ff2b17b4bc734862d4c56ac73ee3e785477dd3b17eb19b7a8fa1a7f74ef51e434027c07ea74d109b571b114164746dfd643ef75c5e1a93d076d15ed6267b8941eb6dab87498c09e857f85ff7cdf0870a5faabd779392a8d75c7a4a4e766757aa3399b470f522977177f0fc6946d374d942361a75a6a2b8ffc26f8851acfc82b0dd22ba02c8e9ca8b58e539f1d7a7cfd3393170b24b6ca20e79071b44333453dee77301385aab20ef4585dbc957ac48a8b1521fe8c50572233284878765f6e8025a0b65317b92d6382842ca51a629916b5ad3953d1b239b8f6559ecfad1cff05727bb09f948daf75818165718bfc9ab71019b6ff2e2d500dbaa71cde7a590dc038d17620b153029e28b2c47cb70f731333ea9002573ea243a593f5f534750c0eff5a0b30ddb622bff1423670a17c2ffa75f509055a26c8ad41a93121c7316e7d4e4c6765d1035cb6838f70c9e1abaeda1bd31e3d00326576999a861fee341c12128c72e2054578daf047ed4945faae90a884f56a84cf1d8c081d39c8751229e3bb38ab8fe1be6c3b86efef18896c24de2e827d67eff7e7fb9b23d5c4f6a6fb44d09e0248c8fbc83cc5fdbb273392568fa366d355ba6381dda8de6caea2aa0a6d35a10ce2c9d40a16ba807a7ad5d93b87434d6adceb63856768a7aeb4d4b8760cbc7f36828a6b16d944fdc1978428ade13dbbf93e6d0b03e20a622023999eb7db15554687cfc7f53ae8bace92896d9e25336547199abe3fcede31d489737e8134be1325b041004792fb51d88f33f8152af3ba73ba4f7d857620d44917d28dbc942f355f726098cd48584bf76770d098a8e817a9c523113d84676ea24ab5cb59e6123266edebd19a18aef80ad1e71189b91e6b1aac55ef52d394d75c27d0906490ba845e4f32793b7aa8cbc0d048a773665b3bcc37200b30d3c022d5fde9fbb58c92ab6f633bb56fe656704bf278483a06dc465f7e2d2639ac7066b431587c977de3d0c5418aeb82e7084d34eb0817f0d6b5dcb33162926ee8b34c7d0f1e7ff7ea21a132e0ee25a1a1f6a287c684be711a010e664de2b6489c1cbc43b8ba4f084cd46c34b140bf0cd43b7895a220bdc35aec274c2d3541ad596d550d77c0d56c40bfe86a1fe8a8728b18cafe1ac853c5f76717f2ee5c96c277a18b3e331eeb240c9c8ee17a1e588839a8f5f0b0479589d6fa0afefe3268d61dcb63047bba9aea237dc340c6add8d5fb6df416b5bd92c66519967b5642bffc8eee030107cae9b482697ffecc7b8974b709be6f6a05cca9b1b3b953d6077125d7d8257a29e98a6544ce4651892606328b26b5e0411bebd2aee10d68230a0eaed32be104d378934763b88a2a984b1e03d4f7cbff704de2946c4ecfb81bd772ba48c0fdce9366fdcbd4a4af5e858b69c9aa6c13d81fc3e1400e6bd4d0ae18d917bda749deb39a5c43a87a88e19964af787044c186e93a0331a362b4239a917c5d9aa33eba8eed14736fed8e91c8381e81e77d0ce63e198778fafb209677215091b622f90b3417d026983fd66da58000321a61fb180c361d29568cb05d8e06cae1970cd656ffdd09830f7e5aa9ffee09435ed1c50c6a4bf3c8cbf1346c58cce9e51e0437314722528494aa1723aae01a0f1aae4af7b8b22287bef3e115b81af248bcc13256d62811744fe59692ed100d547334f2ba70847bffa9b11d03ab23c22b8d4a14c7706dd169301ebd94d42cb0985dae14abacc3966518de2da75672544dee0c09fc04fae0cb3c4860bf4b6effb08f78e8f18b019f155e8f07dfeb1316c6e65d08df2dd704d54d0cd33362d3ea72ee0f9a6efbe27f6c8c69af8961e98617e016ba820ff5b4ef2a24369aded6e6f9cbd1092dd9e830146c4b07d163551172c630b23e1b1c45d58b8e78ad9af4116a4fa4878eaebb8b8c59999c4d34e3ea8dabdb6240253bb3bf7aabc2b00ba57ab95ee7af3e1018d1780e09f17efe6988b15b58cbd8d86f000df7c5b81654a26b3e486ab658580d77ccedf049a75522b200e821fd8ebd0eff5bf40a78aa8ea9fe5e30adcea22ea59de2e90b92471de6cc901a6ed3a71300fbfb422a415785180256f7ed5407a5408007151e8b5d9587058c3809838077ab16fc751760134e1b971f6cf7e4b874f6ea2b8bb2aa4afc89a00122b91318a8f05a2137eaba1eb96475c060f96a3426c6ae95ca277a112e7fd26a6dc1553e1d33fffe8cc2cbb90366065b008be8ffce1722676cffaaaa8c3e8937c525a44ec81cc58393a44030f946355b3d156ccc2a0a0e301e8d7f8985882c1e8fb68e7f592f42f62360603bdd2d01e0b574f3b7a0f7050e9d905256dc739e6891cc528ac0c2819f63490d94ced98ad91658bda172f4fffe5b48584828ac311872f5f086e09d81faa36795ef4131bdaba95997041342138ae909ec6f1802012b8c80c083ce9a23c0de58eb68e0bd57a0a7bc4305c00c20929b80be510f87cdf7000232e899fb8353004eb7748201d0a54c250b32b11f095eccfd9d1e20f3ca568be11fb1de70447981e038ebd17d7c768f62f3d905670d8f08ec4ad011197aefbb383a337ef7aa65680f5dec13563fcbc0574e0d9c2167b0ba562053b2e281fc0b5a61be6c90a7832ad049c4fb70c38c9a7fc467424a7f9d27516b6d710d2268ac25f424cf39918ad5368832a0a4589ff1cb337ea5fbd3d34d7f1305eb69a60db2a93c00c48d72d6810bcc99d3b40c4e5ecd1dd4c0b7b57191db7163a9b71f5fa915f16543b524e48b550fa4fd88cd46465507f58e2fa17f68a18887865d42985a278ea7ec4ccc07144942c74ab3dadad645e355f8ef3b2671c47e6e34fd38ad4a6eea40994824c8a0f49af8c846975ae89abeff55a2b9ab815a8897516f06d43a33e777759de8e9646412ef722449b1cafd44cc5f81978782511146d1450e3b67c1d179106b9b77fb26a0987a840c3b3e913a7525d0352be5c83a1a4cabe5757d9bc7db52dab42302ae7c7daa4ebe8cd429f09336a6d46312aebefae32857003beb4e36ca5f552380e064b9b014544fb70b9f75bc71dedf873025a4f2c5031226f4e84c6ad148c759237ac967b322844211b13241aea098242c7b5fe9619ca7112a5f8c4f19f7266085725a8ad5fcfa6810471b5dd01ec2f1f9de50e7c9dfde2ccb76a00753217ee41413047c48e0386e78cc86ce364158cac569444ce7f47690da327ab6b9c080e9fa25f76ca1a8ba7a5f191f62c89e7b5a4598293228d3e8701b3f22ca05aa59698c08953a00e5fb8dfc194f80d1ccdb71b1575f5e12294dc99adc5fbf15b0e26dab20ebee12ca607a59398360c9aad148ffc31ae321f7ac65082ed032d524b362f2d99488359f36f25d2f525da833eae2ce6126b76515a13facd94134eef014cc9003614f3d12d7b953b706d3d93d7383c6b48011bdb189cfedd4ce784fc0a866d1403fd95a42bbdee8963b7799108973440ccaf84e59aa3e1f3530b6b4039b8832041ad6492e753823f6b4889eebfc19ad4bac3d1e217eb642e67e71dcd0414181e618f63526cfb280a043e7036d6f89f46104d44b5cee7491553eaed4981dae4393a68ede8509578ab929ac3e070992714ab4ffd7ebaa68a80b42bd1ff936f1ad150ba957cb3d7081fb6f1e183516fe8080d2f4dd5a0f44a05989e676222abf626f2727e57a8c718015e4e7b1229f77d29668ed3e1e42442988bcc830ab89b36341d1af3f2c4548cc4cb70a6ea27913d518f538f3110b99e20228955c9a26935895aab27d30660cf335fce5e709b631b36b1ce000cc8bb789555c3aec21731bf72889fe8703685516f25e656d59475ae8ecbab546d9e5ad4efeab5a32fa9f5327de64308de750da19652d140df726e61b5c906277301979ff793fb8e641bb12b3845aaa4e23a2b6ffdd06e991c7521d6fb92dc990606a24c22203363605d5546bbd13db6a41cb1d8e0593dd6d32a5f97e016dc2fa3beefa9ad03a070c7a01d46f83477a6364fcb651170cf6fabc40367d84294450cc2fa08091e569dce619db4a64b6454483c9b5f1f7ea51a1815111a779ac0229e2bc864679deced1c62875b66661f439ed855be59045d6c5eb05c228337cc4a33b626743488cc72bd87798e121eb95fd94cf2a4ee4b2bc09409e4a4c7d70dec4105c266d7a26f02f8af8007780c64e7d76cc6a6330f495b9e09e154bc8f05ba78d2ceb7deb30b344ef3cf3540a582fc1bd8631ecf33c409161067d772ccad216f958d2c7e00bb04568157e9d579c49875b7d338211af32e32792d63dd727b820f88ec1c038a1bea515749629d526992d228918fe0f46d04a93b642d9bccbcff608895c9f1ab7464052e2fbea876f417425d0f26d8808cfe8f7937c69a48b122fd796f5f3cb5174988d9602bd5de9d444c8c487a365704250120d8cf09ec3f342d1ca7e6cb5476f870340ba7fc58d44f1efbe40a021e17619ee7890a9176810ab341653d880cb70205e53b8cf6818356bdbc09ede4bd842f8fbbdbc51c359dcc3dd15ee746419487cc1f43f091465a91a279cbb49654b7068792baf9ea0efaabfb421a87eab4883789a341767c30d94d490c8b37c886b4346dda114d5245625f9a72e757dea3358a0935ecb8e6d64bb3a67cc04644817f4de8714f9521d31d388f0324a196a59fc3390e9da6d1c1038ced07aebd8259fc724cc06a706fdbf06d5ec65af58c5655d5130d10d2515f6486acd0df8ebec20865cb96610515d57f50ffc794c5f4fd8b7a90e47687f644da56651ce0e3349d44f1046cba2a7b3bb46abcbd9c40d3db6978b648efb743ecda2e0c071b2866b2c95cbc7ee37f7e19ef1e1754ebfc4dbd6868691dccaccc2d6681d03b1b0346d52cef6d0d9a096c8dfdaf49f46686fa805d2cae2a3ed1f7e9ca3cbbe38125b6bfc2cb177ba54735afe03bdf4c31d6d87f478193d029d4c7c22915b25bb836fc6eee8102d27ebed5a8c0d199d8df3da94b56aff8ad759b1a144dd3f40954ac7f34e6c5ff8adaed285692780c48154c7a74a8a3b245d79a509371d240e63ac07b75d657b94db35caee7b6a9f40296e6d3c7a80fd688c6d850b58d8ceff99bdcffd96e2ab893a4c7bc82cdb208d76f0ab7957878d63b10d8ed50fd165c8bbfae393f5a7bf581243b881e3e711d3a9f2d8dfeb452488b0952cbccfcd0079f34f2f0945f52b7006e781cbe1e5489f4b211a1b6d8c44028bfdb6aa857f7fc64ac6cf9f61c0fb07510350c511834ea3074cfc581b1cad34607248965fe52b6279eb40e3432e9b1916f282704f4011c6f73e31694a9eadb262df38d810158ade4d1c4455cb039cbb9beb1450c336e379e9b2d6e9036c77d8aa5e803f4b3fc2c44574bbe60663e7de2de0ec0374dcbf2b009d9b46fe09aa6007e98743b7e71762c9254ed5d397e3cf2d4b382eee0485fb814972dcde57f29e2ff445b520487805c8161bea54552c96da00065a21ce481be9b6d99db1a4bb66ef7f2de19596a63265fdf62564199a74d00a8442d16670214e189942c2bbe0f2b07b14d65dd07f2a11c23a67dec2fd9d41b3bbb0c7b81c1eba964dbac164501a643b5b22188ecd9cf9e1ef058f8f15c1ef88028d086bb0a96d19137b0686e139424dc0f8842fc48406f859404822ef9758654c914ee6c53ebc83ba7ea1271bb9d3390d2e3df76dfb8bb895087b64c7d2613386bd9d5257b1ff2be223255538a2d38f4c6985fc15ba13616554e992e161a17951bb1e97c13f3f38ecf4e44b30e027548801ec0a6dc413cad4d6e75b81e12987d774a352607b0e04595ab67d361a56a35918d14c5f2615a34b47fb3b0a746a33f9e2541b9e297b9ac2902dc410b3c214665870b1467c6b64f525aea3052315dff37690425733c7e313dae371d097e6cfaf4f9d1333d04b8ae016de684e61faaf2e8e455f63d1ff268e67b3ec74fca33ee93b5928f5dc24ba3aec66d6b7421ad57c3b59743c32a26f69870576d829ae92384fbf61331d7ba6010aa5d45e2df329a4f415257cd0c508198cf211d23b0b0d5999361dc6fea7038f989af3c2b9f320e5d6f3b743f27a2072b6f2cb3d6850509087c98089b4aada30dd39c152a8954faf57a414c4399275c2008eadd46378b2d1aa3ac6e063a0dd8da19838c6453614d12843332722daf6ae1bde700a38ae4e914606038c7c2c2bfbcf62f2d85f85da7499531a5e696c2de561731c75ec467fdb780a6d74ebb65f5d9189de6a2e3b0ee4ebc37c4285691fec5a6153041c4ef69ed6dc1b11a8fc1acec6ea622a537e40921c5877927637e8c5049f198b9ef68e0c06aa84c0ba47c563a061226c4f47d3c103c3106c26fafa1953b9f21a43f720594e8ecb61ae67e96361566e5595cd28374e3a6d23718975546b26e239608eda706fcd1343995e0eb7af6a71c464f400457cd9575a2ed0d86603d427f974dbcc984766d74877cac4957ea246ca50c95eb95e5df0ce78f5d60c76a7f31a1351d34c4a3333a46239f60b8917521b8bec8d71efa4f19bbf488aa75626de8c148b8a025b8b5d5a2582fd4714f83c3f96540899b04e90708d44be51856902701a7d9b41ac9d9b73b5c3b2ee7ed2d677b6dfd024d7baf368f56d807403c9ff4b52270a7abe5aa703283dfe81f5146c7c77af8ec14a0055ffbf55e9a6cc33a1abc39c1c97a96cfd2c42dca044118e32281bfcecadda62e318cd47d6f36a9f36d555d62b09ce821c15a5b251350e023a34006dee117bcf40dda4a7de6684a934016b6a57d28cf216ac77603feda8adf5703e833ba753ae71c91dc44ce6789c4da1a3903f25deb035aaf1ae7f2ff8bef64789293d8b117cdc1e6e1d54edbf2a4c59c59f566a128f53d82cb236d379fb27445bff8e24f5999cf4797f974168528f4a80449f0e011fb32cbe6bef6e0aeb86b21193423ae1111a53bbcc58976f46f939689ec80edc7165125debbc13d6a02577f7d5594636ea35d4232dc4d5a12403ab56a548cf882dc3035d1482d551dcbb8785fc9c9d61aeb816c9f1d1f9c13b57c8757ee9fddbebcfb0a33fb0fb94dc20b0e489c3b74462a7a4dc9a6b5145d02edfc585c5470f2827d59e37b8577eb268bccd7bc55ec79699cec97e87ce8541a79be7deeaf652bc6ab4b64df2430eb210cf6d07763b80d28c32f4b1010f004db13aff06d41e675c6f8e865edb23142cbf35b37b9149c5f3590c96ed7ee6505b4de183f4236e87dd02fe21beae21f32c24627d222379f2ab01df67f1352b7559b6c293268a0c1dc550fbd22f85a22928c04a166a8df2565593cefa60422c7fcb7d7f18faecea54876becd9a992b55e9278eb6d18c7fd5b63d0c8af9b686b8a4a7410eeb4c741287d44f4c1b27ac007ab7da0e5467622e2ac49fdc0ff2680210bcd7eac2c6c730b222e27cf911d27c48c170a68e6485f051b40ea1155c32a303f884970bc5d481675f897f0b0a95461429fb2b3bcced689f2358de6ab4e0f465f028c94ed2d293db632f9b9718e990a4317ae68e5ce1cda7b12b7cde6d951cc685a1a6d8954623e25b1f1b6e279e6c285069e50109665b8986fb8e08aaf5d3f24b07da53828828ea303f5654154e694b822ed219e2c55d44defb843e358e4ad4837f5ea3b205ea6b0d358939f5511a9eeadd0fef025e1233d26fbd513f4784c2ed408247a0cf670c85fea19daf204569ceb6e83734071c688cf407c71a42b445bb900c546bc8611ec6df84abcb7c454261002f1436e272f8dfbb92834d1981cc1fb1308a06d920d6974d2fba8a8ae0fa51c4b1c2e5c6ecfd158329c0fd05fe1286dd9e7ce868079decb635fd8c5f390737fa24dba2ecfeb7e4fb13a4a7cce1b3dfc685d5827f9adaf2641af1944247aab9c142669d2ce82578aeadc2db9e31a79844332ddeca113197e8fcc4d66abb6862b8fc145e4844becaa36c4ea052938981f5f8281c0080c33b546337db4c7117dca0ca8ded31c48437101fba8d0228b3c6b5a5a19f96a6f06d0cba24477785715a46d40ac0bdf4eba84b09b266be5b2d4477b2eb69b6e38b410873ed8769d0320168ee3cab4988a549499c96049ca8d3e7266647d0e4e59d7a70071d7c5093041e312c9ab71758c0aeb67aaecf29713bb44f7a89e75b39ac9f643d274536dad7807da8c7208f3399ff09e0dd80629837e4c311d98c09e67c1eaddded67b63930a155a393f39141eede7334e1fe464d1f466e0705530c9e9b32383ee272ce3accef79f626fbb8cf2b7d4d5ffdcf4701501b6cf45e39fc411039a449405534ef6ddd191181bfffaa7467cb78982412403ec4e0324ad60680d7ec2a014a75d386864b83e701bda452f58b802c75fd2e495363d44fcf1adc366475862dc269d16a0a3ddcc37ed3ecfa2058bab0350f12da9269fa25bd2b20eb6ff5f6d4ff316194afa18fbf0ac897f0d30687b6b90fcff98c40e7836b1b926606ec1f5484277b11972094e89bceeb21f9bdbe37db64e2abe19f86074e4f8100fedda0c83cb020a8c27fc1a728f40b7af14516bc96504c44923c84a1586be93181aaf108f62bb30f2c2f1febc2797139a420de346215e735a02820c0124e79ea9477cecf520643e5cd1c4500f454cb62eaeba557d162bfe0b3a7403ee2fbe5c7ce936d140c034cdaaaffc196aab055c200aa5b7351b52d0799925236cd64700672e9d55a12eff0723ed6ed2a25b64fcd6d6228ff7b26f0f51431bfe23db5b175a7e216053d83c52cb3fb25ba16f5bb5a354a90ade8479ca907e643777c2326224521c661decc549ab47d0b8775437be0b17ac3d3e050b56e6524c0e2f73d5561261c7f2f15c260bc0ea6b0e5d548c5803cf37750ea5eb6a46c10987d0a2abfebe70abcab6416bf5600824b4ba93cc4983087f99c4e1df761949255d4b64dd0e053dbed6721caafb75444c47db0a64176f11e3759692f1a9908eca0c67d788946763fccccaa5a41a947ddf673aa8eb4d4be3b6623f8bc6062a1d507410541485afea3b64c36d83f95740fc7ecbdc31604cb24af8e3df11f8ce15455eb54ac71072441bc142fba45347ce62234296f7a43241e0ffd86b139f0b44f8ef3f294306f419f7115bdfe95d88515d9d75e544cdca82883eed379cdb669b2463b8e8627a88bfd24c87a8a3480614496b31529de0fe3e1a464beb1e023caa2cfb4ee350e8de1e9f76374ef792b36655df2d60d916a18643b3757fb10f4e16495676da3a586b6950caa658b9756b85c7358ae4519a7412e1bf8a025493bd70f2937d300420689967bb058cdfe352d1fb9aae6574ef4fd12cb52cf0fc5b5bba2028d6f9bffbec33797535ef820406009bba99f9eb8b99162ca27250d6ba2887e5cd197780984d76d57e6f090644c50fad23268a486d3cffe7f42d634f5d5f92ad8f4d4ea0e0008e692c212da09447c5e137b1dade38f1acb3528423843f3d9d1998d236547aefec3676cede6fd70d36d74bec2a5945be37c1147a195a4833a36c9f649e8f1667f930d22b39b8608f04d9830e4af42b56c40cb7257c279fdb77c11e91ec177c5e66faec8a2d0e2c282ebbe53d7252f1911133f0a26a911cb87299aac8b4c0fd7b7a67ff97228be0d52a28b204f77b29d14e9e08a34dacb08797dc8a51cd27c19fa43ac164fa65012b42513dc099ed02fbc5edb26cb042494722b813aa018b93cc911db70e301ea349e129cfbbcdf30d944d5a80248fe2ebe9248db96afef21a676a1c792095c22eea1e2e3437ab111b0f335ed3ba30a36a00ccd6f389a70d4f8ea6e0353b367ec651262ef414fdf65fb17f8b9d1b7081d19bedbda3212613f8bf53ba0da8028f99f42a8cf67c754e72109222e5e701f50f343b9b292fb04d95f2d4e9016534fb650fa9585d04b69b1cfe2db4805a5dce8a4627340299606c7427422e58de29e98fbe7e625837514c883f128ca9c0a7ac5d039c74555695763fcf5ccdb41581e2e8aa3a0411be91f5d89a10e39212eef11ac7adb51430d33d8af706a45f4df4d62768b55f78dab592bc1e04ef5d34a12e67eda63a2539013701bf706c8830fd4b36e4c1b6db681d152cdcab568f86867802129cf5be56930d029a073223e32236ee8cee170640e9ecf8a7cbb5b288256f43819a833f5f0f5837bab8a1eb21f6b77922dd542ef97ab715c236f2f04e06193b4d94e9123cc21f70c146c7d8770b0ed6226366fc87266b842c89b6f3c462bc7799eb143af1a9fe9c809f6a2cf23eb26e63b72e9904f3e11537d833fbc1dfed78ee1fe0606822794e77638910a79ad942135ab422c6d6ff6243419fe234b928883ceef2a212cb9cf255921fda10a2d3556335239620369c4868c78b69c2ec8eab92046c2802ef72e42232db1e7fa1bc816ccc075494bf0c3e36afbd1caa1dfb067cb7d0a7f6be8e3f3bda9c965221e1d1262e96fbb365497b1b118a705a5b28cacd884fda0cb136856448f7418f26ae1cc496712f2541b8b474ad57d20e5f806769e045a340629259c0f625acac7a7ff5a936200c137b1a1bdfc52044b9caeb116c155ad14c6fca0fa3e0e01eda494b7ac290cc4a3d58911ec65ad70002c9fd6af9b106928fe2679c546e49f518b7f49ee27d6df19457852a5dc59d8eb8b45e6a82e62238cfae90be9f3508c201debcc5e6af1dfdc536ab7d3c07a2a06300edf3169934fef9c44acccae7ae9339bff8fa41fab2b9944ad878b8a0855452e18ef1f0186e97ee90fed8ed8ac2c6327b6308e033f3b1f9f74ee742eb28d5825482f6b3617428eca2faa09ad5ac10f6de40ef680772edddd5011510358d9575cde2e23551384cec4935350570336e3a2270b1e37e58f50569e2cb7e16aff8e72e9c87e4fa2b6ce51202f4eba9a4b39127ed9c54498242b0c760c8fc0bfa82f93cc2b4301b43a6f2899b8e7032f41da5ed2917f1f759bb4cc7b97a7d244142ce9901bb8975389dbdf9e1266f76b62865a79482dc5919776788f8c7ddb9b57a42c5b9a5ccbbc41665c0e05461ee9a74d916f40c7d4cfff6f73721a96924407267f7ed830c27da4dfaa858ea91a86ec978dd5e8e16a56b1996861d08de6d75c0a245abbf153b60f9e16a6e6500498aa5450adbd7907079d5149b77ce4288803d68212701371840c2a8cce6d2631467054048b5b96a3274ebb1d18545d853e94ba72877663909bf87d90e33ccfdbccbfd35fa00727945064bf36d0aa44e98570c6d63d83b9c30e66ab26eb3cafbe44ed715d157ca48a105ffb5e9c2ce9d7cde8a1985a2ac6ff0565d8e119a1dc74282538578996352dc0a731348439c5290506475670e0484dc08c577450b57e3e37fcde31ca657076d3060c0f088d555722c966ed77f863c2d88a353021363203530de895b3749e55c5b5fad5c274630f7443ab6cd9f05aa77706c499ce4164565256061ec0531b8731dd710ad993cbe258de7e2e68b994f7b5f2850885e38c44d312507a081592f7a9701f289fb091c6fb4807cf549b58d76dc235a51e2455bd83d22ddd06a9c72b09706a07e27b8ea0619aa266f7b791164441dc4fe79ea3eb28ff12057bd80178aaa48b8ad715e44a5414803fc72f082e1480f3aff6bb668dad9b002d2f2437590e94da8ead4648116da49a1e39861034018a16d172494bfa7cc1af3cf5d0c545037f5d1aa7dc7ecaa6f82c0d4c78d035d1c5ec91fe300852c865fff04c292c80d2ea6674c153e1bff4ffeff38de07b314ba7b2ef001be9d8ab6ccdcb1d5d7d37dfc9509913165afed8bf3829f0dccaae7bca46f9baadd98fa8bfca1ea1b60e8c1109cc68106d95afe13400be1175c96bbd81d8ffdcf997723d1ee584d851e00a42da57a9717c48666606c803cee387ad16d5e8907ba1b1c11d8b2a9d01745c12ff9b3706aba6b47578f312c26955d6bd97f846d49e39fe8a41f82ea38f28a06e444d0ed2df59b6246c04d2dfeccf1533b5fd5a8b479e41f68678e432eb63aa91a1d4af3e4c8a782642a04728bcab48db6a7d3636216d7b3eb5ef025e2679f784de21797d9a000fb7d64b599f139352e8506d323edd5605563ece62ede2643bafd52ac6d81e1d961788f51cf94cb715493da001fb9b480327530c1c41a8c638af6b2a94f168f26aaaabf38180e3dd2b5b2f9f580b7ada69ef31a6f67e155d95abcb160744046ed75b89f3a80b86649196a742d196197db001c8934560e1830da9ed5983bb7e4deb81df64916d4162a15a8fd113d7ba264c1c16fc99a5f3b09a86c6bba480d0cb19cd736322dd503a3e99c07a0ffa75b890d9631c9777b50aa5dd18ce9a64ad77cf885021295b8605611971f8311ebbb1d808cfc1e32fc53147aa200d88d74f8696874ed5a23693804726a92089e45676f6fa3e4dc8f6ea0eb538e610127ef4b18819355a4a787ba9681b8de662a2b14ac38977693b5c7bad0330f900ba13a5cbf1c0d6a1e2c126d02e1d9caca8553a7a86e982537ad3a2959b6508ab8469b6c058ecd96038702c943a603e20ba814e81feed373ec4e23d7c5e726e4fb3505b73aea4784b8fba97fc9f1b1ef25d300505f7a7d5c4f6fb6dfa22f3da8b6e1ac75642d0d6fce0c3f64454fda0f631121cd844dba5109e6151b5266e9540b37c8cdacb20f210b16e617959343106a11939e3f528e662e90ef1a5e3cf938c1b06fea8a675aa08c39cb4e68d37fe7983329b186361ae10f2a73f202bae76d24022e468174c38d0df0b671e974e2c614e402f9a7fa10d8bc5ba52229eb49095e967e1d1e9f58990064509265036d69b23a5a7c57e040e95f56fe9745320f5477ba05a2f6865a29f6e429aae1ee251f14668bc932f5b5b161d487e5be31eadaf83cf23c6cc115a7c87cfb9d5edaa9ee9c9fa5ce167eca0cdd61a3060b572753db992982a5b292efe50b0e2ad861349d5092e04d4b2e57053a6b95b57098d9f8b62e5a7613978c97b193a68ffebb2838291c386b22347256ae38401e8cc061b0ebd9773f8bac2c9b1b7884bb8134ef8ad90ce1037244c335742a433c43c990046de989da26586652c47ea454ad933819ffb14155ad4bfd87e05d66ee3fd2804a1bd36a261b280e06b43727cac2d73f14b33ac82fb257d2b60db192086383f81eda6ed3bd1c88243a27489cc187c04c40c7446bba136573b6efda946e8cd092d3cc3e55ecef1b56fd1a4786012654ea96b5f8477813d505cff37845c724c90f4bfcdeee320b6544898247f29bf53d587bcbd2208d5ea25b2652a6a4131fb28d7b2cb964b77b9ee5da0b85fc25ef2e976a37679ebe06926589531faddd6d0be06ac8fc31abe7d3e4f0b109bc1cc07b0a38e9ac125ce19caaad24594e725fdd1f53b6a08e983c1f26c6b005dab4dc29266838eb8c4432037710e1bb44d4b55b29753e9e8ae3e7599e803774d433d78c2ccf546e569c1efda31ac9dce0d135542e59f53681ae7a9c0c5a5d0a985b6ff5fd1dc4b79fe5bd2da250d29ebbaf26c8dfb9965ddc6156dfd9f9c60572d9758107302dace59cbd089fb5ca27124f68a0b12f7c26bb7c31f2dd442f2a01793eb8c62dc8507a51959837cecfd4c78bb7a8e28c34f381c9b75227962ba316750c0287bc6f84ecc251fd32d724e1953e4944c29a98abb263517238b5e10383ce6626cfb1b3e4c0b61ef34607cfb3602272a766c9e1be7934ba4a79cfeb8631675679e13a827cb9002d468b5ea96d6b238d720d911a64777954864aa40e315c3b240389203b41b4b8ef13ad50feb76a2089f0004ccfb96db6552bd6e1e8c7646bb3c193e25248113864837b9044d834b7b03d6c3b10a8c09aeb404faa8a4aa017ab10faa612b27d32b7a27b04d86076add7cd4b2cd324103911425f23b0531199b710db07ba056b0c0ca0a95d3ebe625ba808d7eda61ebeb6219c7d111f796e014f8f7d94e8cd2c212d208501be5eb01364ae72e4f86046794ff8a8c5760c55adce67b51378f146a0f28cbf65c4b7fa537bf37f0d6f1507c2718de73c4aedb5a0bdb96d7e0f97f6b67d9c93b1df9c3086a506499a021eea15c7b357d9a8dc8b4d757123049ec01a48555192af89fecdfccc013719987544ba3820c6002d682cdcee630dcdf33ad489e510dfe7f2271826a771ee13a1ab0347ec754f15b67382b01281d03d0953a74cb978f814693998b60341fce8460cb5872ba17b25afc9e9f0bdd52d7dc3b08fc1290f3cb69f80ff76785013f3acdc9f3d72f49a360bf7d52f6329dc2e8760dae33777edf4ad20546d5532193f9f8562bec7d5c2543aaf459b6d1500a1773ebbc810f120bd7c249dcf984d2295941da1b313a6eda3eb5e2ba5d3d3556c2d19f619a28f64442389762d3217d2fc3a81324cca3b96ccd279cef5d1d89491b4b8adc9e6cdba9c9b5f9ab85ebea992a11487f406c1b9a3762ee2de5e4568cd79b51877b693cd3f9fa2e60b7b6c727d3a3801bf374a742e3586553ea692a18e122e5359a1c56c325480de858f14e6d91515c8c7e80c1188abbc0dad69f59736be88f413f8b6aee62165d8be75df150ef050a34be6f649dff27605f0774097a620b6be0d36d5c8ebd407e2084f940b83e398f7cbbed53b64f051242ba447428974fdec54d3ccb774144de1123d2280690af954f9814beeb1ecaf875637feb6068bf95716b64381098610c5c4451037e7714f1919d3d5960cb0b1200bdde4c5eac81e21cd8672f14c2981a7d739dfdba69ddb36cc24c556a54afece5658a4866b403a8c634c878cb77bb1b177b9fee4c545cfb32b4098b7558b361bc049f34e7dc2a2315cf6108839b2eb26b70e19d50f81ed0546f858eadb3ae14540b1f358c14aa63b98120e79da3be07afaf6bb7de2fd05dc4a91da40f745737609ad23bfb4d5036bb5017af9bb65d0dd449b29ca428b86697293b53090d8e55e4c6607212fdc37c633b2fe13e6735ceae64f354123fe9565ce998966a98dbf73f8344e2765fcff3f70c63045ea751ab5dd19ef05973f7945cd9347d258196f0201fe5a0a9725ffb77035046e5e0861f3bd1d4241864a370f91cdbfebe3fba858c05af7dd360c869a90a68ee4567d6add8e3d5e379dcfefdfe22d0205e0c1079bef9e041420dea411715f16ef854ce93e84d8998445deddf00e72c686e7810ea90bf7338801b1c9573046ff7e16ff1fb15ea364327d5bf2446b3496dd5ed89144b7254f1fccd489651f054b4f2712e6a0136c175d3b3a7a5f433a53c145f2c51796af4929a40ea6b5c725484f423fa4b9e7381ba7642fe1dac61d4a8b057ed4a97d35f1a14c73691c8895cf48eb1e97e43409dc27d963723c185e336e61d19ebaf59ef15a08b30c333f287c1d81ec07998caf0368afe2ddeefd3355ae878867019d65a4444326ad33ab31f715d6ab6a92cb53cac0f593acd62ce6a5430c7773cabda636a71e270f3e64b2725e4111d9e57f71acc5c1207c5b49e688dd7a78e0c2b7027847eea80c4a746069ea5178807accda00c70838aac43f75bf538a7d73e2338d0d731317950611aae9aa6188d86c15619839ac32c02e51006fa2ab14adfb9e0a478df7d17fde5afd95623445b1cc8e380b752b4fd0be1f04e5d5c1813511c997c03c91b82705a1a818748bf58a96fbf914851e8ca3e3235eb9a5a4de749330f46b7fa6469f8e2206cfb44f4e4f64942ed634966f366591a5cd297f10e58025d7c166c423559ee5dbe92795b0bde286e5d5cb4632a23b0f1a8ef4bc09977bf3caae0a56488c8660582c29e51677357d18071ff0242066737b918b636538bfda494ba8c1dbb2c3583db64df6f011e8fba302ef5802009ee89d4074c33cdcf9e21b3fb55ac049d768059dfd63ec26b133f783ddca46f4a9931de491fec7c4195dfddab10957028bab756b01dc28183b9b2890915e246959b79aa2138c84b63dbdc1b505c90d2ad114b9cee9d47b5ace1c903d30e4fa7f2ea57157ca4725ec68d376201d8ffa6dacfeffc97619ba86c9887b9d9b1a3067d979a3ef68d88daa42660fac2a42e04ad2a981a56405e994a88daee558b6995d8e2ba97b2d690fa41973780ac50329d75161f2a2026e4c8c52ba1c0b9c452e861a8f2a5d2b8e3590c75ce62281aae8bc2fcac63ad7f979a5cfc18ff2abd9f872161ef3d7ba21aeb585e2db5243bca305a5fa74c172d3d575f0f2f792e699e71fa89310db74d4997a906de22377b8960660d51d24c1863e3347b7d83823c2a77e07adb1b6d8bca9a18860d2d7af6ed0f75d6a2cbe40ff3eea31e9c3c342c620f56e0dc6e7262d84770f08d4340f0a0e9e7996045e78d076813a3c0f072a98e9254760414a12090737813948ef715c85eb18b7125611c617525636a0a9b3ad2b7a76cd0c0b7004c65ea01d78bc86975b79dabd5baa3cac5960eb5dde231f919647661d9945ce5fd60223c00a4ff0507c699a55bdc5b162c64a9d594a7bb043b7a3e7de3629d5eebfe379b6eaa1ad447ef497321480bb4fa66dcfa88def29a8fec7d2ec07bbd1c61e897ae674872ec1ecc09223e7782b0a40515456bb093e1cabee6cdc6a0a2c29c388b1dda887ac1f1d5a4b901635ccfdda51d8af95a1230d2eaa819751b3b7b9ee9108fb935c8794d24aeca593c2dc98fc9ddcc844b1bce75d9e69559963d17df5d3983cabced2c744313213f3fadc0b0578087b7463338174af8d9c54a3bf83d7fc708cc608a6a0d977a961b3c8b1da0b552661909ba4c323ce9b8b5bb549dcb601b18473bcfd02fdd2f9b9d2ec8f04b3240d3f55fe74f302ccbb2af2feb02a2f0982c706be3d3aa094c6c5d1658daca6200e364476722ef2926f28b36bb5553741df61bb09b8715e1372efe648d9c84694f4f68c56bf92d5768bb5d17be7fb79de4d64ce333a57ab8c39e079e8bb297847cc1daa8c49f3dca541385f35b84d351280deb9b50e394b6a9bcaf145f1d55c323732f3532ac510f432ddc84f4a9ff7b5e17faa4bc4967544f0e56c4ab7e6daeaef860d1876b6308dafe996dc312548b8b25516e61ada7cfdbf24d8f5ef28e1f99934209fa18820664614fddd8d0f53d912909abc4be3b376b0f7252ee6ca1d0189861a5e27fb28f083d31e9d4cd8adbcb7746563d187c840d26bf56c1d4cf8b506214aec2e51c157ffacd451160a6da54f0d5d60bd5d13a1d34c5de7df9c2b108edc7ac75721f26e126a23d4ef8128c93a3682897825da2a15e37455e8518f83df75db81f27f8a4368aa885f94492e5621969b8ec9fdc1615ef20d3c4e52f5dd015adfa550d08485ffe272c886327b1fb9b4c4201deab7f590be5d7b7e0c52dc629739b6adb23eaa9d52c7554743d6502f5cea917bedd1c5845944deaee13444ff89144bcbd4665ad72b5585b3bd2ffc6c9124136413910f12081be2f84b43df8f02a9e198925856289a7c7f59eb411e1c75c775e1160fa225eddfa20a5c9ab0d5140a1977bef139239eeb3b3582f40fea97d71fa68c8bd4538547aa7a84675ff570f88722835a7bf720a264734b62bec8a2bcf22d037e41bfbb2af7dc0281874e2505ca1f709a9345c96d32166c969507c0c8e71bfbe46a885530d64eebbd330606cfe4ad104dab59385a55812a93c27a2671777f3a10d0ec079f30424c3af46983ace9eb90699adb7242b98bf4102b4efebfc90d3b8ffeb7b28a6a7353c20a7d0e6d71b34e908480242035da8b540c384eb561c2aeac7ad1740760bf4be5088a6d14ee45a081dbd305e56629b20d9154f4e12b75fe28f735523734213b9c871f727562a6af44cfbb66613c3826701c9af9fcaeb1c6005c629815c45c33206b20ec4b9396ae9580e0d109584d2ef19c1100f13b67dba105bf5ef4021807be17f929c3b4e52cfdd898c92c50446b8531cd804eb7ee6ca6e2422f3be3a9df2e5ca6acd7401e78f7cc4db039091d5dad411cbe1c20e4b3956a147a0c02eca07cad27347ebafaf3948e3e0ed149b622ba2b91f5a954112f998ec10c43cce02dbe4263c81d1f9e55447b03c59a14d84ec02c39b5c2edf0c84a8900b64ff03ee4cc23026fc0d6f36d5b3e5052e09f680b97f4f6d41552b27c07869b45ba9a45f4766cb8eeab28a02f7a52ce64278af3c340aa3be66876ba27bca10f1bf05c3852451f5f9fea5887969b956731fd99c2089295758acd5e7465b54f913213e6e7002e10f6d84c5fba8864c7a278106b0375d020b8e6b27b5160244af01c8f298313fa6bd7558d67586b52ea33c434472e3caf23a23c210dd04a66cf7a98cf90d29b8975fcfb39366994b38f5d81c54574badc615c2ae2c8767a61dfe769de14383a6ae18dba5d3bdf60b9433e7dd3289449390639a9a1c18263e4b61800a41ae36100663bc7ba572fddc7761556bac7db60cebd223616497bbe14d9393930da98bf5ebb081ccdbfe15bf5ca2ca1d8160de7faa0ae4b90a63ec18448a2ed788b3f58c4872f5b5f413df4ee1c61c160b08b4274979b93ee5295ba1c0a5ab9aa0244c242cf179329772cddb927e2d52b0484db20f0fe489f67f662bbc4c2054592ef23529912a5e8030a3f6148a68c2bbb12a675a9f9e4728c5057ea8a978359ec7ceceebf3c5b1fe849ba48a09dbc99aeed4477e7122e0310cc7186341733c08e00d5b2a12f7ae1f372b1e4da74f164d8258eb69f897e00b3426c5e23d3be1d9ae03b7c31bb358f5a7bfcee628ac5de27b97e16084e83a04dc47734075a97f8f0bfa496ca941c05183f13ad617ed2014c44788e4b7b3d226be9ebd0ab40b23bbb512e3b44a26af7cedf5be73136e54fb4eac53575153f739866c6b2ca58024fd248ce47070110832a1716c3a020dd621096ab07446c316288d986321820b2e47b881d7c2f044c98dae420ffcf9d5443b9fada12b47e3bd6722a0175f6d4ea5e20d914a41d773cda4a56abf9d7b2de30cbb896c3fe12cbacaac220f1abde6d661d46f219a28d3f74ec7be1b2fa36df5af9840a86c4d923acb5693a7c6c622afe9b1d46c155cf1a4db26b584b019b99216c572f411771a161cf273c549968e35e3dd213dfe0be2430cedd8994bb9c6d2713271857962bde3aeb2509885f9e43cf1a243ad491196d86f34d208c0a8923fdb53a57a6ec10c589882d078ac942bd53feb719439e5e044b6e6f446e3d2e96c9dab78d5f922a9b5df25d0d76cbad0a31c305fb40172b1c0dd7689bfa1bc487e9d0607257ed6eaa635d3247bbdb15f8ddf9e88e9afc9d06fabaa2d6596a807a39a46077370a0957ca1ce399dee3ad3718187cee4919db935abfc5375ffda7c6be12aa3abeb272196bab597676e0457bcaf8e6b7f78c49c32fe5a1ce650e023e300bd44fe922273c4ea780d8af38fc8eca75f930e0041f7aea8ffaa64a7411a403f3ee005bb34abac94f6c36e3a76f26f8c9e907733e46aeb36583a269ba6863aa5bff056fade5cd74d70ef0e8f6524482a1cf61a2ffe1b92cbc10ec5210452fc5b79842f3891d4687adcb3586643c4fdd5a05cccd878b1ba45b1ba8b8f5cd791aa8b0941b74575d4a09a37dad1ee55df06456a8b96dac08af01f92003eeb78e3d36fe5626482c2a9bb4fd9bc2f4ecba52a673832b44120dd9df78befed1aac86dbd1043c5adf1d665242e75a8ebd3440799f7f7a71a90b6787f86d295219b5fecd87277b4d157aa341359e002c10f97bbc12e503249289895508f82b24fd10104ed598ef17fe19da126133b7614a275b427485e2827730ad8903edb3d7912019827ff41849633869a7fa7d9d921c27e844d29fc263ccb6d06e66be66cf76c4d9beffa120ddfcf61955bfdea6edc0ea86da87482bc696f022a9ac9b54bfbddd05b02feff1bc1ecb513e436cb24bfcd4a41f8f83eab0d1d7a0a949e6060178ef8e165b3f2ec2a96bbe506c95dee3cce786b0fe5cbf383411a6f71a27bdc8d4e02689e4bdd6e55998592db24efa2b3c1cfb24c2c3c4ff7228d86b79a6f7c7d4b1b032c8dd5ca67b28e79bc851d9149e17f6c4ef1616270c30ff3518685a3ba57d94efdce988c0f4e3f46b4d8414ed3a7568b807ff1f59812b917dabfb844fe3473273af18ed32d71472988e6a2fc5e74444f71746ff7bde568338a6f93f20bf7e9aab39ab96a6580fc0a7019d70e9bdcf763f775864dad9be4f25f8289981aeb58a9b0c56d58073e95c54867777430c5a919a2a31a6de6fcd0519e95e6c872c15397186030ed5a7139e5f0ac47de3c0a7af374299653cbb81b028ecd7eb5115218222d77c948bbf7377ac9779b425fa513377fd1aa243255faf29a7b02a14a4302f30476e276f7740ad2ed658eb441bcfe3e2f3c257aa56d1d7e2e6ce212432799e41f8b37c6d31eeb9dc7cf6aded8f3449165e2eb5545da278b95cd75aec6e968975c923fcf3658dec5cf4f0794d8cdc8dc5b2c8e503da7ef6bbd00f21a5eb2db87a95d0db47a2cd7e25d0a9f3c1e957fbf26d409699292552ea2e8d612d06e458f2837bee0b09473c54594d0035cc1f36f23594c08b0debb5e4426a817ff7ad39ab1fbe4f4ca5c64fde32499ec16cb6a4daf7e67566e463b906c060113a82e0274949886aa1cbef3b4b7708e6f09fed19a0088b6ea6c46d494469c3903259ad361ae93824ee0d8d0bccff10b6c3b505363400a1fba762ff3201aeb859d6efbdf421da554508c420dd1118f9cf17ac004bc8475b7a2d441676a722e0ee3c72ee92e697ac8c3690c9f4181142ad0f9227ce44a18191fed1b3c51f5902852335b260eef8534c990b6e03659b767a75bd47915901266d90a9e6e90b48a301780da4bb1c088b2fd7ba97b8687f27b7edd4926f350733b69848370029bb91499eeecc79d60d75d9ef495ed55b9ec435f0e98dbbff85d480c2c2d2864b52fb7f8e6992c73a565919d3de4feda2ce1f8c33e4d1db5da8ff4208aeca898e88101ff0ff5df178b013cba69e8fd9dc443d137b879072872a5237605562988176d2615eb559ecb28f3187b463564ef1c26725bff42451fe0339c5fbff119d9332068c18f5ab17419154e21966f98c787c39b3d5bb07c2beaca76604207d182d355ffd6e2a1e09ab6360a73e05fd8797f87a8e36f0680c0357291ea24c0ed137aa1861b188dbd8ba1ed757faf104d91312ab5180848066a8ca225faf4ef6bad05df89789a07153aba86599aabdffb7e259b8864f612ccf6cedee5df6d30076aa9050587b76c14f874b04fd23a91dd242b6f4f951400212bf424ccbd17aefdfb98a03fc4cdd5a80074cb89b92db0de724b9f0185e69822ee0b8d2e1dbc69e25e3edd2d84c880961ac6a62a24ca86cb0ff2bfdb7ee1bc18ee97530876a6d956076addff187e66a6e1db75c7fcf45c448f688f694ed3319428f14d9fd755f85868b0034b9c7cc0870504b603c139527b28a09779d9d13a383a9ab89e1a969f95b90227e918238f5a1f863e4fa076b15463c9c53c94fd408acf524399d53c1a5b4dfa1c8d44278e60dd5af75fa0f873baecd8f8cdfe39d3b43088cd49fcbbe821e1b3a05ed6ef335e9f85451eb873768cb98ccf6b58f6185104553336e026b22e9b444e67246ec8369e151c681a6a4ed6f49eae8e79c8366c3106b1361c53f4105617ef511e2742bfe36b9da612e0da85bf15e78fa1b28a32bacdc316e2bc0274b310f5e4c82b6601144982531ff640c7d9894f9423c57f59faec99f8316d832505acf0d8c10e1d41baa8cf2f08faab022e74807619773ef65f1d92a3e95923ca8469e8e38b69edc75cebde210dfc80f845e109bfc74d50354803e7a4918850f171d32737ff91d38a275bc404aa70b4d4fe409eb7840342edc312775651d70aa1a2c31f0f791f6a0c1a622c52cfea03002fc44275bf20cd38b30d9d8a053521bb8d7e66bba3ce81a9ad6dad243fa929002fc8c07aa03b3f01512e7a3ff6477e920cd076269d7d8d377743a97f7000f34f91d4e41eb62ab6c58ced0d92ec5690686809ebd21191814c3ba42a767a279d5452e3f971805a814552843b0938722983ac733785ea1a1e8597bd981ccd6040b99ed4e2a5220962ed28982c3f2f5f75bf7067e9037504818651935f55637e5a098a16503f5c909c75f84f28fbcb86bcd8ac3b9023838baa4b26768bccdbb3abd82f444e7eb8ba62b82228f59b45d47f5d4b2319d9904b4ff25850e8a5577e0ef9c293b802c44e8205238778ad41140c719d2b0c2ef3d9ebcd34017e5505e98c2d2c13f8e163f4dd646d76584be5e30b1df7a7649f4dcef4d8354668e6e4996f4a0bf74942dd9339498f0ada308019c553f3cd0e8a5e72f756c6aa5a14ce34c41d7cc057544c164a2c311d72dd265b58c579c5befa115de7f1fcddb640bf4c40a070d0bff8319450f13499ef2fbdc695c42dab6ac9e6015f493440066614226d30a01df42d6fe637b30e558e67aa30d65968a95149f371956be21872bdc96a3c79523c443babebf38f2a6f1230691ad824cb6fb216b6b91ecfb4569b7346dc4316c61f9cc95dcfac853b578afab560ebf6bbcbec6a2f4286dff93dd895b1648da85f10a5a01cc784280eff6748d251d05517a2b7a00a041d7cb6ce96cb361df2446b3d8c60082aacb2e46b6e3e50be9ac5c388ae26d543a5d71df3ef39cb6c167c4d3e681b08288f8c4aea5a874a9e12c9e6ba2010534fde3d4c68f890201ed34a86b58799e923f50a44075751bc59641b21a2d3c1ec4789d02d6275dd2d29533ae174a2a9bbeb1a315d005ee754ffb5b0a90b3d091e4dc25afe012758b2dfc700752eb1e4c044d44094557d47086ad8ce33ea64465db940145610bef687bdf6c6da56ffe46700da6532abbbf275287d3cfaa1c759059f28def7a3fd2bc67c593dadab6c24c4f4d8f642bdd53b92c348fef413ecc162599485f9771d75946399508688a9d5d9f9e4547d85dcdb8010b9c6d83090630ee6d2c7380989401c3dd53adb55069a4b3ad4bd07688573d02501d7b7df4975229685d1b3f1bdbac101baa0b49bdab09ba70468cd615edfe6749c01ea87f065e9d20eaeb35071086e58ece2b9c049e25e912afba792cd0f9e2dbe48f4f103dae4b0d0c7eedfef08a0a994f30e2da53b58c1895924ddcc0e2caa721b86eff96764737d9ec288f70c412c70683a6fbcb65ac3030d9bb4ee74855de55eadb50d784ead9153c412af2e2a6959b369aeac305006c47fe6c972a266ecadc21ef6dff5033f90e3ea160ef199fa64f5c1507e674d740fff0e32ac1a9b6c1ab5750b7aeecf676864e7350fbff732fad7681683aa3530c25dd15a67be4bc9fb85885e78caeb548a9e11d368ed31b166e72f3e82fda383430d852a56e4afc5909108cdfee072c1a6bcebc09f286d61014e255d2358ac8e60a3b2852d2a8f3fa43a9df56234588a31787301ab357077c37d19d4f002ee8e00ffda33c6e874dc2003e140036addb8d03a46fb0db1163fe03210064cd37cac400e2d7cc542efd57ab12060b1e007c318044a0a72c9102b89553bf574df16f1d51cf2e4c53cb03f18d851e4f37629ba0586e9b592f248a1d277ee19595e5fde86cb1b036025052fcc6636abc51cb47c26030de70bcaf12559febbbf2c9e3795053cb8b539ed3158846c63573b17a4148af2959255840932f0e3f0e8bb76d4c79956a20cc285c82144f71fce6e8522fb587165d4515ce95db75b0c9fb726a131ed5451c25d2e0ea546ee4e5f2b13c7bf91f818baeb965595e59caa5d40c005c1c746140dfca7a3afd2107702a18282f6398246dadaa1e5a01b323fb43a662935afcaaabc4683c0a25bd1191ff34f2216aac5873b82b225a03e0797aa5990c91c370073b527dedc0f47a0578f55a2066ac93204c7666b4438fe6bd0920cc6a570b3e2b53ca01b2f2df6901ab4a397de6afcbfd1d00380463495fa7eeffce40cc18ff91532b9311d9063e092c004b7f0a77646f1327a9666880c32d5d26bbb487e745ec895a9f1f713ee7197b049b665da0f6fb2cf897245899d11fea74197a806b9783698e2d3dd706eeda606fe268c94bfa2320f1693c84dcbd8624e82721a94aa05fb730cbcbfbefcce09570fb20adc462d2f8b1e65d123fc0766852ef52a3d6750a689308854a8f4555214a627c116292ff6917da5899894d58a2cc252de41eca5f05440d039f8143d496d0ae744c4a565efa78ba56215974f1419a6a5a7899f94b459bbe2199206bf2205fd01496862bf91db064f2c02420644567801cc67ae7d268bac5e45e7ff3f54fda84ca0a21dad23b6fa77d0bf61e68ad75881d78c045d81b16a198baed55b2833857b638ed82af6c1c424c1ea21412a9c129d0878549354402e16ecbb074051027d499e1bca31505832a225eb59a1c5176d20a4c2bffd2f3d20f5ff1d37e1ab7c392c9c010fd67c66ffe8ee9cc875424a40518544971bb160e1416c40b488bde1dfe4c5607ba4ce46b0fbcd32a3d42c15faf110248570bcf0f1c7f7b7358a88972b178bca4364606e791c03033af27586103f6599ec08c5f830544b03997e672aaf16af1e9870743b8518ddfe0bacf23d5311e44fae88d9f8614febc63c7988949d27b9866d4f740d3934433b98b17a53a8131c1417a3d8c227a038775e6ae2bfed560c74a4aee324df81e15366b1b5b55a8798d56abdeb31177dcd18fbad8fecfeb51d271bb9b05a063032673fd7067302910027e1f9efe766c05dd9b5396464e3fbee512587ed839809c1f80e93983e432e17549d96cd9e16edf255c1d7e58587d1eabd56e18f4bd347bb1cfdec4dadf618434c4d72de1788c3ce3037e8a03624d7558e738cdc2f39ec092d52f232e23923a1cb9c811bb1fbfcb4bfdb45cb1d8b229bca1594c95ee3dc442b6e9e012484c78c7d176eea20d881374aac49e78dcd1b0d4b9fc5700ecac433ee48517aefcb5089981bd4e63adedaa5a18cc8046a9da1e30586d440cf5091e5f0bf5512b6cb4ee657074a50b6315965e475ac007b0fe912a4768dec3f6420453732f11cc0b6b70ffbcc4c790f50e490d6fde0fed57cc3fa4aa05dc24d5d7ccd6415cb69f2e3f8cd5290faa2d7dbd0a6375e8c3abcdb931dab5db7ed192c00cf31c35f019ee53d021818d4588df5d87826594e4168539d0d4b1bee616a1a1949a420cd90b4bd0df3e050a8393c26e7a2794001f3c91b97e7ca7ce28ec142a5637947da399f2322e3f54df6efea7a9b3d909d919328bd1a139338687024b1e4f6ee98d9b0c1d62b3a7d0a05b6c444c1e67e849c3d9d4f95a8fdb9e03dbe9c14f8e9c3d431d1c3eab321e35434d49f06b93e45cc3b3ffe7a2ac8dada0545d2ef814fd18871e0858a8bc0d9fc134a57e744be3f405ad191a2247d099e8f273081d1b2be57adc249e7bb5f4fbfa4c42b145a77d33e6c4a0fabcf1e4357c59a886d69ffcd85656deac3a6e588078de69589e49e49a5a0b4e8f42f4635fed291d459633a1f13ad92bfbe945cc2e621d8de3f792b975cb8f6bf8f2e2cd9e92c729e3d765afebef92ae413b0e25ddc181c683c270cbc39203b535ec1290b20f55267c77b1a1cb28e43c31b9d943750a99aaf3e8b9317421e4e931f32355e2e3d2c739c5f7fea1b8731ec04d8e9ab3357f1ccdf2e07b43645cf9f89b385c61a0c0c4a97a48cdf0192b303d9f1a3559b2d5d5f025d5ffdf313dc27b83db0cbcaaf70156f63653f7ceacca35ee69aeeac84bb8681477aa0512dcaaddf5dad0c1a8e985432731bff8bf6f1e4553b53de018556720cb0f3b380b949fb81c150684aea39c28a5a2f473ff783642e1626b7e97250ba088aa8f286592251f6372d279f47894eb1115c89d67aa725dd07a3c1259fc0729c0ec930ffd221258e3ebcd01b8b5b97ec1ca367b4e6eef69d867a4bc9147aebbc9cfe65e274b9d2f69c8ef67cb8af9bfcab8751200a77db4d8e3b8c36599635518b2166c46667564e4c6407e33cd78afe8c5e2b12dc5e3dbbd75ec4a31952d914397081195fff4d0611632946ec0c513f092befbd9995119cc1b35aa2b211c1fea1123b5fbfc078dead2f544949baa2e048b41048205b36b2aed2cd4bd7250d871fb42888d3b53323a690a563ef48042a52e066d52af4f0e84aaaf20c5423783a537d382b67d8c1eaba07787ded86f936c76a50a6605d6a3218e536f8e75848de1a9a1400d3a18efc0644b6241efb318bd2503245cd24acdd11343074e8bcbb804322274588b4b18a8a8f586c26a9a8ab3b696bc1640030d4ab337f0339b74a7bc0754e202d0a86460bd680f8e364837c9df900219dfed4914005e46c696d2a332078854c31e6f9dc1872eece05028cd044a328663f00070111092f59bc59c4070b441746e3cdd683dba23e5ae0e99e2f746fdfd7842d2674380b4ce05a8f9c5b76c9e8319d07899b3be50caedc5bfff6bf0a525e77f009f57f483de4bf3c09e133d5a1f8f1014bbb41792b5581d5582e113b2fd120cdf8e98c8190d4ae798ed25d2dd259176169bde84652978bce6a4facb31735706b14ce2e299d1a569e998fdf3df97077df392c04207760294dc9b339bc2e8b00f9048af4a1338134f486ccee4be8053ce18384dede7afd575e74a3efbeaf720963b8f9f40a1ea40961d1c38396db5d3e3603dc07954dbebee2607d4d5195400168aaac448428829c2c61e26ddef14b07511f8139a1fb104565b4d3a3f68144d4b736744b5eb8fc65a7f575d7f15529602b9c776c7cc01dee1f685739f814c5e4b5cc9e91f902bae732e7339f1d0a34f2c3b68dd5e717322f3fc8f56ef9d0e9e3f725f900b777ece21019dcc9db2862f03fe9f41d11edb64fda6f5a0d9159bddbc67f7342bf56eba4fc772e665d1b120104cd3ab7bcbfb5a89132388f367ebab66f0c32cb4707b38c74f609b38bf2c8bbddadaa522c1b452f66d8c5651b2238378a4e795baf1e394c288152d7ed570eb7007c5e15310d283e1286c21a65b905fac5cba55dec4b75dc1dc08e8ff6e0c3954d104f15ef6480e032af5679b3bda2bbb914a96d9b1b946a1903430afb5d7179572eb233184a30c0c1ab77c24c39a7265d57f83aef8b4fdd1cfe587f18fe23681356f17f1c890e44e2ba8cbab649839c12f88f70726bd531fcd92be57471d2e5781deceff23cc2183c1be7b53aa7014678ba6b6cd860580a78beea94008d14d7e15ff4f85386d191288fb54a2b875fa8cf0b43ed0b5e28594118bdd458098944fc31d48a15c40472fd8c5a9a6372ea2a372f33d39988874a58ec8c6afb4daff54d6e7be46f1744f8c8fe56ab06e5b51a32321b58a6b6c0efae71d2313076e6f57fda2cce7bcb12606a382d760e897f4d0b9892dd9386d4af27eb11bcbf25fd22efa50b54329158a13a8987b626172bfe74f597fe4864b0a96add46b2e011ec0f2d7642f1c8c5937798f4fb7e7bc276717629891da5097f73d44bf8574ced137eababa7a4e6458bb6818dc8e0da9b4ea1be83ac4550e2b71168f8820e26203926a2474d712181651bbdcc752212ac224773be673ffe5f83aba479e983b97dfad49090310edf1eeeb627fce59821ad36ff16aa93339bc083ca25abc3ab8f647f9461a610ad9efdda8518c69b05211a7826f169f154f5531337051b4e74c1d70a719c6620bd8f83e40cca0fad771962c902032089caf9fb2a65edd487b06d6f9931ef53b0c3df015b4550bb3825ad141952fa3e60979415156db79e03a732621e9b264eff1e0d3e8b3817ab7935fd1290feb8a43be44a7fc25813e463425316b702d0b938084e6946e674c341750441e3c748e0d1fab2244e8bdecfe95ed76d9001147e98e99be645820cd4c0b4ca6ebbfc17964305804d48fda47288360d8f99b0b2351d234dffa48f07bc1e1339622a93fcae873f3c88db2386581a6e908934c3176cd193048144c5d104276e1a2f81c346c2a6474d06ab253bdc205c450f20020346620cc1bba463adb8fcb57cf1e3c207e6317446b96a8dae3640d93ebb538e3e509a34878098fbddeef89adb206779edfb30f605b6701a24540aae5a880247ae62f14d30ec2651d6a73681d59dbe57176a3e08f4f65ae153a89b9ac575f27d817fa6f8fed12084913374bffae3fdd77fc6d73cc67cb7410785ad5c70e0e4498fcb284ef57b4eb7c0af0549d2925f24827f965f174891d30eebe8c4370c116808e6d8dd2ddb0ff06bf2bf1fed4c934a505c932aa91e72e8a9b7b1c4c4d0911a78582fa7d476e8a93e6e6e12993d89e1793e8f74cf72d809d7fcbad600fe50bd8e8cdf90364f2acec12d6351bd33eea2b63d714b1bc3105198f143e5b31b2b0cd63aa90a2c7fa4c15b79ce2784b19db107b5f21e4250ab02ba47d4eeff9d3265930f38c867d61fcc7cd3e26b6c361d55f22f6b4608e646c7110d05e1d7e89fb22b7de648fb18320a154a1ec7451cecac83ce389b87f12e0e388f8bad925afc68698e4fd84a60a998b32a9a09e285b67727e20b7db6573e25d9ad748f21b5299e7cb59bb633ec2326d0f33732755c3dfedffeaadf3c45697739e890bb614748c452d9eb55f7057bed632d6810e92195e63e56e128aa1cca47f3b8be89ddd8fceade3ee6b299c7c6683f71b81368c4127c79794424ed23f8e5bd20364e7ceab8b3b535aeb258dd66957b83d7c1ea642039828c136b25337e58c40e32210b5772f7fa4fe5fcbfd0082a7df843a5e822a9a24c4febaad420f3c7cbafe47488b769b8fd58e448af38c3260d69e9662017b70d10ee1d93f4120480fdd0317ecf8ab9ec5e240c9861cbc22336a3285c7f11691911415c842c8e9e3440350815e38441c70603e84b2396d6f27dfd057d4b00e7fc2d003aba7b1fd89ab7a62392aaa5a72c4ffbd2976674415d479dda13eeb7229dc334af8bccd5da78e84f89b958e87882b0e1a31ea236f84dd48f236522fc194ea8d956fa8a1a991f64be9afd0f269a72cdd3088929f125c7602ddd96001a0b20a1a157cc15846abf1774794ee2362ae00d7f0b994c5fdd48cb9d1e535b8f73bbe3db32e9059cb9b274f7b98c84ae58496ca04a6d2c214735a8d30d7442e6ed1caaa8f83683a3f3512bd1202fc74bf713253d10ed4fde4c1484fbb0567e7fd42c0ba82c1d20691deb15761b3ec45c080b567272f9b33476037d00b8619d6b5b8efd7e90b30f19ce459aedb81c2331c84843b755f4ca13482ddd7cc30f7e3a8f1acd6e7e3852ab9d0f05fe7da29e71e02115b65faa9a11cf76d3846d2abe5ced560509e6f637557724cb21d3ee8c9f6305ece9ac719a7b8ce572b79e1c51008e8e46c78a1a229ba62b77c3fd695f816c31abc1266691f5849a224ca9c9657eca7fa970ea8e70e3cdbff25c221f1dcba7a906ddc50a7c3ebe2497e02dda5fb2beba25011710e7965fdf4ebba672d173f45f91a4dee903681e1ff94d455739930c71748d9cd640ca45dcada735422ccfc2016b9a8ada8d994380ac5f5ead415fd7409398055da9393decf7a345a8a1455678da87edd99f70ee1b8099f51d5c309ef52097285bdcca0cfcc7d9a077da1118ac093f58f578cd676aa443d34e09a17b4131db0c00699fe6fc67dad23554642c242ac44f5f26237decd8071d0ed9384d3a976b0c25dd4cf9ef605b481bf0108c99cc9fcc9bc79bff956e63cc4ee11114b93b9ab7e7d7851f0638ba0307058ea34c9f737e6bed4fd98a6b6ba9a89e7bb04820154b40712da974830244d661e1c8b8b50abecb6df8dedca9d37f9668efe6fde2bbc2e39764edafa8ccb9c702d7a9b7ba8dec27707dcff68c5a33d587ac92ba3c6bbd7324bca35e40d9a825380ada99a86f7596a40d2be89955ae0db9dab9e75a80d93cf915a1e852e682c398ed6b884a4a4a5807161bfb903da40b1d24805c9a02cae11aadfd741d913bbd26a51a7bb417916e23827b5c685ad37dbe158bbf0f567c0ee96015812e46cec64e5666b0ddea3c92a907f70a607d06f776b579a400eb5662e7007bb632c867bca67a1aa72e0275b45ac6869e78c9f080d5e6f5c93de72dcacfda6ac787b1f0a8a245880aac968430e81ba17fd28c253c4f8c07e0a880548bb65ac5c65abc5f4daa1a6139acb8744a6b0613b0553cf0e106ceae6517c995c8ce7baa57f748532958f684fa3e84a9bc1bb9809723a28ce75c8831564be0c5eed6b3b4719b0b0f994b95747674d1c67433e36549ae0f9f2111968c88273fde55a18d7293f54a0686acd018350287d5f6a193984f62fd336f50ca075e63a3b470598621edb366365d1b5f24007c3429155e6d4ab461c85441e959c5ed8808eee2647841183731ee8d74fac0249d7455eedaac18a03b03d7935c2697f1cab0ef4f1a52f5153c7dcf7b4f73864b7c57278d390e0d26aab24427be82362be109085ed6cd91c52e6867efde61289e95f1158cddedb9a2b8b41d8d4648cbf2b229af3ab3f0f15d9c53786ccd0dc64dad699f1a9919ca35dedfc91fe36a7138ebd8852a53cf4ffb3780e9d0abfa019709cb42f38d64b239af26b0c0150aabc41bcbfe509472503ef746b3524d7e2b1fd753cf26414fdee474273054cf1cb198e592a201d34023f7380c3a4f86bbd7c30a43fd57208cf9ec5c1c6da88fda54d615545be0e88a272de38301f0fba1eeb633a635396032bb295dbfd263e3ef51395a605981b8377e2c34268d1dccb221e18aa5648decddb239853cff87db3f919734a9afb80af5e70cd9aa5fd6aa3b762014d96c95ceaa19746a4a34710e1f13af72adc474ad9342b56c994eb9bf1d6e5882fc258fa38a3699c7c5f33f360bbe916d55eccee952d77588b80cdf5ade49d6d8776c664c9f34fc6aa8185c2d8f80f0ddabc13478e7210347512ccdb71262d6c5beb925677a161f62723ec100e1faa204ffd6310e5d609f0fe6f47102ccefa87f907e0a750c54f9b2c0fce55179bd1b5ef20f12f510bfc7005d67c4f5d28fe719dee7710c2a0ffea058b43965fc0bceb77fdb00e53cb2d7044efc6791a23594be752c52d5e0ea22c574356e78446052842df7fa14b93c8ed38c484b050b4dfcfed3a00dd0bb0c6dc8465c78f7560abd8766adc3d2b8fc7f3af8d1f8a7374294a1234cf8a422fdc0099e1c132e57c47bbd479cacf208732139002ff3d584ec5d1f555394fe739a844d8deeb4a0a606127ba5fb3abe3d245bb732020cd58332932eef20f9748918a3f53e1f68c60a7ceff74d2ecf798d650d77d98a8e50aee0e3692fe716a6122fb8daf00b7ac665342fc5300c7344469b5b1a0efec5b8fb40ccdc0eeda346ea8307107fbf5a49f307ac53f63fccb43b69f808ccd764c9986eb6aa32dfed8c219dbaa94b720c10116d8503c65a01430498955b5f9eec28e9b4e6895f073f3e2c714e9821c3178aafd92dc2fbdd7946a20e60d6a5252aa1df96b53bd18a0bc3fa1e797f5592159837cba565206b0c5cc44f251529a21a48ff6c0c553e4ae42b6b0344f091d28266b5373d6d0c72c2844c779e44411bc00de8471b29593bce2fbdfebcf97b960e4c80a22dd08538eadd13a193337da06f30d0aba5de210817af812cbb426ccea3f17a49528d788ab4686cc2148eb4984e0aec609c4d7f151b659b302c7d08ded90b2d46487a525ce0be403955905f5a471759800f025b18123d1a04359a79060e905a39024ce228524f19f1d866a448fae50a2725a71943ae7a7076914919a23e7879cae91bf48ee6d23d77eb5c83ab3c8f8a369a46b4ff251beafb88cc41edd41d4a1db3fc626339a2cfc82664a16655d4bf792b9eef176c45398c761d3785235a5868fa4aa35b2730882a54ac1799d35e3584192eb3659991b11f72d52339cf5bf68477d9dbd90c13823c0303a32b7db21cdb55dbb60db90dbd7ce581f580ed9f1540b8b0f77e59b318b03d59cb9fc9d24cf6cc9f945750e04746134ba635b56dc28e8060e5d22d39a67c3f410858aa402c89c9db01cb1a76715aa5c84fa4c5cb7e1f2f9bf0ec60a067c3f04538b3997454c8cc94fedba7a1b77a2c0e0ac374bb4822a1454cc230d25d3972f15bc4ac9d4b3aafe496be5d842c22580fe1ae60f4a89bfefaf943cf3bebd4833e26fe8186cf38ea1adac016ef35e8c7fa35621fd8bba2d30d5b94b398c6c9a8b2544f3c784b77246354e77b893491aaa49ced9222156cf82647fa16d11d2a047582fe59cfa4704c3c0c56b32e4c673fae8b00b7565ee2c251831b4e147f6e80a2b35b04938385692df4b8fd9aef87259ff44faf712ae9dc77319b71d77193c8dddf3078118f7851a9fd0d9c8e9cecb839964e2df490bb4c2e5ea81dd59ff93edbb9fd61f20f1bad4f6d0f708181d2201832b15a6473305026aeb3cd74fe1a25d1a68039873bbfeee7e759c27f4fe8fdec5bf2e7f0465b4cb5d7a23d264b5ffff7dfe5f0ebfa6bff0b38fc441b0576b45d29422f5319e060ed2fab317e0c1939ba1a0dd4a6b625256fb7a2260103eedd19a72839e05d5113f4b4237f401e2946ba4c98f14ef3c329d133efc926d7b70573d50da9f13696624602484371f7f1319d99c46d944cafb330df9b177b7c269905c28031026b0a100b45c18a6733f0c9d8ec384540ff251e8452022672c9c54e7d91f3acea340cf38d4ccf25654a1509637d78b92a20092c1e41e57af60b8971736821fcf8c5c36c2083804cca4ad46ea58a2a7fe8ae3de0b59c320779d2502ee9ea22b0e8f0f2b04a7bdbedb5f7fac3c5a5fb27f4dfe2b2aca02a860f1d1059edbfc0bcfb070b01fbfad7567d71d964f33fc8b55818113ffcf5632fc59c3849d6e0d3c5b131ae72b193c43aaebb77294082338e6a544c53c1cb1b441d2ce6473f5b72eca29b4c8fccaf84353f0726dc42639ea72e059f2443d1ac1c8c6b14b2060fd4b2fcff4cc1f1cb370b7161742f84c12f150f7052c8687de875b2098013ea74977967dccbfc3132c08fcc7d67e887b64d4552552fcad507b23a2697951d1c6f91c21efe8acd31a36a94ea953832463452ed7ea556cf2fb71223038376236c39806d02851d4bf0e793bbe42879781b575cdcb30e8f61475cfcddb3e6b532d6b1a78223293885517bcce3f598a212905376671df0c5dd7fbc4b443c75108b4ef9c2910b389c6b6d72ddf0bcf76a0bd6966a9423caa09dc40d8e769f4c915b45335e1238ae0ab104f78eadfa4c01efed09edf7912283cc356795b1a56b4f3f070ae98c8156a5a1fe60d408d747d36c99a7e130c948cf0c0bc90f2cf01e26fe76b041b26453dbff95ece8d23bbd54224d3135becd6d0f1c28f7b009ca9beefb12e712ff341ca968c22efc9e53f6215cc8a17f965b20e74dcf9775e6f8556f7d925ac6eed0af5de3926c8faa06c584355ee1ef11146e125daf534c03aeed3ad65d7a984a93eafb60a8f13e49901189a9729883e5709d8de9ac10a53e234ca3b960b730bf21159122b8e69a0a03c5b5682d7d9a99d981fb8d0ad50dc4cba9e3f5905b247d197f21e858aea5ff45f7ad9a9bf3a7c72a62a0ff0c12f437b6cc0eefcd93a0f04592152e922468206cb00e7eefd8f198fd15b1eec4829fa42d89b09d64994eb5ea2d040896628498a4a949212a1d2a1e4ada3451e3696c772019c8e86fb9414b94e025ad63bb06ad324da2b8fd5ae9dc366e3740bc0238b2b22d800c7988174a46950d402d4e3c3ed39600cdc5ba8229b59bcdde8cb4f4a120cf034d9ec30e18b8813ae9063266e84a56c293f6fb4bffc6ff105071169d160aaee7f1c5302ea4f6ce2c6b423bb25b7eac1fce4c3eb2c406c2bec08f082b201b9b7e6cf1cdfa644628dabf2e383e13272a5a7d136318f5c110da98bf40345371e7f95b9e0fa310bea7de83babd9e1f9f86a736767850d17564b606ca53a81d97d0d3ea7550a88a40fccbf0f83238e5b2453d53e62af9439e19af852c7cb082d55653a15162ea67e2280864e0932ac0d6f8e341c2d3ed17fc9fdfe86e68e42df40f51a77b063200f1edee3e8437ab6a858b04d8d162b98233d3fde33d8f8b230dfd1d0c2e049ea8731260be8ab8b8769168991a6f01299ebda16ea8373147568406b63819a76d098d296cd8ddc7576fc6ad0f9b51792fb2288c7499635e64d2f0bfaac4e14a9aa134e02efa03cd77c316b879e890004e7717a710fc3b61fafc62cc654638b33a8d71f17c389d27cefa55854d7537d6aae98d3c37107924881aac9ecb9bfebdd805db819840d64d919ceb7c7e93ab8f163ad3c4a3ea997913100b6342cd3003b23eedcc0c43f258ad476e49a13996a31e980dbb3f043ef15951946db5ffa3d0b542594c20cd65d7841f10b6eabed8c995734d67ff60132d52d3d046a0b0a51c66661135da28d62b8394dc302f32718169f425510618c5ad2d002d6d8eb868f873361b09ec4c173a6637a8790721a532b8289b41f2aef0fb60b68a5e390f43816c1b9f895a81093bbf69daf2591cab7bbb547440132149a80a9e7a7bb7e3e84b18969bccea5b71f680ed718f053070eaac4f857e485136564689d2767f2cf9369f553ebf0ccc57b3780d80f2ce7ceaa0e7397c5b32f8e6743eedbea5a01bf5a841fd841d1308fc43e18bdc254691afc6993d6c6ea466652e49998b7969924ab34d9162405ea43fcb4f27b647bb52efe45b86551ac9875d54e9d3f9155d50146d9d139f82bb443f177cdff4163ce6d7e4dce829a0e82c3d19b0c283236a54690ef2fd948f98c3b3cbdfd844f0b586c2d6f590077ebe392f908944691e2210038b98d7f3d58c080f8b140aae304cf15d69bc1a2194056fcd463dc550846c56b4a0c2d627bf517de67e376ce8b6dbec8f3689a3fe9ad83bdc2936dc2ec3d80087f063ccd90981ee0f5d274259e33073ea854fdc5f3b025ff73f12076de71a9c593c4f1f41730c535e2a65c7576fe57399c4f211ba41274b5a2a43c6228e70cab6373d32a83085050c2f1c7b4d60992ed221ff11f3b15caa5a70ea4edff089625e9e75c516dff76fc57978ddf58f4f6db11e738646aba65588be73511cf24231f52fbfddfbe3e3e68e0fb495ad19f7f9fc456655238c61af4af95c6372dc28373ad9558c89ce7936a2c7d7992ededcdcc32719edabe68abd8d32115692fd785e2f91f44b0556c2c99e7003c52664c5b3df46d076e56b2243d45093a97cc2ad8d35ae3a8578f35d50c0ae752f69dbc6310595523164d332b5148ddbc4f910534e62e62d005a8dccfe5bcf9e216447c070bcdee8b7e29ad4d81f092310e280dcf842dcc138c69352e61bcc80e85fdb51ab37ba37ff24d36daef0b9da256a5e0d55f7dafefb40efcdef5cc9b8026631bd8342675bc6f0fd13a7fa18deed5a0e94d56b50068c782cb11d6cb08c927b2520fbb016c10e4c67116c775f7aa45da33375976d40717c0bc45437266c4cfbc5d99196085c629035e64bc83fd04d453f825aa4f62d87bd8207960e75103b31436dd2bf30a6b5fa2443294450b0e69c7f396b755ce67f78a02df13afe209d957a95114c49a72364d6dc28709c8c017df755c20c60c4977ab7cf38b3e694f4b2562ff928e117e6b368921d7aaaa44e2975008d62d6c6c68a5db83321069c3962df90d15afac19a35597106c8853fcc636cb51957f82bb2ca88bebd7069b478c1b58699c7ca4a06c16448a0bd221f90ae3054a8ef8328573a3d51b98e27054521d003feb08cb38dabd5fafd43e33ef9039887a5d7ca8e111cf0b19af07322d92a0d2597df5ec77e76e4e236fd6f1606ccff4762b21d0e8b75c85b6a9df17fb78b3f44018dd6f51bb5e35516932376e4d8c3e2afa31d68f12c94191ccc44e4e1e1b5a27bb10e0c08175c4562930248614ef5c8b5ed49615adb9961f5a68572a55f63279db4b80da5fafadd6a4657263faf886b570fe5ad2367102a6f8536a6e5c0e96c430deb441d0d55242060ac83607363bcc0d58abdb50cf4a267015e76a9e9da800ab4359150773e5bd350370965a8ffe2075e45e61fcd01717008eb00b8533215b5903241e8269173a402e34a08d3f418e300811f96b2a66cdf4d2a155ca6d21729120366185018c931f4aeb7e90a0552be9c8e1ba2f267af0a3f5646c15af73a01d1a3dddc12143c1ee0f2d93fa87682b31fdc2d166a0b0237965c9c24ad0713351ddd1183a2f8f2aef1eb9b983815173e5cb6e0fd8a339502d2256a1f3549faf1472d6a7982cc527778950ddf777603981ebb7e11d17d52f8cc521f26684f39b6efd23a19e59aff07b86df38e16064c22c050fcea99cbad9dec1f5d77d830feb77c6d966806143d16cccea264e235a34bcee2d789c69dcc6ac88881c53cf46e997d2b795e8d6283a4b9859d0e60abcea10a557707ab45b698751048faef9822154bd6b4c65b925dc92a254c252172d95af2910a9b296720558834db3bf417053a8b02acad3e2ca113fbbbe587f29bb72eeda2a5ee49d9ddef36d2778c991bd805483d64c111a934aefe5eadc19d38b2b8527ce3cc861689ac364fe8b23a639c35073226e71c18109ab16af69351576c0bd59122e67a45e79c0e383bd6ebd833622cd504600b09b3872f03753cce24e7a9fcd184e140c2520bf0ba0aced314fc93979e7ceb06c579d33ad0c6f8ed97bc5d2219e2aa1376295f6273b188d929af0226b86d1deeb10d41fc4b88d504be7196290677a14172b7b286c010a76dfa1829c961fd8afe3d059d8626ee7da42327a79c323f155cd388b824bb6f01f087dfad5bb95311fe42e8469e771016ad2e4c26f494e3760766821d5cac8ff9add8c74c7d6dd639a6c527bb18d6ef8f1c1d2605da9408ddc838559dd5cd03ad9cfe78f296ecd542dab259d82bc6f815264eb8beacf3f59c8525a6d5095cb42b0839db15d689ef932dcf0645a2109afcb5c7464aef09a477c89233793a1d70adcaa3cd4d3463d29701b26fc3df0a5880a5a61028fc4757e4e49d9ceb24a973c061473043c16a639e1d5ac35caf896f1b734525e2a40e323ced4774b1a2a6f3d895f8ac798589c43bdef77c737280f3992a3f6ba031144a93ef75b0c24f1e5a3d4e1b32b57d30f0b7be7604ca05216025bb17a139d24d52e7d4e4d7c453bcd446e9976136f27934dce9e2350e252c7a70184d055522651af1d1b907b8d4d3389a0208f2e9a387f37f193e451d3dd8205be09ade95ce9b4bdca819cb7f21e62a5b1a7de7a8fb56f902313f98ef1e0e5819c8bc0e4815b6abbdd23c03c6d36c4d270c07b0da05195d21b96472f37f4f888f46a19255048cdfab31d4be6d4f43e6a62c244eb495afe368c88ea893adf6cac167739488b6104150eada5f73f50f831d9ab2c49044099ef6a61d31a2b5e3288edb048b7779579427284dd316723b438f83105cdf00fd448497daefede39c744ca9ff22f18a134e74696ca7bc2cf6f48597495acf3361b2952759eac9b7eaac772130a10da312708ed00871add347562496f682e8fe0ea610a4b33e150c9fd221f9d8a344f10830b7c6b5e2d6fda643a4392c7620fb9251d2e53eabb1fef6484a4232269fec82b06b526d65addb8b66108d0f072a1dc5770f1acc50c96ffba54990998a65d5ffbd838ee7bc99f6eded40a5825fa48501003e39c2caec0e1a19b978394c90ccc827377b015c16c3323e3f0dbada949f2a420b9c26a0153cb191babb39160d8c3f36bb25592055695a628c123bdeb4c332bc5f7b7dc76e198cf2f4d79a087b957f0435259fbbafb530e7e4f77fa06c4d3c68c434416068d814bf8f7be8a4bf3148e66f5af162b3739e5cd33eca910ac822c791a0510e3dfe55ce7e2c21619ed78e523bfd835ebdd1a58240cea305ba60bf7f01d1320878635dcccd64140a1bc2f45da6da79710c0b50fe6cf624c8d8230f97e49a9997531306437de23cced84547885ee82415b44856d06c5563f87719219020aed1513dffd6363b282945df8697792609d3f63b0ede35f2a8843a446a163fe6d2ab2ce82bf8b39a77ff435ad8bad0f6889626d001005ee81abde96138a7d25ab0c00c817b9387a12877863148f272dcb0be77d62be24ca7a3a78751ac2904dee24756f6525bcaee5c95b8fc46e9358915c742f622fbfb7970659746677128effa5b060c20d5e96da2f7623e6edf8c5d976eace91d89488cb38c4abbd02a9a61e0714be967e6028cecde508b03abad5f65fc5741bff32a19b958b0d53b8b684ad8de811d4b3bced9a54a2276349c2abb002becb7b4b73980d6c58fc16f1cbd7b633f74f1d6bed556e82f00ed41fea0276e9c6bfa9b71ebeca47bebc143f775a8b1f6aac3b32d9094e74094fa151f8cbd77ae7662af0c4f55a0e2348e3c3266b211ecfb10cdc345ae6e04f609b7dc717b27d8833c81447cac052dc4462696a5bb285c11b54d405c257712f0394a5b6ec409e19f3f4a2f7bc541eacc5967e67873fa02125117f19f11f712265fef551a2f4aab85e1d1638d17c7ab2c1daee29f90f4e2af40da3a2275c8d7f637da51c30c3b7c53d5d9c17ffd7fadb617790481e1adf88ac175b707756a49b8500504da4ebd9a4bf8d753f69e32838c3e69cea0da92e2a2a7d06e39bb26ff704c41b08b3a9a73bd30456d3a5014ca60613857a28665d41722574f68c73efa5804aedacc337de7a84aa47661808660ba829078edd0423552ef0536d43a2fea95569a8353a881c1fcd8996a88cc5ab0732fc7e2d80ac8140df765fe7015c6bc70846ee4959722566208f8f53d0b83b585fd06f9666155c7f372793e7ae67b59be220a5c40f7d94b3d515de2b486a91463268513ee593a99c851dc6e57960c80fef535c3173c496d934f04f7db2cae1442d08ad2b546d95e65e4b898a9eb2c8370ee1441ccaa6da8a35d62034cd0738eba5ed87433cd2d223f21c342b769ee269ddbce6a6acef905201a82b5c54a39b27f9982dcf85a0b227b1dfda009d01bb439c934dc24981ca7f769c7b8bd2931862a42398bb5234fca65fd60f2f184df64f5c08accf0e612db3964e95c8b7ff424ef3f80b80bd1c0ea988a17f9bafe91accf86538037aeaf2bcc163465e9c73f046fe2ab5f53fcb1d038a692d604bc992226a3efbf4162fa7ab56fed51f382962615bc33369a80685f863c3b53fcbb53e60c8d8060b4e1c8bba6a387efcf3d742fcb5f86a85cbd664c4a29dc42968b682dae7d43b631d28766167226434c23c041687b9ae44d88805b6783a05650ab43c367c9706dfffa2e3ac74722cb3cf7b0dfbe31448e8a48738f306b0447cb2cb3b22ed02db9bd71ba7c1979e677f0a879b7b985dad7e13a25d97ee1ed0f18e0d55477ab8e2fec35ff5d7cbb6c10d1a07a7411bf887e9486f55ff52facfbe188aa6182afbe2160ae7d506ac3b529d2cb2e51d4ec339e15d8a726db2ce40157c1fcf039404bb6e0c53b7ac4333fe0531fa98f76c0ba6966c23d0e2abfd25435d9262de4ebfae4b2db41144fddeafa1bad304c8a497fb70129fee908b70c20763c4bb820691fb76fc534e851db8f881f8222644b4108995170c756130fee2aba01687d693d52e92c7c32077c7c281d612879acf061f4fbc11a8210d6256b1878c5565d262dce1d1c6495414fdd6fe96344010d902172d9f34b73eba81fdcb4a484fcf74e5200a314be1417cb31ede20676d89c93a680f481b77a34dd61120a8015a22fe2feb7c8c0d08d79847af5d637317c12c8674cc0921f58b29e1ccc0473b7c0433e572089d2fbb275418c07fc083e7d499340f90ef0c34beefa7cd287282f0dcff09ccd1fdfc6ffe8e611a07d6139c699bd4cc428b7a85ba5f36e64aba3f193e2812e420630df8cff0c8656cdb8f655083ff41f452d63a48fd109f2951ca72e1642332817ddd6a395b3a5ee27b2739bcdb4ed6f0d80b9a7a5e52acf335ae4a3532b7be2f17944868ba063744c0ad20ec4306fa3501aacddb7904a077f074c78633021824ad526aaed38b4a1aee37914f69f3b5fa333785600d9a1daafc4dc9d6f5da4d73d36fba93d6baa0f775161372b265686e9879edc109f175a0e2e59471cbc941d4e2eac5b2c6a60ac6cfff8c0abab5807bca29723b74ad543a04b00958282181e4b5878170b1996f8e20114df465e7add780edae0dcf2bd4249c77678e29ada22779b226d09b6f749b241113bfedb9f1992a4460cac8777cb2625332b3dde4d97d891ae3630b48cf4b7ecfb7e11d5a9fa3671039933bc336818bada486cfa14bba97ac3a8a15735919355d745f3c4ee232730111d602be1f9687f97fbf730f53ea0c4c9403cb99f091bbfea07bc5dd30f938584933081bc136ba5faa5ccfd5aa7673397a1bd7adcdb13b90663bab320f743ddf99cbc99674412e0702167e6ca9d59935e87d342527dcd647758540654c373d8b0a8fc39bb29163051a1da976b7fc131aa0178b682682854cc13328b60e7d296e3d9088cd48aa3b5cd36a75bfbec069a94ae5901514d88dbedbc018eaff1ef8c993ee991a3f8e6b824548866b20569e569dd72e9ab4c9772e5e0dadf53603ba1a33f1ab44c484c5cc9f9e79a332028052c85e67f5f318f9b39e80f285c41007d8441b20217cb1bbc71791ffb9a1153c1b1d4550ffbb17f99081ef4d6ada163808199cf39e42668fd063f63c85a0cdaf3c350903dceba8312017ca9e473274df683695fa51221d9bc568ad1e0663034f71b4125be8ad4d60740acc97286bc76461c27e1c2c88c4dafda25d30659d212445227281abd575fcbd28914c0f4a11d1bd14805633fa2fc26a5d94f69838dfbb547d1750f375a2a34a52cba0b2ad51652f32224f26ea9c17da2c9009029e55d9251e1607ac7746b55ae05d77019b31a9238ead213a6cb834f1f92fd5f9af31671fd8b730631219fe21207d9dcd3996faa08bb0c48e69b7305bd10ccab9c1a4b0fd2a3d8a83d1555ce252660141428f4e4dd6fee49f477e9f5481bd88effc4f8bc3202b1ac45e3a01b29feb9a066c86f3a8fa0dc8b10a29a9923cfa0444f1d43dc819a232884b4270d904cce6ff095ceec3b5f3df0599bf2f70a0e2e693a21fa7fcbd2cb783803786b79d59e8917bfc28208a661bf7b21f68fcc103b9ce140ee1ae2984915e97817ccd0588c7a35e4fea7449082a51f2adb2c99f98615e5b8e49b793daf8e6d040b983f8861fcdb67de43e471e153e42267bc1a701f6eb35f788645eaee6315a4a514f110bf703f08258adf8207df1bd5609182741e5986076fe61e73055c4f853fb28b2eccd596d022ad6ae3771631c76393fc6d02bd3494a0be9f0a0686aed2d8858f3959d60057bebfb30d0409afc7b52cdb5216bab098614d59acdd102171b1f7e26255da9f420138648d5e9918c25d3bfcc97e89533c6c3fe19acbc632ec1d6e09ff4f489ca6f3e8c649307707b7179da5d3daa6fcca4a36a3165aad640fe5187d8e735ab3010eda00046f793092a56891a35517f4883df7c8c12d2e517e299d4f5a4991fdc8d90416f8fee4edb6a61dacd2b33eab299f220ac309bf6de0a4c0df05b4a05464b16d69bca8e99d8e8906ebe44da14ec5b5be2a62cbfde38caf0d0de64fcf6818becd00f837a12739c2ba91cd612b3bfa6693ec9a5d4348f04f4801af2571fdc202dc6b4f19b3754347d4c073e8f308661bb4bba283503974f520750935307f8f08a4103d32eeb2b9266f9ffcf59a85898fad5dddc0a2d3f64c6edfa17e8e830df4f9e6f2d111d2b9cf979a2701c5a940392ab6cdb821f9731ae063728dbc4a57d275aa321cc6cafc85ccb9d2b403ef0f696b95d19bc200e28771a1d7f866178630fc0ffdb794b951cbb4c0f2921a5348bf9a0edfd6145e0d41bbe8503934060b65976a332fc4fd36b5b7685d62a129bc65e93307faf0c08aef73323c078b414129f399bad2a18307ff54219551ffcd30ad738afd5d599a6f199fe75b5b230f26feab2c1f870a8292c6166ef8813f6b5a35914485a19ca95df4225adf7738c6f5b5a08cc55b9ae38a5d0e198f234cb32c06cd633f4ca9ba18969d1b4102f5e9ed782a8d165f5638d26702aeca4cd82ca9fa7967cffe5578c2c24a277e11864dade13084a54d124528da3a2e09093290532beeca96d20232293abee35e59b3e05f306db49bc91df484c20247c490e8f478b4476932e6505c83a979d62d3eeb7074b3649197196bde2cebe4eee72ee556d8bfbbe6f664108ce12c022034d583b78e6fcd4b7ab84ca91e9477939e2cfba41f3bd36915677f8543b1ec4f6618eda9d8e79f8c12fde2e3c621b254f95f83519814bff23809aa93c6f79604a672e80307def08fcef4ca877ff7924c14e94cf6c02932c2e06e41dea79f6f668fc72fe31fe5af234a60e57d120967c3f31baa77da505d6ba95c073b958599eb8386b20929edb2c95d6cee270b82628185f58fa13000fd113bef6179e85e219251c314ece34a5fb28ef860422e385cbef6706b2be61da8d754e716ff7e5c877ae7deb9fd100cd632cf4f7896fd797070dc892cb045cf98cb9806f84ac20f20caeb697c693b812db53e6dee1a8790c2fb539cfb0eb131ea4a67b5913fbdec2a8ba3676a4f0935655686f879832c9e287c8002c35569d2e814b73fc761ac7f652e466e181ee419b59e147322b580870baaedc69b66a29aa6e388f271e000d9cc8b42c837ef78e3fe619bbf57c91ff9f80c2d639555d2892603d3634be9c50ed3d70702b75a039c3c5c8c2d4c8ee1f2bc55b68d7e391aa01ed0cef619ba07a5bbfcc9a2598eac6638ff28653d972027720155c803d2891dc49c66236e5bd24d50eff5249b7e7935f12dfb6f60a7f9b8b242faa1e2e4391a5cf5167983b427097f3f4614d194dc795ee0452244d3be98968c9cdbe0794436566edbb71360c852814a4ffd6a968313bbaefe0ee5a806120b82f2d1247fa114f2f6f115bad943756024a7ffab3e5bd0e14e98925e1c65bdc5c5cedfa297a49896c22f5bf9e0e06baf2cb2febac5698235d85d9e9d5238f82fd4d67fd3f164192e0ee8fe5578bf98f4c97f0e1546269ee7d90d3b3b0b59033fe2dfffd5cdf150d61f3b2298306af2e799a17fed5ecea63a17167120f8e5136c783aa9c77f7a42be359891cb7a91cf2807c3c279b2730e2b8f3135700bc79c7e874fd4aa12fe072de2f27e6b38fcc9d36878fa850e28c5c4e5b56eef8669427e8a68d51d0ca989244b116334cd8cef82ce50341808fed37c01f7b5bc660aec1bf4aaf29a49fd34bd64f439ae60fbaec1817f7dfee5370d4ae4fdf173ac76f554742b0a8e26dfea8955d8ba8456b01e34e9640673ef806a79c28489b6128625d332f8f1167b5e4f447a377493dbb6cb17e91c1d77a373c4d5582ac41312e13f0f32972bb4efc21db8954d328c40593b6ff7029c34f6dea48bb7345f14eae7841a466a183bc1a4b0aff43e6951bf249a7375d46224a383f81753df161d2d1c17893f8c1c477d824e9166f205205f6082900e5038e9277a407f65bdc193e05cc6cca4e6ea7f63291a14180957005e26340912e611472ff4d96704081e0cc5bc1bc39d0a34c51767530dc10101a8b4faf7c56aacfa022355ae22f0bb053f3c092605adb89f11e19f765e860955d8b182746a05638011f5790af6941957b806d7219359f1ea5afcaf2145aa966232c20e8aeb6296fdaea15dd8b5fb8bfa6137772ddbb44e10eb8a8ddd7e8ad37b08f6b2ed09812d2420e65ec372c35f43c6e7ff68ba491abb181579c16d645739b255ffebeb054de8ef48ff686a7d801f66b397346ff4810b7387dbe3f3a0f89c753060e699dd8c2459b62e472793b35117f870860e8df5b070548efcd5133f84dd59644c064f829b65b8dc36f9642e92ab3c169fd2fafa71a3a7759d6c9aabe0052d6cdbcd666a760bafe31475ad116103bf5956b08f291f0c8892262c80229a07ff957ca0cb6e4063fea54825e22042d321597e60d739ae85b255a76de6bdf48748e62e531dd4ede699de7515745a32d9aeb5fec598db980fffca72b9be87b4632a3d860167154dffa1d561d3f28002f235f572dec5a11ea36625c248ce1875694fdad1b7e3eae70a00763694488de0c97fed21ccd39de56ec307b3bdd4e5133d224104fc4c6859425bc9898411abb2d8686780a824d7a6831a76a8b94a6a9c9c27b913199a6becffdd5b598ccafce129be0e98956b2aea5c9aba80379265858851498be0010d63c886842c40e92539c6e871d5f9e9e617439f4c709989aba577da325f47db51f44c53a73ad5436844156ace3de899d607fc0b686bba45f0ab68e325b79096951e44a76473e56aed904847522aaaaabb2a86d80c8db2b8907cb6425fdfc8ba7ff8880044e1820a79e7b1ad78c8bfef56b7cb22b790324d449c6f4a9cbebd28d539a89ec7242cb2313bfcb2911f055ddef85f4203d6aff35d5d20c12722f74e802b7477baa2d35496cfaa3937197e25bafffb9dd8c143f6ab924eec2e57af6188c32cd6676585ff23227bbe1ff98f0b02630d3f0d636512c296a12594274252baa3101d9d5e6ed55ac78f9038c8861c4e796ae1ed0edabbbc2667fa77f4edae8ea678ac5aa0863f11ea196e199b2c2fe78e5caf3f6420e445aab8afabab7768c8029a1c931eb24e004165bb3552e58f418022b82c098bb9dfda92645a3783b188fbed8ed52ad4606a205d74fa899d19efe2103c43634110a0f0fe1806ff769559d935a8ad6f3c5f00a5d502dfa3b988a0456b11f664122b77d3184b664aca326dc209b6a62806666b2df37e5ba86139b2e40a1e529d79b807f625be472e52831169d2c22e6f2e84fafdd53781776783746b600cf398ae97d891b64db83655f15e4478de018a7fa40623af3c31dc25128e443dc9ffa1159ad39020c85842351c5c209054a30dc7d03fa2893e9cbaaa3d7ecc7f351ec8cdf4e9f0ba0972f16d7dd347143adb33aa7eecf51e07ac8ab2385876c03b9ccac35491bac318b1d2e956edc1a0327156635f5d6f4fbf7b61cecb50192978425580078615c4559a820ba7b613036279b17c7b2842c37623b6c1f326792267c151687e945a81ae9346048b7aa3f80d1af958225cd51ab546b5152f9e52235c8a22630a4a6a44ab275341c9a4f46e4f45567d0c36b4132f1bbd68ba7ffd39a28f279626a0283d5ff9fbbf00c83a2bdfab3492b0048cf8a1c10463ae586730cc1266dd7945e55cfaad93ecb9aec0ff9dab010332470bb2d4771f3499a0bdc74e58e7bee8e458779bad60297f36dd601ddb137522a8575b07238107aed6f805fb8133047b0f097116ec13e1822fb716534a49a6868435bf668f3ceb8a19c024c2aa5921b58d119eda41d6589bbff89c577ef9e3066c612d0a91ea4c469fdc3d1c9b7f681d815990dcb1fc914fddbe63ee76e5a7e5b964fb0ec403a363e4c4e0134bdc1cc02f2daa4163cdd86de954a0bbe733a7cda74221b5b91319de8471718798bdffddd8b8c550ed8909376772c8aca06c08f8364fb59863f7df4b6fd473d8bb82aa67a0d3aea7ddb9ddd87d529654d3c20447316bdddfab731a58ade4c4a67b76f2a13aac03ea9453394770593c852113dd3ec2dd6dd0d37198b6b59392f30edc798140c5ff765bc60e2458781e66accdfef57f4d9ba79f8ba33ad9527a775c67667ac112bc1dd4a001e7b17320045dd0b6c8bec623df7fa4b4c9c136473426af14bce19ac95773f5bfdc69f5771c6287faeb7c0411cdba52a8357117e18c2f1f231a9663bfa8e23e5afb8986d7391f2c74a16553f184851e885eb07d1efe7b11bde17441f76348ad74fac3e7cdb5704fbd7a534074b7950ea2b120d408f7b6458b59ec162ad6b3c1e1fa9ff020d54f3d0e70bd895f852824dd573c84a7aab3eab49cbe398519a486fa6aa617a6bb64d57e46aa7be6e7948992da71ca28c34efe6a383e6eae7cf5fcbbd5fda9ba98b75e1422e7d0dcfb5ebb2bd0f2003b5a4051fdce721593449e115278c1e3dbe05d48a0553ba67d7458aa2b38e8111fc6d9654a0f3ab4f2ca194df1ca94b568078396be49c047773b3bcddd2dceaae055679a8093633be3457ce2f2b6321fc095f93d6422ccbebb7f6836cfbb8401d4e719e20a8dddc473cb25452c6d8b285bd9d26f1837a519ee855ee9d9421387fa45a0ce8c54c5600ba38e883110b3a06f7cc54c2dd3d739bbf92a7757c4fc84d0d5c75e899217efbec792365bb83f9232d583adfd66ad74ecc8dc482d5336162a7c9e40cc1cf47a4cf7d207b520fc76d849a6cd95c6b69e65c54d219c44eba9dc410d5c289bc724c1ee91aeebd929a718056d93a7d88a26662c95f132f61eb6fba0031c111e7f4d67fc5509512fa45cc07765d10d86d63b24a7dc901ac65d4491f8e76a259e4194edd518ac4d40ddee38e1f47f329aaa9a39f3289d5bad016b7dfef23dd5ee70dd3dbded4ef871e103b258312573926b4fe8ed3b77de04f92684bcb37c8d2128b07c371c2020edaaaa0ed33f467a7d0cd2b11979f8f7d39660bfb2060f8d6514f9fcd7fef9b1fa98ba7c08dea7819a77f5945caede3da566328b484903297166f6f87691b55136c4478a93ff06e2a716355964a996238f518500e49786dea3017f0207042346ec0795eb2f2a002c5c6f644bb6bedbd6c795b6f053dc6df5ad34d1f5995c3acef48820023a78b7ca64b5e53b36a9beb69633b9cd4dcc4dffe1ef9e116db449c97084b4d8e5d5162016ed9dcb620dc4686445b55f62a926ad859152292b2e8900deb6743566ff0b4ce56761e27caa1ba5f00a6b19659585914c34e1a0ad4820dee099834251d6bb3681222cc6acf5c5db93476ed637e154e956f35c51cbf5f7f35c80d2ef8e62959d9a94bb8e244b5d17d95d60498bbbb09bc8919d83013ed3f544f2b920b961f640200e4e9e5b6204afc5bdab293e180f6c0461521a7cd06f16b4b7a15b6c92c61661cf60d3a358718ac11eeb00c036092cc3c7196796cdcfdd51a83236ca08cbe71adc1f9f27e9413701b5828c72721612c2584bdf1ae3acc8a71742e16c2a0afa872c9de5375d5800d9b3c4a7a87c526adcc2d9b82c9ca448eb8d4b23302ce29d7de9b3a17618133a2fdc2f8b62614a00bffe684c05aa774c07b46c8c245abac1191e051c5c1a53cffd7d8c0e494f5bdfaaa35f80770f67dd2c2d8d684df925b7da365f80159ad6d8d6654dea8a81d119162e37b5e04eac00666c3c66f0aa3a0aa4cce16dbceb8d43d1239fcceeec449a9b24a43a06f50059d8a7fc213b765f334b12da71e02ba0a5f007703c609a53a5fb602f76633c7ba7cb2b1563dec6969397f91a7c605f0fe13ee816fce1614bd229f0b98510d83c78d85393963c6383ca60553bce28a725d5ad25165fc18fdd18da516c737cbad0f28b16de95806727edbd32c848efac1ad3280d413066ab7e75d2af91f31cf16017e11b89b75d7819067e6296008ea06f792f0217cc683b864c768ccafe920a0df2053b9c6e3db164b5e047c1d7bc433a3245248c1f67ef1e0ecc86b4e292684b74062c5087d114df0ac4782b1eb76d81b5f3a084e7e9ef8f547d3b8bea821b401df0b1290d0120d74488622def51b0777fb0877a30a1d751d80a52c2c820fb396a60fd8812a35f3cc76a1472d78107ddd29651354ba7d083a6553cbb14e8bca673a46863881f1a3240d81fd95aa1ef32837399e701884372a8e480adabd78769374f8d1e2983efdcbe18c9f456e8f0e1d1e6351943d5db2f7494a3a29dbb443f987c120518da045c23293301f43c2afdaf36abde824caf990e6be8acdf2cb1ca629ee6c3d31be06e1e0692539359a263f914a44fd8f58e3ddef222f92f5d0666ebf21948496d318d5c9cf4e904a78a6fb959d0e68d17266df8421091f073ea8da5f9803aa0d215a2011bf497f0697775d5e86bf45ba04c8296d3991b620819fa41fe24e3d3a693ebea3b702f1a511269178d9919d96c26da3be944e858043e50bc1703d81e18f6217125e1b4333cd87cfefbffdfb7510cae366e2e79209802c570fad5a151950cec6ed2373818a69afa8a542f9253a3bff71da4f778825a4ff808a142483e6070e7ff7bdbb326e140071a93dd240e25ce7b39b4760d87fd37e8c338ea4a8665e9a79cb729bd895e209589f180de51340c9f29920fe9ab1a4aa60cce9f8aaed945ab5c35a5f663af082c7e9284be89e2bce16cf2d021bbc0eb56b5d51bf070e25f4d84639f26752df54579d824ed929275e6773224b069b84a421b3878242eca1e32bc756f5db36cfe96cec023b27b264394be710346e8895080554d11c443183850c079707a4eecf51d02e02769ccf16d48e2687b07a5feffc8e00ff99dd80b707956868b1d79c9d6997ce504c50327e8e9d9176d7ad7c7c7748d3b8dee6855fde0196b99b1931d750003439dc789df86d921609ff3754b2aabccae1ef198ce769d2f12ce7c7c1492f7517a204276c8e8fb26c618409ee6b898cac34852158039a601b54d526bef0a02eb71e4f96c4b5da0ce10fd315d20161e81475126e1607b5a00d9bb221a0661f577f6c1cac74d94b65d082ae6ed5a1e118ad3e9b38061e0b50f7ca05ef3e332283427662c7e760079e607b83c5ed4391128c1d535a617830c101a762fbf5501dea4e9e5fd268b4f49ac7963a3a387187ce1928904a8470a1687b769edd733e963ece1569a879df5a2d02b4f544d34896e607af890333d2d73f27f72322aa8273571f65b1c1542087e7b01b5f476d881e033750ace80c3823d10a9b634a1ef6bf3404671e684cbe709390908e8ad14e8f55ed0de63f6bd3d13f06cb46e5a8b43efd053c4194004e8260498b425a19c6ebfdebd4f6ee0f8b6c0734a43c7f51145bdcb9ce8c5b7546d1136e869beb7eabd705c54c0d2bb52f6b83a676a59fce680ccd4388fad653fdfdd3ae77b3f8baecb3439e3907f994836cfd9d311f4349a3968f441b84ed7f31cda2fef1533981267bb4520277dc3a53538f3f68215ad62a21ee537c720c6a3d94b98f27a960578e508bb5356fab44be33ab54c34185b9116558d6c21b86c083ebe31afed3eed27126b7d43a18fb5037b24da13dd504f4a8c22871439f66bd3be0ed4f35a12e979d9c598e21976cafa056f32b3127bc3748c88b8a9a24b2aa9b9e1a0adf0a8c13a7792021db83def651948fa0d29ead87f5dfa7c8c5e823ba2fb8272f593c399bdc7266516f28a580056cab7b1a813e0256a83c47e695ac771fff3293aebc64f6e56e9074b74585344da23bcb3724b9ac3a2f06c8feabc882485c0f549ca7250dd1e3ec5b30c92a02fc795fb2cac0a336c81dc35b4af57a9c5abfecbea6788ef9ba2b9be8e337ee74f113486273a2969f2bd54dca965c299d45ed262e6c8bf6eb5ca9102a9eef89f34a5c013dd0991386b8bce86377bd35d1d1dc7b7970c7681152997ccd0ef264dedc29ab6478ecc1c8df4a7d601ea68d63e8bd8987b1dc463ac420efbd1283ebf7d8a9e141882b21dd3cb25be5f8ac8ae1edeb5caefd568c9638e7727187bd92d93855a019ad3113ae2fe4a0e5ab6cf339541e35e3c72080693e1489116bc841bdd24fa7076a466aa54559eb411787c416e9b5a48c952313d93f66bc2e5e76e11257fc7f2d192fb1c19bb1e43a1d88a4d1af20ebef39cf3f04120d80ddc9229d3e6f2fbddd3a6a3d293009bae5b57cea7ae6e637fb1886e09577ebc99cb37376fb4c3df0609c9a71aa0edec49a622f4f05aa618b1a6a31dbdea80818f28368fffa46afb9f4005dce173a7d0e8b2bb2311d288ea16705ff9aa8c0044ad419226014b661578d0f9801a4728af4a417124bef25e45bc4054a6f8c3d126a2b8ffca9a3dbc35f3b8e82eaac6c9f7792b894dd2ca0b4c2ae8e4aec6ea120c60ff479dc4508090a14fdd288cf923bfc59cf5bff6f9ae83858f9dee589269c1872c6d3e291815b24b6d46d5f6c2d03447e8d2d920443c0c1fd93549222059ab23c9116fa111861b392d1cb25766ab29d2e15e60296ae611028073e4bce000ea93faf72d4b1238bf6b599f58a86f06f0ec2b3ecd70d2ea5b0fa56fc50e121c34f8a294ad56fbdb5b62281ac20984b5ba6a27b2d0663a7855ca6ab2f2297eae92b641f33d413a4be536053b68eb91079c6545cb790c9927f298d9214437d0787db664f1fbc3f4e08c78dde632a05e5ac66a942a0ff93d026a95cb9a499ed68175e62fd2b1fad49a8ed27ab168257f9bca2a9fceb720623286ad5265ffc8f96506607daf0f6a2f904483a7c496d26b807b4dc9a9237522bfcd5971a002198ad1e4f02fa958ae8f716e5bde043d33ab25129edf8cb8cd4fabb812e2d237e9e1c65231587b41d076fd2f83df89cb239cd3de361b4fa7cfedbe8866fe389b44183971e88f6e371e032f2e48062147ca0078e005c71784c400726c405bade6d6c07c01c1f9776580b62eaac1c5bf5546d89111ddc5f177e9913c252ef287c66a40086d0cc9c4a74a748338fbbc323817f9a307bdec0a000b6a1c5c47bc414d22072d79d8684c8c9ea24483bc262b00dd3a09463748a8d172726233d018e2c9634ad54bd01256a590537d51b73bffc355cee86a4b20c5f77700d457f355362af17a2f2438701d18cd643a7f197db8f37c3f80b5df02aef0f3fb3fb477630e47be7d0182be95e9e34a60308f20856de115679f91625475753a8d902a4c20adaaaa7c7b615309df7b423fad1cc510c9b62633f0924de86199fa06a9374ba68547d9cb2ea8fc0486062ad9ed36d315d5e81d947c76594cf02f7839c33bf3d8d353d292681dc456553c5b7a15d95103f96c8522530a6744cd6533666c42212ffdec03f1866aaeb7d3b796f4cdb6ec83f6733101953b3b4e7dad3777020d2ab97d9bb872a528035de5c95054d26aa3851f11eef682b79d2b57e82d81a95c4d67038187aff9d876ab8815d2df3558bc01515268f82db9596017fda74d311e508db1840f8912b6c956aa7ac971dc12a0fb13cfc924f0e9e9da5f566536576b49c0ae99712f63e94eeac6ffc98cf745670a21b425cda5f408ff0f0dd6c4f56a4475d4602b156d631f8bae7f88d661debc0e717a759b55d5666f7a40340aa5f17b53d8177bbc594b0594eb03d77d6da1c7ae19916bd4a4a34bf8d0718309dcaf82027c23b66a1bed183b3245e98c67145261f4b84a5f300555a91595b6552a5a9bdc5a72bc8dc96e560ebabc5acb56ec8d779b40e684d6218a092cfb9fe77579ca90fbe8c0887db0f760ab19a35165044e085e8c87291c1474de79b0672f851671412abc6bc5d38934f1685c012bcf0ad9dfdc64cca05e31139088a38b3c6ce7b4d23e4792bf41cfa45e6d7a18d344f077e46a36fe9c6928134f64ae9aada3d0572ffe3e5ca091d3ac7843e0ce47155ae9bd37ee24f102d6063fe919de73933bc8e28d3bf14bf8e1d93ca081581debc078bdd147c215eabe40f96270568e5ea7b96ddff369437450d74daa0e755437b768a35db2042a0343143ae6a441eca0abf4d950f3924a6d1be37e76984bb67ed8023e25385d001879097e30d7ac9469d5326c8f701fb31f11907e5eafb74e8ed99a01cd8589611ff0fbfa189e8e278a2ecba3166178fcc93661a7934723910e490ccb9bbb56551431c2d28338bc76dbbb45a7d9447ca8bc604809220faf8f696927c8d70c36fd01084ac35be5c627e70a68fda76079f4f5c9741e7019a6d3c9cd0e0f8ae8121c0adc0175d86227d3ecb4b53cd120163d34d020078ea563da5bacb68c1ffb41e8ec68079717cae20ece0bec213097aa23d77ccf7ba2f3335f32cc3053252f5a996aa0f3c6932395ffc0541e98ff2e75ad29873814bd481087aca3e2cd3a7971ca88b4729934c438540cdfa7c082a03a5e59cf853220a40ea6e9cd6bf1005a994cd01e6d8db8d263243ffe71422571dabffa1a631e5682def2c4e296ea7699fe79b5fb1faa270c8fa05bcddc20a5933fceebdc320a0415f0ff0233382e6daaf0dd4f5c1c78a74ba7c5b6e325430c81207a8c9fa53c684805de60e02bdde286c5a8819b5865b6eaa2f2c90481b9b8962797b8769ee974e5c732ed626c648f6569e973b7ecc02765954af834208b444ef77bd69236aa0883f0e79d76a7f6e364bfacd6fb16453d832eaa62808e2ba3df2b943b4185a7f9d3c7e8ea04c08b5bed44e9cf4a791674d3cb05a11d5027574db26578aef0651770db390c835f5c50b0db182cdf08d8a0a064c023b170e18b79d4a0b773ed34e36673ea5f6940d866e2fbfb90e07661e98015e099071a97e87bc36653e148880a67ac0e599fcbef6ed35f3dad41d864c8c75e24e4b95c735859c63264ed2fb090ff37277ac1a6dc8d1c5da20963d18a1d3ca97ed0888e2c7c9c5517c6a3287b385ff172332637ea3d40844810d8863c6010307256e0cb978971620c788c2e4264b42d1080ac8f2a7c4f5cb92f2acd3f7e2aebd5e42642ae0a7013c14179bf382ce01857f0aefa6a1b2bc13654a2560cdfdca0faa1b90983bf4118dda2024e260cdca83e0b5baeccd28f836acc6e48498b1e25b1da9315db973c65d9d8b44c9ed857cf16cc2bdef84a77b8822b796531febed8c89399094f7754e9271b6b8402b4dc302568a679dfead49fa1b88bda6629ad09ebd7773a95c3034bfae116c92db90e5264c3c285d0598145f013ac9fade2f806ea9448a195da8c4b1ca4a2eb5f6eea3e8634cb197d364180f0446cf36bf72ab7dd7e8cf311270d12da192714df4326ee7f31f71e5131a544853605f9fe5f694512abd10b0d1705dc6187a76004371a22fa5aed55b122c30895b745f0f90dc2142d8d35b4df3a18f675cd8d2b7fd41267d724e1fda052367e527c11d3c5e1f66f9afffb43c8ebf01aeb54ea8ccc41e9f042a0a333a0efbbe5500a5aa1873c4f3aaa588f1f6eedbec0fc20008c7734c8faaf1285d0f83aa02b7766e6270fe7fe031340955a2cc81aae604723101865456ad231a6f68a6891b0506e34ef89730d2a49182f6141a4b8f2bbf69720ee583bb92e80a863da324dab6a84275eadf327dbc043408181f4c49701af98d1abd95dd5d4bd476e659160512ab1a1fd31a7c044627522e534e4671f92a4da39c6777d2db5a94aaa41aefcb81fb60ea883b7a28b0a057921db4ce6544a8547d17ea39b70dcbd032e2278233c8e4dc67ca9b888b263b00eecc76951c6cb496e82e94cbb25a2a779ecb03e16c2151e2229d4fa8e326d4a4d24b679d86102931ed7a2a8766c36af6919adc50e15f524e6915235228ce1d1150ebce57fc4a0514a24fc8469e3859f393776275035e3a56a82f980ea6c05f93de1516eda3dcb3fdb18e28ff3fc8ee066c4debbe1ef0319b49281f1897159afd562b73e266c6d3ec5ee31df5c59182bb4b329b464b562f467087d8401d152c461424380d11563af18a4aff2909eb9e7ffff40c750d4a1ed6108f9b43cf75f3aa2ca812d11ce2640b1c6fdd31410533364d38bc603562f30b43d52a98b0cb64e1ed200827b182e4481d1479a6a8a0542f0d0e6a9719dd2de60087459d1ece65af06deb3a88b7ec745aa5964902109c402569190c9a7539dff280dad1735f8e46966ca78fa8eaa1a64ad0827cfaee763bbf450e8ec8cccd817b6785469f25998da24c28e6f4a1c1afb2b885ea6a3ede8ae1f709189f8fd442ff4771bb85aa1aab2975c6ab3d6dce4cb458eca99da67b6f898812bd67915fd91be4a52696317a2bd1d8f8dc4944f0e5eab029569ad6a63dee053ae6932675ab3a4241c21bffc7d636d12dfffb7f5c3e14203fef91cb304c83a5767e923687c40ec0b1e5ef35ef6a1379bfad29c716b34ed6c89a9e9f14785a8b5e4d9e57aec54b554087393f8e14617144dd3e7d21a0593a9aca984e78acae20158159c349a2af60ad99891d3c01539a26dd30a644fd46de0b9958c3184eac415dcfbacb1bfe9ad8b9ff14e6fd115e44a9d311f0084a81c4502a81d6db56a3880f07ba62d04b08238f2ebd0414048108b4d1966c2a00a2813fbcb764344c814ccb28755e02802c3bf1a04a6bc5b0d84efb4bc5814b6d8728857df5cc534319430c61c8cb8724fc0db96d477a31629d5343aa3f27b24cc10efcf45c27aa94b62bfa7a29987a71dfb6002bdcac60069dc9cc43859d0ce97e737c4ae600a7447aaeccc20578f6d0ef0b27423bb1225acc6dc5e91539c9410580f84e87a5ea2580c10042892984a3f2fce277ca6df422265d97f749c65f90e0355c08685f440f34646bfd97a4daf5a13b4fcf77ac1e39389c80920c6b0e06e0ca359186898995930ecfc43afaaef5ce5d802205e323daf694905a495cdaa6c566e82943720b1ae3d9a79df6e88a2946e3d0790dace4f5935157921c4e630a570a5c4b69d0fd2cfaace28eba935dd523b18ecdc0a59db277bc1adc4ac8b253719c744ff6396be6194fc499f3c89884bbbd8e19df79239c69b0b6e484bb49dd502ca0839eac8eeb907e6bf99b5f44526c74fb25d0ae81009d328445b0157f2ddff6549391e07484ecfb25bf60a6790f69626c5d057a9c99d9b804c78294406fb692124ee3598ff85b814dd8958c1019b00800d0c2c76472b077b8967163808eb6f51d213dc9be07db9cba1ec034c5ee3b7dada95075dd786d64f2a6ef8b8ee20bc2fd83fabbe6d6a84d216d762b5cb097b974ccafd961f74a2a7f3953cf219e3a21036dce4dd23f2c8eef1c495999c1212f8c3c441807d00799b198905d5340be9e231575f7e54d6dbe7a069b77b7c732a1de08cc238e40148a9082fdd6c3f42bf8ed6afe8464d24342f246fe0f19b4271c3b8085ce8eb51696e7b5d6808fd9b94de35e0af482b6e9b56787267222d4014bc539fb93e3d0f80d249e98cfbabd1b515988e372d83391ab1a7b62bb562cc8cb29031906218b296c3f0bcd4c86d4946c517f2a95679ae017fb5c0f5be5f47934a46d720c34da4c49c34ee8d2031f67a3de6b4dc03a1eb199103ef99818081dba526505d6bc1d32b3f346837914ec5962b935b10d2cd9c4ddb9fe3099115f555d8ab8dd338e99806c119ca414a9e92b877b036f8359b38fc0f3388799761910707681f1920883a3129f257ed2da9d1d31f0a4d0d0f6928fa8207208ad481d394bb776e68ae808d5364caea4563d2438120adcd9ec105a2de737206db2b0476c374d5de2dd7ccaa88af646016bcb8d2a0e7942fa01884db830b37b89136019934d0044c48cb0327a9ebc9b567090111c06b53f050ef38dcf8ea8355aacaea49cea92fca72cb82e1b63c3b5ded61849922cba70d2a6419b4abc07b837b7cb79747734d1fbd5573fa55bc521905017e0b18d8000c1e6a754e09d6bf07adee7a63920705b72a031a54935e1d8f3e6956e6a379ade196ad8975eef83881449c997007109e29af2acbf438e776c8e8b79770a29e0a6301a653f4165175a61f7bad9aff242cbc99e5d09f97aa8c8a76ba1713aefe490c580a98fe5bd3fa405898bd6b339bf7ac7ecd8df3c9193d1130d1bb7a92bdde068777302c54734b37b1a46e38a9717de7f5bc0d3e8a904117e55da936ab08cadae92f73ff77a57c31bfa5ae531f41f3ed278dad375a317f0fa76c17f11d1c8b3e7d945a09124b67a87d5d68e5d803718f9919935bdf33215766c7bfb80cc6a82bf120cd02eb772d2fffe1d032fcec5b79f3df7f52ed9cbae3cb59aaee7d5b94003fca338693644e46a488a7ba82d57f87821a2fe101b231cd8de3e24f6a445ef28ba2a1bc0f417d43f0cf554c053a899ce641b9c5df7161e8a499e55c77aec2dc71420dbc913e1696e4032ea1d3ff317dff8c4a60b08da80f087a77f8db51b147f8c35cb3f1555cde9314536e07f5130a2d417224f182887481e3f39f9e6c2e96574650e4d592b76875a06ae9c6c21c5f530bb646347fb05b8d64d5613e896bc295d10df3d01e51ba02dd34946c0bc0a963a10a70052419c4a5370132408ecadc60481e8b75f615c73969af893f35484fc0df686bf8c11c18f0e91b41532472ba6e47d23fd58668531446a267f42b23f19d30a6a08b80b43071bd8cb737a0e4b51971af431e05309b7ce345ab1455c710a305e3c62f419846e7cbd4505c7c47db6ea6b36a913b1e6454c4e30c32179850e0a7bc8c9d59652b04b1baaf1a66802f28bd3631849840340fab5e671e038c44114985cbb486afd62048b907942cad9a6b93c4a9cac96a82e653708aeecac26aabb2056190f61464cc622f7c1b2ed0719b398d03ac5b7f7c7e82c6f16ec5ede86d6c50fe8a1f557ea2b91f3195ca1ff2490863dff655a40a9d0e2e1e214e04102e8d5194713cb56c8165f70cbf909895288c201652b7f9fed52359bf7e0523def8c79a6683a7c18fe773027eb6f47edc4a2e8c3274899f4713232075b50caf3c2d0f6c890f67a4c56da7836f981d81d2be80a0a80f608291293f8c76a95618f97c5ac51597f0c56c763c217b6af6fce3283dd2ed970068bbd3af94f5629d56acd03b65a032bca6d3d05298b82b35c749e4514dc67582be463a6f3bbd071f6645c39764188b1cc9aebb8b8667804a554374012912cd45de70c2c82582887b0d77509081da9f07661732cbab8572c53926bf2579fe20fea7059a66926ff33ba85f5a8938871afb131e26f3b7dcf8fece833ede24d9a536874ae500483670d05b9aaf5e09694ef9fbdc56c0131ba3098a76de1626c054fb47c0119539a944fc9cbbdcffb0029307a90d82ead08ea8cacc87d916b8ecff3b83391ec414da9b24091dc033cc17fa109adcb943f3813825ab0e57e47b364262e8ada374e5493ffeabcb4adb910a0c3af0310f0267d5eecc858ba2b1cd8411c0c908a85af4191a0c9d53d4b28643d231f6c3edccefb938a4cd59f8a1387b6f683609e5f0bfb263b8fa885ad68176c1be0c026d7dea1bb25be122ac76bc5916b0434531b35103fab8afb8f7919884d3180ae0b3e9d9310521981a831fcd9ae130885957a5ce22fbc02d45f606c8a28c35e5a5098aa04e41877eeb2574d8bca5464d5345bf4c05d681b91678857dbd0178ae442f5c3faa561bc5213ba8b27340b699727ddc7b45b2cb9e58b570e997a5aee61d1dea6233ee1426d4e84572c8ba56fb138efaf2872a51a33eb00bca71fed5a7ddd927bf3f848b72ba3dfda26b2d36de7734015d1c3a5ca0a87b623cbc57e760053ff90068298f8a1b414e602d4592aaa2cfa09963c5b9be43ebc2e6082f8c2e00e45d819f0489d96a860ad7f36490998deb9bae514b02ce8f57d37693085b3f3bb0ca2bbe0726c1c80924b19b39a1067576294f9a9dca860593fa94ed9d3ca6ac280ab4696790015f91e471b1e7fbe53f8775dcd9db0fb5fa039d79b11a5872427028269618b6acded7c73d384a3e66e721dd8a9a38cbded779d02e9766d09b7e59ca8c7fdb9f10d9cc98ccfd5b28c9407443f98c34889754cabf9b50e49bab1fd1b27b8914adee496e81424e2245dac75462cc98cba52a677e65e06d9655e323db5dc355762bff2982fafcf703dd1bd93a4ee060757b14d91bcfabca949547b0b31c294874f1eb2b9f23500e15939807df468709e960c8e9cddbf39e259c7e35466e35c6656055b8cca64f4952a937de5381c846f5eb1ed6222725bc9bf58c0e707857b74e6b8001b07f9a1d15af3f5904404102b4f8fd26133d25a9be1d4ab4343f0744cfec2b1f0a1275484d6183bcc5d326a382bf7b2271098950638b6289aa1562da863569db59f3613802f9622f3a7caed63047680b035e403282220b516f2d00ec07551c4144f7a97835a76ac2c39c49f7554f4bfd0754a038b55d802a0d273ba88ad8bd978a43a0f8de674a096be8e86103f6de96b8601f5bc2b108684d3376256ca78553220e1861dc928f69911aefecb3e3194bb205ab7f237bc94ba4d193960b1e8824aedaf2e62ff2b59e5a28fcf593713ad1e3c5a28ac7bcda14161e395f20ae244144ef9ee0f7650199e236a29eeb4763545eb0b0122b45474ebf1807399f70631d0b14c0171ac7dc7aba2790796b174c3db2144fda7386cf9a36270f4711627ebf0617e054940fc3260a4ddf4467e12e0cddd0f7b7fd140c629fd5ae1be402e4a1b2e2a9aae60b3ca17bd144cf23ef56d9f095edf29788c763345dc7295143a086aca44ea46a16e9b61e2688990a2a81837f98c098c7022bf08da49a6228d2e27cfed0935c62a10889f3b003a2d07c701aa91799e29bbe473aac1c9a1045704812315fc015d3f7e4ed8d2468810a0b2dff6237bb175631c6272c2cfaf71117d96affb984ac413e2c34e7d680c98f306b4784043e10aaaf826c69b557d03bb139538acbfd7c1e7f148e215e6c0f8d2e79555911947da94ce6d4c7c25a2f2ffac3e78cb9618e932d9e9071d30d2d9dba6ebf5c194196fbc91b2ad0f577b5d6d5b8784249ebe1b7f0aed09323a4bcaa5952ac8d13bc98325c43cccffc80e3fa3ca5103b8508470b04e9fb30f94f55845cac85a1004fa7da10c31adba82f118d92174cb9b0f65be1d195e510a741a332bf69c3fee0f5dea856242dc922a14775dbe71bc3d572e38a33317f54dfca6d4d1ace3d4e526bd9448f6c4768d6d07c17a278e2e77349a346932852936e755ddb1e7fe2fa9ba5a1490fc9aa3c59d0a697281bc3d4c621975b2b6364df43ccdd8f01840b961b0ea9d7b1def2dc1eb3bac8b7752e3016385fa9700b2a94ca4e1daf92b877151e692601d6f5f2b3a1d52698420eb91d0d5cda3da5a9ebf6a88a78e0c0926688fa976ca3cb9808fb11003b1f747781aa2e55dadc6652be84585bd0efbdf3bc5a2fb95c396306b28e0e888b8671505c657721d221be4bda457b90f0c36e8b60cf315d539d156360d4a9b43efb7b67511add0b7400f8c103d1d5f3e00673ff3493384a81d302e827fc4719047b7b337007c532a3520208c9cdddb992c6dfc7817ea0ebf01750faea4cd846f22d256bba0afe2b15512f793d9af3c577b95a6c4812328a9f993bb8626aeb46114bf6b224a9a6a82136bab214dd07017e29be9d53d7cb081c642f17f73a835d9c1a08de50175c6fa4823d133edd8a19b1b80a780ec131518f7408b09ff4daa45572f2581c655f789f738138b8fc3064740f1e0a5280ef74d7dd4a2cea72fa4d6384b75c895190f88c21461417ba82bf1ab09d8c9c40a86123e2b67a7ddfabf970bc5690c379b2c0f39ce94ce2068f3e3a352703e4f83667d699683484120061900829230d63825f19f1ca7c5fb427fc38a8f75d2994865abb135ea7b5dc25d8000a0f47fcc34e08b6f0bdb44cef71ac88d38e6f1af0989fe77fe431df6f5c18c20c750d514c242fce754a4b010a3c5d9bc539ff8ed228c9100a89ac5fa07d07b1b74b4a993b6c6729992f6d9949258e541feddee90dbcd8f1fd718e1d8fc7b2425cb02e7d4d677c2e0aa1bee17d5332da06b1c5ddfa5a5f105378c97e52752d23a22f42c68f85db554abb0fe84955cd2d8f6c5a02f1e4b21d3966be847b6139f60f6078b5649707e200df7c18750ca5a8f6ab17baae7c887266ed5b68503a2bec8989b4a03e89f5494bccc67063d3993001ce21b67b9a91f20e18eaac5b31e77d19fd3eeae7b99db3fc81c2d3da0d11462bf33d515cdf14d4b3ec8f3c0fec8065a0b5b8a7fcb2814d0081d9c4f158092760c8e051aea33df94ae602efb644c838e405c1cf2278a7ce709fc405260a1ff02bfa0c5af85452e64a5db3130c77a2f4053b6caff4e480f38468a68128d6c96f1c293ec4c2eb3505cd3d4bcf6544728e4a949b5e979eb872049686e1739c3be43060eb11435f53fd16e4eb980171f88fa80754b08a248137b6afe5f1df073991d65ac617826a1a88551c5e850ba74efffca4dce580f0503d7f4081b12c0c831e78ec2b12812922409880d144f372af94874cda8fd84b9de9af4c84d9ce1c6c0486aa67e59ad829007be2c007751eeb2af3147be5fe70aa667ccb0aa415c16dbfbcb30725698febca0d87acae71b1f41bd91ac019fb8447aa54662cc2bd5211eab8014686e0a2d17456994f3ec40a84475c4e6416fd470bd151f92be69bc394580852228061497ca57698f000c023c9f8cef909aaa7d664ae64b534421cd77e2e9202f360af921f4c264ebb7ba45ef9311d97d4bcf0c9fa1227da39c44b4d45ec1fcab339d52b3c9f329804002443f6529f1cc707650b8cd220be169415b8e4b29145e279ec43935b32233903b27f2faa293f896e203549d98509f460514027fddcbc4bd6743fd93d8a1b7b8da620b1953069e610b2d917f70d2fe7225f634055aa98d4159a684acb306d5ceec06fd84a8b01419683c98394aa86cdc0ad5302c5dad216ab40dbd11a524a2b14209b63a2c64fc2e9d0ec4b0787094d4f9020720abcdb48ff3551c8f8018f081c1b8bfabb9bdff59d17654fc01977ed5bf59e76940e92623412f41ed73f05484473e4af56e21b63aced995f42c8e7d475b3a7eb57d24146e35cc031c58751c30331f3322fc5ea468054eaec09d017abfbb655689fd9311c0f9ebb497bef0b6891918b697e05c09adabe3295cd3243ed0b60cf57f8d6582101130185eb58c897da9d9a68c54d138ebc46d181c5ea72b78a527be4e34392df76a4cf6e7c003d380e3d5d8bf43ddf80e38131735170e5a75740c9237dd3bff807b36c5835b23ee75f19b976269930bb1f42954c05965ee0ddfc7fdacfa248c78fb5dc4f3af180a978a5a78720c300eb84d9ff1463edd487a5c9b33f0e4fe9a4c85eaf30b572fa3fd56340c77fd6ad0badce770f6532241737c9e31b35ad3e59183c0d8cd078823e9266662fbd820cd5a7dd983f0e876fda0593c64b3e2e2e485afa71fb3b6a2cbf7946b51f6d22ba831b5cedbfcb321cdea95f984115b30919495ace14edcdbedb83d08f53dcb4727dab39c1dc56a8e703d52b7e64baff376cb531f614c475191ba060f63a6e3123c32e9865de905749e96ee50c904b2cc9ae19243f05caec92a4575d169f17c2ae410b371f55cdfeab054892347ed52248a926f65d780f66431fae6ce60b93689b5e347cfe6bc28563fa546153f498d1c04858cecb9a6f9a27736f671069992b74a94985040633b72c30658b67a2ea6b967949d77bb43feef0078dd31f7286b1aa20ff7cdc840df3857ca49a0a00effaab7867dabf9f81b360cc7163e93f31d67252d2f3ff07ab0726d2a6293a506cf5d924e9b7d35f2555b8fcf113c1dccc62d789f7166efb15d7d9d673753093cccb67c3638fae471b1863a4d72b25221e8095820d356cb469b834e0750ed19ddeb77bec84badb17f4c10b634b43f1704add7aa12ecb20b615d400333a8d1552fb11aeaefb1a93e3b8ae85370123d1e8009722188c0906a37bd6a6d9c895b95bef9a1a40a734a292ff2afcc733bdfd0bd6dddaf4e3304b934307babf89b4477b64c27952ffa308c3b94b2e7494a422f1d2e26dca4be62580011b2ad51161c7ec0edea4e70a8397d15a547c90145587dd8e7835e0ec7277674015e4ec2d54ccf32d2e42bcc0ca4949009f9fccf5ef0623e5888d59c541497d5b0351b1fafb0a548a1910b3c8cb629c4ec15865f0b2fc95c76a4ceadf5840306c79bde264d474417d32d6fadd53f3b931278e0b413e9b08ef3ba92033ec69ff413173ba275af5eb05a291e2ab5ebe76ecb77b2bebbb3fc9c1724f4b2369610ef17cd8e31116d062773e4157bef2fd8cadb01940d2b547fe522352a71513b62d3ca1a73eebf0abf7799e2cd6ea316e12186514f3fbad35c82db7a836b968228752e549d6ce6f247b628c4ccfbc3eb09346f73a85a82a2e5a7f2115ca363372800406f16d95a35417769a0696c4d1fef7bf5363123ad2ec5c181192a19e259ccdeeb8e0c73f8d6e19300ad354e5176d08e34f08ab360093f07b67284fcd2bbea19d0d4970fdec4441dc63a3146477b5d9da49511ce1b057d3d4f76b05917f95ff9ee2b6195e471fc7ae6caa3b0b9f41038230ebc2101f3a139e6226d754d027571a81fd930c2b531e4b84675527f033afcd18c4a33deb4b239d514f04cbb7b7e2ec2ceaf7e9d1986f9556775ca9abcf5e39323670db7598d0f89b1a7d10395b112f746e67aabf9996354e32c912b87592ea506751dbc0276369145322cadc8f9f2961d39b649a58ef7b53d01a00c7f9f568329bd0b4dd76eaf3d68914dc125d6df6b4eb7cb14d5c665dcf72d89e6d3ead1a548cef3025b7d0ec8738f28e84c701a8f7b74a179ac3ae40bfc00eb18aa857dfb34b08a543d5e784ab9f86849ad685fde4de35ddeaed70e0f4b02547e7e45dadcdc854fcd7925ff58f3eb5965b10a65ac7276b96be80a27b7a38815a73b783bfb560d7f909db20cb00e9eba4b43323cc8e51c58fded27db4ae0938d3d02bc89a75c9a473922a2257e27ca3e9d5cf867ec280bfc6d565e5bbd0fa89fd43c122258c248f7b63356606941603653ddf098aef036191f43a6e88d428a07cb4a3b1ab2f47ec4279d40659c704fb896483a7e19011da91548cbbfcf2b2f23cf3bcfaa126bcd9c93ae504f965d603bd1c3493173250082b17ce7623ecf54bfea5ec541f864db0ca1a9f01d9b1fec07afd0119184b601d3a9ca0c31153c7e6b0b29fb098b5319e07c26fac3037ba7003ae9a1fcfda5b250ce527625b40c86acc93798f5892f0e67af1ed6cde344afdedb8ba7f4a3a739c686ee3576c54e5692ef62e7c9b7c5c5d6ee44004cb8f2e213e170e993ae1011f3f2c5219c7ea20b2d691ca21cafd3eb0cbad9b5e7a08d0f07217fc3d40bfec1b7c8e9dbd33bed4a9283ab827d327aebb3140e2e13ac8c5f7e8ccd03b945a7a5652940cc8826d115c5c4baf93c2674c1f6afc4faec4a772ad314e8e137b499662db5a4dbc75c060a1474860fba6d83be09d65995917b4b75f5bb2f29d3b2c2484b06a737b6cea979c4d93dbd08b1072157f05c4884181f3a533c65b4067f9005d8e917ba903a79a7f842cce2250a9f3b8b431156dac00a04f2dc46ea0268b69ff2df008e874fcf24ca88cacdcb3e77187b669ca563838b5f16bf404e076c02eba29d26ab2c00a56c4fde177ead3860c3a9f2a656aa27badb56b6ef6caa2c1475f4cc4b066ffa8447206c2483f9b2cfecb7057e06adc1c87a0cfbe6ad3d439ebcf1059436c5f012d3ab04267a403efff02272743f99cf94e653ae7c57889ee348f4ebbc153425f23df83433b5c9673aabbcac914d42ae262b06cd3b8f9252e7476c9f0dd466ec91c3934011a0b02d02315cff6a6f012974bcc8168ad724f4b40af006148f20540dd6cce1be0358541a33bc38d148e32dab2b0a73e5137443802c00a12da914732c86cea01ee4c58f52a7fa43279f847d154af4985dce46211c43fe5fa7c34f3e0a5a2b0924014859cdea8e9f1a161a054c58289ae727afe79d5872d48f96d2eae2022a2383dd82ee734a52750b8b3086a9c88d82acd49025c637e2249e337bce38fa4a00e4dee4f6720d0cf965e8efa3108ec22c7d4b770825ca2d6281bcce111a0fc3e4c79d35373733c9c27b18eba5324e5432ff09ea4a0c72c3bfe8ca12703c5ab609253d75ccbc5b56822450af856a9b2e2be3e796b2c00ff1a298c84c83293ec44a1ce962f6d11a87ea7fe5de916d1c0d2ebaadd1a23e750de5a744d1ad566edecc86ab038847927bb80e00fa15be7221ae8a28fcacf2e7811d286bf821a5f05dd241953602bb94c3c64ef49a4834be5423e72bb19d555db1f0d134aa886d641ef4122a07873e998838c0a12f77e309cfdc83ecf9d4e2a456c7b895c83fa264fe3cf2013826a9504838df46872a87b31561f5e29da95fd834a1c781ab85d63d3a430755dfc6d4fa4abb57255433f046b1196d1d3a74cfe69a03c74269fbd2fdeed3819b49af505ace03d7738014effbad1251eee01d78710c0908213617c18316f070ddddcefc9f2fe27c4bf92d41abd9221f398dd4541e6de1600bbcdbf8f031f522d9b8de818745d5dd9defd35f688e6f9dbace694db32d5996302aef12be56a169358dfd6aedca6870925d3e591e819ba0c147770997cd58dbf1e7eaafba9ed9a0865ee76e330fba73bb438fc6446a603e093e3b5f51fd10e359b284f011bec4bf2399b1c61acb4f23c251319c55c11c6ec6fe52cdf4722e90a32313c401690ece76b9f42fe480e4fda2c2d0dde91aa28d18c5551b3c00313288ab015c87b3f7358d2580575f6a438ccf050ed966619ee84c83d46eb35ee52e7f02b1b35a69b77585319475c99ea5877300dd5a5b73d9ce01caa9fa4dee8016dd03df28367aaa7e112cfda2084e06bec5ab0b4f3f193272ece1e4b0d428c9970fee94ab9db70d2b5aa028b11aa6563f75023314dc21805f0fa42c642a529172b945f8c9aad579140d3079a6f78c930d45d4d08bdbfa5b89a3f4bad596110897e7064a05a7321b8e092366c772c022f8573e2b3ae10882b3023fba21a2629b4a91a11c376f6e7e8131f785ce3e8190e85e5a3c4e9116c66d6905581b7cb02d1aa3d0a133627616988e78856831d4a4b9ace0608b24be6f8e365c8d8163ce3cc6bd9d4a5e88bf7e8ba28bd4cbf19133adc9ecd17d177b303344a7e2d0728fe64cbddcf5b09c284c2a4bf6c7aa4baf5e3d0ed7bc450cd7b3f056b59c95240e672c7f579dfffde5d5acf23468d22f3c041834626b89894f78051d33f5d7a9795d9cddf73bcb79c9ef4ea4a9eed1b74a3b236e4129454ac47a1253c0a8a9c1f501e2e996c79396498904f93fb806a86322774e83cf91158144c10f8d442d5db2f26d348d1a0fd0d19ccfc64307eafc1ee83a5eb21faef544c2886d1bd0375dc51fc486620fd3b5380361b568535f0c6ce8d5acbd5ba88b7a56cee61747f5757fb659ffe4c776ba1cd6d858cc13badabb1dde5c618480833f59bae69086bd511311be76f10a8cacefa21a60c4d70c22f581f0f0360bf75ce8fc4624a54ecac3b6078bfac7c3784dfb60910a635e700762077fdc607fc1d3c397ddb7ef1c19309d3058580f37e1d4dc19ede88ccebb5bc63e8ee52ef93c1c14607f6e4a3951e429d18b675dc2df6afd140e34e562880fe9424671024087ae6a6c226bdfe853bcba1fba44cede80258f1bdb8f4e3d1ca78e2adae4f96ed1961637a95d5516d706cb1263bea04667fe8e878ad4200dd3f2e087818ff8208696abbd1b51ca8b6b770c5eac1987986ff1254c390f4c7b1f7568608874b44d6896ad9cb956d49f44fa51fcf77a3c5e8b25f6b6a126d997cf10b672ba30fe79715fa7c02144b226937e3f9524bb1f6608e5ae2c7bcccfe8f28b686a171fbafda81de1a2c5a666ca11b77b5b3cfb9779b78ece2bdc6777b38f3348b7b74e0a05ab57bafc0645fd0957dc19e1ee140a50c04092ebe467ccf364fd6fabfa0d9e137561bf8bb68211fe8a10d683c4a5d3116be3a4585a4a70906c208dc9241dc55adb75aa1764c3278be6e7b3b33c32ee6dd46bb6ba3e018808b27438ae38a72aeab84ab7f1ab63fb3782cdda459f008a6cbc1fcc498bdb59bd9a410f75efd49caf4896dfcb8334cb0b2fd768b35afaecb91d665cd737331b1fb83084e45bf0a3e14f1d849892dbb0eadb413a8643695716ddc15a87f10bedfdde4c7de31bc48e70f5150728733d548e2a7c2424af622f803242e94efd766b1187560a6afeedd5d26892f4992c02ba16c24809911771d4b08b40f7689b90e1c4df674b2498f6396155a016f906b86d7f228ce037e168e01a85bd27935b266e5f65656d5c550e05a93fbc2b1edceedcb016aa9100cc8adc30938fb799e51a2923152b80b1b2da7e6e7a100f9a6dcea29a5868586074cd1d96c0a2f5fea83197f97582a3dca0dcc5fb41c1cacb5d1629b828c9d3e0175461b12cd7c5db273244c37ebf34887b27135c6bd526636d01ea0e54b057388bb204b40834bff8d9687601535e335635a2b922a16bad635828a4cb59cb132660a3c8608ff1313f0cadb3c90e0bb118b7332ae1aa6debf6a227701b10f0f8ee086476d1dd241717854c8fe12296d897955c4fc3e7709485bc50d074b22fc0808dc8da45f298e9a316710e73e7eda14224c576015c1063836d53e7bde0d1659b2b1506f6ecf9327958bffc2e836553ac93d4578b50155e6fd672c8b3e9028b6d628bbb253839bb38f2a73c3fdb2ee782380554d52ba55ead483eadb8af90df1f64ead83546053c7d2f5891b27404154f719617b0d065cfb5438472d1267496082e85c4153436140f707fbd373b620a849574dc3a7192e939b540f7e5cc8eb28f18e941752265e3190d3c63cbed3da29a5f1b29f1a587536dd5ba33732972af0744d1c5f668eb000a2e985c3c468d1969a46c386308882b7e391bc1e472b16c2f3f7ed2b6e5f13d3be0b25873ac8aba05630377c650bf12c721ad11bf97610c4b5779c739faac09dd1a8c654b0adc068d19ee2c7aac28bee00b89c14a0efe57880bcfa18a99f1cde8c496fba68f9cad68a9a6101be4f52d1c27da8e959ca267b3fe702bc50e8cd2f04ecb64aac2585408b2dfacaf5f4943a74f6c4206cbc5bfd21d5ec9e441f9d26f9a6c189833dcc3cb936d2e8f12b411f3fd5acb042ab8e62ea86640a5f242fcb186a632a30637990d9f5a9465a5f38b83b3f9d60d9cb2e719c8249aba920e17e2d10dd61c6e2a407137f8812572be4d9848ebdc9638fe1cbf73b91391997e01be6340c754d1517094a3858a78f72a398a145224005d420d62f1caf07ce88ca1506967e2a391fecb2f29c1285ecac27ce9c078126ba73eca30e0adae350ce45e4008cbf66103634964ab0ff0aa5099f46368c1de6d55e9dce205d35e67fbea96d3596fea03118ce43d1f256c71736c6017fa903bdee145cd398533738f6564a70437b65cbdc1f3bb83494dc1a721482c60ba8bd7d71ddb7eec692d377325dfd05cf88cce72e7ff9947f1766cd4ef1ae75b0854e1d88c2d8684304cdfde2d5cddcda4a52d9dbe6d03cee8e71390b6d9c0dd6a9823f7a5bf50da10145172c0e22ac389932a10c1e0b966a5033f2700e92faf93f8e3fd699ced942b6258e353295c49db7bc90c5dfe2c360bea0e0ef5b24334e4e3de159f48f4913507e37b3433353b9cc644e8dc3bf46794d88d7d797752279105206a5605c5253a81f1e9959ed9a3e411046ea2d5a87d7713d0dcb7bc4fb79e4e202eefdebeef2cf7fa630e730f935aa0f7281d4bf4e56057530f066eb1a55286a319b90ffbe66da79ad6d9911cf1b18be9c8df6c0191df6622f5885f9f686676de6457b98b4d606466f31f08c0efbc7e71c095fae1367be070c74ac7dfd08054964f5c304b0edec0c0ebadc61dda66e4f94d76cb218276697160576c9cdd1a94800a1db2c3ad6929790050d3f7ef2b516bc204fa50424cd9f022c588e09da066f4d71e0dcebc5c726b9a35f023e58d2247acc93058f7f5fb7ce4bec5d191545ecde5c8870b7ff29ac3dc5196cdfacda143d922f81fb00c34d005104e28feb0fb38924799471c8c9a3e6d18c38e3853020eab7dd6aeb2f6783c96bc36d0fc8ac98a888c2e0e235da33f8ab568abff9705eaca06017ee7a31858a22ebc4abe035778b6443c6cbe789678c3b814b2aec027a324c5a3dd86766686209dc9315e2977c22b69b2f06d51815901126cae8ec573ba5d9ef9fbc883578eb57d263bee3f474ecfb4af4471bd08f4ce2bcd159995c3045cf0917c6f04c7225f48f18ddb095131d66b12a34adba4d7a61c908abf37f880e162c26ff7e8724f22154371433451359f663eb87d4183b28032d12f71a5b4b5a1cc1843d03a46aeb6ee50b3b1963141056bf3414ecef9bf83b42eda02f887eb9d4ad5a7fa54027914c8d9d947433771386d1c4c2e2649dfac5f0f83d91c557df90a017227f59991ae9c8dd62d54990109de6be88afe003e3a72682b3fe29dc0182b39ad5c8c4ffa7c174b6c96cdaa3064ace51fc286acc9b2d1aec3f21e23245d1c01514428e6e1f0825521f33bf64456d578529a9f3caa8ab8ee49e724780ad90d66d8e73d9956c5e019346e8a9c7e4db7da787a9b5408bf77847c2566155fcb6df06600e32a07e28a65272a253a66b9fe96231ae95392912da150296c58ae22322213076e94d5ed8d9babffd3c9a8842d4c140b4080ed806fff45a3981f84ef24b5fe9d46511779efc6ef4c5956db2247a254d4a9288bb29772072fba871c217972308bf282d831340da0312c9d95d9ab14a49cf2505bff5a8b206cfb356279f5f664489027ec3998eec1f676270f362716d6dc1360385f8cfb652e547ce56e9178a3d7a453919b63cc099d6569ad93bc718a1743b82da037f03c636ba8e3370593f8a6d21e5f03e2f5bd58d473059b5bced9b9d70261830d157d5009db4a00c0cad5c777577ef0e767ae9796ef60fa57bd3b3c776f183ab47ecf6ba82540c25646a450ae57ce895517e7914e29696394fac24d5d6891cd9c162d71407bcdc075ec6326c8f4184b248a709f46f204e3cd32fccdf28722db5aca82db4eaa51091f9f9c9cb12349a08229dee0c170578ba0ea98dd1fdf50b259ebf3a77581305b5a23ba245012e9595dce77cd3f9d871fc4e665f896435cf33525c76a0ac84e35f843bc61fce57a62abfe3cf8fc9a6f03f92ab7e5776ff56da8e81752bbb273d8103dd89d91320e2b76b3dc33bd1fe211ac4d52b1f70a13bc0495e158b24ef6ccdda8c93f8bfdb8d5222f9e5d2dfd42d918fb23acb17c72bccb260d142263dd82fc6870af8e4935deabcd7f004edf85fba594c87bea121a3f9b05aebbbd24ab40e39eaa2712270ad34dd0430c7b934c78971b65e1a9593b6017bc8c6b288f36cc3782bee42bfbfb3569d702d267ae8a84dfde056656d95bb336bce640cf48ae41dc41b671b1312ecb6a8183dbca824a8ea5873c5559f679db81b5d2dacd7622f2fcebd36dcbfd235b5bd71648750aaa65c496346c6c99498b56774d960efafd9c73f4bcb26f55285c336caf4636b4b7fe8089f9a77c5df4e3e4e6507b01e79b793fdadc2d30151b61f171ebce6141d5b949e6464292dcbcac7d94033a5564f500651d63ab894e35149f0196d58205a0dc1e3b8ebe320c16e5ef14e2078574172e48b00a9e9b7b62fbebfae79afa7c0df8ae923829d35044f75bb498771441dde371e007b468792a8bc5d2ac7565da11cc022b4ff3ecfc08b655e9cf769c6dff3a7dd122f25bbb5aeaa257f9cac615642b9631bc092adb6da7b427e7b69c0e42227f3b02a050ebef572f720d2af36d0070ee599363b2f7b1225966a735c1cff865c174627e4b4284b0c4440f3bd288755e4dac5e422bb6f996927733fa22ba0fe08f72e9357fa9c4f8c08b9b8151e8382fc7a3e4ac2286ba9d24c6e95a785ca001d906740d41b92a5b9bc745ca78ef15130893397952f84404092a257414dc080ef52330c4e4474ff6d808b74b6fc40de8a5f594e1448b93cff4ef1d6cc2d70518ecb601b783c36d68317950c29f90384ff0393d73e2fe2ea51efbe4ecd64ea57e7a49fe1478eea28f7dd84a7433f92585145ca33ef6f6073fa7811eb1ffe9b7717eb2e93ebd6af1574ded063afcfb3b47e26ddccdd950baa69315e2b02a4a91b1cab6f4a04bf5c5ce52bbf18eca4dbd9242edb8ed1b1c6887ed983db9dc46a01cc0d11af39bfcdd2a202e8fff20bf9d71bcac0ca6bc90c06ff0d240fbd3f21df301fc4f9929e9feff16158b1fc105c57ec60e8c63eefb3b01a116930e1b7863e537a4fa6fe09170d264362431b0bd17fecbba7b9b34de3735797819f44a30747eb2def7b1a026e5acee51398429e233c1a296b4d799883805a1d8110d37eff1c523bfee4305a7a6f853381b442dbd018ec4fab513ceb71ea4f49ba06035d4d63d3a556fed682f620cf03111035b1584dea4874433504e95661e6b1dc8c4f7b6e64e6fafa10a5445b7355c1f78791c266fbfc17cc4a96886a8a45c688e07627f1e863182c186796c7a7d2d246e66689b2c383672bd3c28d386500ad40c4f2ea11ab165c799db5570005cb215244c84b4122beeebebff516a99b449353c3b419cda02eb23d6cf5ef54b03f0d909413e2e2a2d2f3ce799fa4410fc8382b1920a12a943275ba98159b37a7fd53c27ec2d8f0cd9dc21f99622605f5525a58bafdbe440748290e4050b2f3ccabd43451eb76472db90381a7cdab73bfd6a21f8e0f0c29f6657d66f5ad8fbb0d3f77fcbd2c905ac57c5392af50f55bf155e7d88d091e98c09c6a7ce7b92e10f9dce8ada44c699dfca59702631202da07fc639df1d84fbd8192bbea7907b9005f6dbf03e054345c80ab93b82d860c2d3a7e37bc38fdb769125a774d88458191efaf634a808442a2b990b212f4dba3f26edf046ebaea1bcfd6a4cfad7b2592564b1fdd1a3910607dcd53590840bdf430ef7a732916f13c3ad52f293211de7d7ae3b3213ee1c50c78fba80420ac8a6d5970402e178157522ac06a01eb06f84c9da041c22e06c5a218d60fdbcbe0d0e28ef7083ad6c16c7fbae9e4310cf13a5a79aa5260e52c4a0fece30d51818a679fc7e102a3821da6362c6845e51a04b38cfd6f2a94091dcde81d57dd23c94c67f305a15d52fbf8cc3dfada723bbb296ed991e6c7a3fdade9f09bc52e6f9c8f69ae79889f9e898f7208e1ff712c1f80625a8ed3926479ce640fe51d5bf4ac9127f3f29947e7d5f0acfdba7a68253142bfae513b9a321183027168d1169205cba9cf9def3fc6f2e0fba3a07976048a4d724da518b70fd36ad38d71c401a4637a78e24a5d62f4aaa8efdc40bc0be754089eb173fc4b61f17615a53c575cb8b140c0c1028cce66482df1ed63d65c5734ad51c4fce9af11bf8c958073fea4c0d15a6e588232b3c35d5ff842f922e294afd030b268e3fc9367331f24045869a234e35138cc6f76381b1ab758529a0303d66763ea03a059f035f4b83858c66440ef23d35b98a6e3c73f6fe92287a87f3c63b1c7179dc34737a90608925174c9b98d79cb7abdf16d7331b9efd3945f35a660255b1ca674e66cdaf19b465a64294f01941b2aad59edf2d3bc0034e0650bb34326944656c13c5fc54457a894874efde5436f74256400b27768d14b3c74a1019771716247ea25edbaec1e1e5139ed86351f0adaeb9f857550062b895a64b2c9d9b951e6d0738413cda165beb745dab11c95339597fd80179c42108c67b5baff4a173c61b078928109a1fc6f56955372e2b62e3b1f82d47e211a78f7e9b500a6629263da2dc9678213fe1baa8e74aede4d09790b8c03734192d7aec26532ea2e839cbcb56e01de6acf998c2d0c2ce12d2b0fb11264b6d032a0f61c7e6e2cc2561c3ac235e0ee314fb3566646326edbfe5de2a9056a0971e10e69f22f1d995b94155e88764319bb6d04cf4f501ec875fddba78ec8b19488910335cc9edd4bf8f50ba63ce1c59301a6cedcd93e43e05d6d16bc091f2a08fcfa78471499cb374fe0596c74d231174380e8c8baa02359fc6570947c2b2834b238391373d733edc5e66a1ccec885ae152c7ac70e217fede3ed5cacb9bbd32feb8688503db13fa6bda540367312a91a2c9071ad4ec2633b0ffc5ed17532cf0c3fc3c17d29a63247b5786c49b02c093eb43f8b7074edb5446c1719b91724555fe21fc0a0199e7dc76bf9a3d695a6a6d0866cb01b36bb42aba51e0908188461d3722866e573dc43bac0b51bd47d23d95e5d7cd5b7a9e1819c94f9506558c7c9b8ffc7ac98a1e09c47203a12828b6ee37f04b8611a8454fca092acfbdb663f89275a3d39fbce3b2bbe387fe8a350b4fa442e2e9ed8122ad77ada6fcf05a1ff60bbe103792145e278581afd8d815616c6eab00babea89a12e57846a10bbd5546cf9c8736ae05a93c52c402c0a8a1213500b99715002e96a880c00e06cf9da65529277a4d92338f6aafa7bb500e825e88129e276262bfdc13cf5108d2e0b54b0a760a7f4ac8b94932cd219fb28005064877464ca1ea469554b082eb4730bb88c89b9f0dde1ac9504c6a2c389349715b4105d5836ed4dc217f53acc7a4b3fd74dbb33e0bfec082b7f4b7474824361b450b310acdbd7b15ab95c90ef8283b5b85aaf6e133a00aa42a29fa31dc4ffff6e9e0aec62b4aa8a41d66f5a8f08f8fca0c12d31751876485ed183f4e262e2110261e18c0d540d9f7111035ccf6d914c33cca70143d478105ee881d54523b2adb500ab3723b35efc0ff90b611c902aaa45c3a058fde7285b77fd552528f8545eb4216a825a69092757bf9ecebfdd4a5b46758d23198a96a614d594d22b95715acb49b29f9addff576b38588d2b62f8672182fc689f5e344f6067dcf042f3975478f19019a34b791052325c67c5c44a50cc86fafb6f972b761c17764516459a5ffdf4a4c51a0b1b1f3528f3a1156d69c046a63b226c3297ddbab35750d8693a57baa8f16d89bbafac19d473049ae396a5845717600539036d9318c79d99203a174cd4a1cf924b58a5fda99671e3dc53ecc2ccab34319d49eb36114eb65d5017d889f59b78df61c123708586cad835abe31d9a67f4ef1eadb90ee6c866ec3bb52b2a09e540084bf7067bedc64c61b75b68c469dd039c642595360b69ead1f9ba03626325d1c201872a3068800a5ed2824e328559698a7b8af544db5582e6d126075dda68fc3ffc2a7e740dc453d9725811dd9524ae5b5d8ba2b179a3c7c77276c44c601f388cdf24dd294349f59c16964cbdf913d03748bf369823772ccd34c9bd20f1495e3edf7d7aea4e22040391b05249442ccd65cafb7592fcde27f8047a2b479ad792c04a7d7db750f230f6e20cee351d9b0eaf0e8f95b70a9541ef38cc9348dfa0be3b4aba3bb80efd761b16e037b86381f32f94411006b88da2e12bdea03f011b3b8e2ab8e53b097bd72c1a994ba6fa5fba7f34f9df2bd82194a054e30445c7bc926d6217dfdafaea7c22bc784dd1675dd06bc4cee01c3c644356f7354b4cc38ac9111462e376ac3928f83e01b02e004a5abff9cc7139d8753b37e50b981ca5cb5070b8c4927fe383a902b0e441ac7a1204d882d429762d4d6ae6bd3368ed90332acd7bb8f01bf6751fda7fa6a62f4e4ad9b7651a0e5b012a035a6252f7f14050161ee6e7f981c89c55cd86bd11f786cdaa0eb8761616f8776a56d42f384a025e398096b58f1ad189599a8325c48a83f9d7c679d7a1dcd60751126f157cc8c1baaf6bc118d0f88135ff99396e32250beb29d816a81329c4a61c7aec54a82465cbe32f9256340f33202a4e46414ba7353683deee4ce6c4fb724bf1799feeece7c081a2285bd4a3ecf5447a850649998ac26bdd4d6eb59e317ff250cb380376bcf3188e7ddad8b422630bd1c1c51c24238b75049e43b22ed7b276861c1862e62530caa4a53d1f604ce9f8b770088a4218c945df0a6e0462d21a5030464613117c3cc02e9f33ffb8e6cb3e05ff0d99329d92633f6b0c82c98231fd5cd9db792b5d87103cb42926d11b3cecc50671e30dea3810d698246efa1e7d54383aff77b61dc8ebdd62992011a2ed83dc4ae7fc351fa201ddd116eda79b736f64dc830cb6b1b07145231710d5064ea169753238992730da0bb743e5c41c0ef2c3ec71eebd704dcdc3aa5220463ae59c9a3e79b4566d881811021cc6bd8b4fc2ee828b61581e2d5ec9aefc948844e69c094e6b04810366e51710bb5fee8f32d63bd5f43e2d471d4e9d34c57c9b2933b61e179298c7d6a2d5ab6dc7005bce0d02644a7fb9f794c72e5986ff3363b8ea8d042043fea1baecb624ba385dff5c6f3a38b073ba3f9238987a42af358697c68e0056f20ebc8ac530b2af568e90eece2208cdbc1baf371150ba2f3236dfdccf989dc84b65871ed06d72858747bcc3e9760baa4eb5b36e4ff442367db2cb50f96ec1479e119dfcffca5b8fac5ac41fc86d2f5e6a22de078952a5b0706bda8d28456dc85cfc9a31ffe534fc94515dcc6685665a9cee3fbd8e95f95a4f76a2df257ab10fb8974619b7b6eb58bd59bf5a3516aa6e940f4513be4f15fceb1ccde56239a69fc632a85acab972616d7d7b8d8ad3c730205e916a22f6941e96127f5f3c2e6049deb1f199f767ca4dcafab7e75b53078d3287d4155fa10a4a05654eabfceb5f631950e8f8c97ef36ede50c9d049e5a3e061be4cfbf3915c68e9573946d0164cc7e74c3ad17875b7dded4d8987e48add42dd512bdc216618adbbcb600ed58aa9a66de26a01666dbd42b0daea86c71d84652f32b5edacff6f55b871d9a65f06ec5d6fdd97255101eb27d42a6088532d331d613442dfdbadf376c9fecfd2aae081e0ca56d3e8dcae9fb9b7be7d44888ec0a65204ea0269ba697e7ce671e7347dc02c57cd6adc98ddbc103e1a4129ab230c68995679101221eed0e78c015595577513c3424e471b8b36a0edee08f1ec434b8b3e48ebaa134ed87f7e7032473445e92bc7634e444c1d86e0cbcc600276220b77dc4f146578b2f9a134ffe79c135597150ddd36c27b7d14e6bb2ba057b4690676c18802f486c20e93137eaa1dee81a7dcf13b7c22b3e2fb85f9cb1831e6ba087690dfa2c1c80652e337f933576f5715fd8467ffe5845943c2bf9d15ae80d9d8549625b403808a70be88703103a17a67e41668104264041e7e2cb7b8af313dab14a76861198878c57a13104b0a7a76acc969ab348b8135561daa4056d1902df8ce8e0ba8b27ee8de58712edaec030763203330333a2adb6cacae6e831b38aab865ecd106ed1965abb6759e331000a9548680af057f93dc62909d7f4db6cbefef52044842aa53457795a8d66afba5f2f1e173801be932243f477c0ab04c70a4230d5e10e70723a8ca33759c441ea6a762178dee63f3122ec918b5114cd47f87d4b59574116332616e0721143022eff275d282449303261f3aff84ad2e4ace93b4380d48125dc6fa5298a75effbe43339e58c1a2995efcefa4616cd05f8acf4f1d31a291465e7d0216e43b36ee3cb9a236f1dcf2a127bbeafcf5d61b5e29ca7ebcec76cf0006de8318db363611211905485b8b0003a4848734193e5c0e39f1ccb173f863d8fc3d7a47470107214da5e4d7cd6a898838cabccfc1345e5f85d4afbe0d5bffc6e7539ec77314b3537fb9e2091f9168dad58a7c0759e88b04c9a9c63388f40d3bccd2f3629fea677cc45f50550363f9d7b393d86a8e6e2725e49ed6efef832f60586efc878aaa5050b5f5f2f9e0c35adedb42570ebb49049e831656a5fe14b48ee5c71b9ca340d372b4fbffb7d019bd43f94452e52ce5bfcd49ec3497d3cab78356220651b897bb9c13c817835afd589bad50ab882073975e0b7557fe0f4262ac29e30b278a341db3c9a6aaf34dd746a0c73915fdef60dbd53ea1415f528448ca3def463a6f28d77a9ee29c9488099dd4e8cb6dfe28f9ace1049cad755ee7b5a3c75c7e820d499c8bca1d2afa8f846d6753097168068fc3e25a304ee999697cbdfe4bc4a1a609c538b4e46c795312a4e7d085bb084ffa6bdd161dff18202d74aa07bd987cdede498ab2fa176b78016d87e1651bd3d013dcba1eda055d51d03e8059440509a2e4df280236a1ce15ef12d6c1581bc6394b4eb140a41e533651a2eaa11e9247f9da3b4575ed9358a49f0f676f539276a6cd8a3be19caf042bd69367372595b8f59212968ea40aec2d7cb765e3aead5a9bc37f802a72f5e6a59a1fc0d74900c653985aec3b4c7df3700e95afa85f924d1b2184549f05432706f82ed15ba8ce18055a7c754f2372d7022e1a18aad11365af9366ca187c00d47e8f0c1206cee08465ca55186a74dc13ffe2c14c764e5d381d499af45f1b6e26d16ccd03f924cf2e50f269ae77db41a70e10cc1831e8dac3cf8ea6058b7402fa9ceab7bef4f3ba6e6d589aebff54b5a7f4ffe1e3a81ebd6186e6d01b02d2c177c1ef19d32af3abaa854dc9836a39b0424d8847482a891d07d1a46feb94cf06d0adff85f71ccbe2ddf163402e5178908b2c77e6187a2f017441535e66b45ac6c5c7561ed0a3f47c462fa9079d96d7e4c29c6dced4f2a83ceabe4fcdbe2405d59a43fe992eff32dcf3cbbf34079beecbbd30779bd4d41072d9f85aa41fdc2d835478f66c98526422b2aff9d8a3e761f82d8119e995a83de47273d90ff34688d4896d626720aec46bfeefff235264b01ddde8a86c184cae6d44076e54ccde12c3ae22971cffad35bed0dde802f87ec523463a37d0a2c0684a18c3d96fddfa3beb39caaa43eb828245ab05f04059c5f0014430e2f0c4877d0ebf63bf4226acb33f7de42bbda6ebbc9df846e3914e5926460bcfb5779ba92456e56ebfd22d3dcf190c833e78eece80eab509867c7d08d17fdcc04a3537d14ba402197fea3150caea6b1a37f13a67b9087e5377c7a322977b7159af915fdd0bd8425b6ecf2f513082485978e8d99824550de4d9344586dbbf83ce20eed837ee99a31885fe7cd1a73955668688373a143c7ce8ee0190022e9d613687a3795b808e06257ed7395627eb0300e341e9314d1b2203093168b9d6ee78fc9e159d3371851eadd359cd67b3374c98cab471d4cfe92b63fb17545965b54fd5f49956c19625c8f550bc116e84bc33f20143c2d006747c2044be41b86111feda94e44c6c099870489a9657213f4c6ab22f946d904eb198c6bf953da117fe83b92bb7a00e4601bca9bd7839874907a1b924a3a59f8c49e773e115911ca29d276a1ab954a54f35bb1f5f39a670e87fd19989a65b24dc4736a55222ef34efba53f3cde2915357359c9f64fdeedc516d3c22d5218bae18c9a090f75acc2d8525ebe18e6f44cb8eab0e8021ff0076cc90f915724700f36a925a04d05e9e3227bd2cea9b0fc761fc8798423cc8c0cdf10015da5caf9fabaea5cadd077e93e0fe811e5215a85625823dd37e6383ec430736b4afbb638a19cea8740b5e859bc7cc63901761a4f5f4fe7c5d53c62e94582efb4b29a7be5a0ffdd106c8eba64778444ffc2ea5caa8e33c9fde19057e0551e9979b5e2652a8b4f1eb5a2ae33ce6cf2e09e2c00fea0a460f94dcdae52e97a2cabdf3afd2f8e842405fd65bf9859b1b7cf805045a50fa239fb446ee4fe646a6a1959cee9b3f17d2a029fc13d8c6b492b3b1acff782b78c4c317b04617bf4fe255f0cc7b65f3ca8a569a89ef130ac075abf8cb124d2ea534eb34f2e47246d6a65230ff76f674f565abe56320a34bda54607e6b5daee34ed66cd5c5113647af3fbaecbbf4bbd261d8b413de87c43ca4414eabba0952636fef5cb5d9f34006c23f34a63cd39a8578c5e242f7e65df3efb899f86e10ea067ed7ff9e9a855b50486bc343a5221fcc2f4ffd6949e46dc9e039b292ba4740dfddbb7f1c5be4722a45674c5af5e38b0912dde0fd845ac7b71ee38b28002c16adc1d26cc08d23b8226f65ade209f33c2e2a274828fb25e798ba951e2f96a10e2922a376ac9b9dd1884b08ad43defa28fd31d9295c1fd1243a2a7183fff415d8dd75a0162d3bcb8005e26dc65ce5dc084a7a723ba973f4545c8146728253d212dc274179fd39732c687ccb046f412a3d6bb5b0a42f5deb36be190d96edc41ecf1a4dd63e90ff192e7cc4c7e73a2d0b125d768fcc05ec131a3ece705f5220a72396f8d34ce35002214a9384915c8e3e9f8f8661409bc8cc6152f60739cb9aa6540210bfdb54b45febe5aef763785ccbf10d1f778fd657538fc0f2e715f53eb9e27b612fd409f691b4618694f067af6cced9c06e24ad84b7dd234b998b59f3bfd0f1bc154c4bf9db78d392d5d880d917fc1e444fb8c60568fe2922bf197ecdd65971a1567c0c94ecf3701e4fc1a1c370ed962abad56f0255a3502f2a587c1cc5f2170367bdb40e5f5dccd354b451aee8c1e73d92730390b5a1130cbbc5e6e5122c1dfedb5165d9f47792323a8cc37287939133ee5a31d8d7b30681831265159956f8b8255195a6531224099e9cca3c77955ab9a5a20a7268905a51e4ea3d3fb66ea15b144312cb3831a0e80e01125cf7993d95527a26f9340780ba5920f848f2a082f844ae0a67591bb023871b2f7e5744b9f150589c2728455f042575198a430950ceb16bf5caa049d6987eb16852252a5d20bafb0e848f68824f83b431e7f5321498f613abd1608b711aad31c65ac9ac233812d268d5a358ddc49d8946fd9a94294c899d596ba34b4bdc4bde1334bf92af7bcace9efa2cf6baaf5a2300f24c2f2fbeda657a7c2973709d1ba67df5bd10ccd48bb53895eb73a3f6b17b16e468c3c4b40f1e64d4c4b8734320579db3b465108227114604c007af53e56c2ffec3e4ed48af92c7f3f5bf990463431b56be30a5a429ad4fb409e94face9e6d4b1ff4407210cc4161d951082e32c96b1b1dd939313df0e79025591a64d510cf0e569dd1dce6c7826592ee9243cb95adfac1d99ee0a7018e752cf925feb8620216696f15b2a0eac0f31f41149fc68e13550253711546ed8d8367b6f62d2583e5f34fa65ccef4f8a350d16244aa70620371483362fa1c0d511c2f54f896ed83f4e4d14e0e533f1b441c9da85ce48dadcf08b63a1a54673eb39c635d12735ef83e445cf8742e1e9fbfa67059fbc8023c249ddd42dd1656c4e8768c1e981cb2f14055c3b9c21bf52b094526b884b93ba991fa2aea9f09c87fbba30ed5c1ed29f58f86974cfffae41926a4dfafc67b4ff236a735fc7696be310aeed68df68b20664cca2267fdf394dab304f0ca5023c71cb4f89a0d23955e561e11280d94f65bae4c4cbe824b3ef0383bf8c300b46412ae25af1e00424e2aea80c0fd744b776fda668fa6904422182f957bae4f0606b767d5495ea7bd17c2820ab668c765ee0d7d58e4a595ebed0bda366ec3451ad3959aad3653a73a8184310179aaf05db3eacd9b618274b864f5930dd8298a8d488ec0b5528f7516bb51ed9e5892cd21d2451f02ff8e96e3a0ad6b4953a13572870ed4af18b704cdd20bf34e0f22a8b47c5286622da03b132b5f81d1cabca93febf96ca390ebade1de1713b2c4593e836f6f89ede021f1175b2d1d34b931feaef51574d0008977a8c6890168ab2c8312c4408b44de2fe93c0c46ddf7d086ef27110c7986a834dcded088e6f3eb930f754d022603c1df6b0e91c7b12254218bdad434ab131128896f6006f851f2171d52f8b0b60e57db16ce1ee8fd2cbd5fc7d4dcd8a3b17ea4e490a30f6739b8e266e41108a50fea9f1accc66368a65dabb79939deb741f9b123644b524f4bfb32736a51600dd29cfe2f896e731747c50544daf5e4fce5aad329955e630f2cf0041b462b79524e4b2291c17377654a71334cf4490a9a691796ffc82e39b0a260be771f71b467324b2076ae8317fe074e8154f8fc5a08d80368c271c50741d723fc9fd583143fb178fdae121204cc744d68965d4f2053ede6e8938546d6d2af02976444c8f877a91bfb914854fde02f8c692660d1315376480ea0fd092f45c7ae9f730e1ac58d77c1b01e8fc531660d9e110737e5e05cd02d04fb469f887375204f435f28c98a4e34b12dbcbcdfeaee2ad1d50a0983a47cc4fdc27c1068ccebc892e0d2e1d781fd7eb6f7bab547fb7b52448c6918e25b8b0a3bb1af62a1b199ba20668e5c064377b5d067ac947eaaf52406599545fb733b1b64be86ea7fb227c956b19df1080d7ad182972b63553a4fefd185381cb5be64e0088756daa67b418163d0651efea39796aac198a98108da785898fe3c33966d02918a9475b13a445ef8c017f0302119f214207563d172998fd9194d9bd437a43168365382632885403747dda82736a8e5d7d377a1886fdd4cc3304a5c56c14ce0e5bd4dc302e7acf6660acd02615d90e181439ef92ac6c6c59c35d1974a376ccc1b0ad96210dd5e10f7e105cdacaf333cd98ab6023541b346af91d343cdff1e8ec8ff2c63c5b88b47e6ff2c94a1fa96369b4bd3661eb7ca50c8f72aa7c31e726665f51cac7c1565b5733a159d4a6ceb014b9d54affffed1c140a12b8b75c0f53cb0e251b92467ac354da8044672354be8cc834b40f1b5dad1a727c8076051f44422eb82bf949e3bc4d494ba437948b68c00d0c33f976beffc9c4fa8d3025c4ed78b261f11b184a9ee34c4a73e73ce64b7b474ec07c80d3d59f59595af2912320d9a29fa353945438681a8f60281f40ecb754849271821fec1079f251706d95060f4442386239d38689fe18ac797de154587f307eb5a092fd46e3dc7c97236a8388939f6835ccafa5bc1e6ef259fa19b8e6fc925e9dca72990f9c90f0c182bec5acb637ea50c47bf4d4d401b9986209811aec4138f888b407d49bf4bc033c5ed3f3ce5e50431a01249d05d094061248b9c44cf420361b5aed954ef55d0fd8b1bd305ec54c3670fe0bb03ebdfd4996629fe14d57127170c89b44c6de3805b6804905504b85d3e96449d4e7367d196d411bf24dc03951cda3c33f1fa1c55a9d90337c9a057cec08e7350872246633c88ca6f7a1fd06de74a9b54286ce7d5b531b6b7b0de99f1f51730dde726d11c5f20597c409d30e1f03087db4219c6cba598266aa9c157d9ed9f746c334dbaa875762a666aa222380c9a88f02760ba36ba671d260f97248efcc3e5613edd4aa7c90ae1d6bb70a3e1ffba768ad4774c9b610719efb609d4210f42cb1115bb2a3ef9f8e20e2794647065ee44883f79c4b9a7d3e2b8ee8d1ecdfee86e9de5ec5d92cd6e46fa68afcd2fb76165fb2d82dba8bcb10a10bac30e62cd35230395fc24b993b5384749dd268265eb023f013b48bb30238b9caea3488d59d1dafe4d215add56ea8d989b8ded67184d059570a4067b477b9b3a1750db0df62f9dad7cfe6f001678ec0b4fe2aa95f65e57253da65a802bee892a4580db6e2e9e4b99d4057cc98f8819be909d7c5f6b5de931a2f375dc2e759d073daa386890c07f331df87a734492ac3f7434b37756a0732e8ef967d5b05c06bee734b6058f4b21fc3241263fb273a36fea7b8f6167f7d0e2bb893a0ae941e7a2c7ba591c0cdbb60856ae26039f64fb9c31b6ea94b121c8af7f65c4f85ea632e8021989d7f81a266d483ae0e426fe3614de245d02e34541d0c761ec9453430cef9e63282731eeabab7bee1cb9ef01c7d5bb39ab2f45b835295bbe8b45be98c5a890c2ca0b192e922ad95d242e3fd91fda794a15ef2046ba6dada960f2bd5c1d8a814360de82e50f967b8a2f660a2ba8851e0a09ffa2be388256fcb1bf989b0e8465767814c3ec2b7911d8d4ebb02eecd1975e73ebe20f5a234cc22d2c1779a31585edb95e6c829ec3bec3b871494b8220eedbe676e1a7aa452b2cb97c41b5d46538f03dc13a626dc182fd3a6d4ab31fc9ce1f03ac554d2ae8d7992d5bddf7f64dd97a9203badd9860716a1938ec1c611a39e56ab599432896f720a5467dfaebc24e0d1e1a9ec7b87b50f3981671b83a034e6b1d272acbda36556020891c77283d1c0f1ab0e82dd09a60d30e979f7ce812b81dea4875e2a401e9af7eaf66fe1722d4cb20fcf4be072b86262e5d9ffe5949e2d625f0962884c86ede41964d9a7da009293574d7a155a41b12ba92e40bd425df0b23c0edd7bcb6947989cb0593b1ae8873cfd7f005238e86dc76b779df059615349d98e85cb69a399c2fd0b5e033ab6545b6835bee848e0ff6e1a97d7f2efee875faf2ff8375f9708ee409d2cfeaa7aa4de62f70b4ce074a2cd837e2993975567fc04646dcbc4661e2ed08cc6b4a112486c1f62b6356dd9e6d08389f90f437b854d08a066d758563e333622fe26ec46210a89eba82ccf1b710a810a3655e582d9758584f828366ac049d9ffc25f1c7d292be1e254e650a9cdcab9b09224fbb900eafe3868f367611e8d0717d3858c720575bddc59bf53a022994972fe3a8817fe2eccb41456b8fd5750226c795d8aca8079bed9ab3440031c0a5a565e970b46e30bd9e5b9d589ad500bff41f0ce312b9ee2a73b89ae04b16cebb847b47b6fd79bc3e1cba14d22dca3f5e204111f78ce64c83e397a6f3104d650e0e0dd0ebee8186f95dec4a458d8023b2c8daf2e4685ee00163a7f1eb9225dd557ff74941447b790e3e5bd9e5880dd1d96b8c802ee0d06dc62227d22bba18fcd2e46c702285a97dc52be44e5f20ce3f5f485dc0349a1be751d26fadf203a678f3d0dac28c932bc5cdf893a2c385dcc98dc8793490a50000d1c319abfb649b98d25629527ced95e65ada703fdd49cd23e767225589a00aaeece6046b97d8f78af8afbe507011bdde80c91b00794bc64297d20a79f2311bc8091609aca73026629a8470ccefc4af91fa7a749e365f0dcde94f8619ca57e1f4317ef75ccffe9e9b975c2ef6f82d41ffa08f7e3d43bddb4782cd5b9f3a0433621043143a46f89785d514308e510553081d5e3f6a92854047a2ad4e3817709018f25019a9fdd3bc3d0b480366f9a42b00123c9314969aa34e59937f169903622ab5cb98a7402bc4d5c90966ada931bfec53345a748e026bb0f2d920369234786d092d706fddb2e64f5c6f2f21171d4091aea3e974776cc890b8aeb461bf14272b58a8c8e37044b8c92fb476c9302022b60c13ece0cf2f3b48e60b389cbe97aa31bf9e6ead58547fca64a19a328fff3b889aeece9c7efc217bbd766728707737b87b9535d2d1362ef9c7607d6c53244760732edda15c2eee0e99deed7a46146ee08c9125564a2878f88462c6feebf64ce0999f1cdd80d18fa5091e7b15cc2818836ed6b117d92029a9541bb2c69aeaa38049fc8d305ec7fb964fb384daf271dd39af86ef05b7456b5b70ed4024aa661ad04079b5345d0ce866b9d2e019f5c3c4e1389c980dabf0bc2498e3d465614692dbe8bc782f8637496203162cb8b28018abec77aa4a2b69fdb080c9d89124f82c01db965f2177277e76a1169e8ed74f95722df99362a628da3df3295bbf0814a65f193beacd0eeb2afaaeee078c2a0165e0f02c762f3fcf71c331e140e0ac37d59a6d676188f9e6979f125ecd77968068be2e27760f8035e023ba04574ee0488df99a40f7f3fbd4c7de73206151bb66a2d3a4728952229e4ebcaf02f96640894e22b09a65b04bd103b26629d0c5f97ffb9961ec5cd4f2ab2072d66d16c724dc8f19cb7f1b9270140e7bd7188df478454e2abc53c2112dd1b5aad150e65dd57877230f347f1e8f91fab6eba91f235275469712f460b8309fa79e2def175294b617696848c6f51d7e1d91f743f14ece9dba1dfe7901c24b573eb86353a82f679b20c7181da3a6c202f5ffa75bf483868236d9a92960a74f19a2c82bb2269fdd168f166e5ea00ffdbd45c1b86304ecc67f03f4de04358f8fca92fa7e0f20e999cbef4acb97d18e770b9f66afbac7edf2532dff130e8d03df0698c49698055a261fe188d8190cedec2e3a6d7072022006c79273fe5afa1e97ed8d6428f086734904114f5ad59804415f8cd6d9085f51b28e48bbf6a54c8cb95d04890c227be2746ec956cbf058794a4ccea383711bdb7d4d40f51f3266a06b2082d1575de161e0f136e0bb11c576d724c445f216269ce966038e777d1abb5f35a3e20e65e0476950dbded27d3ff5de2d8e73b6751e17a31ea73e197ffb5627cbc0e7410b85f908c237f6e48ad9d0a66bbec5c6c18e1f660459536c3d0062e59e3b6fb0ec343e6b5a20d703492f8951bed0e885e4b26c9191fdb69bfc0952d275fa70a952f1f356521cd38fb6e9b0149edaa1d3082d15d2ab5cab919b3cae905ccc939f54227c2b555035b71e79eab12ea6203cf1e6c9060c4d7334bb175d427c4a5a14354a0151ee67e55ea4821e43e463ee38bf32b900025c44090925e8c54981194fb94e2be9516c17801890a894451d5337cd141ae4cf105e5e8148e942e0e197188e4a314b948e2408b67765a9ffe44d38a5ede7262b62cac0321071c8954170090104ac2a788256e3a86e5f43487245bc643a65f213ceb37e8b845fdf9e9d2ff64572a3ab2bedea7480887b647c30842857af249222d60bebcc431a0961f2114427358c82eb82136c440fd2376d227257f613abd88253e517190c0b65211c4903d473b509c958e1df90d13416871b1496c05e5dffdd6218db0e66ad7336c969e13c6073139dd1e9b909fa4d16633683b55b222024a686080e190b7ec46d249290c09e1bd8aaf2d4a76807a2eac67acf89ad4c53ea6f47a37d225833d5a54c77f145080376f7bd53bc40e11cd6e9158f58d538b64ecc47c22f3ee21d903114ae1645e7cdd4a822b6a3fc76901c1ae25ad8f4fe1e27e8453d8a7675c39102361a7ea274fd6690af2cfc2ca22f7aa942f08489f335da11879c9d8d9b27a244cbf8878a467bf3c091f5803e96c759b2e89f41cf8ce86fe58f7605fca51dd28f2e72874673f61346c7e9816e44d394d2d2a9ee470bf21db2e754dfaa842db140f4faadd464912c2b79e0203a7535fdc03a48732fdd37f71e3e2d99b6d6e681f87ed79e93d2d56b210173d9f657b72d9f07bf3375d6a39f68017dd77803cdb3fe85d4040cbc0d330357850668c4354217e64f6d00f1ad1b692c7092658d94d882ef279a94fb6027050b3adf58a6bf47a252dab053d114d87fe3828d70ad8142fef3edb00f7158378ec517cb18be0a349059625ed4fbd71de7038eb8abd3388061e73454019428c2d248b3b861602b0795bf32cd8abbf28f49c65bcbb3c83fec02f51104a09cbd43d13ca3151aef4d8fbb667237dfa7e97d2c18140709ed2558fccba9b11bbdd25355be151d73940bf0a9f44b88adfbf858bb94e8a0a5ec6b47d2729b12ebc4d22fe5e1b730103c793e15841af6d679724bd074b66de8bc722e89e820757caaa313d565eac9476c578e3b0f397da307060fdfb6433baaf29d5261f0eb1c0e92e018fb13c3c157cbba8e3e9138bc93b9058b67ae889c31e34b73b91d6c433032b28f195dd7ebdc8d408fa55a354831e7ea7593c3d6faaa5d26cc5075491e832ccda4247ac0d94c4d7f84016c1d93e43f6220bc52eda4ed571d3f8e79db76c482c5e92d821a1f173e97f5089bb14fe5eb169177bb978f5a1af4c3cab3152963534c3ac2977680f1c1b2d0fffde2c895fa1e1cc310a0f9befa4363cd436abff6ab9eb1746d2ed262b72b78cf26a56941e0979300415f1cbd410bc58db63bcfa61c9b2ff69c810335cfbba345b0a546b978645e98426bca9e7ea06a90bb2dfb0ef1768a6f902a57c47ba9e6a3d013d3448acbf13e31e1d4da42915c152998c2eaa7c20251194ed26da7894efaf572282e3f9d8781626b37584b664aa3ec4a870046f6bd305a3b17aff7c759689c84463dad894ef0016775f9722cf2e4e963964eab238607a17174245cf8092d274d121bc35e0a317fbdb62335d61285027ad7b6c2d88197cd84c4a108c3e4f9f519c4377f2265c7992b3a53baee8fa804b61aaacab90b6fbb99df1fa8d08d372672229241bb7a885c6a0e6b27dac044754f3c862570342c690fc438eaf35f235850a7ab3a4990f100b384def930acb3270233420fb210d71b3cf4859ce368c4055c3a229fefef9c1aa4225e17d2c604f9681f3aa9bac5fbd73f6b80e726229ecc6bc669cd92108c443a1d1aac9edb6dabd623b0da0d53120b49ad39025f16b8e846ff6778d193f15c2c49b4d92fdf22fda02b582251277bd029df9f29d773764b9d5e3af2ea3c556f4d1433496702238c92da3f9ce18555a8926c2980722abe9b0b67e2221c1527fd3a9e1fb9b202bb2730d69bbd8fee4a57c42b6878db2d48be04bb0810b055c4fade13447f77443158274a86d6f715d9ae978112c64dc395ae4e39023c3f80f00ef49dbabfd6dd6e84f93c30537a28cf95dc51f61ec48a0b387b0cd53db9007f0f30aecadab36e2c0b9c4ced3e753fd3bf73d2f182083acdc13b1909b7c0e501acaa7d7fe9a06474a23ddef8560060df707c1d70142a82f4c8abf3e62bd7bc3a2a40cb7ddbe10d4ff8ac2363f7ad04af550fbe1da4d7599ebee30de1ae31313381bb841992a679f848f5cd974595968bdfa90cac561bf0f641ce27e46fbd10838bb016f4e2614f763c84c2411d3b4474d1da5a3cf1337e5d2cf934cecb029f019647cc86360a96b76e1f2bb6f6cf8b2bbba0a3f0f498ee5bcef3a2701567420b4f54c3ea96b56226d67135ef6f60d5116a4f6f8ac1c3bca6156e076fb36082f660feac6c3ffb5e793abc95e195d58bf5286ddd93550b891b1b79884de79b29d40f2afe06dabf9e5176e90fc99d583b1be98768c48ae321ed36e0e450d93b4af5a2e6ee86b19b0f1325aae0ba4dd9de1ffb8f4f85c7f3437f6ae7445ab45af2adc91ae87ed6913bc4e2f16591a8814f49a78976de7cbed5893462e1700a5f59dc541ee1985950c369e98def3df8e4ce4549e51f7d088d4258ed7d6ba64aed4c5d21432a0dbe2cd674d30ee93ff38bc0bf6b614735684367567c99cfc86ca4f63ea1a8fed4c21d29916ad8bfec8605a33fff4482aa679d14f221f2a57340ef13bb095ef3b42fb12d3af1bdb5dbba32101b4455b5a9875eb9c4ebdaa5e6dc11dcd77f077acfcad606030ae60395c75faaceb85a5a151043c77f2db5a9a8ae5897963c8385733732dc3e9b3a842b6ad46800cfc86a9d6ea82731adc19e6c7d23a6eac98ba21d6688221ac45e5ca3633205c16c8797604bc640032b40178e65d8143942f6b846c4de24a5817ecc5d41f6eedbf056feded18144d43d8eae872cf9cb0b1ca21d742175ce472686274c9afad1f34aab744bd382c9a00b9ea11602732df9c97d1a58366151c6097b9905cc5289d1a9be4d5a80ff1b9e139d3734efdb59057a11f14adb7c0403a857ff94181fcc115dff5175d5c922138c9e6cdb92a2f96736641588989d353962fcb193ace184092e1ea08ea44c943abee1da658b8e537fe20e2c819ed60079963114a78ae385da10f9c71a5d2b54ffaf62e1a0b3648c13bfe401fbed2bfc4569347cc91bb221255a2075a25ab317c4ff99db59743ad4c94461f0579eae69a3494d0cae05176bf2f07c711a664323f1100766d068793395d6109c121e6d5cbd5129eac88249c87539b5fe310765bde6a4b3954f08522ab583de6f38e9571beb60e45fa61e506f933afff27414429d5ef0fe65469c59e9eb61575dfa39fc3f7b070c5947472caf047d05dc1723edf3819b0493fa46016f4da7d2ffff50000e62246a432b744849f612b7c529c2d0247750bfd5941205f811fd41ba54baa8f42e7e101514ee2d2798cef77557d91a9d5365d9795c3042781994ddb9a2c0bf81bdc8a557f16a141c0481c99ad0111e7542397b4d346cf6fab4857abef7081d5b827f7b000b39dc6ba4b56f2156cd0852a55d1b188a1b2ef5ab06ec5697c6e20c55612f413697708e31a11573b6e38d826b019156d31bde6f1ba3e674d4ef873cc6b32290adc1f1608219f4f0f5201286ac6c53e53cc35aba21ecebcf15a099a4e9c1988a29ca183ca2daf32c000a59969df3240cabd51028fb2b9da8dcbb8e5b4c2efe0026d399067fd160ca888637ceadad70d3e7427398adf0ffe4749dfa8a6969fb1a6057947b04d8b968e500aee0c6dda92b464d6a1a7b09483f0340b57071d4a60a6ba414eb1a370255a13a2ab9b8ca60f79ec7739e3ac9b69251a1b6639a7f80830a475a215081cb3894bd023a533d1aec5c092577272545de09ec87a6dc26da5a424055aab6ede65ad351a9b9d4bbc4fdc5ed7d748bcc6aaf9eb156e77d4fd48aa960f2ff0ef9140fa7c69350afaa89b056e75884274b2a4ee7c35d8b21b0c087e0d92871ef5d3154b4eb3cedb49bc7e593bf8e87f35980c1230608abbc26f4e52c2415bb9588a22c4e11802e81bcf672702ee44140b6ff3a7ed42357728b4baef9606e3791a594b85e8c8713999b0c2ce96af3ac02043ec818c77d7292fb952501206b262275686285d8ae5fe39c104e9f20e0d0ec56f491036ec406eb77552bc1dbd0a18cbf9a6f7cadd1ff981875c5c9c10dae3b163cd70242f7c7541f6f071f9bf6cb2f07e5b48533ae4b013e667b5e2055b6f4d3403eecce7966a93d9f092c6c56b14ecccd887f5bcdc56a11f19c44ab78de2a9bba41d8256c94a7cd3501d0208180daaa628cf19a7ef8c9bc891043f2e610a121f4b424995178057bc99fc4ad91e09282344c5e5aaeec463e09e35af6731b87d29c20509dbd12892784ab4b7ddf7a86a7e5dbad85c720de826f5594b7fcf03933180010372e9017fe762dc7b30b30e93229bba668d27c5d21daf4b04244752df0bf711ccc14b6f4c23495126712b1cb48d2190ccee3cb2bad791c7999b4ef6ce6f3f43a42d59dd7bfc8d9ec746f753a5e25b58eab2bd690f2ad6b23d696bcc3acf7d336221ef1ef52f557c578511373f74e3939ddf6ed4091e0f2c284737cd24ce1cf53cc8feb1552a12402103a6ae3e3414eb5f9bc3687d1410c5a44d7097d0d94b891578df687aec2569a7d614114b128e7604e53852f87f0d5e0e84b041cd7171b2fe80957cfd0308b72b080081ca5c1bd52b1db01f2cb0497566d714f76bf46d872cdc3900ba45a9a6d42b9400b6c2976957518fe5889ef3a14f8c1e90c7d91d954fb13c4cd5fc90d5c9c3269dfbe6a98584f2fa0299dd38e592c4603d787d6931a4c52b8b530b674468087fa72f3a2c68f96ab27e8cf500f9cea3548372c25a4761d000bbfc30f37c099cfbf322d90d3a7dd96443abf9c7c8e90d3d0509f0d5ef6588db6ae144ac47b35f0f0e446c778cee02d35a9f621ba127e0b389a722d55e3e6e0db22da66b34167bb5fa4eb97de16ea1b161dfb70b52f2ebe14f5f9d2cef62cd52495fdb395a4de7ade695ebbf4ad1d24e4a05429ff756f08a5ca098d0082e3c8de4b1e34e48c7eec6ae24446a299dbee1f60e25f302a81166697fd010c7c58fb487cff46a5bae860ce0eeb8050204d8a5fb5a1b56110b85d86e56179097185c5aebbae079e6ada288db97d3118dc5fc1a6689f264325b5719cdda2d23e708c10b89caa4fb9f6bd6e2d7c67a3155789e6e1eaf4cb0957553320c9546e55beed3a43dd16a92c757da49e3a50ca56e0ab71db5ba718b1aa1458f09e3a0b19ec0a14279268e41ce44195895da16aa4a3fa15b346b2457e9e59f22527295312dac6f05ed6540693ce6b0f974ab54cce7c4bad7097afb9ca0c36f84d2f57aa49c526888ddb14de31370b5d664c51d6a47e543bcca885bdf3902ed09f05675ffc6d1bff047f29ba21c97542cf7ae881f615a8cf03c612181f9b31b1da63be048e3a4a63da63ad76093b31f2a8f88592b126fd6e3d115a0b583d8c6d710ab912d63b238587704ace25c88471dbabd71257b62d660a8c3bc3be4a97bd8ff208b27926aa991a9e767023194c2db9650b9d33fa710070062f4dcdba78e06f9169367e7450bc7809613d6d7a3df7458ddb1fc9cfb23d3899c0a514e46c88e07a12b761cdec86f2c486245604c63413cd9c51f2ffd15d0aca6688d47175c5a0a0087ca64883258c97a6dfd45821e90978a0ca7c5d0472e8c9eca5fe97c7b7ae0b5f64602fad9d97f2a991a8e534d10287f50681212a9b2be8d46429901208c3db57eca16cc71efa5dbca4c941aad74b624e9a400509dbe98bfc025acf69a5b337a4a766ccf9235d801b47970fcaffc987c892833da63664c1da83aea7f9e08a9057e12c580bc95e605c1212209118d3abe024b2f959a426ad254ae2872884b79c39f6afd84c8b28eabfa07f7a7458348546a259727880f6f49e20e0e636189f82ef7057d121e35de85d8e456875de677b5d2f6133305fafe9b35fc887c5c6dccf7f5eec408d18d5e890c76b2803a5477f5ec6689ee42c40fc94f186de01bf799366fc04c20aea4e400129a7d999867fb7eaca45306c867003aa072d2d2ec9e189c1ac03b7fdf91aef4f8e9a080f8a9dc7704b80b8a21493218a675d297efbc31a381662b0aaf46e520cbc46b165eb9fdb9be5255fda274d9fb0bfd17973488c44084dd591393039b7f1cb5dac65c9bf41e4915bee0559d9fb29f895c9c3ff1897cc2c0f8e1b721766cb781d28e265297b3a5787814a0e8c0f6452ca9b46a6dbf8376e67ccb9373116ef01635173ed7493f5a9dec9065e28b1f6f6de7df211c34b8b2d3c7fd0bdc4787e5da4ad035d5763fcb64d0bf1bc6aba753d27df582a2232b8b6865a6b6f6686baf7466c9a07eddab2bc05a20673c09a844f073cb619ccc8c7cddd414ffcb20a72b16fff54e8c28c511759d5045feb6aea87ca2a09f86b4fdda0be93dcb5e60f7e638ad43a68fdfaf8ab9a8edea5a634c27b212ddb7e9c24f5dc2550364adbf73413369e9948a16b02df10b016a17670b6cbd74951bdc3993f66230df599014e0c40c49f72c82da78bc678b6bb2dc00b50049dadd18daeb56db667035da078e5d777497450af69c09aca6144f1310e2b412666cff39fdd97dedd59dfe3bb81375d2ef0fdc352d187a2170157ad7633441c086e8e4c24bed25a8ef393194730e4a1625c2db3cd590af56bbccadb8a48d10a9dc581a641426052d5f3539d4e9ee45aad4e4df37572fe417fe3391bbe24841d732c699692ee85029889992e44a4fdc0f745ed969a56d79ed35318966b9d419cff0f33bced178ed2d328b289579a4a60f324c862a1e399da728d5a0e4d4059abd4ae66c0821093fb6b63e0795ba93c4c8079de720d750f75d1ef97fb8b4b7c2f825ca360497c97f76933fd1a1307a28cb0ff240180acd914d9aa5aa02d615347fe3a8766688e53af4609eddc7ea7896c7c4e5038b5f9fa2f22cda41bac7fc196a01bf018c56e191e164ffe4386ebd321cdcc505e62e9ba4c91be903ac9efcd5b0940bc24044e10fe3e5b01be3b7059fe78e6b0cd43b6d11dd72fb86adbacb73ec01075f6acb49afac616ef22540136690faa003179216fa61c1eee668fa97a51fb145163a43fc98834b62a27e895341a158cc849ac82afd83c32f6a19ec6d44a4dd2262eab4f2ad15b27a6e0cf812a8871fbdd4506f69e67a191cd6ce598fe420543edc8a26b7ba23ec75d6a4a554b5a0a321f433726966747e5fccfb306d3dd70a9b4f863521298c6cc61c9ef71cf59e72cbfaddce3a6b5cfa6273b4b0714ad91882fb229e16387c727b8df7613850f5f5ca908eb61d61aa0baf349c450d9f2f65d79657b65500aaf6e7fbdd923113bb9975fb40980e1eea21d1e7b29d14bd81aaca5fa078ceb49ef8573cb24e40717af31db9ab8a2a7a91f5de1869dfd1868d22a713afb5129c88072054751eeb781822b69cd564146b401c223cb28bdc96d2f218c85209a2a33bdebc9d3b9170b721a6305ed468c515eaf794b85965f2ba800df38a9d8941954c0374aa8d88833d545a68d5132d1f0e012f3ff48c52b046b98f677967c882f5597ed267d5a040437a03836cb263665653caf4036a4e764c4d63bdc5afcf3a6ce3fc684fe759db6e108b778aaf155cfb8ecaa1a0a8bb9f9d2a478cf8495cc2cc5de49c3a81f06836e29210d6057a82dfa1bacf8cd53745ccbadbb48bb38b1f10838e1a160a2a086da633334d98115505d4a084429dd550bebb182fa4a62588afc2f638786cad771530fd94cf44070d6bf01421138e3d111a855e7e49aca6cd686ecf691fd98f42b0ee3e8e67e4325a5458e1c16a8ecb5adfde85c055730b3416a7e463bae03ee90b6a9a3fb78117e82749c5496e1ed01c513b7a97cbb2f0acdc3844668261714d385ec7c1f47c67ea75089ab19f2dede6ba48c45388348ad07a610193de144dcceebc146e814d7ea30b5765ad1c8e53562e7d43ec0204c1ef1924ac55e10812f0f12b9b8068754789046f8e6d5b28e2e948701b15f5d80327ff7cfeaa2085b6e4e50f84d2b661d1c09003ae089370b603c451e3d5a173dad572dfb6228ae168aa3b88fbe03c3c412fb4704a638c2747e7dcc04129cafabe4d43f98bc32686de92b55eb972139d9a3c059dc8a135d012c93e131497911ec4e8e9502055d86cf1519908b15eff36b0e1a5dae13d8c155f1d81790e6ed66d133133a23b2e80bbc3200744d92b592019169f36eafd370c932861d42fd82ee546bd7397c27683261d12a3d2323b753f6e7c0b553edd637bd242b0d1195f9fbe4698e2582cb7ee5f19e4a81f6f7b45308c1049b49eabde8392b906ab32e569d3001a14a4973f2de51a9583020d1362c06544f864791cdaa50ebbc79c0e853dcc91cd33c473b05f262adcceb12a91740a67388e0c7c22ce64d18cc9e3dab7adac76e9e97a2cd2bf5efd7f5ba7da786a2d992028425cd7c5fd6d6a638c067dfdb79afae07e62437a06f16c9b2426b02c04389e386136d75a9d487f3892cdb6ba8279edf6d528f2ace1060c91df498bd8270cc276fc4d8120c0371218914f63b8f5bd43eec071b410ffa3fe6d836de9ef1ef128d8c46c1526c68e9abd88be0dd0424fc21f0fbd7ae193deb64b66c3122014808cbc02ecffb96b7be0f73c6b351ab0b274bce6292474891264cfce7e0c9fc90602c15565d3798066045526454bb160922fc41fae00d8915ef91418a6d583610146c77ecc0ee0e5472f845db598a8c3beba2af786cdf7d5b9fa06bb754720ef9a74e7d548fc7bbabef00aa4c3e9b3e4e3bc03ee12901fc1fdc4c5d72d34d49d6fc693a606f56475af73068bbf7af589ecb5cab9a53519e9feb0f72651a3214ecd17f680bc339f3c09e20fcb4c1d03179eccb534f82f703dff67dc5be336377c47458cf65d46dddaf46d4791be189d3f8cbb1864c0f756f090a78e4511d0f41fc3c3cc5f377d148aae2d9cf76cb9f65f8d6871c9b5d4bb38646c80e479aafc0b693ecefcda38b6479f182f8107b87ea76f3b1ee951dbc3bc61381e097ae6fbecb95530afa7fccfbb4527e448929f9248a86abeda1323122341f360188c054e5bee9c127c09ad1d349d728ac0539a611b9927332fa027328ea44853bc5f54da79ec70711ee08010ed9238380ac4e98f9f874c87299aba72981cba002f13b6ce1b7455743d58e34c24d89d64af27abc9266a5cb65cc6e293f13977fd16d8b86efd13a1164f0ccc41d26e8383ab772e718d237633904acfebd497cd2336a723afb87e144da83bd6d646455ae3891c16962c8531b9f1eb7ae7ad61ffb44305b10ba2248c334fd04443b4dadeca6cbbe5bad01b68ce3b67434d1408640a8218ea5947e4f651c74e30bd61c44a41f8fa9aa34893cb0d8b283b7646ae08c6d23023ccaa76aadb32207caaaf9f77e4aa7d377aaa2b74f7e401595e722bebed09a1995035eb1726b3d7cb5801980092b50cb60dbee3bb871cf6f9985788e351233881db3b972e17450f8ed985bb53249e68a6f21dc71cbf814ab8bf8234dce62340bb0542c147f53101728f14a97ebd6cadada7d5907265e83b8a34d7d8d77ff502ce2bf5d2404d63cf7aa2f3c601521b72d4bb0bcad22d8095f20f8a3e54b64cc6075d40c3d1cda44a376ff32c9d811a9f67b70af83206cad10c0ce669cfba11ca8dcee3b33b84c20eddf90c0137620ae485329c697915583c10bd970ad7fe04699775d2efb3f7a118f351c6820b707a14abdfaefe87addddbe7730b37c8eb245fffabf7b53e3b522d488c3445c63fa19b611c575fd962e500b53edb0ba66b16bd88f787e654daf1437ce4988faa0c67d39c8ccba61bc7f3c324986d50ba6dcf00ce8f3141e112cc66ac39e2cf0418bf2542314326af1f2c19dc7d72f8ddf9ea87b6e0d0db486d813e7661165beb54ddf242347d895dd4b793c9c802695c408a50033f0f2e799ae1944baa7a3f938f8a33aab86e8378afbae7b2c3e4dd7f69fc0df1dd5111320f81766ba6c3b869c20ac9a0eb5e1bd6c1e5ac114940667b8c1204947ea706424b5e6834dde77d83811f57a22053d47237e2554ccbf6fcc2eceda8253e0b07f7dc41c6b4bec6cfe38b0f48513693df94f0b1146e2f7df8b82aabf6f965d1b9474fb8b7c1a8f01e299e16ede0c2587fc247df1e54157690939e2dbd1370a51a35044fe113ddd3c5a6aea190338e9ac06af5bc1f9da6584a744b2f93388c6963c661809a2d20077fb797b95750534566f36623b71738c23ed07e2751baf9e44fa343780a02e91b1890d1f8c163e8b92dcc38018812ecc6e6828d5841a2a0f839d1f04e2359bbd7dbd6d794b75914bf693633942fa508bce47aca0d9d48191a042cfc04b63fa9753afad961919a11b1bff30ed5b86136e1f691733f0d93e516feddb3bdefdea32604df1ce948805d7f47f55eac5f5219e98c34e4bdf5d032e2402187d34efcd3dab87ae2cc30293e724cce6e825f1c95e9bbc72e8ae6e43c291587e9b6b614900d1a0e05a2fb6da114ac41781ea7e1a0527de5a57657559d1654a1e936417e996bd90f9bdb1ab5c245f4809ca5d4a6123f52c8e3d42478fa85a8e1108c96c7ccfc369632a86c3f1243b1a7c76f76f16256fc67a839154ac13559886db4fb1a182b55cefce76b2653e953e1e9442ab70a8ef31be0c0f5aa1df41f56e92d59b2235e3d6c06ac284a2529586ddb83076f9def7524628cfc4fb39fbb9fc460a283f2353b8abea553e5ee8253957d62127277cca9b54eff510b4ba2b46b0fea8a8a99aa4fe6af24622c93592a6e2f0a4d4c0e3b2064e56eb340a70a6042ce9702ee28da16b6794da048330ce27dcbe373a87a643e432cd91b62beaec216c74852d51871ca59146e1329cd4dde2d2af8dada5a3871dae1cf8febf2494bbd9fe43b17ece04bd88e10b28aa0494e50c5efdff7e3e8693eb7ccbcdfcbeddd0dfb0bc9a17255c7ff53d1ed069e380bd06d3e17c3bddf139081f78fe90633b3a5c70d60b5b498ea85a20aba0aceeaf5d4738b44e1af18871e02b3059b701e73f8f08cd5a538faf5d9115ffec7ad3b81f76fe6b4e55812ce924270cf0c09a0306f035e39df023d0e130732e15715fc23ea6b515389630871849525ad80488df7561b0ef4c7c0089020d4c7d854a52daa88b6f5e853c09bc877888655ea14634fd2b67f79bc7527d8323d8ac5efb585a8abecb4ea47c9106ac96f2518079bbed43bf26e1d4d917960b4c3ff355b4fd6f32fa05e23d1f81fb9ba52a9627af8e62c0ff7748535d281153596f9c0d905efa3ddce390f0b3860d237143fe386290a9236de5e25ddc6c61d651395151a14f035d3a426bb77ab9f2f919ba3df79a85dc9e76c7a69705104d38334823605f09310b80653e210065b6c23db491ae8d547ffff29f189bf3725ab11948105b055b144b7eeb60c9d51e7bfa36c8cc96ab24ab0609c95c5255b48d8dd7bf21de2440879a07e51eca670f6996d6f65b38e0fabb224fb25dcf81a33c4555a2581d2f933d8bb4377538bb78ee01265157b896fc0791fd2e67b7903bb53774c9bdbb731a9bd502439499a4103ab00de3a8b072e34d0b8a49806c2142c2e572f681b1e00bb01e661e9839100456305fcbf35a10599d4a028468ec28732fd65ebf52bb6427161a4bcf5a838e5143cf66af2ee0b3af0f247f0236b2a40c71c6c903716a8770f096dd548d2a5de098cd3197fd0d5a4bb50028baeb4ac2f5126e2bcf0bf00dcf9cfc17fd33d3d0c8e090708aeee11ff4f0ef18e1e82f2c84c75b350a1d33cfee607cba26f7073e4ed3103de0edc271b22e286f5915a35ef57f39dbb30ed0d5f5495aa8363857866b4bf4b291a1c02c3efe0d3e20c6143b5207d5a0160d99ac91355a27874d2ab9bf3eb3a86966d72ce7c612c944a110b65562225ec9070024cf65f31d397838b1c457955a5160c0af26d90c2f8d1a5822cb4102cc81640b87a1f2bc921c45864f4c4dfffad49b3b63c39690e3338e70237717a6bba62149f29d3380a894e3499d0258403ae4aae8b8feafdf45af1331a60069278015720c69fa0a949d2a532ef318ed6ab8c370111c167c04be5de1e3bc867a8ac78f007bc7fef8929b22b27c0ce934d4086567ca26ecb205f0a5b71a412ef958d50ae6e900e6a92174ed184b17c82f0ada28f88c29f4f292ebd62bbb13204fe30d0025a266ce3ad5be11573445c86bcb5838a0d544393ba921cc2a9b5523bbb1a8f75f3fca358ef78308f5a1176e504f5c2e6aed32d412f197462d8786a63e987ca1295ab901a690aef199cca86cfdcf92fdbe939c1bb9ebfbd96991f05b73c375cafb26bea1c00eb3892f37abaf9481e8eaea4d0cf3871987af670f64f75d9fe04c70dfb62f9cd2be0cdd9c3fbe1d8897383390e4228f10588ce8a9365b6f09848d9a9afd84cf383cc03a564b8c7f50b5367545012750e2339afc269de053f2e7e2ba5b292f9cbfb65f1c7dfb52c0166b91ff20a2a6de0efae2101deef3260b0c985bfdd7a62a98d16b6a9a3a4cbe0302379f3f67c70687cf894cbd8c515b427d5b2a24b9119c1e23285d113a47c9c85f63e30d8dd05e87525881a59e990903ea3590516c9a6d380683d603cdbd016e1cf132bd4418e638c9dd5dd34e9f6db102942f66d65245f56d57354fc2cc6596ba325ed19a682c79a235b0fbfdff474e675c982ab31a3a4fd90aa5517a9527d5cbabce4c20044bc6d8752a60af0531bd3c6a59bf08a011b48965ba5e0c1434b55da710ac06c61b6ae30cb53d5bd3e2dc100990488eeeee0288b5ae066804a035fc33c6fc00e441b06390917d9b601364a7984084229fee32ac80e635786cd423fb383aced698883453603f6b5fc471c62a6d0c2184de7ae0fbfbed30e56834f22c357e3f1053f03decfe7698e2985d9caacd0e18ec3dae372bd2f00dc34d6deb6ef130f4a58f43bf622640027a1f3c1d8d23f4ec87ad317ae4d4214f93221106cb0430c05292e9c15c67a9153cb88d3611756843a2fb68c7a5a4c86fce87758d4fd4c804183263a2ce48fc1e09fa93bfb8ab11e546eb857f87fe3acba4a8aa3b8d8af8ddf72b4f242671fbd0bdab8efb164bfb83b45d057063773ae8883f6be11a6b9cad1e6893ff1ea12993ee2ee1b4fc93e42c135ba2928e0bb40c266bc41757cce14dcd22962840922affd7609f3ea2912eba0bd7b5e382b4d3c154d0f1ba0e1cc142b17473c05bba4eb40c04d419a3b155d251b0dca0b01c5d9501dd63a2de2337ab20fc1ec810e7ef2cbdc4069ee56015b035acb056600448785a382e8aeba0d1aed51593d4bdc1a34fc9b36c0bfc6ad163cae3d5f0845ebc8c102bb6c156021aa8381d2ace15489749f887d88c7a46056acd877e1cb06ffa2c6362f97f1c5fa0b40ef8ff85da3a78f7c0c09cf55e25155879a5f85994ca48ef1942021292f6aa4b5435f119a6c4498ef9bfc7abd07607968f3ce9f09b2faa9a2ce0a3e45b6aaa7c00f59e73140b02270d5a139608c1ed169d55cef5939662850b80db3cfb49f52f6b7ea6e9ac7e09b2d5da803117c39dc6c9aa96bc5fc086369305138ac8ab31419adf392282469918f2c5011605bf4ca96e5f6c100a468830cb1de42b15ab9dc20e20ae7d68965401287260b68515b0e779c2f64261cd2809499e00a16e80bc86dc3aa83f1fb3fa5fc3a6a3cd52a064418b511e6556cb9edbf21f5fc56350237e40003cb152007f35a4946026125e96dc3fb2477ed21613fb73ef8bf48f23baaaf1180b8930a17fe9c2bb8a3ca9de417a655b1b468af7166595a6f60c85dfaf87c82cd19228b10ed835e4e9091956342ba0960143ad0205931b6b0e1e63ccff0af02810f0fb6b06efdcbcb10b0cf1348f344d2e1121711f8937a99b10efc4844f2c0b859b41bb3c11fb7e876eddabac55a9bc45518dc165f4c2e3638301ae1bf25877dc3865b67a8ecbbc811020d774939d852b327e4f9c340bdef1ea547b2a1e860706cfb109750437b3843593b5ad925e7c072b89f92b2f133442918989bf0e3122d8082dceeefabd12e416b071d8869b7b9555b03323419b8e6fd51fb8c99c1985ea2006316afe861e03eff2fc91ee76eea071cd8e821c8d95e90a2e99fe845f2efb001a692b18d6deb774833872bd8b9b5681899cc869cc86e2416cb9d97905d1c7d3e3dd44b14d5e869b6e3b07b30400b81c0328d493ef5225cd3489e45f5c68de2075e285612ce6d5c3e0a77894ebfd9ff9584cd6dac8a038d949bccdc6480b60f73a5ffd29ed0169d2aa1c238b8d8b5d3906921b2aa69ee4cc80fdd832d5315b489072bc9927eba3aa6009582a6826ffd7ed5f7a9110b2b72c86b25f0f7c208f0a76cb7aee79e5c7eb5c85dd22ef01f1b1faaf8e064e2c0cc5194150b398036e36f1fe25503e2d87d37934b1d674ab80a829192fc96151fdec4b3927aa5ada103ef9fed8d8c022f8f11ab2a4c853051b5cad0241fe5dc98771f8a25fe65ffd8736f737d67623293c25ec0c78ee50b145e4432a220cc075584b5e1b0dcec5eaca1e27815a9135cc9581fb31a46c5f19b3bde3b5d90ce9b076c746295082ffdd5a47236b254c0bb0264588f6a2ea5342d57f652f9ce6780e4b86979fd43de4537bf18335694d4ccfed96aa94d5445f35174d465ebc30477b9722d95271d01d58bd7de25f8fb00106f995e17280bb8ced5146c9d7e7389b65c88bfeeea271267ad7f1528fc40a3271445f065ed2d35ed2dcffb342b61b585b806deda7c71a158355a363382d367e44373b6a7f70f60c74a2a5c06e4ca6d3dfe66bafb5499b9bb5352bf2817aa6d693d83013960c522636be1094c2fe8a96f581b72f107fdfe50417dbb41b0b42fb7565c4a60604b44da35341087485da3e65c888303c03af6eb8b28ff0124f1b2b8936366c4355d02e6e8513c56f94a7ddbdf92bd67cb89a60bd9d671b10dcc41d8a04baeed79167b1af6688cf305befa416867b88ddf2b5da1bf145200eae39b1a8bb8ab59f24953df91a03c2bbc040562aabfb881612311c3fe3286c3faa9b89fa8782f6bb373b9647fc270ae7f9240915245478ad609692a52dce7917ce4212b621e66c51e5ccf10271924b49abb5ea58bbd19e61aa0cd6c7148de7123cd16d97e827974058f10bd1931f962cc219614ce34dc76b2f0b734e2dab490aec9a6a2a8ae4470d55079b34cd5d1015cb1e16bc5069c4b86d3d8b19833d0bb3b9dd564282c85693a42bcc17a2b4b07ed73ccd7410784fafdaacee0696455806f8e89d86418cfa2af75dfc8c2878572d5e7b6102b670c11ced54c69f36c53e54b9e9c66a8e1d4dbc4793e4b58e774419280a1f5bcb6bd0571a54310d7e3fde9305d1c770c085d446d7ecb104a58d663520bdb67b5a69cc902ab76f7c38873b595b62a986794f1ffec76a615be84fcfd998c114ba3c2d0f9be66a0c9a492968951af7e32352833a3970ea9445f1d7cf11d62ad81ca3b25e97b00ee940758e359a5d812eb193d5a31e4d3690068c5f15c5e8fe5921b46c1f2ebd1bd34e2dea7cd37412e8faec5930f273277defa404902e5a36bbf99937bcfce25a9014c7ed1dac3e226c719e2282a2c051f08cfa83b8d7392f80d6ecb084ca37d37c5fce2896a6d75f6070b16d80d5a000f70e8e730444f6be93a483ab82a8846458c5c7e03fdc92f529469f9018d022b8b3a9d9bc45836ef63a9c8b213c265677919df78fcb68554e1598128265a52adbe8c8e7ed15b09226ef588413cdeb41545d7d676a8b45c6d2b41f8fb11f1e0b232fb2e81f69424c36c0d59d51f1340bd9efc29f48dce80d113fd38aa00d4d9ad49a92107023deaf5a7d11a459d4bd9e027198ea44a289b6e567885def6559925dc411bc7971677bf095a433622696d38c7a6bb6407540d4c2f06128f56109b6805084588903ad3be68d8be8298c3cf86e37f16e985ed58469e53ba09e037e342b200470d3de5615dcc534dfaedaee0acb69f54a3b0f6917d79abcfc5efaabb2cc7b5d18795013e19363924df055a625461160a47cc1b09fe8d8bf08b6355f07e0730a4a65e52726303f5da50e55bf4a51db2e1e23ef430600b278f66df9e0ba49c44d8230c6911b3bdee0a4a6ea5d1fe31c70143891ec402314058090f2ad474e8c38fe512ff47e0a9277068e17b74829851d38be73d5ac5205d6aee72110f71598074343216a54672765388f68b341a0d4bd0b364b89d46bfbf3d1bdd36941372b6d751a74fef93c366b1cd14d9cbcf1333ef980b373c93497126f3a128388f1bba22d5af11bd015eff453c15ac58d8c9695fc1eb9d049dff7f64ea3aecf2ae406a3b371f431d6dffd78a3b1726c9236f4b7ce06c61862cf4b3b40660579e47ccfddbdd1f1b4fbf2c494bbc7ca0711e697e582e51d15214192697628bab7173eb708001be02d7a40a53d03a1b6afb028673c9eef916c100014a196ab26fdd59c5798e25d9b4eee579e36f76f3e00bfddecbaa2093b369547a748929a142949e91b8916af21a9f366bbdbb48daee9b876ea0fb41af1f8f7210514c0a6c234d2bb6d6d2b9d869dd603780c913fc21ca45d07302a592f2b40328db069094def42ec208aa974bf763f905e4c8158e899cefe85fe2bfc1a3f1b2359c463eaa7b078c0ee3a99b3ef53c83c224f826c928e5264fdf573f809c86caac1700a911a9777fbdecf50aa170d42390c98f00c209a2333c84a5c915478c219391e1127a9dbd999edd2f891b4ad04775521c6546ec98d22433813994721351bfba4eeaaa09077dace48f3fff17cf96631aedaaec698ddce5b4cc8380792f97a8f65e563c4b2a704af53715867f41a4734d4f7057bdcf370bae1d7f27b10468b173f256e6857ad8161e9a58a1846c1db9c3b9fd79abf4648f1e141decf8a093c615f00b05ad6df1356523246a4619db81d2ebb2f24b6f55cccb332682c645cf3bc0335a91dfae06ec46f5edabd2d631a229d6cb9101170695a28fd8991fc8c128c55724299ea51662fe7ed71422e551d6c9dc9c7bcdb4abfb523de1d354288d09fdc168dd2cce0fd4341ad51d92687c1ee627a45c32613fbf3d8fdba6af26855f62d8ed8c5b4200230fcddc52ab631ec403ee1a7ba0b8b48ee5b811f6099b17d552d1226dce5e34f35a75376a8fb179a291ff9fc14e88d983b130484c699ff54e690603c8fae295dd3e88c30e6e93d98b007496e4a4e4f9d9e62244c57f8384b343154885287d70a80a97399e1a2ff65f1545bfd402e37dad4be66d241e1b692f8e8a1a1767fd46acfab520319526e6a2383ff0dd8b1050ac8ba0bd74fa3cdbe6bfecac220b78a3e8ca12a1745a37af33539610a49a3bd44a0a0065b121d72961fdc2ec437febf21ab3b3979986e3f16a705dfff0ed5f3542f16ee6ac179205cf79c2b4b236bae972a50c04ed79b5b5566adf8a420bd078172b4d09d6351b7e960e8dc407a9a907df7b5f024143fab8a68fb9464fe1c84277d6a927d39cb7a81dab1711584d5c0544571112054e5b7bc107042bf4e620fca278abee5138351d5ab5d2f5f091ec8cdc212e79d75f940e67d8b536e3fb6232e78aea8172cdbf72fcdd756bd3d0980248693243381c64aac2931994cdb1e491fc4301d3a66513b9a19458cd32a3f56246b06da6fc1ce6c82774820a8d19643df833acc533ac4bed35a5a8c2405b0a9d88148169d62aa9b2ac8146bcce9c7fc2117dee40afc93fa99ba8373229d90b9e1c171ca27a67a2ad31b675ea2737a936acc19a0ea71e4ff8aa5c69a96438eed4a74ca68346294412cad563780228ec43576059bebe8aad74b2027c843281aa45f09739be22ed5afc1ed2a19b3de1c631117131fc236c3bfb03c8c0c00c7f26c2317b10a3bac7166297b73d611e2c13478949f3d4a57d194f22df7db4d826b532e38f6fe0b6c43049b3cf5c34f615310f46762f2d7b67d3585d0194233e57fbacf7a551f9f49fe69ac4c7dbe8aaaa044a1e1d80c10ac9a999cb6da99f75e9ae5eb3e99d48ecc5b954c9c20ab0bb8cc643dfb31a89293cd93172817c8d0cd7ba0b297c21a7fcb81083d8390931a9211db1970d34aa6253f6e4b661ae0a6fc12de71b59924913cd1afc7d00c6cbf38bcd0fcbb2cfcc4d14fdfdce7d1ea3c34d4ce88ef2f82d558fc56ca3665ab4e342789d80ffda8c2f15037fecd70f69917d02870de8b2a7c12529205e1fdb99bbaa0e5f8cc9e27f357ddac7871e45c738657fb070b16be550537d8709008b197a150d55a6cd4eb05a6dc3de7ebceeed06f65bf5f7c67b13ef8b35a89f0cdf422b544abc462a84788c7929e779342baf281e1b62969d993348222c391bb27a3781f86716e9055095afdd0379d0f5c5c4400c59c50804f8928661bff1e43171802761f607c7be739a9f16efb7907246944c94ef31d1fc9fcae2a28363401d8e4335965a14a473b122704f05777b0e1a949d48f21aec5cdec1290edccfc5b390669028d850e493688d53901bb79e00e1342531fa7a99e3fd474eb9be9cf4ee2a731dbf81b4aa0f748e538f7c1560391c93c9274056b78a094618ad7c178645eb35c08facc41736923c5e3a5557d669bb613542c7f7c2dd92bde3fa76f7fdc068a010e87d36870b2787ca56e868778a08acf5679155145be34fca60710778fd8b216747b451e793932698cdc5a707cd3a90c6d4ae17c88770cec4176d764faf809c19312439a55a7116589382b47a2c2f6fdd115e7995d2e1d355e951fffc3d3a04c5cbd6ccecbe4df9fbe91e562f1e4d2e13bd9be143c52256f753be601af5ed6d900a32db77b2497c6e87d29ab0221d7e5a7a9aa21e9667410daa0614b659f9e36828415ab1d967c403c9d49fbe60858b40fd84adea2c6c8d281768fdc1c850f7fc423fcb9c5cf1d2b4b4ec4e26cfb411f99ac167b43517239f88e35a89d7045e0b76fb10ff5949c7bbe40b8e474bdbbffbef8a8461d32bcacf492e5d2574d7b3cf7919b943893a9542d93670ba233077be7f77d8ccdcc423427956fc6bc740801db8f17dcaa622bd86d6d03e90bf0fbdd164d3396ca5385f46ce824803e6cca6d5e9e0de54d615b911f6aa12b90273e29234f0c764286d9d7dd3cba45e4dc4a9aa529b858304c97cdb595fb3c5fa27e44d5d8f320de791baacac378b440e94d252a65eee4498c207a20a6ea917a0c10c16a3c2b6ad44d91f9951485853c37a9cc723b39033b94bf13a9b905e648290f6dfd4274e54b6af9a9bb33ef29d6b30bac65efaa9a452920540041a88f59305087b55257057f30243b154b6afe51a4e7dfbb3295e35d58a6d7a60202a0fc12f9ce0ae65552181e23e498f634d0db5009b37ba80a8f787f5d1d684ff11531457f4f82e46034b5d676bafdf906a8ebf5847db18a127bd48e5cb8e14b703ccb63270a5825e9566847e66f6cf317866e71141f20fcd491f5c1fa116fd674d0d93e85ae6fe384eff9cdc6068f6c9e64c63c4643770c86d154ee9fd1dd6a9830d6ce06bf6e25cb57065ed3e3d61fee07e907e9692dcaa38759464aeec7805de791e4918883bdf9eba1627c486be1dd612185947284ff5b17bdc80c778179307a9edbc12a17015a3faacb7ddce4db913cd334714786e1b0f57b126861af1f5038dae8ffe11c30066a845e7af554bc3f69676fbebc707721e49ffcd0cf1abf9aa84e72b4b6645f54c48453a9727d63b486ef2a7308aeef97871920b670e7b426c7f81b23380c9a5d6c1af7053598010a7e283f39f4951b71163165655cb7c483a0e46437f73015ed5cd38f9c18b66289562b40f44cbe2f7eae57d99a4f270b7b7994a373c7b80ee667e90066fb6ad2b2672be74114762fc95a634cd5a1e6f026a87c96845017eb73b823b3b727a47e3703bb7d0087d3fc91cd7b74df268bf9e527214d6dcd5eedd37ef4109c0b0921c308dff70dd0be646664fab06d8a32a927a1a358e9f65b188b8350bafc5c2473736b6a7c401558f22505429524c1b6add739e955ff88de2e0bb0906677ca06538f06ea699d73319c51f1905d3ab9687d51003bea88f89b55db331b9ca51e7899d68fdc5bb210b40062d4ac831ed15588ccd19a2639918ff8b37c70b6e67beb37d91d785c6e88d2e454312ca0ad2d2ee786c9cce2647f89a70d4e169735319ec995d29f508f1468cc5159c8f373e5fef01e490f0739d3902e7e3d494019796495d281af804899acc702365806f8a65eea33502361eeccaa0d9845f06d7865fddaea00bb16b0cca1a68e7bc36f663b59a054b71c3f2fa31e1c6e879d072aafc905e298fb4c3feb354c612033f8acbb179a9c5644cb017fb3da2b04be1d5519370f4635848c8f0e66d5c0002d9a489b586a217865fff220c406fde46737bc5637382303a6a0b744c0d6a02036fa79ed52b18eb5c5c3fad039af4a2d9437853b069d1b67b7f99ca04dd01c7683e92e3a5df915177b1b3172416b3a22e9c4304489efec94a87807d5fc94ae4455f15a60a3bda8442c08cd6bbc9ff4beb6f39c291a85cbae8fc9f9ff20d6fc1395e39a7b4df4e28721e27a0354b573a2470a824ee9e980084e9088272e38bce1279dea3dfa10f06a2f491b7a43378cc3eedb00bc5873952d6a813ca720f8b853cb169c5a7644bf3037ac9a55af07cd2a7cdf23d11fcc3b6c05ca3c227ece94cd0b03086fa4f925f0410e40d644cf8eb970db44d455ecfca8ad1e8ff33656caefacabf81736e12eaae373283f5d62d1c726f8e32c45e313d2c276b993d02209014d409b574dcebf4afde4954355a4e22e34d86923ea83e8634e846032e443b02724395a9867ff88453c4477f835026406ba16ec9f9df492c7c841e28449c8bf48c24013a9c1e2bf65e83f5d5ce57573208050c4caf298529697d411c91930a5fe6563c92663cd14e041b1095d093523e84ef991629a816d6b88931b92d3aa0c40402bc446466860b2e268847e74b317ab3f0049a6ec6ef75c7e1e944ab4f74468de8a36645ab87919e304b06e76620e9d42564208f6a3df07045bc2a970ffe9b60e7df7382d3aee771ae36d697f3c572a3076f3b02a95b1cea0b9363ea953e6588ba4ed0f7b122773733f9465ddd5f439e7318949fbe0b9dd9e3a9ef545ec2a6d34fc3bcf96a065028bd24b891906b75061f3bede1b402fde7938d83594cf432639ae060cd6993f12c36f293057b31115802a934baa975e98dcbdba81e24f8983a15d2719332f0936741361683fbd5922ecec7f4c4d51d8c8f1e425cef92858477fcc2250ed463341d520e0931c85733a29cdb60719690a341bfce1cf4ffd47a56cf55a779f673280c45e5303706463e71d5ca6ef9bd268e0ccce1f1bb5785abaa3daae331517c0b01bc8ea691cb6c4b04a26519f43473de981f256c40849583d781ed43eb1827b11c4cb4bd735bae88e2a38749f2573012b3cc5f3d09005e124e459f57056718714a859f35feff9d67e4f4438b9477253ac8a18c0c3799f06d437f323392b1a8580c687b57784e798a7259675072c3b1382b629584ca05c57a9cbe7df13450bf5a53b4549d6a147b41512395e87c2287992ac495c92cdbb9d451fa454b3bcb1c096eb08e0175b4d785dc7b0182d0bfacf73d16c908a40440a47bc463cc411334b03e533954e6e052c8fa75502706b36389bd74ec81add4be9ee9a581809be9d05ee4ce597764b190d857a7b2406fd90eb5d025ec7ee64158c4a7810e446528a1da473347accf6945ced10bbd1170137967c45a8f47bb4a09a29a4b551bbe30cd639b3f26f2a864ccafb8fcee05247a9ad2c1f55ad4b2561f0cddbe296977466c8fd65bfab9fd3d28d290aa2f40e4985f3d580be657b9547eff968b0f3f0f31db3d5630383ff4f25de53c01f6afbf3e83957af155e3fc9c7312a70409934da628160b66b860af0c4cca5097391af668af67750f4bc3091f2d0eaec92a0efd50c1cf428e6968473ba12a1f9c76f63af9ba4337a8450dafdca593c81faec2b4b8907f188fe6b61de29edb5924a6d26c7da680593b650a351da9d79d89c6e6d7f1bf3b128a8cfc18481f989b042aa6719c7d8c5286f967a23690406bc865029bba447ceccc0d0496d7c5863c8f53e6113d7a4b7bd13c76346338ec8b77513c19351fd9ff56fffe961a4a138bcd24bd79b7bbc03388ce1da5891b38bc0ae993d9e19db6a63accdfbda4608a9b7ab3abf9bcd641c9a94059c619a142b9d0d8f045b740646a44c02a108e73852ff92e9fa5ff9c844050c1f6b3eb478b6731471895a11e382e8d5aacd8aff9a352b7c406fe11841483a01cd59fa40292b463c249c71569104d6bcfed519fdb64f67e5e162b8e05c5bda94b236d4badff80427e97404e31d2b5ce56382978d00c5b57d42313f8184ac2c12f2a07d3a68f91471465132b326e5f02b322d918d2b541ced7497016f3ec8a56eb207e545e4b24c973b27a5514f6f39beca4767ffec1f3b6d2db3424e6cba3c712a9175e34a3dced4c45c26e95a199f2587db1c9d23dabb5c2e9ee9e8342fa55af1acea2bbe5289b37841e1ac311a3f967fbee7b98f7c736a85ce1d134ae2353042d46de07cdc32b80d9b13e19ff71261b8bf72cdb659f83fbc9bab54d02bba1f3f79aab5a8c80ec881f3edbeb24e9d0a4c15a43ac3ddd874dda521baf04a89fa426126b8cdf97a29f8da63d4d1aa28ec09db8946539c08ed60982e4e50b196494b9427eb717d348c299bcdf1b0e65c37f83fcca678dcff712651bf387a11cc1bfcd2cbed8f0c5d2e884256bf953db5a153baab562ada20c0c4c70af5daafb4ae4cfa3c1e87374dfcdd594c1edeb9c735093950308ea6008c509e73b8f4a9d2d59d93781deab833be6a592d90b0c50ff66aee07c9519941caabe53c03b087aeb467f3c04119b253b9140dcb5b68dad6137e33e05a60542386d940f22c6b0976c16092c76f5911ced8caee6f94f201ae5fafbee454a4ac9265093349029646e11b3c01c7e14da3c926df40bf9cccb0cb756d37d1f49fc057923dfa9a181bfbb111861d732d7f3b8b60f4a7b8686c6840310681ce316554167c8d9e78b4bb33b273257c6016d9d388f9cfd4a0d6aaa0d0dd83eea1ee3a676b33ee52ea1eb3b3dd4fefdab1f275846dc88f5876d9639d459ca4393e80accffd78bbfbb0b38eb2e6d4eff410f76820ddd579b9d4ffd4587b07b2bc9c8ead5b941d5cd80f9d34c3e088d1ac2fbdaa352bb44b4e3cc06fb73a43328411152fef0c0fa0473afdcc0a4156ac3053130db42c81f7f97d028928623d4a134731b682b4a15ac79f99e624ec2f90dbfc5a325e978ec28fe7146639ac186cfda8502205a0cbc29596d9d2af19a784849625d1432e3e3a4fcd4bf9be67f78a216dc0e625113b29343cc5f81b8b271dfb2163363027f107da78e418518f0d4bbcbdd13777173065581dcfdcfaa262915ac8bbeb643adc6cfb645a8cbbf7a6979397ed454f6a5578eff6ed89dbc2de0bb08008d53f16a030ada1620e9ea24f8d37303e03fb4cee2332614c04a86b0805c12a67cdc32930ddd81471fc97e74410df6d38d9549adab11d8c2a0aa91c38269ea96c0a90380651aba3e401f79d4b50296318c6a90d026dc6e8986d01b945a366c1cf0ebefb0164f3e2f0e8fe52d1936d40d54fc42ae25d62b825b94ca21db7b7b1106103d7f4cbd8d3334680faa95a0da44c3a525b527f05cc6e59a854fa9e4a5bd1020b1ca7f32cfdbe249f4086a101761d1f542320137922737268fc4314d5fe9484a5a680fdb9b18b0342b87f0ced6ec6fa14da0644c6933be1acac1de02a04efd81899b2070e75b51b02a7db52fe71048136c6ae6135f0f2d2037b8fffd236b648cd3ac792c954dd432f2dcb3e19f56b3681d8522beed600b8984e3dab500169ca3a7affe789f95bdc74772a538cd6ec81f5d70be609a2aaa18482e96337de743f4e16eff2ea671688c93dd45d7dadb6c5b7df449c9b9ff2f7c83d3c9eb25f849e52370a3324b899b46ce4e7f90ae802d7f13eaf56e180e5e328eafe637b6a473dbdd5d3dea1c984c5bc65a1c86cd172b01a982f59d71c784cdd9acdd638ec3769896d1a70c9e2db5c681401eb2d3f47b083be82da013ba49718afa4d9b7d352e592839b94741119c4660f5f1bba17d4315e32fc375b2d6de38cad714bffa5059498b356ee641a76d6fc2c26037774223d74ee2a07f489140d4e71e9d3caeb9f7693a903260151811950979beedb04bb7dea740adbb26db67e29e4d51e0aa66d5e068afb12a215064027e0c66f45a0f4f91b6d1ebe71dfc133341cf33b80e16bbf01d29c077607bf0c6eb3a02d41e0d644d063f4dba03362d5803c676745630df791b9430da8a2172d80cc4eac165286847f7e9ae473203843d16bc7630a582a5be43431bb289ab0bdd1641f0a8f8d1c9b4c3afe8a7eabc995a4d36ceedb1b4285899ad36d3859f7e0360269aab6822b689921f307d99c850c4cf657b2e91ac4ad7a5ffc7866f80fdc15b252841493fdb71d1092a63a015158e32c29449b4adc4c524e33a80341d164962bbf25bdbd3751d78507ede4ad9a7ee71273d24c3fe1d01cd93f6b4fd0da9d51b4663442352171cc6fb2fd23390fa592261e1969c76f1e646028e299cd27c9f2096aff2fdbeefe8a6bde59d87482803ae7fa33f94300d95eb1faa86aeda8652b7e5c28efbac5af36870c4005831d44081a7c2f0e58ace32aa4d3b4a39f444c26737b458be974bd58f76fea33d8e63ebd05c0a197aa629eb87e370a808f4354a30b5589cefed188fe23a55a758bd8da12882bf1147fe636db8588b7346a1eea96ab0fa4207a8afe12e9124b03b3dc4b91e783d9bed9730089fe4065a6c6244574e73f3c3bf8a37b4ce2ae707d4b13b268e22ed2cac5223563e0557c3df4bb6a97fca5114ea7a33069dba94d5e8f88c323ccea40ed347b4fcce60e1572472a6c018dc40a66dfa1629fb78a15e4f25b6b8e38817ddb479d0134bd3ff67641dcbc09a786c12f148f03db7037a9a315633a434a63929e1f277d24d2ec547a4db1a96ad41018a4023cb409bd921091aaffaa07114e2a668c38617182bab91650d07210b809e4f660b8ebea83e868ddf297ec37dd325955116ba14c56581526c0a8a21ea1df8133dd86a0d2645afa03e162c573da449a6a6e06395a1847676297217cdd7b9979972b73e4938aad12c68ea8e32bb8b644511bcb01508e42ad2955d8cc1664b321816d53894ca4d479f9483cc976494a0aa1d0300203bedec7163378d39518558c393b54e417b8f7b98ce93d470cde0ed88f00bda1364639883944df47148554cc0cb3b5651699eda4ad5da45d900ddbe76e7bd142a47510ab541f958e3dbb692bb63bda0012ff603ca1fb7ada2f5a99fddc0f2e25aba8df2621cb127a10ab6e3647447ec6a5424110aa892dd20af52d3f041a34a903bbf865ebc04ac47737a5c1e6e85467dc55695f4ab822714461fcb815986a3be7e9a1043362dc54a6d9807ad825784cdd74a86d1020533adbc8ead62f33036348a98f1fb6b36bb7c2bb4f66fa42d95aac8247f7b393094bdcb06cea9bf72d079ea90364113503269224251602994cf373d6e71e0df75ec86eb4f97f3f1edea700bffe6ecd2e32bdcf41f1a8be5f8900097d6b26135174c70644f119aba5b9c1c35fb6a3f1cc68f52be39df19b04e2a08fac69abe707284e1409a73c0d5291bd01c78442195e6803e0a15954555ee41f5f3cfdfc1206851667f5b9479062188d23fb299fccfdead310668dba0c843b2ecbc83112844a04a0ddc14813d9cc4807c970c7307fc6af5ebc9247fb68b9851d050f3f809e931231453dd10319e74a956aa367f819160efa7c82df6226219e041a8cb0cc942d1552ee377dd412a166ee422f1cbeb77108d128bd5e2ab7ab424e88964617fe9038a912c4ae55828e95df2bbad39efd6d1100f3846a9ce5383a72c6c38c8ccb029a50d8e1c2f80d93dce3f1a1d4f01dafa29e8cff4b18dfcf481e99e158587c53d23b35092445116caf50fd21c308bb0f2abf06806691d67f675dc2e334996972c719f6cdbb59380333d6cfa7eec60f0db34d3a4fa07227d97055345dd6f3e536cf91e2c28aa5c6a06b0c28c2e62983f9759f1c746b235991185bcf2b84508eab789c0ff12a47b553b3911e444df53e5628952a6d56a50ee174f5450dc3bb09390a143fc5782893b9062c56bc27127f360673fac7172966ebb08e39e497712ca256a4d05c11586b491e418ea9aeb33a30af7a3d6814d04c1750b1417cbbfc9b7d9a94fd2dfe580cec14fd30a1bc7b3dbbfab989a2e1743f5f093e24b626d64096dee3ff81ce4c3cadb6ae878d5d5dc85b67483efd160af96b73cd8e79707d6c308909ea553a233230d58bd0eae6af93767d996594fe69bf0eb32a00576195cd4905058414b1824a68fbb518e73d000a2ef93986388e329c78b9a91f3783419869a99a975c53bc1bf3c1746a76ec94fbb15cd5bc502767f1b71f56642adfa03316ff6c2b76e685e6c96dc32bae8d8f52fed9a6de38a3d82e76e3d6fa632ed5695c41697f565b284c8b3b6f8a8b9b01793b813daa644bb4ac79a2b32886f7ec9bfd51780827d30dc5daaee08291c3f7597bcff7e76488fe6be4884571f0c555dcaaee7a1f64a7953a4ea405f0ea90a294a85837270ab0f1acf6bb61ef5f6ec85902cc459a5f2e5ab614484d5b00335c3688fc5b0715f5750320df878e5609cf1294be70e6149cee55264b1d91d3aba1db1a2aee0a5177604f591b964774abe58f106f28030e381a26641eedcc8e5c44bbe639ad03ff565f7a60a9b807e142c41a3ba3ccf4f06ab78ae22a35ba8fecd5782564350239e8aed930534fcec9bb781a53327a39675b08f814673823757cc33dae57c545fa60229238910e976e5c676a903b5dc9e03916f3882458d4abb74ed46ed58d632bec8e606ed8fc02708d7980563970c5f9d587a8e5eff5575c392e8c17fa59dfeb478e27f2c998989cad781aebf12169e83aae0056a60684079d16d3be6a6d2d3d93da76e3cf379cadab45ab4c2694127f6e978232379cda39af0683eb41502993b6e2f845e197d367d4e49be53391c1eed9fc077ee7b7e34a63f2171d85cb92f313699041674c7af36ef7a54e2355d6f0c8ad0d1a6ffe9ae715c8acbdb5cb28c9d98a94615c28aa26953c59688cf2a7352a9f966f94e37d286d6a6cebcdf4a5c1256c27aaa5651a1ada03cdabd55aa5f27d2845f69da437a66a3fd36abf4ea3a770c113dae04dc6d2894b97c7db09d383fdec702e50abc925da93f4130f9c97ccb996a7b05a3d2a86dfc9ea356aa72cb3e08c558a07ee7d692d7bebc32572d6f3dede2723610441d3b75488e3c26c52abd47120f48dffc784db765030290cf1411a73bc4dd784324664535323502c21a30dd9e8102002df3c88842e7c0f1dfdd1bc9660ae0eff88310ffc6c15845eddff0fe4117815633636873ecbad2edaab2f1e137ca767b9ce5418b760ff0120968757ebf59ff669c4376ebec0ff66ec76b1d491933b5c0438e2dca2b17576ef1fa6937f7a6101545ddbfeb945179da2a95739b1fa5409b8e376ab193bc5fe1b585a325f65dede075dfe4804631233bff2e50c3766d311b060bad837925a22cae9c4bdafd20ba3090fbf75ea76e7c6f7e8e47d5138a333fd553b29923087cf2865c0df6c91d8a782da2250907bb0ffcff3f34dc33511c4b644614bb5a9ae050dd716965d773a5d7ec3ea3d4abfcbcc4db7136ba25c65fa4b9dbd3893c9fcdec88d5f196684b9a6ffce0caeb08e08ab0fbf5064d57b9a63d715ead21fc3328dfbc4f949c72027733f3bb87f39991b9ff3556e89bce35ab89a345b25a8ed153afda6ec413a4909205ec66219bc7f8572edc751b95d36c8ae7bfac5153bb24d2df0f84716276425cadb3377f3ac9822a560cebdb956122480b8693e5c5d1798517f51eec0d1a7901148802201fd7b0fb4b077f302aea2310baa66cc6602d12965848d479489cf1c86bb472e3e7fab27ad4f4befe67d6eb91afdf29537c069573964954eabb48fa88eede49cc4106d2ad7789eb507390b329691f31d18c4984b54a45c75220c4cd70ff11454a51fff317f4436d4b1fa9db83691e6cf7d809feb9d0f90181e7f93ff48bd83118c2d90a3ce34c54237b7a20ac3d95aadb391eb1ff1c75f91cca61f4f649f50d864dc23ca980e65b7d73710b4439d577d2a433f50a68cecbaf4ea890932b3971513d2cb4e470fe06eeda22e69e3a0fed98e77e0e5a4fc27ca920737a44f91400a006d1243f3841a29528cf407a302986f998b7e411fda1248c458e55ecfde42fa12a0c8f4195a1dd1f4e512f88eef7e7f39f2e4869e54cab6539af79097f57c8aee3a7fbfdb185835924b544d4336a252a5d7c4f06b2a1dfc30137218d391a5c365e877571de15aaf4fc7b6bc570d2e900e01b08a91cc95c599473d114071c86c57385f7c99f136b860cf8a67eccb66a56b86c0b7afbd62643fd2fb6de7452292d9090f80cd363174759e94d08a4b0dd4e7553e2223f909e2b53fa10d52d56fbdd76864a83ba5b6073d5ea293ee71b5fa85fcea360e657e9e5decaa946effb64b3ecc6c9acc6fae0ee425b2042558ceea5c54d16b7bdecbaa327df8e33419790f1fd7451152473eeeeab4b7623fb730225bf04785f21717c5aecfc0b1727173437c74d0d5b720e577191d3a8aac9409c8a701d420e248f5ca31888e5786806afd8351160feb795b049921cb5ccc8f6e7abe24df7d255612813bcd0ef3492350e1f64cd9b7fed307f9360fedc681b3b8a245163c39572424cb37ce5816c6ad41fe4906e15d79d599dfb41d70f1121ddf21651a2962288b13fbdbbb6ed4285e4d462e8cb45cec6e505cdf41c559584e9b932742efddc11c3fbd9a8cb370375697b2f05784a25e523adf3dc6d54c5c4e01458bd7b2bc69c3a782c56f2ec439f64b3d02a885982275afa4b27114703b84a2ce19ccb4b6cd8ff334eee426525e614f4d1a9d7757c7cfd75cfcadaf1470c1caf0709b902b5c34df6076dfa566fe979de0e3f0888733aac490f6f110dd83849f8d52cc6782d32557bdae43e3a302754415ca5acb4127df2abcffbf75f843aa7e1c5943ef60a0eb2717136ee1a5c094815593b669187e45468488d256c99ebd64df47cac649ca77977aed247bc64f1534ecfd38ecbc42bed07ed43737f40a4cf86bc433064fd579c8af29a20bcf2db8a3f2acaf1ec03566ab653f768bbb5e61929da28d80afb707fdf18080f35940d2c5f1c6efaa2b10013d15bd81d4dff14e73d7adb398c12e083d8b7b9b48efa81caf62a4ad33e95854453aa6293d4bdfe0c8ff43367747fb87eacab0d31617f8e664533908406356d2e903b6447bcc6670c6d7b6cc104400cccb3bfc9d739278646d70af937915e13dec054ce7f6dd33ba3b1c736b9ecab89a9edcfa4334bb16bbcee4d091564f07dff6a5eede4435eb2712ce2e1671fcef7d7a34a2c33a12ce0e279724f21dcf03672706b3540b220aa31e4ab89da3e9c60ca570906e172517505c93405f2b8ef555c2a30785cdfc0130f7a1afc4d609a8a696ffc90d43f6d49e928f2d8b95ffbc540fb4a32025000e1f69a050bedeb92fff6887ec3098e4e3ec2fc768d9f788078b090c8655fcd5fcd5b1836db4e294a5a34449305f38a05ecacc2d8fed141f52496561406c6a1a17682411770fa408c6c29248a044d24b3faea37765fbe1267479e55f9950e94da518ddb2ae8d7cf6078723f540f8063a318c5ce01f0a87e26554d337673bd545b643e072311a612993bb9bf3e168491077d8ac17edcd37f1051bd33d2509eed6b16c390252a8342f7529e8b6a619715c00c65c204d5c0224e9f2b33885b09eb0dac08ad1581e93f4311af4af29475283d18cba8e888125878f7e791b5dba589bfddf7b256bee73dca3c0fe992278ce874806950ab55e70f0593a258f4cb46dde37cd31e7d67847538521450841d82e05e491dfec92adc69ac2dbfb0561ec2ac060c764af475c37d8e9a9571ee41416d2ee07e82dbeda15a746e45c28f92c725cfdc85ae0398ed26a62ba3c59fc2c52d0b2ed0e69277239c741c0aa195f4ecaa554ad3ab77b87eda9573539ad3f5a51df06947964c587bf09e6b1d7afaf678f0b4b599c5b43fa8299e46d982ef5de90d66666c9a30e24217cbd04d027589269b7ba2c796fbf570a9d2a2ab0277de566a54539284e4c22498ae37b3e61c869da4d23fbf0f4f99ffe33d040b4b08d5ee3e0798b51d19c917015428058556317d648068a4cd469488e8173d98bcb564093b5b2f91fa2577c9103dc5e771322c111871a1a70c66b785755189861692a712e4233f3335f3dea04d08d3452a66e068e11dc9b9e7a66ed2fbd0ee0f098ed8bc665bed46701480c9c4af8dae119127582cdadae59447b6dd0bd4633c62d3d629fad39494210ea1be5ba382f756e2efd8f5937f07e36143e6afee370d73220fd518c0e2d89e609a8f35e9104564ad0f9f9a3f59337ea8fe1894f2d93698611b4ab3ae78b9c1757d7e148bd38830e1815abcc652f5a30f0990b56a4f21212426d84f15f20685a91de17759cde289ece48932a75d8cd901e1686562e2d95110de4810f5e13bc94a0fc279a0374a96ee58da72fbdfa9c7c3b96e2246334c93ef78ad9e0e7e944429fd33bb117392f2a21f00c7cf37000f7e70bb17c3f9d296d1919c61ca7b940e86b5e34b26bdd86c090260928c058dac5762cc9fc25c4e36810d47d443440bfc95122123b4cd73e9bb6d5fa4d7d79f037a31420c9d972971a15d5886c4930359ad1bf878221547183741b7db75c4a9de0058d9b8642ea4e71f943e920e39ebe64ec5f80b832dd37da4fe744ffa4e9ae7ae154767ff4fa9a6031c7fb66c59d0c1c057bea6d27de2edeb800fc534caba451d444c4ff96e6877be7adb343e79bf3bce7af580508b90d5f584da2ee02298de4ca7da57bb0b1d1136032ca5d706628ec4211ab349837b9c4e8aef517ca2d97ec90380ac0c31af78ebd2c8caabbd4b0ce6ee818ace59f7e95bc96c7e6265578c774ed46f1657f64f8e6e1c4a6a35945223f472f7bfd6323df2135450f2eb858cfffb8c295abf6a454187203c714fdcbc15a36bb90857553ced2681e0f86c413023206bda49a2af8dac88055cc9f8f6c08cde58767307c9db9c407cfb1390d37c20fe4c4b443c06e656084d34b695055d2dfa792b4af4a420c3ba48ff465b02aa49e66dde4fb9c8315d61b6678dd0b68478eb788bf5b081616e5a00607b3d83ad996ecbd3a40be75bdf206275ba6e03d3eab6de50929c9f8b76ebec6e72cbcf1e5b3279dae59c38bbdbf47ea5ccdd8c5f1a4262376b5b0309ebb7b070d948f957f7a856e34bc543cf520295403d5b7bc80e99fbda7daf81c7c9aafe65c1953c2d35ee46187762844fef52a85a1975137c07c440cddce8941cbef58f3cf1fddc2c6e6d5d3c5cf408a30d60c56e6b94c1b344cd52ec0e513d5e251d6ec210369684e8611daac5dd55255c86e69cea21631d76987d5edc94c99061dd3e89d5b2b30954e2786d88ed512d13020f898658ce9bd433f7db42ba13e0a95b048e375a28495b0a51cbde9c3d97a5193bc91227ef9c693930ac4491d5ec020c767c496d2150fb372c01e4748824b67fa7f59baf7bdd0030357d9153f63f8b78ba1742d78cef0a448136850bfc7225d29b8c28a2365f1457417f8ec26d872b8c80c1ef636cceb650c0b9d6bdd6a91a7f9a39848ee300efafd2527134161cddd6f7af10e0cb876461cd484d2dcb3a44e2fa36885888a9c171fd7800882a24cac099f287412a18fa5f04af4cb1de2de6e75be9d267b166bcbf9ac857355546517f5793c7f71726de1e55ba3d7e5c879dc501a9b2e9a629000f9752961f95159d0b6654a731b539845bca22d142cf16e54927d9a3415cfcf5efacf39883dc3eadd5d10d799503efb098a5aebe857cea95667a7e8446c2766142c91f5e88a42334300abf55fc6c65d2ec0b118c3b5b178c62b69ea3bc97a1ab2f465749c7ee9af0a703261198dfc6019efee939694168919f6d07f14d88a7cced3cd26ba16bc6c3bbbb1ff5e83aaae0fa0df1f62e5d642807aeb1f91e2bb20449ceaa952c70e32830da4fd5a6c068137ad54c6c82ac88db5deec88d7cb8c137c843e2f60ed8b0f38d26a772cbeb138f7ab8f42517ff6e06f0bfff24b47a214e136812abbe9abb18a5b4501dfed3c29e527c92ccecadd8aec9ad92ff1b5eee9ab907e91acba953fd6501d0a7c846cc78e60a47aa259394d4216dd941a766a5880b640c0fc23de1a57dd4e688661b805d941b96af39264a8005230122eafafb0b5e5ebef453f278b1fbc36363deee2e86ef47506a4f0bb962c239f3d98c3fa9941940ab075b05a6826b50cc5d0cc686ccb52be6b1b9186414438952970355ad8d5263e2079d5393b8921748ebb638bcb75279d2eb7258025af3fad174e3a65dadc6cf913c6a3eda42379a50228de713120dbde8b10ad6e64d74a280531809cf2b5f8864073470605a02cbb88cc19b4ae1957b2c831f4a594340ffecce7b10cb96f86bcf8b72f3c37b7eb6c29981e4895e5f002f2de1c79d107d92df0a673fb22ea06dd3e07ce873e9aad94eb0a4ef7e6bdf04153f1da577d8fbce66c7653fa7a0d980a2732cfda521853ed27e1ba24a22e8bf6321521978921b33eda20bce4ff18cbf2729da6ed71b5f38353c0bf2dd8cc0ba48254d2c5dacd22532815f222f47bb579e9cba0dcda9de614d74eb4035bfb006dd68869d77fa76d62866ded0c98e3bcade7e8ab5765286049861d2a9ba37f39dfa4b59693510b88651d15cbbeb932ebaa0fdfe65c6e89316bec0e2e551e9df0557d649ee0c29214f83951f603bb5f54ba337572dd68f5f0ccefaed3995ad423ec5506b1a4fee73cdfff8b95b9c979e6032b85908dcd7ad1004e7027cea263653945342a5703be8e7e7b5f1ea7d55b0a5077f7582ec6104272407d2f250af3b9198c23f13203bd7d9a69b79da17377262fdd427513abfc52ee2f0d5a4de1367082a1a6d39bd68da7aaedaf1aa5ed25fa2633b4ddacd225660acc21415dd580077a4b24fddd3c465a50bb7cbe1986987cc85e7dee57d9b8df4608c60903cb31489ead2503ae51d04207c3be3a27f12a7847efc37f0fbf48d9b0244954fa43238472237f70b60f8727c0fad20bad1a4de13d3b5fc455f852c3633a6e9bcdfa7278de64cad25fea0bc597c1d068cb82163c3d14be9e4ece62214a2e42600ac92e3cc99fe4c1c461e2a8e993c9f72315276d5be64c9526606f16e06a15fffb9a390fd7d259865f93da3a3e2ed96ab407f302d1ca64d03958e577455d5140c63ae79089d9f0615b11eb923ccb335574b27fb14807480c4691cf74e621b438bb5dc5ae8073e7f4bf39d7310d9ee2dd1c336933d758cf4921fe241e4b48caff9e390a0ba2bf9f15b452aa0270ec44b2255f0d3c7155bd4db912e3ee8827ce21df06d4ef34cecba51e9c68af64ad0b11ef180e6b01f09a43f35a0dcb2e5f468dd4702a7a67acf682f415d52bc2851ec5eae140b9580c84286be0e493d6440f03b23e6f9f05c95d59d7cd20619182d04b1afeb8bbbca438e1dff8a8e5d2f02173c4f976816b98dab8f001cfdf84bb1d33ece1b96b7fcb0eba0114e38e3c6a6bce6d9dcfbfa09068f25063f544bbf2c2784ee72cb677bd599176432069672ada756b87a2e6c7c5105bbd3bc93f26fb09b5d5d8faa4f160839810f8994c540aa91eca438be7329ba5f96db2b25c746bcf4b8579ecd0c395927d83a5444239f8947128c8270c330a07a3bb591f2d4586a41071daf0a69c37317b4648fe21b7b90c52fd5cf4490a1155315dc23d0909492afdba81330879be6fe45c2f00417ca08dc13a44cf77f039eab7dcbe5b1a2d1510c6e079fd4a10ea87fc2441077e240f032cb1440449679d0fca7c61b87cc287638fbe449ab44119d15c35eafce18d5ecb65e84097d2b4dc69472c2f2353efd2271db2bdc82ffe53a8c878e70fdca0b13ec1e1820fbf363b9a1efcad7e232c5d3e74089ed756f1a4cfc05c4c9db44f0366e40155efac2bd4e8f661f692dd8df20d54ee82ede38a44d64a245949c4752286d4dd90a081d89bba01ec7da951cd326575d0dc10b523d107dcb93df624097cc3b43a75c15fd166508e669f8fb3489376dbc72d187b073e8c584ed8603ece17ea93b146cc64b6fa56ee6a32d6b716037e171648cdf72d374792c258a75c53cdef0d46dd6a1ad70ebce4fd4af19c972fdd767c981a1d8349c8be76c93430891a00008ecd6f1a0ed5eb13b00329563529a0a6034a10bfbf12a538f0b94c58e9bd7170159b1ccafe76a36cc383ad9a809ce5d3a63a7fa0ad6ae6708750b541b449e598cc3e51344a19d72bd04a23f87c523ac55e62291247ff9a1e42aadedf3cf5bc2510020505f8f908b91a9d21537a83d39f3a1b2f0a5605e7c06ce2a70d4f2e3732d2ff6e09d69a3eb294f48cc5383b5b7be65138014ccffaa8ff846a09b47cc14f9344e24a03871925607a36933cce78bff0b4f23af0f9aaf6933065f719f92a844891d638fc56dcb793ce662d62b08ba45af307afbe58f1fffcf367a8d85676070d033e5891c5e9d6b32a2c07e25fcd56e832844a1ed8da9dc89dd3d470d8d74b35e52d2e8fa008a56b38fe9406b9a9aea22e6b4d9f35a88a311486c7108c488e7ec10ce050131173233b4846e26aad2bf91910cfb02a039161f59d7e2c3b2c89e609a2ea2ab37f917a36f935e5a24fa2fda87a59d51a497ae5d244cdaf7cfa78c6d0498e2b5036f43198e31ff3b92a78ea037c160c4ec132b2a7ba6896e83f1a6a1ffcf713d7d2a0a84e7db0a29675a2dc23746ce993d6ff01005c42af7e13cd82c7b808c5437722de1849aa6baffd302da925c1c7eb828748c99bcca05a985fc50d94ea4556e49eaa3a9196a410c879dd1a6feadc85bb5140e5de21e4470aba30334cbeddfc5d2c27f1189f0dd91f243d8f4b2c163dafa412f04a7df3660190a93480b3914261593e1383ebc2dc954c7c30bc16a129b159e98571178f29083aea45d24da165098272d72c6670047510b079ba95005aaa35bb164e4b1e17b22ef4a3ea4507311053bc6b040f489d952d1f03357e6f6ee5ab689cd914055e0448c30f1c05341f9f74d630eda4c10363b5a0a54df0fb294256c185010c5040d080937cbc979d14c35c7af2a30d74cbae6a621d9be48772aa25d1a83ba58ef28f167f36a9c01b022002817e17290fea23ea13c7d20c96ce554ca78d8d679ca02ed6a05391246ab60841029f5080291e5e8afc0abb7042876f6604f5832ea4f0526c4dee43d6763ea961390750626265fc0718ca67db861f4829ef0dbb4b5cc9b5b0d460edb2ab47fd8cf243301b951ef41098c528047aa61e872c56809a2b8b1004e77f8d3197ecb187d703a74082ed3149c1f43907359b6ad87173f768d7c87956b1646a1331472b23efb5fb29911dcee3ac9099f033c9c7616442e8df0e5a3e5970ee3151b5bb502da132c578c5250a18171ffb41c778eeb26e26de19f0afd487e46705929706fca88ecf12414f79efee8af0276d28b46e8b2befc2d30f336b0816eaa1b0e645dfdd90ad656e58c2281d549f49017d0b768c907e12ee0bf330db944dc79a0b283c561f6deb6304ffcaa39a489ffbed29a422f3709d4f3eee240d7afb4028cb2a7c3bac1414e3a13095e9c582ee3c8b0a4120d5282aa2eb80b470d2a9102896ea6197e0284208802d0c06d87e91fc94a656ae93a298ed2c93575f73347339ed3ee36e8dd966e2a54caef3808214025ba728b88f9cfa32a50eb7efeaa8815cbe0ca470464cd65726d02dfe7ec1a8161c7d29bce5acbf358324e364b3ecc2d8cdf052e847bb80a8e9ea01d259118f83c0358df6527f5417876faf7c3b0f97da83bd2a949b282e0af807c0d3f81d7356e4b1e31f288b47299eb93c76d6238a703177fb2c0a52d91e9272097c8a485cfcb8ee10dad6d799157f48368962df0e7deee3edd581ef5c00cbb7a482611b7e4d0cf314c816fcb89d8088018ebd22ba957582176ec0fc1b1f8c5e3ba9d52cf571bde499f3707bb29191dc6987c5eead5ebd4a15b4c08677974b561501c27bbe527df00e76e40927ec7fe7d3ce32aa4e45c3127964bd069b3a344251acf542b2d8f8fcbf09f32d81330c404293bf607d2fded4e2ce2965d8c564871e982aeb0155479b469d27c40928fe627b4fd4d4161fd61432dc0265ae20cedf0c6f032f57e90e2b723120308c45f2ba149bf1a8f5d9ccea67500369f2c4cfd8a11a9b322b47abc79aff61702cd77cc9a75ded1c8a19373457aa745749ab8c8f97755b86dabc21966767bdc1e2b0b7b54212e5517b704916707181091e5a21a4c2ed4cd67d54e95ca9c4225935c3cba53bec270502f0a25028d4051c3584d3f2a15a352fbc17fefdbbb2fc48968447b3c09e0621f2c27331be73dfb936535fc7f2e7cbc319123d20b839bd6cd07a152ae89a7b0841ba7deff517c95b544ae6c34d8b6adba88cb3ff83be83e3f1b77daf62cc49aa1e10f94da991277517af5ea3f89367ca45e1c6cd243b79d9a39708fcd803f9a8115edf4ca832d75816ecae0bd2d7f97b66c178e1c6f400595c46ab9af880bb0215143ca52ac556aedf50915684ec16ab81cac0f19fb6286855594420cf100221810e00862417541197a3fe6a8643c9f90a5367254531fdaf40ff8d90bdb228dfb36e1d58ac8878b996fc49bcf83d6b2d12d890694cd046a34a90220e724f53fb4ee416e64a1fee28065da3a0f9346e275e04ec03466a68e16a128a09b0346060869a8836b52f0e422aeb3ed81b92aa96679098273772ff7fdd23e87cf3e526d4f28011ce73ee919ef60df4ac88ca465d352ec8c2ed43faf19053892ddb9854e676fb571c734965a143a53429a5b5a23ed5099bdc6a1a554d75f907cb227cd306e42b32a69c6404446b73ccddd7a80fafe8c2cf5736de82dea0fe3a126b6be63bf262ffe5cf34a807686fc7809c9e4de19e2aa3999d7a3992ce67fe96ec995ed994e2a8b9d017b56fe706b247d4c350f9ee767a68fc714bb5e5a5f8a3d992e527d35129e0bea18b9d29e13302cec85ce4a3a008e6b7534943e92d527a75f07b7cc6e93b4d6c3902cae44d628f529da76fd28ce75f6308eb827698e738756f0a898f6e9d03a2c0623fecab305039c2d80e85fa0f853a166b644738ad73c885d6a2f4ebcc73999cca40748496437121159a8fae9736ef50de96a096876cd5e1129ba2bff54fc4a37e4e04c5cdec5faac6b56a20aea360b41d46d36bf5332039e37ab80bf2444981c61d81700fa01dd190b8fc1fe00233058488e5625b4d79753b16c1b3b271d4cff923d4b69c40a92305103939b3600bb0982e9f64ea0ffd1713b73705933af4ab41fa83fdbb1f1d71bcd9bfcf6ad0f804a264382afc9a07ead78119a1b5599dd80b3765251b4eaac2bd42fec5e2db6d69042f2f644e57539136f86bee0d4fb796d87674c422dc85792e7e30f21c33e161149245ad68ef78f56e19a61a6a98d39acc0ba8156beff8c45f57e1e73aeae890e23334bd166b6e94bb647f9a35d8d1457d957eb6c8f5a95ada52d95773aa8bb393f157b65432c666e42cb9aeb4de18892c3b9c583eec92043f0307f3d4807bee87e471c6c1c7332df19f5aaed336226f8dfec2c599ed3739a60f0992a8b09c5cda4af081902d556d0bec4840a4bf1a57634246d34738a23127f044fe337d19177f3c8caf69ec959c02f0f8b5056ae4f31ed9d92f2ec54546e1cf7272d273a93a53d28fb7bf0107b613bf2ec996b47299a159be2ca3bd6ed5ce8858399d68fee28e8742d7a8a182c98be0bbba0f50f9d2294494d412c617b29065a9ae4f5fc2867fc4ebdc1dd761a72e3c5acdaa69a41a92195acc8bff6a81486522e30c19ec6ff4398940b2b252c5248872d19604cc2cf0e96505a4ffa49eba070a62c7997fa7d94622d6c5a2380886944393d0aceb89c6520f83956124919dede7852c47a89834fdc692f8ed0ea49d9ed95e34a4f9a6ffb106413f333614410e40b2446f4ad4626b1afd85cef12a537c4af35a8e70049b532db0b226cb48a3646ce00c20ecb3b256e49090cc206d7cd034aa96c9b0a247f7b0978fd3e43e2440fced59fa789beaabe4be9e9fec010d6ec9422b9be5797dd0e47b7773f348b40bd67002a7ae8408cf9b2e900c84560395b43569b118fd7f8c76b0e6b28145487728c81eb311d3ed9bdf4b7fcb98bab026e77f8316bc6e98a0714fefa2c690aaa30242896cf54a1aef0f9f85e738ca1efef36c1cfcb1489086e5806d3733603d070d8b6423c3061d5d77c2707d9f59cc50fa37b651f9503e1eb6706bb53e83de9e98a64d84bc0184b8883e9df4fa29ce81c587027e736651191f2866569990c4cd115cb7743196557f07b6a67e5799a55df6499e7336e9d83dbee142f383884e13546629ef22d21afa45078dbfc7c8295b1ab6919fdee3e78c08b8a72ef272fcc27395732b7f6f5034f9e41fa5865b0cc3eaaa9e938e2950b3b1eae01d0d133d33d7f6b0311c10c8cf30a6209ffae5f84106f65cdd42f1dcb3029087e8c0e2a25ef37569239e15e61356b27a4134b0cd64611fa7fff87e0d2ee017e0af63b27adac98f01449920255b24b41818c740f667e31fb19bf4caffccf6a6b6519d36cfaf43db39b75b28756b2aea63e6323dc61bed0e1852b275f79bf73500c87b831bc300128877a3cc4c3e4f9a6d79f6500722a53a1792772a638b04f7f8e0ca35fef6db71e33f802166d1e9dd98717a677a9861fa10f64c3da4df895c9f41e5b440fcab58e480e93b791b5dbf49639d8e86ea34e716311051e0f4910042f18df9b73368ea10b4cc4a0265b83b82da18b52355ad41cf2472fa56afc0dc8aa127fb093bf4eff83fa556f543d2c0768ef8405271297d1f8969050cceb608f805adc060a5883ae69eec25904e383d935ab27d57c8cb7ecc79b6da56bce2164d517193befbd123e87c92b58de18256695f44207eca5cd081f6002a5db56638ac02b76528f16664d8c1647076a7de34633bb2e87b1f6e8623fe7a1b5b3cefa8d149fab4aa82c1fd8d13a2b1522fbacf516aedab0bae56b1d28a83765ae0c0cbbc033c58a1a241aff2f666bdb5544f77b1344fcb16c4be7d1988c1b9252023376259a5370dd2cb32494645389b393b906210d2b58005000e780ff36bfd21926ef1256829b199f0c1291a90d481ed12531c196fb65a41ff9df53318a0d2193f40293e035e3bb2dafe8874bbf6e14a880ebe7ee9f73caaa327d8f4ad1e786df470325341faf6c1bfa6dd4d86b81568c46d58c59da8a24e92f12421bad05b1cb434e54eed0c075b2a117a9741a13fe514218b3ed47bf243595ed4653ae19cf404ae66e307a79e7cb42a41934bbcf11bf58eb58f7533682bf859e539a2e42ed18d35e9d026a1b39049743951ee900f8ad4991a829834e889178633224a6579456ac47945fddd16a4ba823a03939646e203b6e224a17f67904551e060bb123f16bf5c1ea64408cdc9c7674a939646646ce08de107405256ad45f1065fbc9a1668cd1738d1f1080a38e0514cf8198e76489c5c8281bf224b62e3bef57860683e4d098422d3bcbe58ce7d64157d6b00731acdd7339926604b2c0e48e68a160fa04afc9e72ba173a50e402707eb2979376ba872fe8085f64437ef6c48cd5847b71a916b17627286b2729600a09844ac1d352f4df10c55aa05bfb8506afa26cd3a412d617fe42e55243113720e1bf2f8f9d740abe591292b43e7d70f7177399c56a0a508d9f621b7abb23d6b1cdfb62b32852ca06d8e9933a0961d704decac3e85f61a1d75012ef2b50e9e9e9f2caab5b318c8c539c5986b53674a32b3f6910e1deb051b59b52f3d790cfa6159c3d236ad031794ded612ee4ea2cf7dc222a78faa5f1b4beffce671a06428a34356af20336ac749aab2dcf0ee0a762cca947e4a53d9e32d2b32e9eb72cd6cfab5b13d6381774e445d786c557c27ff73ac0b09481d908bc9828c3267aaafc61b3f0b85c3506491a18f7e86f6914e4cfe15d024e520bc3695c6202332c2a85de92958fe94fc2ea68f6eaefdfd1495b4c17cb6dd76d5bdd6403b0770936c5ef7de402f9957a63091acdbec26e87d98b8709eada4064142b9f9672bf09c4e7cc65fec6556daee88cf85087a72bac4fc48654e7f4aed8a0ea3d894cd191f0a7b9a2b682887a90c2a1914a6f60cdea44869afcdfa252f7970d9742ac188bc252cae2f9d381df8074b0979c9c003061ad145dfe482fef972828d64a601e9bd8b8d3497f62b3ccebd6bda2936beec99e11787abcd2c5d5d2f8be461bf0ee51305b804b5a3ee029c3c4e1812b113e04fc1da37ed63db8815f2d392d341075383e4a8ede4eed1c7f58603ffa549db1873374cf74e819db02faf2d86ff1c9c50515da042fe6f419ac80f441e95589c677b3650b436879d31918a24f9bb1089505d4c06db6b58cabac465b005390bd32361a1b2492e36e5fc851b2ac31df40c270a6d2516c0e8ab9b62a7792a9b40e86146b7968f69294c6b137cdaf662c41386767248b38e7e94939568b7b955a365997147415a84543a64d2a983866ee31731a93cd705e66cd054cbcb0204ce6ea4eec733874da4e8033c025cc172bf19730294ef88ea81a79b8860dda7247a5d97e732429cbd956559069fe0048e15b3477bc486f1609718e001a987b982fff3f85389892217d0e7ad33921e4a1d45ad6879647355670d095a5e0c5cca8996630520895508ddd57d089dee2071f38c37a742ee5cc460d45ad66de9aa8269ae17449e89e59335e8b37d5e6607dd416fca57d443701e1e26a1d7af13404b17c3b3deb0639c72c8660c9d85ca1298a249aac92a0ea4b5fb85a34b366e3ae0c02d717389b13b3ed20e27620411cd77501b60e46393e47f10f6bc1f1c90544868b9cfa870afd5277f99e03c47135786826fcf8718f12a1652901b1466d413399c109823b8f32d8c357cfaa56df8a28bdf490d7c9bf222ba028f7c13da1cc5d71ce1f330d03c0190b7ecdb2782cf4a15bd8f6bb69644be1a4c0127e4d0fa967d7a9488c4a1d7508e7776ef83ba7ec1ecd5a3498359735e2e6390aeed1cc9ffd1fbabd756577e219661f40943cbfe144c1607fc51134b817488d489c0f6934ae9f5b030cf56c98f79f44c2b2ee173c39ba91dc529049f9ad1e927a1f71313e6381606129d2a23cb5ea11ce0f0c163318f6fa9f3a83f30fc197c56343b07f0ba2b1412b04f2dca3561006853aa2d1a64c64702630a44f023a76c096c4ac1a4ba1c63c4dab2f0e3927c64977d096133002edffd4655b4aacac7a42e46357c6208e9dad357d30ff5baa064121b951ae9e2683f76871bba33b4c68a8fa7e9ec85406892d9fc1cb02c7cf8561ecb894008db9087e9aa9a83b9812f5b5e39eefe373115656c450f8e7561df574ba52dd1a194dc23864ad392f448cc6c9e1d46724699d058f28bfd817dfbb88e02133dbef3ecf7fd05c7d2ededd576f61f7ed588f463941b81ea7a5e3875cd6b3c83789f1a8b836295d4efe9ecdc374750c4aec0581cc128c6bd28447e4a25933906ce5eb86d8dd96dea2e899cf06a0f4fcddfb88e0038facc985ac2a1874716a351ce47b6929b7f86fdeb6d5103ace2e9d221e0d61a763f7dd88dd05afa6ffe2012d9d1ef5fefe0357b7c8e4bf0079a1ec000962fb27c4d77b58a059c7039ee2969e97b8191dee12406b983f868bc98bf199064c23476d9c2fb08b71696b74796a08243881794e3bc2d36cc668bc537e13f2c957faaac4167d54fd90fb3245075fd6f1eed433ce3c649f0be49662dbca1bc26eed77fad62d1beba5eb2e07bb8ee282adf13edfb6f11fd7198315f06faeeb04e0a45c8b7a3df7b6be34ec3e338cfa3844ea18655ee00a5191e3c591f99a6943edbb962c8642098cd8d09077ae4f484561d4a8b3a45d923f4f6808e1d4c9de5fcc8f48d89460a367a920fdea2cd26233e3decc10189835a8e939832d24634e8d476fcdb7e6fab18dc386b32e80d4e83b5658c4ab41c1046e472174f0fe7d703714ccae8a3378275a35504e6f1c8917ba801cf4488d905551dd0c385a049555a1ee415a92ad273477ce1864f452c81c359081aaa672f707b503b6e84bce40a5530f9635c2ecedbcb84b76be2617e84f0fdcd95223a383be52c7cebeacdeaffa9b05d756fdfc8195b635649ddba48ecc5c07f2ed13b88f349cc7151c3194bcbb9a03e637057252ef582e81ada41d78b59aa78e179316f60e9b22cea921a40583ee8b6b301f35017116adddefcf0780d8831df20fb3a73fa6bf474bd9c6bc9f8dc8dd6ea7c9069c5915e91dc9bfd34b12a868de2c80cce7c7e70bfb40ac64075d0c917187271f4b38b60f22224355486657295dfd03fe5b85165eeb5abd04bb86d12e39b6f6411506b3503a19abd635ff353011002f4f3c5ef4c5f743a824d9b990544bbf1440a1837679fe987d9de921ef8aa2d6f0550caf423f6ba15df0043884f4778b755f249c9023da7f1cd85e6099a529b76bd3f139ce044249c86b66a287eb31be04d4d0751765ad3bcc13d6447401c66caa65eca77e735a999f47adf949d0498e8a2299f02a6c677ba98055bda2eec84dc318b1a79056509860977b47d95b0bb3a06dd397c275ae9e66f75910be36f9a5c558d44b06abbe0d528beaf98f661ceb588b085348f0d98214e708b2a320a5e8713f76f08a9266e73a1d89b07a57176985ed56eb789d274f05634ff534bf538def2875823c51e95add2d4214027f33758a7e80d7f4483d1a2735c3f791ad8d34fa7f9e5e6da29020b0ef6718440ae1c1c6980e40329958f00a5f8baf07a231dc3ff613e3358e7ada91774099d0279e018488a18dddca40897f4c57d5103c4356fed6d8be356dda67a3c72e54b777cc704a753dca5fe37be222049cfb80d6df4f111ea810a3090bd0887d96c75197447d3568e3e9b04def1e9f1cc26470f2f467d9dacdebc203bd791f4bd344763aa1d8c4f7b430a9defe0513a45baa937de23d4f2c59203065d054f420940a55daa0783643e0fcb3bf32a47c1b6a46bb6aae98ce07462e99853903bc4e15ba04c5c156dd1244a6c2f8143e2a2f47bdb64625b3d969c271ccfee303682615d0b893e6aa75843295f89737194d5ec206de074373d4d770bf20c93e9e92b4763d63ffe347ac5967aa286cec1f5be80d56651f725247334aebfc62a834c88097a77dff8d0f28709673eb931c4ca1106e5b368b6aec6934cae40fc543606328f17a26aefb5b95e102e4d83a1258efa68bfe591b11b9ecdc2b8411d4b85d7e6a4918f6158ebb4291f67c950ba8189b5d8131a3163da37ac06045dffaf7066ca64a8eb715935707120f58a4f0f9875a9fd79d180a55efd65600d4ed67f097c23aaa274d8c89d5fd2ebfad015cf82386f3afe6a4c68ef0cb256469694291300e46c5c7a15f78955d458c4835bfe91e6ab1a436dcecab3b3b5dca54ca81fadc7a0a4cc2181709b0b1e3e5429b9164388c5b597bcb0fcea18a75db737e2cfeb9ef903098e9367ab6f8262d67b0f3c77e3313e07e92caafba6cce5d1dfa1fed7a8ca2f33b2ccfac366add65dbb39c40d4bd60380d44577990dd19de92dd4138771e673a5d1f6ac3302025f9a03333216b4b45de8dab994d62c7c14796ded81a2c22055c8efebf3e63c9def21ab82ae5df919c118b2af0ccf6e9fec5badd7e943bff4856b72ca907f57974890b43d3550d2e9508ef738cf6f8ea9e6e0e8476c1c1abbb09cd4dc40768a90059d8ba68d03739445e0b540b6c6c4fbc76babec1447b443e19a80e6385d8f8125a98b48f1ab9dd1a60a061c3830e7e706cfa47a2099b2da914933cb1af5d371e7298b0fdeb5d6853f9c02711b16c3264174123d3bb473e237d86a5a6ac1e4f9258d0061e1ce307ef974ce86f7ab5ecd1d24a4cb23685bd50d2f67d100e3001b8dd183c6d182ce019dddc6c7966115e434e2acfcf10e4093f7231d4e90546c4499f9531944acdb8911bb345cb98497ca382ea9fc691fd3ebe199076ddceffdbff93fbba014ffc0902b163a2d87efd4715441f086fd65fa244fa73a73a37c4b9ee328b455175f0ca10dc7eee9f29ceeab32f7a929339bd2ddff499803cdc4be1ea515860770533bce36fb3b814f943968c0d104c70c1bdc0806dc9e176096e90af123022315727dc6db206629e77f348d4c0f5e08fcec6f41135df8a088de3fd606e76e90bb0affa3ac48b28f46690d10fff745e2dddf9ac88c08d0b120e19dc73ea69433807839031e63eaaff530b3288e56f34a9bb5d5a7425fcc8acf0a2c60cf1d494b66700a0bbe099f2306180f2f1eb3d344c0415a95d0c2e925d6753be2464957e554d83b5d5eaeb34317d5ef9bee723234bc8803319fc30265eb720a2b816a407830b2aa25f43ce5e2bd50cc4f1064b734812fa40541fcf03b242be712417576a7230741e97367baa74866cd045438e10cc2ca21476af66ab996a39f1b7f55d2037e6bb5ff9bd754c5e88962634ce189a074e99cbc744ce385816651bde7b8280f96d127e1b216368beb88eaf223ca6dd8cf1823d17fb25bfcf8edc1e3894a0ef1818e6a663aa32c3e5f0e7e80e5d043c1ec21ae2978d595d8f87f0a417a077746012179c26a5baf35aa3e8c01c03bfd6b5f79eb7c05b47d4e0ed4266fb4230a26486bda81ebf2d22641a4ec2464b53fb151ca5e07f75ba51dfca2dce5442a8cc517473384a8198f2a19edc41b5615f61373a4d14c479243e5cbf8641c25fabbd40d025a1b0ab249fd6113a39f0bf25086f4f32f6bd5dd5ea4f45ed2e12848a41d337386226017da4ff5939b4b9809633df21f2c694ca7b6cb021c6088f693523342d523f1807b95df0ccad235c8bbcf30a0fba261f052cefec3eb2b0393c833a4dcb701e84d4288cddec006d702374db7bdb92ada78176bc5315c8dd375ea23103ad3e55cadab73d0c48974d16cf5c70cb2b3f05f52e02de7a22df17d7c94d9a2cf79c69221c721fe6d1fd09132c2ee752154dd24ba735d6fb7900b34ccee0a32e58eda7991910cf23022955bf615fe17569424172b8c45b63cb93921aa9373956838a5185dfb1a760120bf297d6b4342ba83993cf328d561b990116650c354d7c80e7747521f01478302b438bc8389ce6ef9ab12cd0893ee7b7af85850cbd90bdbb0b69d38d1ac8d07410c8f19edb4bf3aa8489ab71721ce6e88c52463acd2b3b49a1de540b247aac4cabbddb5ba49476f2f32ac1389cfddce60e4ba9ed172e68d3766cf0e32e91bfe8ef143675f2ed9d6aa1b015d691762c34eb1fbbf2d5457345a3b8feeab8cc37694e54a517855c517c77ef95f349045afdb661a7dc0eba3b41b306ceb570994c46bdb3e5363cbc9e2a86cdd0a88d858f2f04bf42dad8cf8746aa1c58b1ec286f087e316e7f2a3f1e44b60f570f279764378462875317eccac7355cbb9f847fd0a38ed6d45083a2f2ff557e0c24f943674125efadab47d8bcc2504f2030c1bdc674d6884a3721a34e44d155d8bcbb51bf49e569221d56056bed4827697e1e92bb1fb878c23cff97abb58503e0943a4b85fb9a3c03cc3691099acc36a351f1001e07167ba1124b797738bebf0f79b9f6c29d567be1f76250a4e89c6629c9489f44aa0ac35cb6bd41c2077380dc5399da2cafa00ee57572b6f11dc9e8f7eae1dbfcda2125d733d13bcc551c0d30bccf40c4a51d7c470678a99d8aa2e75fe7d7dbb73e274762aaba8d88e4e1bb030cdc0f31e33ea6cabac924dc719c096b85208e97e316fd06b4eeb636a651666cce30bbc50d156def882579c9d2b8a3b9b2651e934c5f67f0d4652aed4bdce50f4b21a8bfeda220ad721f09fd1a102f33329494dd5b91e629bb2829300c509faa07d8d6c32119ebf1249d5c74d66c36551ae3dc70e22d0cc50e73404191a4cec34808a865fdd6ec02ecff66ba788e03307348278845106ec42573ff8265d4635a046c3b83be4314ffb8aa9877631c38da830ca9945efb9251fdd0bbd7dbfcd731ab100f3d635e14939d61a073c059e2cd200eb9397399d0ab8bf6aed269978cf540864043118e5a4a03a7b7b28f2930d8d008f7f0dfbb37ce80cdc22080d72eb7bd37d6d6f4c1d646cb7699717680632b924e458f71690fdd7393fd4d7a52e8d35c6ba57e5f4e7e26f3731e110537aebdd9ff29101cee81faf5559bf9df67db25ac756617f36a9bebeaa01fbd760f24196ec41ac0caf72eef91fd1e652841b24968f6a00f69d8df37655ad7ae1542f95c4b87fca9576fab5a98f938f0284c3327eb34b62bd5297a0acb22ac554e61e44ae7374c4ff58c25044d1b7cd42dbc107f94fbadcaa3297d40bab32ccf50e7361ec2b29a023aadb81c6832954e0ae999ab238cce9288fb55705e30919ddb896a9fa128c4560d7be3bd1b5bb67613de9f5f70278cc4c9b8782a926b09ce272219ae7cc2e09bdd6745a67b46e3428ac1aa1e9ce6699f69f8cbcc061fbd2720b86be1e0f665abbddca819f882b004ae5d08500c3d80eed58041ec1fa71a10e32132b3c7247293040d5c56573f2af8dff62cb3533fda490c7a2d2f774e3e0a95e85636d1657fe028b39159d85ad3011531f8e231bad9b108aaffb63a30c42c5b5567e8a28e6b481cc5885d85e3db7d93d57e9a8bc1dc204e793373eb4e047671ac8d6e06921db7e3b7e5d9c497e185218bc0fb098d8a4277166a31e2f506c11537a5822c2b03d22d8d71990cf8dadef2c35bd5c7ef41d8002667445a359f5dbe5c6943001bff72bb3fcd39c1ce5f823bf949ba888ce9fc39d4f0b1ccf9754ea62fe43d33db2e6cc6f583fd0d0e3462a192275156052ca1bb74fbe6aa7de532ce95ee6223e0a7ab15814140078ed499668f3d08a8cd39bf99e42c8a0168cd284b37fe41d34f05b8de45dd751d68929788c19db60b6d26db8d6e31d12a8aeb921856a7dc228776600fffeae8164b3765228799c140082c4596ee053167a36b147b744e739e9f1db0f80b55e1f46745fd150abfd6e22dacdaadf831645427a06085f88361c2debf0073c516983eb2106b6727aff8160dc68376228259f10f4bcec69aa760890fad7415939f965e2c18afa37941e511cf3aa8b47f507d28370f4b53a28f2616fa046c6d31aaab1c6cd10b115e1918cf3b8ff04efaa7b6acaf6f5e80ed7d7a04d43884b3c021e19482ef3c23470b2d606cb4ef909a104f2e8f99213f09efe354d5f39948220b2be4e35510dfa4de59a6dbea784bc7872e803f1cbda5742b6f911aeacf5440254037ca17218ab00c1576c1e4f94c2a8cba83920a3747cc4f0f07597a9e58bc3c1a8284da1f0fc32233d54899d8a3d446e0aa463fdc6f5ffcd0b56499c7c7715a01a0dcd47765635a6c6b3cd9a749a096fca08f2bc3a1909b5b1c280fd67a721a1ff3df51cb2c8bbef14902643c81b98ae2b856a24d3fe632136d9cc63b44192bf73c92cf8665be50f160218e66b5d468c5f47d065e2f2a834e2083ef71ebf0549ff8e87de46be5b1c1279c753238c138e82677d01254ec9f01f0a201809bba0cb60e744834c7d5bf8cd3c9b198e54983084f4814fc4dedba94718e460914e2372631833326846730402ebd20c6e9146d395596dccbd53eaffbe22413fb75312707d9f2fa8fb15135328221fa31336ff12188a69a55d766a6853492eae3e70614790881f00f91c476b414976a6e1171bac209942c29736733af18039df00bb9bbfc13a11a94d9bd36f8420a2acc2ffd7fe3b8d583e141512e7548391ce4198e40552959beea83a5e78ee9750991b45d8e629d2fe900e09145936a42f5994e5ce40d7fa5c993c9ec88372ac6fa21512e0866778d92b6959a0489b79aeeb93c7d6c7fba4b8218c31b67032f320fa262ba91ec8d5a423321c447182026dbb6bbf78c54b72ea3a4d2d145dad5fd9e8e401e704f88440ff35c2ea4e1862b9b7074aac6bcec15e511dc8e7e881afa39cc7684231c2fd1e150b3944399ec054ab8ef70f77c85c90613e4cde594d353ab8adf35c1570e24afd479aa6d08d9798c3a84219cbe4e129ccfce07bf469de1e8925ce97024b34542f589f9f0ad884a6f6ba4989299b527680ca8fc29eb33e9f7739d755660121e101d787ab8ee770c15805cb9a328e906e007907dc366353b26d4071671dafc212e89c08a1d2af14426a9f4ca533830d472cdcacb498dc9b5f05796acd8efce5280b40f987bf1da334593cc25d4b6788f75c9b29352b9eb77ffe46c955c79844e89cece5b5c7b92cbfab0434cdd5aab738542db084a3cdb5f9731107328bd868ddc9e506ecac2354089b704821d24eaa1637ca0c9b5cc7c285aae39d79f92c54d20d646c66eb94a0ccf012f1fc45369bfa14123c0022a0a1da5c7905e74cac1f71e18e2dd865cf3627766d127f7e567b2749443de13655067c78c8acfb90bb0cd9ffb26c3c7565ea97b82e372eec3b360213a58ffa3151ab14588e783b697dcec732eaaeb82973689dda3856a318f1705219c979d7bfe88725c3aee0660c931d6029ea10197c70f15b3d48587328fc14a5eb7e90dcc7342b2c148f56bc23ef256ab3963821b89fada84d647dd6982c3fcce5b8d0a0fe10819112614fdb618d4b265fcb8b286340c50f1b286850888178194460dd2a1f1906d252a473f9e2e85f38ed029a854eae6ea65b1d653943ae0dd87693fbcadcb3e67ec623da1fdbe1d08ee22b7d309691f05df7b3bb4b61e73bf1fb5d3a4329c9bdb52ae645d81994610eddc419f1191b7446d3d6595b84e51fa842e9775db65266d4add798ca4438137f2527d0f612bbe6737df76584b5adcff705c69174da38d2ec56c2bcf029f84e76e46a8dfb2a129765e7a69fd673046ee918392b255e1cbfeea85c40f708af4c06ba69a8203a5195f98b0eac5f15114543b0b50bded592b73f9e0267fc4387a95c1a357672a85509a560fac031eaa2534362cec278c265329592fe526ef7412cc8356fe6c200a2022d6117d531e8a59393eaddcc2f4af6cfb05301d00e67d5cb32f808e926ed2b3ddbda62c629ccadebca8dc7b36af0df727312153b8c9e35c89737af716269e7915006679ef3f090876e7c30bab49682a1b61b67ebcd7475e55939fd82a49c7a8c681d74f421c0427805771512413d34a7ece0874b5cce28a27da046732039f63645421aa1b6f598a2f086c245805b4c1063e924b735bd797d0debf6c1cdb7c88a91179afc4b2b371c3b56bd9905673d754ccdb758d400da5e44bbaa2c8f1f78f9125a14527d61e17dcadebb4911b8f032da694aff1316fed40fea0591e43e578815dba7ad7dec7b9ba23aa1b500e029197f92ebb3f1a95f46b3e2d49c742d26c9bf9bdaeabe564511d5d64ccade6025ac8e652d2d8af27442de94313a3b50b14a6fa66f88e900cbb4692576ce1abaebf5ca475501ff2fe0b34b3e1fefb58b338da01a7b38234fd02f12c9571153574cd308ba1a250076121deec3f5cafaf245ec5fd8874d2548b7d9ec1db77d07f0f24e7256535c7fd08d5903b7266bd0748316cdc8167925542383b433ab32d232009a9c481263bb1c25cb10d20d6faccbba8d3cf7d43bdcceaa06552ff7f7123d18d0199b1f75d5ffd4338c57a942c0f16775d0c66b1af650353b5b2c21c1ba83554e0eac8964425cc04d11f8c5b91d2cde4865cdafcabcdf1eab7cc13bb25c9f380b68185e1af27a5309b4aef891160854273cdf97dbba16921ff7170daa764372cb977f8cf519cbd14fa10c057d75adc93a23b9fd8740451e262e4ef1a54274b6b44545d2b287ef60ec9b4d32abbceb656f1c4cd277ce52b32d7cf137ac4a4aad667315daaeed64144d62efb2445aeab873ac4119217fa6d6c4ece95ed4186d7f77ea69357c19eb04e117239a80cef309bae61945ca58ee03f2ae5f14a3e51e02d93ce32bfa651052358cdffc9a0a143398dcb0a09c1eaad96be1f5337ee3ff03aef6397a29bce15e0a3d2d6812d8a591afa56ad06b4e9dcb087f1898a27675cc6832fba8a1f66166e390f6801fd7ef2384abfe461d2c570a9c98cce5d957e0b450630908de337d9c05cbf9333ed8c2cca04c6ef62854979e74ed50374a1cce0672cc614ea1e78f6c72229ec520c35c841e372c0e39bcfc3fff6e7f464dfae066d6afd0c0c1670877913331795fdd50bab58369faf9ead31ea1b554f1e672512e52538baac8bdb0a0af60e00e282f3a55be17468cb8d7f44518f157e8865cdb8613621ade1faa3c709bd2a1f3175fbf809cbf6fa7022e501c1c36f7684a33faaf201076bb9b8eda6bb79c109d583a7d208f84e01c6976e2dfd63d03f3f3ca45f74e203af041c9dfddb284596e4581eb7cac692ffe9daaa0eea65a980292e3c436f1babccce4b565fd7db4e71c5a3a712cf86e222308b1eff603b3ae6f4b6bb5463301c95d243742191be8b121f975de462587ea5c3d70b45f45d8e5062178826c2d5a485b08f21f268dd9115518344869fa1b50ee4c566880b7a0dc6119b1e159e91c26e783279ea40d25c50d16afd922a8a02ce7a2db68bfb582ad06bdefc94152606e58c7a2b839347c0a2fefa1e43c4a33525be1d86de5ab6f87a031f002d9fc0ede1f556b5bfbdeb52b5805c5ecfbaea5441dc306f7a55127e5593e88e865d16e8111a876e9125dbec2d718c0e1b0d212881dbe5a2804744fa3eba138cd28ba21d0511ff8e1e793bb3dce3ed676268eb68cf5ae2b598b797eead4837281cd961936e891a2e106a5ce1ab34ad71ddc99ad44cd305ccf776867575cc1da50a32e6a4c4fb920a5ebb5f4b44b33a7649121bd7b8d52898d71a90bc3f2cf01817f3570056a5de53df142689acf62452c944ea527216db117bb0195f2d053e9730f4f2be8d0be1d78185014883f094464259657877fa548f746fa4b2d002bce9f2581892b9a36c8dc021a439759a26822b5a6286d5065e3acaca441ddb0a6cf8606b85a0922cf77815b9074e7f613afe7e5f281f4d3c73018b7ebc26d5d63253b5724c86b5e7e513216fc2c30ab6d1584de872799469059866d173164b8b5f713b008c18ea6c9bedce514473166de8acd560f48e89ca91e4a12ebbcf9c1d0a92fc8722e89fe79e2c2ee50cf4fa0e2cb53aebddd72f5981f44bbaec134124a7c849840d44ebcb2349a3df1199f89dba37e5d96a90dfb10c6004870473a3908d826366e0d6db3a174bc5d765a33e65bbd070b2e75fc9e791d15ba5e3db76fe964b60c1f55b5bcf32927603017a20138f628d81ef11bcd489338981fa7341c51c4014278f0055441140aaa258c07b55e8ad5e41a64694b3d1f19df8c63434f51d4cb8fceb55da60ac929203414c2f4789c89b970a076b2ec108a7c7d44bbca5b56ee13b7a3f9ef0993edec49cd89bcac34fff1fd3ec3d76ad3cee52851fc89777a40d9ac07428bccd98264f65ec17066929749136a8686d8c446ea0e206dcd4dc758f8d48fbf40445756fe8826438154727ccc93e442bce05a502bd004a851ed1e8fcb1f38c80c1d55b0cfb50592c9cea8fbba1a91ea06a0bb7146e4dee5a3ab6656cb426b684087b9fb57f1c8c3cc7b64e81fee0b96df6e65184c9b2f788eb827adf9063420aba0be7ab135f6a66c1bc12e12e78e5b86c2903311d19c8b79861e8dad2a144af02f3debfee5560998c7a118f0c1ba2087965ddc6ce72d286e2cf1314cd76364110c1136d648210854ebf9a03ec58233ba36efc044a4cbdbd3a6b9f90b997305097e1a9e4f473746a8a39a743f82b2beb47b740fe081aefd73e6d3cb625094106f1fa839a463c7d9ef180d417acdbc89207873325792d1fd6dd2807ce425d706ea4fc699c93020989b8367edaacc3e9bc0baad776f0813221857617a05b9a185567ca3480025215964ac474ba02f09d2c39c2a0bfe7147de9838541d73bd0c24a6be109d489ea7b3c8f73c0209168339ee085745b7226fe6275d5dd3a5c2bcbc18df4797668c28e81d991e99a0b13ff653c03e6648d96272a98954e24bfdb7545d188d9821a277b1a721ba517a25ab7770ad9d5230cb00521319b988701631bc47c4abc359251bcfda232b372cf5d65beddea8923312c03b47d8be14555fe08236a22900ed3b46ee618af75ed311d67c0948dc1f1bb2bc5354fffa9085dd041cfe474527f446dfde0943c5e7127b981f60fce16fb5b37f1242ea48be2d6d1787aa52adf06c1bf44eeed048a8e6f236dbed63ef8702be44857ab1b96f02fd6c16d964045c56578e30c52d05bfdcff3bfc1e5dada62f19220dcde27a9701a34d1ee437ae04ea811c43650951513213b075661011ff25a347307db427181b49c0e2aefde6237b089cfefe0664b75c3dd92d70ae2d49c7b779f8fc07abbe97eb14ce5b129241f1f39cc70a6b0ddb21650176786c0eccaa9cf366ab97d80d46cb5bf21470448dc17205b2fa9d53797b925fff7bd44b9a56f5ab55a8333f9b411ac8a98d18a074ff4d01f6ed483c54087db2f19a1504191d7aa50b31f9411208abbb1411137e39533e9cecd34fad46ddd84f435d62942da6a6dc34e2035f627b7ba7ca3328f33fca9a0c640e828317de8522420a83e30a1e04d5c61c072812121bbfbb6f1815fa6a4985c62cc3026951b4d6ee67ad43c9109cc2833fa7416f552091e9eebfe1017d41ba55ab05b39fa12909971b7b0fdcb2aeed12cd7174f31c79cbb38868d0b2fb02e1ee4c3af87ae48ff66f480f67da9e7741942c81e68246ed93914f7b3f64ac55b268daed57bb37e8dac74678c5e09a450774d7ce9d2caadf237a1df0b1f0a134a44ebdf707a3209db7051556dab126da816edc0665e4330081527f97234e5f8b9136702ff7d33ff8ec8f78a95a0d86489d8e0b4b77ef06427d314c59a461051b396b75089552fb5fe94195518509130287d1dc803a8e859d5c3f76d65c460751d88ec74d3365c7414681c8fa27de3512a97bb02db5543915ab8da356c06cb89308f5230cb75e9680a9da5c492416de6588fcaf0bada1dc3c7ce8f4833e2a63f6129ff2afdcf98fbeebafd9153acec18b69b9a6782c0a71ce712265c1324ba45aad817a28ca6f05e53f0443d5b99c521108b9b72fe231ac8e59d8ddc5fcd0e63abb945736b1811d4f8623d9e71883664c38eeb3ddb187bf80a4c993846ce21ab2b0289a70736c0b5108ba36d27b9919d2376519787f3894abeadc633acd6d9e1563e34c01c0715a9f203da1a8b677748c8678a54591450f363f98b479f44839d2c40cfbd54eb5b92f7efacc91c89fb25ba964aacfcbfb3fb824659cfe372c1e17ea0c10d1bab663db4e44d99ba56f0fa6c1bc708b72bf5aa1f662acc5bc5105ac8dd4b6059da0f907412c7b311d0b47e2b2cb7b4735cde2a1d5095ec1b0a970afed4a3f04e669f23d49bf34ca0d12810df36c3ea4318cbedc794cf2795707126d896d3b09d2c403dc883bc37b08532535a9931c7b8e6ecfebd5b75150c6cb28e99c3a362ebacc041d78042e571e02f4dbbe80c9b3920df5c04fc4784f5b8eec1c8a7b4181ca49edb2a9f6dba0081e7d23f7843e5acd6820500c42fd283ddfa4e4a7deeb9e36f9510bd88c6447a6e273f6605ba80a2fa369e4b549c6e03489cd8d0ffc8a1270c4409a7d2b7bf393deb721d7419c5c255a2038726c6d7173001bd56d582ab39d75442f65dfdf74a90819f765971552fb87884258d1a0a86645951ec22d733152b59b2759874f76d9b3b0e1a3d4a1d4a2ad3e3d45335cd4ded933332e7eca717735efb09f0ef9cad35aab4cafe42d7406d2be50d0f45169cb64ac3e24e908e9325b3c6956263cb1ee6b4b2c91b0f0a867e39301e3a69d9f627e199885fd4f139e2b27d0b8099c116276e37b0fb9b49076adf7f7c5571f05cc3d4985ea35a7bd14ce59a750b53e705911b3bbd6235a709e5c774c57744964d174f88d2b78043bab859cee1ed9217822d21d2e01f67199c495aa7c8c1a8287e5dcb9261ffabd19afcd177cb689d2dbee813d6295ac7fb22cb63255bf29c2fe6823986210b45dafe7aba59b3e0a099cbf46887ca03cb91643cb2b0e89997b6e2879c38ccd3fb4bb1c39f3e6bf161a06aaae962cdf02cbefdb096a45477bab269c3cb9afd152f003e4a776bdfaa39d39d103b6b28fe5418b9ef2be05b9124c4428ea6bcff43a130c7e33ef848184fe282bd2d3835d413e2129fda4312be1ae58c9ca8527039875c66ba05d813a4fe35a60087d788588de3389df5f8ad0ba274f0b4189ac8efcf8b9745732867281a89b251a9a5c814dc2649f36488991e9b0534edd0e276e649ad1eb21a9ed105936c43798848fa90d07e6d0f03fb48fec01d449f376a0423aeeb0395119ef4bc115d5006a655bb04f917c2fa153bdee2c84b3189c2debdc733bb915caa20dc5964cd294ee0b4a658ac5c7d87259f7e5d4c0c176565b7406e0ef2408e551ac35c677611336adf286df4a2488d1ddf2070d2a333212f386dfc0dfb7abf1e57a1407fe5f52e0b66c439d83cd40a5fbd174dc95f15d12380b9ee83bef7c137087120c576e6a8770938755a1802e0c9b6a2a0197249a4a6df26cbfdbbfd084eec1ece172614e2101dc9a0928c7de425efdb3c06381f5acca38a248f872896d8c1b22e0d202d33a2095f474a6211eb60b42b49ea0a8c4cae1bd11f17d30e9cca680cdb9a2d493b57497e2a2dd0f02ffce28980f228d053132c0ac41e72bc73104ed8cd74b2ea003a551834aaee92cea530f1c6dee864197299ff534c8cec36ae797e334d8fde59e66b0c330964d77d8bdc6522d3e4df6236828c42af12dace7ee2775fdf0fd335201f63e7019b2ca7f1c676207141d9fa0b7efa7f5d1d1b763b598c6b9349614c4112d9b7e6fc8baedb93c27a9c515ef18e96e8568e4110c40e6e6f499d1ec20bac576b2003af92deed88f2787344020588e354068a135cc6f66e39f64f8ff48fdc0363565d2a0e1b89d7d007c404f1c835e9a3db92fa4a8d9896bedd169e3625ea1a670c36f7e85fa8c1ed2b881900f7ad870853e9d1b8e30af96fe20649bc6c250d0aa74f96cef499cb6d5de73742a5798998c80227c3814e531fb4f2b512252edff00c81c849d47b7852e61532890cc2d986549b008a25ef6fbd69e831762a381823fee8a256ad32ea62cf35dd739446ed491a5c702ce6aa81ed50f1d8b1679b4c2661aa23f4ad77668d4466fdb8d4eaf28df2dd567bb9344b7b580308e0ef0b508ddc35dafa750d945ac96edcb4fa09d896bc7d32c631ba43daf0e1ca75df16fd9ce9b79e4bb77329e2b16e244c973bd40cb1e4c15d52de207db85c9a92baff03bb4141a74dc6cb44ba6aadcfe2590dd9fa0a13ca618f7b8137bc71d4daa4f97101d83d76a0b38976aab030f2bfe8183de71b2b3926d5926479c30536171f9d4bf7ad845f32d75b0eddb3e90245767c661debd112ad28a13ebc18467b03c5ca8771d34aa5ff5cb3cb3a4e2ea31423f6dce53951f84918d4452da67d57d33cdd9b6eed748b33668b7ba62094a3c0b5c7cf72c5a79a2c82c7183d0965921a5376be5a3b143220a99fef1d49b4f0e76c46191e3e30e90c061955129eaa9e6cbf94eb936ea1794b5509b605209882509623bcb677b91ac5691fa255f554b1ec6a3d7376f1b2a2c9abede0d7afe1c2c2f721b638144652bf1ea742aaa7e2b401388ae16382dc60003d2f47f1b89dd661640358535a14b1dcc90c0f40e6f052b08ffc3eabaa75dc4cfcef65c5bd3cc974b6b5a6295f1e7a57b697ae8f121727087297c8b8ffeb77061d8acc089d2fa76ed7cb59d0978918ef27e500f4a5e36770d0fb933a416b90df4ac45ea5a63afed83c63f0bb261601e0d071c571746cff0184a05558c8843d2e26a6f9825c74e79088de0d5cf10c28acda34f46bae2cc4e36f3d8175e97d9eb370cb18d8ca6b330656e7233175b6cd3156aa167e8f489c3f33db00bdb6e803d92b8b687b627e44578f83e9b62b130518ec5dd2dd4102dfd8a1ceb61feaaedaf9c148db000a7bc40806a3052bf2d52a4342240ed849e080e21ee05ac662e0644be759da12bb83bfae840bba01846f651156eb5c36ee9aad918378fe5fc549202bc0fd791c32f739e463e2616f96494da8fc9119ed697df77d9953b376eaffb28b3900e38c7e3c79cd505b2b92a6799b24de56092c54559cb6026662470a06df3b790466aec53f02667dfe30d9f933059990e753beb594b379377ee69c698ba0e03eebc133830fc4645a1f4a9f84b2026dc1537e92815b334f84a39bbea6d30f0eed875c45fb46c584fbdccdc19394a3ff7621ab31f209565851bd3cf50d7c2c779b566d96c53dc601f351e2e21cb96b18b7c2800d58e00cdba5dff27f70ce79a7a3bc24a435ce4ccd7d894d9422d4ca0d8b442f6b7dc0a927023358b5df171b32bba2d5abedcc7e5d1792b2a64a9271c797d94fdc08bf41e3d8444484162328e5a30b6da5b1b820d765a8c82b6c4450203e0a8c15bb45d29ea7d6c982ef4d65310e17e1fd82d2272a9cefc39e2a4d288a7686dd76df6a087c946b821503b0ca3219680cf43f0daf2d68e83d3674fc8bfa34c7f90f87fb3b6f8ed8b4c5b5cd951d2446f75d51b926ddd698016f05bb20cf00833c1d0662bcc1fc16da3aee90165b7ddc2a7947d70b11476992c084ea11f53a35e1a4f43d850a950b51e46d121620afb784a568e8d0348873004236ca2d8b7c94ca27a28577b91177e6160b666e03cca4c9fd0916f063feaab92202a4ceb4d5f88b318c80d53c2b9c62b3012a7404304b4ef442fd05d64c7356299a35a3d5808e5604db1c861647e8f370e595c5914646995729bc0a3f64c0936aceb047ddacfe0cb080c8a9a4062322488620170de887fab1a21dbc7c67939d9786e363292dc4ccf5cdd5f87270700c452d5e5e2b2155a22b0e5f5703f2556f1390954b2bde94b6920afdf5079d4682fbfb8b4ce97e90b20d7e44d3af73ffee4e4fed38c9353659aaeb05b808e1d73d2c2bc1bc10c49e6bdc09c811024e07a154fb670b3700dfd8d7c1236fa0366de88c9eb0892f87638bdbea4dd188771e23b02d1bebdd3287d718bb2ced794844bb37043db4f64203bed31c4a235cb077a766775a7aba9ba16e03585d43c38759982a6d8fb4ef637050535a288fdc0dbaae0e2f0c21f88b55b72bfa5da3ba9f34d58f3856abd65c524cd995bcf93fa975551a3a827701f6bcfb72c0e9b6452bda83687682317e09192579c86846035fbeb4c218e37de276578f45803f76570d8e16fbb1ad9940b07be2d91e203cc74fb477db37cdb37de1fe06fc3ffc1b8f5af3e4a6058820ba685cb7993a857866a615ccfd988b56b2cafd33a5d09a863d6d9de3eacf0afc903fe4e73064a661726f3025a6e32bc984f42392834d307ac4f3e2a1b14fb13c05c587823c899d69092753e85ea7b11c983c957a3f2a2a0c4cdc1f234e6c5747135d28163ba1eef70f107a40b8bcb89885abece4accf73540657fb3baccd1962338eb1bfff183d79eea6b104e4b76b480d5a40141e1ff091dd9506970736558dc7ff2888eda6b8c1113afb9a6f63c3ecd909d70eafa7f11b76b66440cb354029fef5beae19e50127c3924e5329cbe27b50690674dc87e08aa73b1fd27173c32b6feeb4e5f1482ba9a83d82005f28884e03f74f1c526f54105fd18dc1034f07303a6e1638c52646df65307017c2780d86a15fcbe1b8bb84ef259cf14569b72b11d86ea66a7510d8b0a28e26dcff17f848c13bf702bbea9607e6444abc2a68df3228044519506e04f91b7dcfe8109a66b41d19ea8a006c71870f7da04f1973670d91cf5a5a65e89c2aa294b913aa22218a6e07b06a224fdb3f684f183143c00c30841496ed2895139c6c62f80c99919473cc92a50d49ad9c937474485d4945a52e2e6d72e0906f6da14beb72e80e31c85c27a3df41c8706b9df47074a27c17bcf5fe5e32ff1edd296da7f63d844f1817b81aca9068ce8205f78263f04239caef8673ae54ef023d24c96cb3f0dff4adb2a117edd2bec89f41d7583a9342830d0178311da9a40641e4eaeb642d82a3c36af765668381122a28be1815184c537fdc0b183b4aee2211aab99983b3e6d8d9e40a7021a3eae6c3f63037e07458aafcac3cf4cc69b55639276fbcd77924eef371d1339a985f123d21eaac13e5260dfd6d39fef3494de5666d37b08e1121a3df11fbcbfe98c0c587330123043eaedfd60df2d30ff4deb473f5298af571ebc8526284f159f960b0153d89f7ecd0bfaf341f812adf1f1ff1b63ba40965e5a7a16d6193d4ea9dd16a226d4aadd509c7f423a796c5a9a01af3bc14aa16a2c888c524db392d6f44ac8771e791a3cae1ced2f9e3a06a6a4b0803f7b0fe39421909044274380a897a0e38dc58639d3a7e191dbfa2e55ca99960b6b8bc90325effe8b16fb3795d45d0360920aa8715926555918b85edd63f284864cadbee3d75d4412aae3790c8bf51c8931581ef95ad1dd6b90c2bf5de28e51ab2738a43fe5e98a762e28b72a2392b67079e19cd85ce7ac6982d5ca1a200a47aad6f069a72ae0cffeb976570ef7876991bdecd9e0ca7cc87581fce2241b8f246a384718a926fea3b0069436a0466451d352d6c237a44d674d7d9d6376c7e000c511ca45fd848aaff00fa5c3d2d17cd74f41e28a2406fa8fa9396476af23e8cb816057cc354728395fa3a8503d1da5392355ac2125f2870e59abe29963369e01fa30345d4f8a129ac00f8b30de4639e46093d9e9c2c41fe8eac5017ab36d5f692b226a694ef806aa9dd8356f7a231d5f6cff40cf65c79f52cfe5e4ee697b889e192dcc17e3d0cb62053cf473522c3bc62a4a25afadce2e611c35527265d762393e104fb2c790e4e75f6b0b385bf0592660da49d527fa854301c8f0e660e31d0c7cf308d4ad93569446dc82c89e0c3df45901992b420e252326e50113c2164ee7169322271b83f88895eaf4a246645454a047f2c2c9a55c19b6d09b2ee8bea4c6791a5055ecf5747dc21f263522933377e2782924d386232cf91710d33b599b0a1c5fcc216efe40f56bebd99fd33f69ba415e27d1780c8a3931d164cb211210473bf89d3a2f2f5bd9d098f264ec9ce15f0fa64f615f41e0d2ef991614d0690c24e74cd5bd3a98d0c2c2d7c8371e5997b42f3b86f4ce3205f15df458e7fcba12a0c8e24bf36f633338b0309a7c309528430c9152bfd06edf4244034ab5cfd6a95e1b55b0711dbc41fd554ac76bfdde789ba6a1d1cd63a9cb1e2d1af8f244fb18847b0c32301028920ba529d472b2b148a47ef464d814b91b8c0805890355d67eecf9f2f4343b4d7e018e25fef9017409c27cc74b49a0a408474426d98e0e80d82b50c2dccc78ba061c6f45ddfabf613a823e9a1baaf873ace5609423ce5b06e34c104b3e930c477f1832d05ecd189f727a09ac9724a8efe4ed4eefd802717987b95371a067a5ed83b102c4dd592ee87d03de1c3716cb0c868f9e635bb536fae65b5256fa47b56b538459ce7514b21f4827f25b50872b214f275592e90df26e78f562858aa540e70afa80db84240ec24663d409e086e69524323b570bbe4d537d32d87192e57bc63bc96d5a748a653297c78dcfa87b135a5149ab398ad40cee8940e5421d2398b71238c5dcfe7066aea060c859314d273b1a15e547b0e36e8f0982c7f2073d0b7f8526d00edfeb97603cedb6878db18ccee30b4b606ed10cea6ecbce909f0c78ab060b1e3efff4715924535d9f13241d0e2abe52e4f43302a5ec7d711f47cb36ca20eee67ad1b8e9fdde4f0fa8d838bb65e87f94abee2aab3da94e311d1d50d1973ddb465ce6cb6b7c6558c41ff6f93debb5f0031c760a4a175f87d4e3399ee0452bd388ca508bdb9ec350f15cfeb190f5c364f962672f76d6addcdf907fa600ad3af130dc71a724877f2dbd1d79731025e12f48c383019d0508737bd665a0aee9495f427c848325bcb119fe6cc211e0748272ad12e256dc2bde28bd524d391ff95ff64a1c9c1bf9e8d2590f885e091d19b259fb8fb1408433a3749716768dc83c24194556b3fc3404688349a958d90e0954caa7752ab67226ba3514f21fbc027ba085a5c2a17f23ff8c022d451fe1dd228658b05a51450202daceee57f89d2594b70a065ae32cd88aa1bfce04a4096c5eb2941d3ed6dfc6041038ecb933ba1f7b580e93851e6d75966d7824be4ee339327391ac525f7460c52de2c48ddc22fbd1e4666fd87f6875c8842f8092d5da1194d167dd1954f8cbc8a6e0233ffab35fd91ee48fc73d93ea667318b921610b2c1fd997b3bab8cba344d0b9243f470136096222e6452be167717893565df4f4065daa22cbdfc9ba371c6c78429152bec89aa7d2cf2173109ad77ddff42a2ac595e0ece70ea5eb4e4171e34973934ca5953178d60725fb24f4c22bdade58cf92ca25bdf54c8dc44371586837e0f9ea990873b2fe6a2a4ff65cd483c24f6faf94688430e99a09c5b485dd020039ad7ca8a46af0ec1444d57df7e003d3a1887fa78474ed18c2468fe24c56e481058cbb964327cacbf5f8392a512718fa5288a1a35694af8fb5ecb767c1c64a2f03b856657d7872bf43c5f3791bd81b0807db92b35d76a80907ffb6ae91bf6904a685a1ede58b2ba527733cfeca6304b5c30c1bcc67fd45f4a2f0c44a532a35084d9d4984f40902fee9436b257c562492a5364a9d4c7e886585b4c31282bf3718ca7b068250866de933c0f9eb46f2d396d74ab37259a5251baf7e317f849e1266f855277c704418618cdd32d15244722d6af772981fb67974bca79c847e1ace68db3256406add60aaece2d2c50646e18636aebc4dbb34a794927d6bc1910e81a2f8c9d7ce78f1af8b200238948c9dafeeb6f428d27d4c27a16efbdd3c6bef48cbe0a25f4ae761270af23482e48cbac95ff849f3556a930068d79ecdbfc61589ef75cf9ab121ffcf854bca07f262469279016636ebfa95921aab836f5aa6daabc811fde665ab5c89a3ce003de00837792e0b018900093507035678181e1e61a6f7032ac16d80eea3c10e98db4c99839071f15c6648d991498ce6cadba8d083a19e94e844d4213a940d20e8d439932ce5633654981ebe2e8f04c9206b3d5e520ce1a75190d56f08b10a503933b80485b0a3d78ce21557fb45ba89fff8a1b691ddf7be94951c7046fc5a39e18134357d88d979f3b3e79b0b3a6d155b286fa331d00a4ec2fa778b52ceec063867efdc3d35d6f347058f8607ba553ffa6d0eab9aa7bb245ba3b64f6e4051147785eb72579460b758ff47e2214ba122c2f86fa20fd6934a2dc68a2b261a580022242717611e50f48a609fc3d58d51f98e40d18d5d283d59dbb1fdbc4c1abfc5f2f37e928bd48a82981ac3bc80f8a3ab169f60c2a7f6b141f5d47ceaa6d79361dc22dfbbc5eaa9a189f209ca4e271d8e60beee161c54f61f60f0ad40ab03bf4dc240a57299e45d419cbe3bb5cd7f60c3650cbf4a8275cb27f6ee1c99d2c7765c86fd8a7a51c9d159588e321e5f94d79b9a3cb4d5c1fee3a1238dd3d790ad8503e62a192015c6e87b3a99537395fd32df468c6adcb689c5a11c58f579b66a15c126cd73d47ff825385107c4cebcc809d764fc1a50b13854e0ad6c46593456fb2fdd45115f5282f5c02cf0ae7e8c1de1918c2f57ea540e81fde6b4a4eb40fb851ae31cac56b6ce34bbddcfb05ee578d64c09fa4623f834c136d0a0ed149c1e0938968ce05df9ee4c7f916e713215b9dd39e621d797ae215c32e118365a71110646854020d4129257098368efb0e710c6fe74fabd31cb8fb6f31410e698d620886d381de87643cc9d7af9c6378f05c9b1081f9eefd3216ae9c0a3d529ac45d8f00c8dc9ec107d2a6b81d0fd28f91679ce0845dba662adcb18d770a40df02b198f705d1329c5764b473ceada88e38597a1af9b0f2777d69e984d629c5aaa75e3e2afd6af0bb92d17edd2bb176db3c3b444a4fede933d376e7b223f4b0b95652d595ff1022bcf27418be094204487d2fccb31ecc2ab2b610431803ce5e6939d181c6c45109affdb5921c3526a7341938b824349c8836febc9231f6034a50508be6c16780cb11f6ed56a5043287593743e301ced615abf96b5ee01f06338f7f79d4c983d54b703c85f0be48678126365e929c64c36843071669e217560fefaa2f587318514b1d65466e3eda8e0210b7a0bf2728be4daf3a0004b5f9240efe9af9f2d2f299d7923098b950f5b1a134cb520231681f6c73c84f84e588212df9344d70a5e60b33d2ba4a0c6c458a7c3da42975d4912d770bc231fadf71810d14df0585b45fb47fe5897368f4ae9a54c26453a5d7b597c9e5e9da2f121f2b858f9e4ba9d018f19673c546d129b8e0cb6e6065ad99b19f300a8b7fc60d337ad10c331e0b613d86b0247988647721cd178b55d4f6229c5b5bd168bb28d07c1afa4a2988968d453c3c39f46e58f0eb3f71c9c6f23cf5d2007b97c3e53a2cb08f189813d9affb29afcbdf2af091cd9d605e949f9fed563ff5a5efc22d59a821d17e8a8e17022a4f807a9099975fe224463481bd0a9fe9f1dd035a37a8ef7ce9c2273d2319c54408371f0f1337738d1f7ada37db19d3305ca9d19211845855cf2aa21af169fb307156376e38c5a789056a5b4b207e0c55ac05e22ee6cf8b6c3c51b4149c79a142c79ef4e320c37262a7736be269b28b79ac93a95a8ef80a7c64e23593b39a84926d5393d805491f90fa38ac663344fbd22d46a832a0626145292eda8b2dab4ac5a335c697452332b1994c92f3016f44df69f0dbef7ebac8630f4a9bfdbfe85f23551ed4f625632d062ff3fcf3176a8e985dfa4ed636b9c189922f790d0c1caa835227dbab6681d0f3d0e2233682d9f5e379cad72b65c345738fb1bc87756ef205b7a8232a544f06cba282e24ad04fb5efc6a0794d69e70a5b4a0723ff80cb04dcb6b9b7ae1659d493e824d605fd21f563ff7d94af817ee57a063059407ad3692ae4912d0a135814ef7f87cd2bee8bb5886dc4b7abdf578568f8c42f76bf317e6ff5d01b0c116c57958da50f59640a0da28a16858ad15ac8839a97e56f04a903c9f19377aa47c5169ae92af8a075cd130cee50b68c0e83274a99a13099dd650c85bf76bdea29fa8fd098e628f68aed99dc36f0e6cd8f6dc9293455a4f586c17cc0bec4acc58cc1168bc28a9814b85d033e8267dd09303ee033c34267755a0d6956c363d9eafc2be2a9ab4b8a94d136f5e3680e8c46df2b5a9a4d0f1f3708f9fac593c3b97055c6da730816e052d349298acc83bd29996fe358aa2484dbff8f1481926c52586d42806eec1ced7229b0c31bd4d3c2355bf9181d3451ec3d4e1b2ec4473e5cca148f01909fb5144f8b984946a88d2db2794f9472582eb3834be08a868c428248fdc65c048e4c3d49779456e5c8354631170ea0e4dd681d3c89e1a82a447d573a281a86914eaed32c3dca2d05e24598a62fd0126667e648b9fdb2f95373cb21b27b94c4e733a2cdaefd5661943b3af5707f63912264a7bca476cc0c3cd6c87fd6badd5d2705c6feffa5cebdc925c4db6ec2e65aba25789a46bdc1d38deefefd41b1117f602392915575c84fbcc14505b951a267b53f5acf0e8e2c90f80aed3ac3feb8de65ddd2a121127c7cc026f19b0fde7ac670b8bccf6a6bb9c8b2db1b76a3eada2b235f4f9e5bb04558c5fcaf4681c63f6cc47dc056d65afc9c7d364698d8f912862d365b9aeca09b172864c22ce2d53acef3bd1813a52efb1c3eab5218f3778cf57dcd00e11897b68d8200f58b34a967d6085bc34c1b98aa3944f832c25961505b378b1625569edd51732ba0f97cafe57ce030f752ef8d383c1375f2a0578953445c5811b229014e11416ed442d6e7d8e11a7b47f88c97f5a3c61c7f55267054dad152d89540de89751eec6447defb24d923ce585d5c2f5feeba1d6a2dea89d8ed680e9e2a50f6b30c473323c9a91a4ec3dacf95a591f3fb97bdcddb58aab9f984bf4d98bd903fd06315cd2825b97bef697985e03c68cd58ddf63ad95c036567e65ddfcce1e8e8c2740775358995e05cf048e683493ca340b79f4ad9147c5bb374d8f87555e823bc36ed42e77292ed74954102cfbb291a9cfb9158dcbd3f72a655cc469683770fa3b978d996bbcb00ec9ef3dc56b43c49d0e7ff647591e8064b95d766d66913f6a1678ea788a47e4e19d8a4b4b33a118e03f0fdb0287de4fbff65d7378bf99d59d6dee490095ffb970853b55c7a65d8c84c1d6a387b401c88d6c3f221ce4093be5c5409a266460cc3b4af9f63bc7d7f8f6a78b870699168ddd4694ce4a4014d325579a68c7ae7a5e6ce46a0e3ad1908d58d56af56a47c054622d50dd302c74052861ddcbf4d66c3a9ab9c142220d2c70b0c81c91c12c6616c8ed16bf463b012eff77a917d870010116933583cd7892734122637afa9b9cc4031938846ed7d0487253c98c462547cbfea64f876a9865d8e235d89336812ac07112f8b00c4e6938dee2f450d939cb80b12dcb959a03be808dc91bb63dc00a513b5f246f1e2e3e93b331472f3a0027a8088503f155641147cac41b52fa53602ef219d9d4546aa70d23e9ff9db0922d29050c2300bb29ac2c7970f6675c1694d9a786d80f063964887565532f785bcc8125d348ebe1bdf0aea418223aac746c09501a4875e953fdd949b035b8845170673c79262af812ce802462831e7a406ec9658cefd3d0ad0a15d640f126d04fadebd6d6a6c6574e8008cd0496d780d03b19440bc8da468bd4c039718bf110a4e4e9681f9df12486e9ddf68d1d08b358ab726e50528e56ba31dea32b432bc4f8a0eb00f4556893f24dd0338c0b756e0d385b5b80f9059fe6c8182f2827bf1a12a5df31e2cd84a943b099f40fc2d8c7ed0c90c8ed79de1395aed490490d062b9ea236e50e23ea2799b730bb2431081965132b715ddb438c606275f7fc83a26c7f418b82c861e3b3a876a46afb642bcdf226740cd74ce4b444a8f3295645dd8a8b02df8050ebeb35af47a628219fae09c9e99f67c0aff5565fa950fcce91b64cf0d7e4dec8240946da94160168fca5d900528b365909fdf95a6916b80d26b46e337f245355f6fa57b0e566e70466193c3ab430c416952864890d4e5652aeaf8a9cde2531f5f9d6d75ea307b73031823b0ec589e21a3021b22d7fa4aa161128c07c63c89d253350e4607811806f5688434e5a0b6a9cf1a1ccfc6db67602e4cc7105ef5baddf50678bdcbf02005da462264db616f55ecb1bc97ff22954e383a03434a73eb1252fb5a3a3e65f5575e04c22a477f9f8526b7e2eebaa5a1d0d80fc8f48b90240dc7082e53629922348bfff3201bc46caa9d292e2c6d053308b367bc32a127896c26ca3b87354e80003c1ef83990dd6dba9b9b85665aa1eaecff7c63828524f3673348ffba9ac1ac3ad7c9ad407eaf0cafcaef83f649554819151592dea227af9daf856ed6d0f50d3fe688d3f0e94c21f66529f36441264c170a82ec86d45a14a26514febedb7b97c20fa92d6114616972b06f303e0f31a8162034fb06176ba27995bfaa5eb460519400d1daad79844ca508b1042b904363ff72ec5ded2ef7c1dd8b025677a2a7c1e9384310f569e7a6e2c2c0d2df2d59c6466aff03e1327b8389264a21b91357497198e8efeff754ff25acc7a93dff6b0e2d6b846f0d3ec87cd26c62b1e3ad8ff5af6aed3882bbc8a8b5635ad3311c003ad77415a46e5dcc861cd4ba41c0c8150b2b044d813515cd088f05ccbc0d501139703855acc1f0787409f7f70cd2fc08da33f198bc67e1869daef5a3c7eb0beb10dcb4fce9333cf3479ae7710060dcb0fae4d2fcf8b0c2262902673df7602bc24ed8f11912a735db4513e30745450516ab7a118e764a6e8a9be257cc909c8471e63b5f0c1d311ed93502722e38ab39f5b0481030304d6d0f66d6ac90a5092583f6192d74bee83fd72b54068262bd619a8eb80ece32c4c701e340738349eb9c367a5b31906af2612c44d439e0d786ac077d9956e6b45174e97438117c823829707afad5fe9b46f285a72336a126d8ac53c8155fd05d797ed077ab304250096c4dbb3b193c654b52922c8d073aad2a76330d026aaedadccf6b0de54b039add1e4a54c6e221b84bde0a5acdd6a7aad4324fe51b90eddd41aec8d4f73befd4ed3dd453764ff94a241b25cb15ee3f69e13e754a0510efef8b67cb7529098268593ccc1461c97fb16b3ce08ed32c8529b84b4174e49b9133d2ac217e1b6c2b0f69c78a015206bb3a770493a7a79fca7948150d706bc092c550ac1ac7d7997e79ee1a5d64213ec6af51c56c7d50cc774c31e32b45cf990771f8d578a715fe9c914c5f252d3930950eeb6b4f3096f738cae49c66900f5b764bbe3d52c4fcd3a7f5e15eba0b244022308ac45fb76b49141da7bef215dc1372b256ba2362b4c23e2735126eba54e64a0c00c66d2d688de30e422778296d9d927e01e50167e4012dbe115218ed6eba1232037be776cdce138794ac82e163458ced27ed74f512efae7276e39e3f443ec4cbf923b30d40556703c9a9541e8629fdd21d227da31d4b3ab6a18026310ec340bf702ea9650f4e8ed9f35940f31df2b84922371cfcf648ddc918a8f50732d471634c8bfab4fe3697d173cea1b95e85190e0676008b71818e080096e4ba265df46dce83484efb575f12fa2cea78a14e2fa9e95a01e89f39ba531370ad7c88333fc66f577ec604d0ed85213f70c55890e3b7f915c04185942524eacfff2c3f6ea7dfae046e9f9556e3741495990c30a7f7bd8a56c8913337649c53a508281c92577c6200be8453f1f15522ba787f42d10a0e3625266b08e4d90b5e86d8e037914b111323503f4cf167407d35ca2c863307bea3c08bb5b656b7a6fc44f370dce3fb41bd3e9d334180a8e3129e870810c6132a2d6ac95df9c7d61db1085efd3b8e8e6eb7b26f677023ad87f2bb47b02b694fb91dad238ec171acd1373b1fd837117c7cac88936816dd55429004f5f97727835bc4e2fb36be612a046caec11f66a14aa4247a4f94df66a9332c58ab7ce01b318d4f00ac8d39b57f7c20da9cef32eea22b9cf908ed2bd53f291bfcccb4ed0ad03e7c3ff520a6059fb26c9826135abae93a437e7d21a7799f363fb0e7d4a44c12c5d7d512187b0da5f7e859dac51e7e502a7add2bf149cceb82541f912047989cad1befc4d31ed0e4fafe53327eb348a6ba5523e9e466b89f8fa11a0083b0579a73c4330c3351929753ccbfe5199ff91516365936b303ac31bf49c9ccb069ac59c3012edff0c46a0397096b489524c8bab2c72b6643138d1449c21951b2538cd4d2da0465cde006e3ce38ce18f795ed50d57e332470e1eb1be5ea2e7e0e6a42491cb4257802df383b1bcde5a23352831dcfe6ec22f2946b132dc5924a17d6a13c1007c63efb2c3c65bcd402d66316f7bd5620be1dc2ad66aed7afa77ed4b647599a2175fb10d782118fc4c407e208a98b4e9a2e217d51e471012d9fd8a1312aec93a6db45b39580f880b3747c76c273188e1a5d78815383b10ed7fd56003e1ee65f38dab5c9aa070a3e984839ca16b9ce6908cafed2627f9d12eae8c221e4a0af037924a2524a713a0f7f26a948927677ca6966ed63a6309c77d4d04cc4d76d8a7ee5b54fbdee311a6d4786544e68f62f57f498a41ca1a06157ca2d57f440b591fafcbd79131b36a1fa28ad804f46b617281213bf07e7d29b968dcd36bc89b8730df49708cf2ad9344d2f3280199b9cae9250f9cd4ad0a5564a100856f2936ad42a0ee8e497e7d2934dad3650ea85cb4f4fabff4d42f93517d7f5ab837af255fa290f90eb178fef74a27f453a3bee06dadc4f781548118bc2d712cae8737a341cd5e5a5b2832e6fa0b11641306951762a242ab369091276d5b6aeb6bd0cf6271b0da2381728f41065093f45a75c314bd944151145762729cf379694e0e8c8711cc295931adb709e7cc46d883c18e16c17376dcc6a60ac12913cd061db4cd5e6d72d069ab6016a8fe4bf7ec2920ab73c0fad4338457dd87e6c6a80dfafaf60338999c58267b8fa6b36906d6a6cc19e17716f373a258ab0b7d82fdf0b6d1ac7ee962cdfa6181774a8cf99e442baf5e5c2dd2105b7ed0e149bf4c30f8c0e3d756d68b22aac9ad31d7397acc0a40c00a57f2e96ff10cd5a7666498eb9ec357a9149a2b052890a2d6b5367ecdf30137d7fd700821d4e9438c12f3f33d33fc1fc41a1345f4b3e691dad7fe99fe254d690f18e68dff24ef8d6dc60a2644e0df561e60b67c291c68ec4ca14951a196ff52f28fa3774bee36d0757472957bcec7ab236554a235de554948338c33c2643b33d390717631a2d741c78bb793d2619f7020d4fb782433968edeaf20a9b2bf38093309dd22146a086c8bd6617b4531ea5ae4d610e6961bdd5fd0bec5e39c223b4ef76cfac572d717f9f43841a924299a7078eb881f2bee2d6b7e17bb17e96e149948002c7a664937854f1ec0a10c4e773dd02e85b84b9ca9d4a716a8ece1c5595b36db381b050b49122645a9ee1db59a79038f75fc161c24e6ea0e994d4369c06afb1140dc40da977e76f784f3b18c5e6d237409be68aaaa8dfa6aad67e8cbd8e01ee33050e587bb00be67804cdc27fa553c27e0a3d4ff8a9bc56d858b7fcf16de7e34ce65e91da5d6e1237face1d6546044a0072f60ac9cee43917ffe9662ffb41d85312a54f69939e9eab37f0a70e012bbd8fc65d89fb38964881c36bfbfe54482793e8e85b8b41e32ed153d0975715e57ab5183548f287163fefa57d132d84511646a6d4953732ae485137244b7ea961513dc0f0760b01185deb282c20b51ee8311d4fbc4f5eeb5075e35f8b0b9beffc3a65f2e2e40e148167eacc2c78540178cd601dc045a86f8226976cedcc2d5cd8c6fa888c8bf29066eb18e87064c0949befe208b5d69c7e0444bfe8cb377ffa7ba7e7d2e459f7da48981713138a47d85987f84f10563c26a11420fafba63c72a26dace7774d78bf278c4fd2f1d551b27ee429da4e7efed1f6e6fc6900cae1679d387c8336a4dea07904729611cf77f1dff5d75eb1cd86ebf4f8505cf739e55ed25413ac6120dd0000230aa0e53f39595e764a396d93d3ae83c8343226f807333171b2ab66343e77a79cc0fd8d1f7c57e9228e6f19ff47624c49cd2972a2ab5f169c1ad30dd0881cafbdcf82acb7d5307716b2cb4465b761e4c16dd15f97816dfc8bcc34b2e6b78c4e61113753061e98113810417e1588d6b9ff565a84feb51a7f568e210f01d260f67b2fd0defd0bb3bf22c22fc969c21e2f28d50a5c641709768ffe65b84302201a52e4ab7102b0946c4abf0037874c06e1fb2b789b3d068ffe8fc687c051f93cec7bbe29c27c7f660dd936da031d52bc39ef8b1b5c274047cbae09875c4c7f6ff1bbd019f28b37f0deec1eebb1b78028a5c975f49741a2449747b86905074b5890915caaf8f0c54af9c6ad5838ebd48cfa636845be5bbe11cfbc24afc4267b86fdd022a1b44d3bb603eadd47dfb5d638bd05fb3252fe26a7a0cf26fdfed13af1ec106fbb2b6837564706481b36ab23e5a73bb1be486b576ee10c7b4e847e02853ec1cf35ab3c2d2cc27f0f322419fc2824b065f1e49866b2401ad774eed8a4f1c5aa00b232a104fea888bd9090b63448d081c999793d4233602bef3439db6add2794a6134433a43604f5a07c203f5b0f298d914ee90383e27389cbb3ce9c4e75c0c7e0cec63a915bee6705c0ec005cc0a8b3327d5f5789e3ee01df213b8982c681c1ae6e764ddf03ea5bc9b2a0f8469e48ab09bac1546b81ea7ca585a6e569e2c450210649567be716d110ac23b043077245e9d75f149b210a3b1fdcf5834ed04e303544c628e0700a9b314f9f71715095ed6382f89062c43bc95d52b381538081cbc7820c9bfc7c6f17ffd53490fc9df45907f6c1bc518ae0ed082cbdaa67769da9ae8c835e4ae3554fea9c9612097a8644629b4490c38ad70e4850756d2727fa6bd69f9dfd4287f46db7bf023405096d6a26f24554a3d5b0160300050de6c0a6ae307a8eaee6e87416f17da19737297cee943c12d7219599c2437a220461601e5ab258bb295fceca3883d73bb12140c1585cfa2c0f31f95f5d8bba573053726053efcbcc9f1f788dc67b6720ca5c32216454d629f537dfb22f8b2f61ddcbdc888c16cbfab3c2c14303a62baed1d7454ae06ccca631d9e38af163315a6d2fa4e825e165e40b839dd8cdc79eb0dd61274c4923ad74c6853aab13607872224dde6df4e3e2c928bbc073614f86cd86e10405ff3c763bb53bd3801f9ec9832ca7702f302f1f0486f69853c6067c2a52bd33c6efe157b5852cbc35592b613eb64ba94881d169f572d77c3d3faf049fa915ff57300f364888e219a0dd5011dc437ba07c75c626b4ec4db198e9a0004e78eb41aea4f3170a3a416a00b376554db0f0f98c1c7303963ac74f35e6d99d5c2b0d65c824f4b4303ead37d246e9197c23f96f8c4402baafbd379dff7279f52c70a975c4d38ca09b4363b569ddb596a4d3f166aabf04cdde228b1bd72c5d7fe83196d7c297ceb2226c7b0c8d64c0dbcfcee8bad1b70b2bb31ae7359089e9163bfad08de24951dcecd1ec8ac402f06d8d9928594debdc6fc9435094dae7d9f0ba9be8f90b545144a109e1d2f5adaab94ac686370ebbc79af5ce8e72910c58cd271a2136650ddcc55ee191cb38826ee15638bfab275d070817b9661f3d239d49dc4844cf54d3e6f90a8b1911b1b85d7538318d2f0042323cc9e3260b813d1dce48c8057841d72d59c24b54e372fe17ad66edf193b6c7d504e0a8d83b0d8cedac9b8468b1980776cf76281f0f2b3d3f4c44bb89a6ca5cf0f25bb35ca8fbdc7e955ca6c88c7b9b2db7dbe18d2d921aa0408daaabe41ed8c080a726978df41ead762eed892339607123d0eda9a0bf934b746d2c7f82fd6e65cd91378d28b93cb6af9e5150de954fee88a0715dc11af450af0560904de9d876cc8c7a4092113c8709677a585661c05cdfc203be760232021f61df1008beffa1393c243c8c32e9fcfcebff25744c29ee5fb636d177f30f52b3e49c9b635c2f6cb1a04c0b92caaf35eb833e1918f2725dbed28e9c07683550523d1110665884005e116d326814b8a8e7242883d622ca52e3d55d9b381ba0f460b54c96836471cb800df4756984edc2cb2f301620a406fb53b198430fe1ffeebbd77fbb8c09a5c2520499e157b99d30cf839ff04724a89366b881c0f8612c1d08671ce5fad3995cfec040ed9dfed5b16c45cc795edb1cc8c53662aef70cdb98c1f06d8849bd5e7ceb0e658bdb88a891435be54c52f6234c9f89cb2a9bc3d7d3d0115f11bf90b97ec1bd838676fc70fcabc808549e786cfd8a8eff69efdb7b178eb8fc0d8490bb1281571bae64d32df3598fe82621ff8a0c34483b01a239a3438ffc42cc8e279c198c0df500027926cf56972341748adbf74b05096ede1e2ca95ffd3358c32a30922193e44b9fcca67855b83de82d7d3c4be5e7133dfc509f41058c51f55a09d03e22911d9ca553c1e10ceded6e1c0669c48e1b83370219cf678b8221c9ff6ca8ff664a03cea96b41e6fec0664e7a86ce996ba70aee305275b97d1bbc7ca651a9c292e27a1247ae36aa0340dc1430b45189c2d6190cb45d5f14042d412548a94a9d0f84c306de01f32a0c58a32933d392ffa157d88a8775916f0c18a12308713d098317b37b8deb46b2e01c5e9625d99e3c07328e558c6b17fa2e04460795b510f55028e9e4e0e9c39f6054c3efa11154991e4481f1f99756655b11199fc8690e1741a9ed2f5d4da25073dc6c1368384cdde91940608f7c9f0c45403989bf323cce13f5118263024dc7e2fd57e004ea9cad5a418b0526eb056d9336728413a4b206dc7c4cb7a507ed5aae4376d6e159bbf7f9ee47b54bdab8e1a194548a01648ad537e8d1ce38974c535785821b6842fa2f2eb126daaaf67650f3c726db8f0e7ed4eed2d91d3072443d0fc7d8f17bca6368eb08d52f12bfab951e4166ce079dd7837790eed353b23a7e03e2d386567232ca6f3c05acf00d97754f50aa690b43f4aba424ac9c653e13014d887ca9a209869214ca046297b9b46604728403c6d5881745b0c946cdfca39ce28aa846ffbac170c0259a86696f844be6d98a9a3253c0b4021718b0beda00cb78ae47a0019a1d1893b027d9d441d1207e7fdfc997733077a6841c27a8511036b7fe77695ec43c8ee21f479ea871fcfe1d296b2dd3f1b83cf8a2021c2332a40bf4daa9de3a99619a224da2636a5835f319690ae77279fa4203c1d36a56f3a9ce327d4b75fd5b88469dfc83b7a7d2443cb1ba938a5a9d2b050bf02d2d07d72cadc6e2bb47bca18dfe662a3e0fff06c28f4caf13196ae2f56ad4f6afb576e5845e598a53cd182bb664df49a85c4c66baf26495a9b5ad01b6b8d9a1787bb51f6c98a8a601a9006cbddc5bf15bb8b1c1baa940c441404bb7ebe266cb5c73962fb66cfbdc6dce55618ba3e4b4f708fd68f74d8ae79199bb1f39546b156e4d77cf19ebaf3348e7e49dccaef263ad3233e25a04d934f9fc0d69b7fccd4a16a3a7354efc6bd0cc685aa07d555e5b8708d3d7a83da1db5da1d1f4683c7854dc030c18e09bd23eb0479b06c2d8560d5de7a8cbdcaaf5ab571d32f7c2c55949df407018faaba5f75f5ea02f2b2d4b79ec3dc4a03c4fe2c1d12aa2d0ea85ac47b90f06a19e757f1920208757071913dcff0063f750bd60ad7e023676054b9f88d76b853f9292fbb07dbf1aabfe83faa3615a8372a051b8ac2ac1c42d300231ca00182adc69dc78798ec2d7ecfbcf0d7d7a1323799d043aae8366a5e54f3377161881d444bb684225e7378c5c34065bf9e993f41c617c07846922899dbc803277fc4648edd7c121523ef894019db563a484088d50c93d96db178e7a6ced574e02867003677fd6ead4b3f321a912bf541baf43a18abe466d7e7c17f377f8d765bdb23ac355e905ecc8ac574c58e14c02de6c7e6c0c3fda0fe7d89bd2da8216e03b7e23299c3625dc2bb7bdbc7a1280e8b9df374490d930f46281333bc1d636e8c8b4613ebb41ba477f3eba8cb2a715d7223b5d7f4032261da343357a84d21c42b16ff05abd42bbbfbaeb5421a898fbf3776f7c13e9e6ccc2e310267d0710923e20d7413d974351a99132156ef59dfea804e609ab933d54bd43acfbf62d1450ba73bbd17f7ba68c94662cfae9407e84af8a2d25a6803b66227a061fa3270974a6c0d0f2843c0f99d734eb82a6c72ad6dab693f31cc4a2c3ac4cb9d545ad1e9b11a51aab2d04f1afad72386bd574827b1930b11d5da7566ddd5d9b220a96556725afb859a8ab42a18ac5626d9c5dce910f2b306ebc743115b4293d9121836f746346a19bfabfe6ca91415a554b4cca31212b9d8e9c24d00ca339ac12b5de38f5b97388bd606e21ea61ced53c8f76bd7d1a2d1d43e3275c400b60f8f53b04d198210805f60c3a34e613c87b08a80c986bef6e6cf27baa49b51108fe6fbe9f88ea4bfef48f6e50fc9f20b0d711d7aaa3eaa13eb53ed149ce8129f2cfd61b4a77e375dd137f571218e1f8126ecc1caee6d937e419fdcb8e590d89ca4f8a2bce7332b3a58c2f5c23473c69dec84105103941fab6d6af271f82cb8424074ee450bbdc656f4f8b73314305a2c7b0112f01347ac0edb725a45502ec4afdb0602185136bd4cb1f52a4c45fa211f15740f9810e04da65abccb867572f5fb4c0e9ed4c0289944ac00d64ff82af728f04a662964c9072f03f52cb8adfdd21b52b7e45154768116a159eb46b4476e39db0007b29fc0375279be83fc73026862701928ade0857f2b297486b34d8cffd440e6beec1b4e7f2885517f7428c54598c851704bb6e851166cf4609b04ddc8a1df9a119a15101abffcf05ded4c89bc58469fe7c379e078aaea1970d168978ff1860eb773320efdabee971a3f055e92406a378a6fc3ce08d1545c903909386895ee2ced0d2f3ebc222eea2fc091670391c17ce467d4b9a294b34bc72977a0f5306228ec73e1567b0171f316976871dea2abe7dddf7ff12641f213d48890dbd9b2a28c8efe39259d8e6cf22b4ae8f61b4a5522d6b8f0e52d47e23be124c49229c901ac08fff917efbcc5294dc9ddc245236a30c4d41eb38e7dfaafd1445203b110c1747dad593e1c0ad14c32b265619b7c4071e7a3c43a64c403fb35849fbc60b5a8c7103e2be08b4f6b588b868f866f7460f6c80965cac7d9946df55f68e2bb6dd8f90ab240ea672c6a0601c90068f6ca652a75093c26b2e55c8ef1627d7820f5775b5df76ea5db8bdf6524ad87052cb0ececa467788de0f8519ece1ebea10870d56feaa2979216ddb3d2f871dc96ed30178046690a0aaea201c4cace543689a4b9b256a87ee5494f38f7621265c1f15bea3ca872a218d56f7b66e4269f615fd078e57acf5c7cbc8ae14132d5fe0b27f009c1ab6f2fda5527e8d692b388961be6590b76028257da740490d05f4bf680624802ad644a179e4d46a0dd886b334eecba3eac473d1a4620fc60f58b70654c47e233e8c1aa08526e1763d75704c0afe1dcc0d9d610ac133bbeb594d7cfde11455383464a0f0aeea0a5a52388b461012d42b6d84e12005765470cc2062d28c4777b37f3b19f2b8be34ed1aaec4a686fabc24c28644af44edbf09e4f46102d7dd568ad23660bbe1486624dad27c0ee360668232755c0c5a512f9605507d093514e44b2cceb91e094588602540cab25597a72d7bc7f9560a13071fe6b2d0567625b654dc3cefeed4fc9fd7b1d8535905e71f1813e06de7725d5eb83a7698fc57c80122d94dd4bdd27ccd25c35500c6a4e2ce3bc3b598a14bd71812a99d36a39592310111b2ccb98b2ae2ebdd9f376e07fff452bfc0a88b996bd5898c6e0d7a7ea9ac53e59dbf574efabbcf96161c4778a37d35db0a956aafdedcc53495852a15b21654ff342811ee9216171361f79574825a6bbe767619c2883e07039b40b39dbfed2ce7d1d5ae72f133bf402649a933238e0a4e16d5a6542ee87a2b19a6089241c75ef4d72cd9be5f7088754e43cc632a3b677b9c9197830bc39304fcab00cffa805fd3915613da58d3faebc7811990a17044ff3d92c89ae53cbaee0fc14878dd6112377795326181aec9edc7ddee51aa92dbacb61edcfb59fb616f86567196bd03eb8f71c727a2f1ab3b4317d955d36f2cb91640f7877e4fbf43681f7efbcfa15cbcb0bf1fd8c8c3d3a60546b64a2ca225fb4e76795c89e0591217bac9d02e7e9f3a21779faf9a217bec5272f4151f4891faa529464f6b87b8c72ae4dc6d81d97d3d14573f26600efd8d294a0d43f4b383dd4747747465835439435d669e79c5b5b00c3e07c7d9baf881f68594980024a161b47d26552a694682309f852ff78f25eecef68dbf9ecdca9d1dd5b2f1b8229c53fc95bd171891ef676d6ab01bc82ea2d881ccfc944f5f138a0e8ae4ff13c7707fa18a6af0cbd3b7ff873812d9d7a2224ac35d299abc14fffe79c92b3e9d7f89a8cb18788f7d98f0a63249a83d3ba00e7a88efb39d37b161b7cc31d4bad9b4b7a1da3e87a19ac536dcfe98490e7ebfc739ce86d0a35207d3470feb2c21dbc69ea95177dc6a9f840b70814f326a209c8bdfe3366a74871872a70a5112e12bd449ea4aa915909cb21ff35b822899cec054900b82ee72706c923b832e606f6979f2289087e5e104fcccb3c6cdfc98244a5b70d274731678618cef98612293efb7d8d9b39283f3432ce73615ef2127fb6bbf1940e63d1030a1f6ba6554f74322e0db2ee5b564bfc9da1000eadedb3e4ddcf8fa68623b84a17b5f5834390910ed61d67c0f47ebfd408e649d308c373e813e4e08a66535dab66121c7ff7180e5b82c7e69239e84be66ef7d6ec846da7278f7ddeb17d7395e944398090da38db0c03329d2ea5295fec933f52f3b9069fc68107e4350c35ac310efb5c5029d226f4c210574920e36e1e0622d7ad95f202ed76739df2927a5d2ec93951c8728b09b13a143aabaa12e5b3cafba2631beb8cd3b0870fcd615a1468b4c651deb253d36b882a6d2af90896e03742613b2c484f78c11e752a277e2639b173a64f1404bf340b26a8bda15113e1d8f53ccd3a1af1872df9d245a511effa1b1a23051c5dd9dbe86d0efac63822536e1d0eb2c06adbbcf5f5d5174e8f4374d484087ba39eff63a68f41449ef383932843ac4e6926f62502bd661f083b5db80487dfccf055b92cb084e129d41b8d5eb70efda609f4a0d4263d33c68f2295ddebd682ce07f9fb98b04db894c87105b2d4d5b3b21be63a4a931fa7cb8d6c2068efe6d70c2e99c3420e9e592f93122a1dba1659cc149722830c51445f01a11e49c0c22e63bcb768c5ac4093c498cbccaaef640d8386ddba375eb44bcb31a1134f41bf5a16c00a9a3f6fac131dc6c87d0735b392a33faa57f57f546bfec149a8e8740a3bf04dc7e6a2ff067593f6375f6bbdcf15eee827f5ccd89032ea4e64a8e6207ce0e8aee721756076444e3546c73e1bc05fad2900b894039d4ac969d0738d63062ce180dfb14b4cfb1741805c442c4d1396f42617815eff9d9e24c6c1e2e608b304dd9afb106259bd59bc8a75a577d132be2706a2715bc426d9cb91f2d466c6ec15d131fa05fd5e8e1551c09a58eacb7f9826bc30eb00e6dc57053db329c3d7130581a254a5fe9d9ba2e0823c3f20b75b4cd7d4292f021056cb1d94b25c73eb03adfc2ea5950bea00acf3d6d4d678727a64d9a8afca4d2fcd5221ede344c7cc714ebff1046b221cc0079949751a2ccd0f759e6b41469d7a5afa0b5632f1ac24108a9878ba3d9006317b3b9493d227f85f9d99b8d97120a1cb1bb666d0559a953c4f461eb4015bc900337ac5e3ec83cb1226cb5965451f6785809d46b172156cb2c2d0301573bf2ceb0cfffb73491e64e0f7f70bd41c03516dead4bb373fa587189fcbe28b821b0d9259f7dfa55638c4ffe3000e71a42a3cb422fe39fca7171123d2a8c9785d08da79ddf69af78459e55314be665bdfca8c86bbceb201c019f9182b61a1cc450517f9cb4f1c296f24665e7bf85159becf7aeea67638bcae7306ebe654b6338be3364c6106f35cb69c2608ac8197240daae2043b676a010fd7baa4523dc9cc69f98b8d91cf7b8dec83e21c394a57a332b0ed33e2ff2d5d7c381a848941742e49c45bc3c3a0a4d165efed973e5acd8844afa2c18c1ed81d0aeebbabb1e74732ef486c3ee310904b007e97b4bd668c28c087b4e5d0d2c2d1447e83659ddaa7660530dc4654aaa525ac54f0095fcc07d0f858622a1ca08a1070a28e69a2f22324bf29688412ba28ffadfbea85dd1e244e81b825912b41357c9bd460528af84061be87ecf2864ca4478ea541e9986f14cb4bed5c9dd362fe9f23f3692d56c3991440d85bdbe38119484649b19f6ee1b68972e01f1a79c2ce33257edff81bd172d13ca8e42321eee5d16cd9c4fa548d6ad86a3de8bf8d6efd47ca3f9b7368daee413dc728ff75b071c806a6c32618495b2d6bba9d6cc37b250b59263b06feae691249e83fa7e666f66daddf39f3774049922ee230ef63af63daeea7a26896dbe2443f53eb4d67e2859ebe77ab787c9c93fcd2f7b78568b1aff75fdbe82d85f43b57fa9a7d9b0bdb47d5dd4ff295c36df0582c6248fd3d6e82d7ffef4ef1f6aef2325dd228410b37756a28a4a50bac2f63dbbcf7736247275ac9e49e1971d86ae7995147bc7a954acdd40794ba3f83091c55d01ee7e2c76f0cf73dc53bdcdf969eeb21001ceed1c890034bbff02d493114e96a0f8ddf0b0643f06ad6c23c1cf9a2f0ea91f60bdc04a837f32c2b594bf23cfd90d5993a75091f47112e113cf7891704d98e56d41d6f19aec629e222a52a7f6ce1bbd6d85ab2033245a20dc5f51222fd660b38ba6c90822796e06af92bc65a8dbc46cacfb7bb60a66575a76d3bb577900dddbf8e0d8417b4f031350263abc7a8925838a50c176a2034495ef9e5a17b93c2b714a0c5398350afd0945b6e19decb2388eb800e0836e6d4fd21e4f9f4dad4e70e7f32297ce6712af8edfc9534fc64e03770875d9128da962fe1cc8144b6e96f480bfef0bd5f03118d36409fd4c4d4702b818f8a9773931adf2af17309f64fef33b9b57b473c9d11fd34348f5b267171e66b9840d098b1c866db76545d7de66d775b64fc00ac240614b2e897db7b80704771551826e786bd3805670e958e539f16819e9363270e981f257399f21fefc369b87f8e93ea3ac1a2e27e45a26fd57cb7d766633020084302017d8d524e07300b164aeb6edc273aeef761d9a09b17d22c800a07cfdbd40eb09d118c1b6c082547a3288d6fcfab4a81987cf2a3e764e08c3255e835e60259358cae046fe6cd19eb51689dab7958bf19fe8d701a2760d530b0b3537c0ca77e08db809d5fddbab0c46429bf69aeedffeef859573509ecbffeb8ac9cecb23a0f19c2ef6996e468d70a7b63b84bfbe9242b672f75336d693cbf4f296ef502ac9b133c31706c7c1ee3ca40639952b2a58d14e8c70e0f064e4ae4eb170aac41971d6f2eb7eba49a87e5b45a6ee6b7b628decd38bf60e27918e12367d84bf2980dcfd3a945fdf936a49d3f3cbeb8bd1d7b8373ddf7459feb5c24f3a03e492a8261c3920015046d88ebc5d39190086cac0bc9e09072032c889d95f26f9594a8ce9ebdcb51a2a4dd55c8ab4365774b12f6735752c0689c4f2cb3a434067ef63b1cd1077320f0db7c100d85e88ed01382459b845446e8052edbd8a9b3385acf42e53c69169446e74f26244f2887816a2e9463c7356934f85a2246761d80496b175cef25102591381bcc1fb5845a184f62811bf918b32b43887314e2268c844cc10786ebe88abad6e66fa954199c98decc1d45def48d50a392e7a5cdbaddcb3271f04eba9d50f6efddb496ac569a6f9dc785d4acabc846580f74578a01a089461ee3b44d54d4fc430a6c010892b94cc7775540d2535ae2c5738b027a87d37b2284300ae9269ee75c76a0ac37bb9e074ef9eaca83b0eeedbf7ca8ba46db6c64d9e43a894e4dcbf60d91fc674b74780ea23eab5772ffd81a306332d685a2899bece594f18d3dc38a7ce67063dfc60c2907701f85ab6ecf5a86b05b26ea06800f0b4e3257eb8d162e8f157742f5b95a7d782619287692479611dab9fec25503b54a501bbc05de14303e324a71b1cf17264adcca0e8cc0764b89e72d0fb4385ab3354bcf8a96472e9728b2d46dc5c7103367a479527fc24fa9e1de689f90774ae7cd2e8e5fe6f54abcb94eaf12a1fb051b36dbd38a080dd79159b13e46d72de51d7d3c1b031dd9acdc74769fdb510d067ee40b4dd956550101b3c055dce8cd5087b9f9772afff28b584450615272b6f2bf1269dfe29fa4918d2022503623d8d5ad7adbc877886c6da1b60186778a07007d4052631a3eec75411204b3be0877b98ebe0d89c19be0b08f4440399d7e9d310768594a480a1ea9e20df1e3b44769cbe300c4463e96db87eb8f3fbcf25b6cc1b1951f2e4870f9825e4066c8e3d27ecbb25dd777c448be547deac8803e32e49435f7a302c64f2178629b34120358e5f37503c7ee7186b5e64b9c4c969d152b2f7287cda6bd7057d1aee3261066f0f2a9cf30ced338dfee6893d5848685bae2db1199acf442bb131bb4dd1f1919109fa85a3d3b95f9d55dfcce47d6fe4f34d297c1934ce22479ce3a5b12df570d94dd56bcccda893249bf12cd66c9ce8691d7d56a16b35d0ad8700888414d357b7e6a11f3f38ad0f6999696ed8a8782363f1e99a137dabcd730a60fac4571c27fb256e7b0f333f77344654e270a584778b1289fa403661e431ad3cd7f22c307c77b69af5f37069a70e6b68be2502a466f4e7791155d52efcf36db0c409f6d24fd6ad94a8590eb0e0acc5d42c842655a855bcf97c7259c2ac9156fbc5c5571733a1377626af2c51eeca70926ff16c5795b49d5e98584b97569abc6d1bb233c4c2f973bf5358e2f206892857d03329764a9e1dca9210982ff7a945c82dfa00722987b79cf1f131333347f91f6c2c30bd90f015e8d64850c7f0307ae6d2882cbd8ff69ff35f5abd96075ee3a6f43c061ea6182a7b5e610f90dbd7385c5d183797212b00fb3aca097579f58f28b837105d2976a37b04631f4cde9f15183a24e4fedb89b77583b693b61c857876f33b505470faa5c34bdda129e9b1a23e391f60afbdc2291bc64ab19dbc921c4fa094afbfe3bda629eea9b4ae6374579cb085e34ea0d701810ad8a9eb790ac459765a01e6f9372d1d3adc77764d8dc9d98a1653bd1fd69d77fad882d361cc337c8ff958d59e008af0af7551be7e21ae2d257cb23dc71d027d9e3ce8b315179e439085b91c21981d75711e12ef75dc0e1b1f7f9ff354b0b48c23ca36f6014fed0823c84eb563168c00413c9552b77b5b28f12a8698de2804aa240ae5113eb197f5897f66504e46d3f3ee134082cae95d8df9ddd4fe758a28ddd8c7d57c5b08fcbc8c4d1808246d6b7f6c5b60f5fc949037309d8b83898a16054b63711f6e6738af616df119eecf85ab1a4bdc9e93eb919972998e1e149cef3cf8d812de9020cc04693904675223e339fc9c0422291a396402c2b030c38d6b0222d8c11c679846ed02592dc606d210c69e49b16959387bd9be117b1cc733a03c40b32f566cdf48cb065429a2b0fbc4ec8fdd573295f3d5905917d7f15c5ad606fd3e7203c59a85c80993ffc2ea9b69811ca5cffdebf9f1465e90b3897c865151cdb169a67f266ee147120d8f7a033aaa301391922eee357a513f98d1bb144da569c5038c85ea75d3dca566fc60c75eb6f550d269c7a32ca41a4d2a972f45105f2c6703a545a4d35801a57af47e2c2eaf72f02c441ba98c22dbd641b900ca0947b58de1a5474ef1a635b0ca937c12da371bae7a78dcb7e920cc305f52e9f7122012396e59f281264f1aa8aa6323f222eef0a1f0b4977516333171529e935cc7a70e025f0c5672d48383099bf02741e736b10e163d8fbf2b9b5bb3fd7caf1184897a9f67387ebe35c20d0b766aeb3cf0a7f424d7b29aff2f8326271cf97ff509c805ecb35494399710ac404f220e0bf55bfdaa2916cf13724342bb8589108bfdc37cac3b2d9290298ac0368ab818d59cbb1144e45d1b139a14d088ee896d40b86cf61092bcfac97c8e3e7fc09e52825fa9c6c02de9e2174b5d61e6a61518171eae25560736dcbb08cf4a9a6102127156bddc54acca0bcc7ca61a14af4efca2905e5fd523a38de5fed08aafbe21c4334a54a8c8522bb24fa6279ad206b697ac1af059a71262789ca7724be0bea3e8811ab97723d0e8944e0a16e25695d3cf1c63435087d0fe4c8b9fae6f57f9942651797ae78af46a040bf55b7e742f27499a70b4503e6f2d121120a636cfd72ddcaf4559bd640920df91f86357e171caa798bac4874e8b7754253516994c2bdc1bb266ae784696a7a648053f302ca9702a041a7d5ca9669664591d34b72647fea26b36111352c6d738a776ef3a08a37d94cb577572d8721ed64cee8c554f627d4778f927f02b439c56d3a9ef86c230adf8ddb30f7873474cef577fca1aa18d916c1407ac8b7822254009767f90114ab16e46dc50afd080c22e1449caf29edb52fb36c7876a92ec9b0ff3f8be9f087ba23dd7babdfc5039e4b992e732bcd06890466a1cb6d5a0177a397835b34f9c3f80ba7eff7e74cc4e5821baa4819577252a647d1b1c5bbd0ada1515d0fb1f635882cead67e22cd719170d1e85547e1ec385794ab13e663d75a49217f3740e8b22fa48abc6d35dec563c3766e97c96c080fa77325eb26d75afb937b6236e680075e99621788d486eca784339bf8b9dfdd8e6824febb45bb32ad55d41bd97218828d922eb0f4a7be67a7c0e0442a8fe872ca0e2897c1b51f87f2bcbc04407106f584097001a3c574ba3e02ba58821c5f8bc84258200610afe23f499d0cf3de6c5041a208f44ca10853d772fadaa1a00d37d28477bfd145b48c12cc70af3e75de2eff81e10b64d1a1541d82832b122e05a4739373addbf894d47c1c1568b347cbf5c2adce4d830472e81a91b089603c01fca486da8aba92947a6ba5b40d898e23fe2dc8c351b29953b64fcbfc25f448c2ce1b0e0971a28edf6f78cd885ebd20e9202aa279bb0faf015f0b87a8268d621c4844d220d3ffe4e1dcd1e44660ca499915944efb41a1f2788eb37dfb33fc4589fc05e4ecf91e9f073291bc363f3430fbe2c789ddd203885cd9e07faf2daa65ce028fa43ba8dc7f35a6662e79373faf46d8c7c4b99b66ea20d92332ee780ccc0acb9ee4825826d928cd1d7935838a26751300c7c92f031aaf09c29a74c4eec08ff16ff4273510133c36fa34e42fb77d9169e65197580ce8acd8b39af58f63853969225b54012e23d4856f84b6fd8d74f009e86d5afdfc903b708eb699477f26b146a6f06abb7d7dca58c1b3e6afd7bd221970cc09e5e0d1162d0989eacd6dc9a9eea9ae07143b275494af57fc4a7dc1fb589d371f308287103ed7bfeeb2076bb66941d38a9ac7e981bdf4e399b652fad83cba64db0981553dda483235edc6d7d7d9e79f705af621e1952bef1e91f2f2b48fc23ff90e5333795f18361523e3a1fe0f37bbcd8dfda109e27a28e31c7e4350d85c0f706fa8d94b0df58fabf04878676f4bc6b40e65ac6ff501bc7be88f9eea87cdbea42e39dd1ce432033edbc82f2284151008d2a7c8a463127639878a53262943a90ae709e9abe536c7ca8161b18ebebac4bf3686ab2462e27a2cf013690e47575d7dc776958ef61428dfd77ba6fa5f6f5ff2d4ea9f881876b8d313787476b1b51762ab4ab4954a991af226f0280d09b7c9b4ef84126cfc6295a0d9b2f095c5c3bda36b2fec72422d33838cefdf0c1cea260b06fd192216471bc4c9f92ffe5d766d4234303bdf88070c5462bf3129c2d566d0a901deb9cc58412544dd6e51a945a88f002a3a66cc63b78ff7ddb23bdb89c1a28175e06c3c137fc6acfb058d5b4ccd26e7474049c96f7d73ac5713ab60aaf44af739ca75c63b766d9b520c67fb7a5f984c4ff8bcbee9a5d625863b1738afa3546ac4e28310e340f0ee7c152c791bd49873ddd0cde2c3b0c0cad85888b76f10cac2f22d7fbecfab5dea05331b93ecb99573aae343b2b59e6206441cbe0feec4b78e16ac3f69c1bc284c0ead5f2b8750d709c15875f235e011941ecd47285f12ba5c4c0d84b4bc67378f234afc222bc515492f9a5cbb9f9383797705b37cdd24909e45559a2c413a59112b526733d9f606001e2bf56c5beb6cd718baf598203de807415615eca74534d852a4eb7345e8d5f2f8dee2cf69bc1c76203debae160ef7f33540fb20e9b445ea2b6f3c5997b63c38daa7a80cae08d51e118e728c53392031b515f602c820f6f85fcd8676c84eb05d47dc5e1a2d875e5f5c6d860150428e939769a1e6a0a3f04d0c8363e44f26cc914207e718b2ecbc7482aca7817c7cebf5fd27108fdbe71126dac48938c68c849165bc78a286643658cc64289f15326e59986fa7dcbca20c11a766128ae6f05c165a33aab9a0c322e9f62254cd468a89a62430230df6fdf8f9838074113dcfd5a69de281a2c5eb11f207947dbf9aa22ce61ff0730bfe00269e0fc3c853f60e54c8cb7287cccc68b4732fa378da37e7326ba596c65229face18d656a20e4ea8935a7f63a9fcc76dd11976b0cbbc4f23f6dcd2ebff5843477fc255ac0f3806f80b5a7394266dc0ef4d2f075d6eb38021f6076d4dea28c1a1cd4bf842bb33000c37efebd41e02aa650a001da6893cfd5417f5c2d0e3f4fe830b02e42e08998b450ef168cc2ae8a75d1f301deb17c37cc7cfb01bd8c46158de334d60d38017d901a31d26b578c628148ef1899f425f06fa6425b51ffb516e6eb690d998ec20994ad04acfa17fd462e48d0a1fd6a0d6a32def2788749bebddb63afe9977799ea0183f30b33e37015a6098f361b1377702f4fdc59d5625173867e5dbd2c7460e4511a7405f7e1813660dddf6b1591702a89ca7c4a31518db5184c7c28bbd35423d4fcae55c0bbbfa4f82e7036b647ede96293de37860c11e8ec1a7224071867956bd3e769d8bdf8cf36eab2fb96fb58679e172970ae739ed13d51130a324ab3015acc60a4326e96ff1086782e1f607a6be6920d2d0ef00b1a2bf2079fdf1593da4ffe87e79cd8cc9b5c4c961d697f87bb60ee02641bbc54ccd23d9e0a5e6e81cf7a2b6e8206cbb7ab705dcc4f69db8d4d0aa609455dbe3150bd5179187757f4c080f268b0ed9fa83d4b7807a622e50c5c0810a845123bbbae87d7212a2f7dbf4cfd94961c1eac21fc7aa31bcd4127e0486e39636450bdb7f265288ff344b0f6d93463dffa16e41f5a28046a355f4bc25fa8acd895796e17d56b059b84547acd15d4f90c9f616fa45433edd5b307c69395a62d515b2c1c90fbda6d28d67055a443d3858741b18480bd720027250168f5051794348e360db4db813aecf5619dae0b2375d344444c07e2fff2211a5f286ce10b1c085792bbba7a3a381098f14c98e608a8e621b7128b11b51aa988ce410c11b06e127554106b734d674b120101a1f1791e65319f960cbe8ad583b6f0a60035857b6499dd4a684930f2fd0f82c88eb35dfd00ce5ed2fe4418b25e04cf4c6cbd61cdde172928113ec0f3dcd3ab028609d4a52606668861132444842a77fda2408a2297a4a086a4ba2394b4875b0795015ef4d2e59fcfe6b48704d6443b8d672b2462b5154c1d03fdfb0f56a2ee80650cb81b33bad6865d94d6374cd8a7a6ffd3b20f6d687c096e7580531c0f858b49313122814be2ac4813dca139b35ecf95e9086d81a16694ee29a100657341927c64ecd984f3a6a68217142023015f204bdc62bb998cd8edac2500caa729445ef1b881b8faf2f3ffb6f8629abd0f1e60a5e91eb4ff893454427701bbec53fe48df6117a309990dc1d2debd5d7643673a9af70a25bbb2b05c29da4459e1a8b9c7cd8d46dbb4b286babc4f171d3c1c6673a7c6210bad7e5cb75908df1ef797a306a27f8677a9fa17fb75d1e100e482822f29d8a0f353185ba8515682479dd51da91a75a5a2eb4d89ed149ab212656cd09e39fb5282b06c3f7c08746ed2f6f004379b0af4571de94435677d657588a261f709e92478a8b0dbc88fd31b9c2f08f938a22298fab91a79322a9550544e53b3d5b8a386c08e1603bf810075989b712b8b3e5d42da4f9e1faf4eb1eaa922dde8c44fd2f1bf549811dfddefa87babc1e34e23ca80182f3bf22041df3a799ef224a80e64cd85d6f3880f357799d0eb0d529350630711100e27c95dd2005370acb194e2f521e579432f1c5dcad02f66b97248bdddd5f79b1b3e7b6412725e2562d9b1dc303e145a35d0c83db768442cb20a4449c12960c62b295fb3ca677164468892f241c03fe10c45db1af00698332aa4eee5bfb5b1b1a7bf2271659a49f1f1323e7803fe82eebc660dbda36d8bf8488e9ba9663e182dbcf8066c9cf61dbd231cbcb838a2c6cb7d3d1344248ecadb24fbf3a01e89399ec2f08c0d5c7b3e485a1d8fe31b5522ca7358911cf98eaeb3301e1e5d4b5db6f06b389560520bfa81edbdb725b215eb6f26b5d065edd824a343de6a3d401ed2643ef508a45c0bf79035dea0caf9f58110a94800059be58740c30002fe5731b7de8ff72dba2eab02b9d75e26503697837a79d6ff63e05f18dfe5b6d598792274cffe0a5d760d018f29677469063655e66f7f0977d21a474372847e061015d7275660abbc156974522ae64311724dd0962933790d74088fb195b1057ff6b23870f420882833418175b12d08a64c30421c10d624e6621e1706504bdc5a4bb7ebabbfe6487f5053535399f8da2a8b74d1bd0f2466a813471b405b4e09c9aea6463fc97bddd63d9a158ffb5c68e64e02608dd88cff27704d08532a90d011868be26e2a09f7858cd357bd072417d5fa12f5892cdabe6e53d73ae53d565119ce5c2fb4cfe0f4964c836535f41950421dd5910e4774c05914249e4d96331782e6b88bb0a88a201b0bf3ce2337cbe1731020ad0857813a0e2678ba878db97ae991a606685dbac671999f12d15764537743c45408e5fe2bd4039fe4543483ce4e8c9f215480de3b862fbc609a4fa1fbc54b447c2306b7a4b44087a21fb8d604bc107e6dd2802cba0c82cdcad00cd099516ece2a27cc29b5d28fe60202ee3b77bd100f4e8c04ee7ca92bc1fa8367708997c8fa4bb4f0c720ac92870588f7d83d1d0b9bff79efa5397370a24dc53615b78f787ca47333983f7d2649b95672b0ad72243b79387c6b686666b5c4a45082694c9493e070c72c40de096052862ac55ecbb5f2b67f5d16355e9509697d398ab0a847312bf1de5f89877f877ded1e43c8fd31cf4d7b9b807da3918c2b3bf7ae577f1821113c3b850b121f937e5df24888706af8313db8c29d65697f9bc2f0a448202ef626c51e8c6f40984bd79ba33b5f1fcc5d6482b39b582dc626cba02b32ea3b51cbcae39c2fa1fba39c686e98bd63d2df06e8bb4318f7b45c0fdb508e299cfbad9b59a8ac9fb9fd4bf2813e9a5678e52eadf6a0ea849eae20c4e355138405b375edc952abe76df057208aaff3427e72740922239f31e5d5f6b57234fb26f5284b28bc3d4e3271194f0dc7e6aa89ae266c378a7ae098044085af02146151a075454edd1d736df1af8029c668038b809cc59a91b8c703aa1c0811f116d8deeebe60c322f959990cdd163673bdc0ba29aa1d5cd339ca1b293bb7719f2d925351704b86118e225754d74bb3a3fd39d632b9d9ab957554c321f8d9491b516d5115f114f8b4c1167fbd089485b6fb80723eb750e08f7fe59139206c603dc886d07e7eaef015d5108ff98bbc38b2ba21eb9fcde6dd57f3c76825c725a3d653400a6ceea6a93602906879f3e91fd12de898f8a2555faf2990c4688932f1be5bdb8cbc601c06eb9fdc1bb1cc8ea544021c7159c4741c831bbdb6a6d30789c1bdedff52e999d882f9f6cd726afcba0eb37fd1c91ebc9b6e95f6985416348a0eddf1e60f1a70ad43431686e585b776a1c4722d1453cfce221c53f91f260b8ca9bcca7ddc9693391f880e42ce9222ceeb6760a961395b43f658744ee6f3842e4dd8ee5271304efa0e2015d6cfef05c5de6f56e308bee3c91db718b51fc65b15a1d729d4b388f754bdd5b452ffa3320d9842ecd35e8eb71c1836b7ff84c465d74d9c0e2a51c4e9c7d47ead386646d2f6010d0bfe1ae120e44cd8b45e81a9b46de7a6841dc1b6f138b9b06194228de5567762b523b4038265d4f495ebdc2a067c07ac87b8fb3e7e0154c2005094ad7ac69e92f2ed4b2d401d9b77a6b4b0238b2ac0bef669e23a2ad585a7969a9f3bb4836094170f2a0a62122f69204b2bf458955a18715e9bfb1528142c51f467cc822bd4367039365fe510f71e6e9e66430482ebd02cbbe8c2eb0603b020a9a8c553d2a779981ddfb71ffefe47058210cbb8bbf63cf5174e3d6556735223f181bf529d4df6f268a347a9416c9af99ea001ea7f9fe0b81adefe915949d1a158f457491468651938090ced72d40220a74942a6e6b1b9276839d3a721156e3b36b37ede849b82a4897547745a53c8814fa6af07217726107047f8c7d9e3c0c075d344a912853003b9f8a262c843196089978f7c327a0e635e13bfa81d643f5fb05ac2a258d4b73d6b2cf0afc2b65a86f76fd8991a976b2ecd0298c9450c7ec6e15f21388340202456bbc89d2aacefcba1884c01885f5c54e6cc294e711b8bcbfa544a4916296f9ec1ec13e104068db1994671c44984da7459d8580ae3dcc0494efed86e8a289e2c6b0eee8e770fec5dd9c987a86b46db25a0424e34e41b1c697d7eeffe5ca87bace2b76419123b88d07e0cb6e644f9f4ac6e74e403a8695b91fb2c88116df2ee7a1148af18494e7eb5fc93327aae2810dce2e621bcbd3f3c7bc9e2cd38f69e17d9a30f2d066e8f073e7a0aaa690c8a533635b029aa7ca93021b83019b6e30410ca719e76290d7abbf8d6e7ac24cf0d4c6db4fc68dfe29e3ea0c7045ab3a27a8153cef57609d685f05a470b0dcd51b457184375af471cc4b751c3f378038b58f7f5826516a416a425c094a7b02f8ff2aa343fe441b1d2cd4fdbc536fa30a494fd916e7fa5929139a6b012fb7f1abefccad70b9a416df162b8e50d41411d7d2c6c3ff78e07f427ba31a012a5dc34579a338b44c67bc34f02cbbd68da95242fb6670cf32fd18e7388761700c4013967370a8d6a57b0191629b7a07a762cf6a22417da32d966064a47a7217ff081fdbe15c67ab518ef8cdc0e8a4836bc26af74d6c14b4778bb878050530ce26396918baac2f69df60eba1dc7f2a5e9939ee2f214b79ecd3865a17fe3961f33cfa8f9c6917079c9af48dcbd43577e5c208956fafe7b69155cd4336271cbdd1a117bb3a92f43ab72e83c189c8fe6949f8e57d8b0be6ee46d3f5682253a335e304f97a8015b364555a2aef00c7bc0186642d758765d354bb01142ec54bfd908864227ec996a7920608e8f655a29c09a1072ae144dcc0701398c5274ddd2303b6795410a7e0cdb5ff6fde4e32746bb6fbbd2283c7cb4abe8d7959fd5239fb4221d8b52433ef37cc280287caa06c60a36aacd3ecf043347dd51f8fca029b3623a75142fcb798bc14981185e419e10c6df16a4d9a694847a254508569e3f28839461285170c24a4a3c30759efad1216aa3480374909d6d06af5f7f48e1f1a6ecbf3024362a25bb3c8c2a3147269fc8dd3ed067ccef039354a122972cd37661bb71c53bb2300493ed0a7e609cf227411f5a8ef298f24ed805c605e3f4debc2fa27ba49dfd648aa9cad5b67543e24b25be63c45c7d80e35a70d3b61355d98cef60526f813f70f0fbb06c2c58982f31f7baad59a9a783f0a257ebb55c1f1e0537fa87b8b654489754f2a99ef03f015868327eefa45ff44e0260237a632bffb918f233323c016220a5eadfed9a545a3d33362d2836db103e17dc59cf8ced54c88382d930646581b6a028c1b7f7fa8e51fd8ba3f1b26f08dc289b09cbd929d340e5e2eeaae0b876a6f94271a0bc3d9e136ad4befa301229fc6918e5902aa78f269ae7694bb7246fc9e911a9e7f306e03b381e276e25c11e71249960f25ca22527c12b90979580d58cf37476925c3464df7bf1ab839bfffeae6c4fab52c1fdfe4f5b9db41fa32faef28eaa8c0229de0d6220a0b9aa94c9c2b0fa29f4755ece9cced00c2e2afbed4efe528de237b3e71344554d263ac35b2195dec7fd18aa36d5beeb5a91bed5169961b5a979045dec93261dd7513294bda8e2a3b041b529e8e20b7feb1c6d5006d8596c1fc423c9cb114ca39c9b97820dc5e25081b3d44ab831202a341c80ccf395d544c3db15605eb97d5478e56d01fe107e74cf00a3d82297468b290e09dc67cddb1994ee38a9ebeffdaf2b4980952d05667e2f8be47390732ece77670349a83d3a60a0df9b87b2f91e0e8c2e03af11ad00b0ba957b0239771645a397bd110e0034b18ac92404a8c99b3aa543de9d93ecb1d9b6078f80055f35ae753b837b750e951e635b0257a48fd022874bb99e52e9a26e8043378610e8a4704550b754ae318d4ff66bbee18284aff3c61dd2c10675d78e2813837684526fed19153f328e8e418e1dcc4bf9344746c6a17cce46b9c9e435b0691ffe8fa0b616c9866b4a1d1c93ec541a599da8cdd6776f618986058598222dbc6e31fa50180db5aca0106b3c344706c33b055d6f7b7cd7d0f6f16895f61ba7a39c8afcf30543924a4fbb153bd29c94d913858db2efb9b7ce4481e43f55d63f88173ddc17fab66f2bb78512610e8771405ed894f11fcb9ea1f22902028fee0206861c242a5d52e762625cc580badb2d16be36164b07054f00337fda425fcfc05515af55c5449682cff7868c54f37494aba2ed569551590af0ffcf14c3f10e3d4360acc9a233f3e4cc5013fa65c7770bc67bbb74e3b8bbaa3dafb4b9457d80e9b2b326c3af85d3ec4e932b54bf4b461b7e4d2d8cb7ba8c8478dba2baca50e3a7fa5da202293672d1418458b236e83f60bd92dc597eac12926fdcfea731a5620a5b2c871a3f56b5ad7bbb8f556b797db4d0cbe605f27f43ec4d5aad114d74bf674091207873a3cd2541ead9cad1d886b286475aa418344c727862f1705d0604ddfab9655c66d63c25a8f1dbeec5655552a06410979b11bd43732c3ccb11e1a908ed26c49d3edd9c41725a09440d67ec1256faa8e0560dfc7eae1a88b0137ee21d99cd5791dd4130b85d5b2cd716dd7867847c3935094917d04dba814ff7715771b48e752366ebdd73cbed56ce2e4d0f9fdc6195a9bb01672bd13524ba057746e985c51feb62afdd46aaf235ea6dbb3320ce816db775394c29c680054719183524f09ba8ca3b4c268cdb3e1e7f3107ba3c8c218faa0d0cc24473aa7f279322e7ab791b82ea61928e7212bf62d9a1b67e61ec10041ed7a56f4f9a05880c808727728d04ce485bf29652b89467cf67fa89f79b411c47e32b1518648ebe28e2629b5d883599702495b81b7fe588dd9b029b5a4a0ead1e005c59e0936348c3927c7b1f18f55a789a18c09bd3cf7f2699e93c0ab950e59ae5dc9baa2ed8b78b2d41b1be5c00c988e9a60a804aa59dc87ecb1d8ae7516005805c683c1efd5336af81169aef35c7027e71273751549e3f34bbcde325e2a42b08c17e3bc3bb1c52c77efd6c518515c69cf7135247d9f6a65fd93f7d5cfbde414d39fbb7223de246c3308d411458521cd36f4bedb6bd041188e62d59dcec34e18b860b4e2cd5e6730cb337351c9f8ed0f3a81d7b2a3af3e166debf9f91a3d10d692775c3547bb9d1b56107f51e97a9cb664946e7af47d1ff3cc5697ed904ef8f4611d8168275083a0b53bec9e7645baf7c177901f062dd27c9f4cdab25ed6eb72fe4efd6377ae01c3971a10e5589bbb9be53553a0941b22b5c06c37c2f995f8752896b68e25aec568ce2bf15962be7b42bf634f0d6249911787e98bb50780f593412719796404881be62b3acc3d6edfcc0b346e688fa1b68906de43c807d772755587e7e2510c5ea3f1a9581716e59f5a8472a03cf3167ad100cbde35843f3d291e41cfd4dda92bbd8939eaccb4b66d2a4a3e55ab199efadde7bdbf2ec44b79fd17ca62f20e4a4919a1140a04fd09745b9f05b4300821fbc62b0f7b3b3e10fbc22ab172cd455ae00d9d87bc0d02189e5e5759ff7a031dfbc1551d129df262a66584869100ba9f026ffbdcde953fd1cf097a63e768f3d2c79989d3d719002a6c5d439196edd9c1148f4069455263b93a23eee254bc1576f5c8ccd8ee5706b20ad86370adc65d2b709ec20788d3d3465bc7462a2e7cf3f87f465b5a59698598015d14395416d4831e1243d1f965b55e6e871ca77ab0cd57dcb570a216821a5ac5f8705fae4191f2c5830022d4e603129b9318ad65f6406e6a21146c7b4f0cfe44f754687aff71d4afb4cdd2186ca2dee8eaf423e7eef0ea51d575073567bcd051cfb825a14ff50eabf58a344c2c119ab0f8555a6abaecd0569010fc4c9031750d3aea784c902d952f7a7345f5de7d027e3b2dd5498fb516c52f4f1a08e613be187130c0bc647d937781b5832da4b7d7c788bfbade9c96777706e654cf0f703e1bbf95d6dc45ddea7c41efa6cebc418bcb1cb2c3771ef2bcfae44f3003b393b5aef4c5c1bbcb6f02558e735ea1eccccef71c84c65fb0ce58fce0316e50b2e2f421c178b529dac1d23c93ef34a7830ec41425b54d30e695cc59075a8d3c96477b1e796baf610aa54d4d88ed9108e5c8a58b3f696d13c20cee407f4a6da29fde505afa625c40bc65feb77512171f83d380dbf17482368d675edd82eaf46e77437aba529914ca02a6fd311bd615a68acf688e28d2c98e470b090eb3e16f1400bcf6a61aaa25eddaf054519a7e266ce2c91d20b6ff777be61606108c8366a1fdab2da94a5a38b397754e61b784325f4ba2083f9c16fb0dfcdd1b9ef17a78ee8926b2795ed2278ff0ded3c4fbb0f17cfa89c31f744bc58507fee879a42a27e395e5f26a4bc52ee67b252f7e43a6fff32d78f52b0f4e2993f32ebe3823887c97584b95a1a69c685bb696bb200d738e9574f978ccdcde37480508eb27fcc29b63eb1efd0a27339ab3bc0bf6c9746d6d0f88a4a3f5ab1549a211ae66fea84b1f418d34c08516233b90410e4e283d32bf01006234b99b1e784542412d9c651b77cc49b2e22656eac16a40195456f2f30f558c06f563bcd31473fcaaab6a540d6c6657a932143ad873ddd207c8381de560cdd8b360ce96ab52caa1f9732bc01847323aa9a0a0bfd0359c43a884f64867c473e932015546989f593c78b6c6d8d3a74922f7c3004c32382ebff1f2e434bc9f411dd957809f13975b10b61e04de0e2d4949aa0a681b12162a77099fc99d5a6d990f9bf85f2f0a71c7c4fdfb22002b144055ef77f9869bea37205f37f1c85b4c0e136286145206c210506c9bcd9797c359e2750eacedec73cbda2e2bb7f5416f85280853758af105a3d2e3955fbb22f9890f742ca520f78a53eabebb7e19c4986292b865abc5d53443074d8c7cdbbeb91fd79170293c678ae92f7fa59341da6d03eda7ad3c184a07899d43328b3dbb597ee1d64ffb2eea3014343a6b33400052f88fbf68a89bf8350a603d2328d1511c3c3cb45eb2e7da41f3cf55f84fb6629bde259f829ab73e05bf460a18b8e33218e7ef1d6b8f6e57d4b0b6de880dc9081efc2a5ddf1ed2d7a6997b2f0f7fe2df54f62cbc045b68683d12e551b205b756d46a5c2e959de4e44d01873129727c3a5fcb30769462f2adaa9b95923f84e98f60de99e9fd5f66849b7f263050fb87936bb1a385b88359bf1d686131425cfa41c00f6c1bcbd6d7d2c4c165c080c28518cdede17baa0073291c9e808425ef0a089a3271a915e0b5e0dfd7e1715950aea9a83583ceed4824c2b33eade6a43baa2db6e2629a337c1eaffe6a47196755de7044db273eb3a3b878d3383bc57e5b12226c43983eb4007190c775364e07b68450e1a90c76c6f0d1d78386dd52b4012e8f200daca1c57af975849ba237f0c1c26b4eba156bfd306e72eefe57ebdf49818b8bb7c79800721c3edb7191ab3a06a2905176f5f4334927637de537d238525e63d22baab9442edc4013ca96c615953d1ce06dfc8ac3da323bea906ffda92b1b24801c8e197a4d1029ca0be1abafb47587d57c1496d2707097ec9a1845bd1566c6747e697be11fe4fc705130459566c9d106f3bef66fb3e46a80830e98da5d478a36336fbf84ca82a85ed8370f709afc07f63cc45ab4fa3b285fd60f371b60bfc3cfad88a2f3765d602f2f37541fe77e146c0914a80588aac5a572195e46278d67e7784621066be323f4b08be33751fd822f2f8eff3f189ebfdc63c4bfa8e4f81bdce622e8723455b0c7bbd0c5e282d44418be8e447ce86ad17cf84a63a144b914d2bfb86b08d0460204438ad96107ae53d7cc66a025fc5a559c564a70b807b480ff9fe1905ff3666a964fff355840504435785e31df2a05a24123d23f9b120aa92b18154e72ee166a0bdd5a9f1478b13c7275a72e8f4178e9c2fd2d9bccb0ef00b694419788cfcdac6f81290a199fec817d0499a25a6ccef17e237a8a53a1225a669aa230d0f5633c0a9eea25110b59b02314424bfb1ede03c15f3dc515116831c9e38a49b834ef864c14c5991fc4211f07966ab67a9e562302f8c21f0f72b9817b30496472ff8463d1403ac11a8f58598bb71ec69830b475efc3baca14f3be709258136509eec93509f36474dfdaa83f01bbbbad0551a225291a343df38e2bcfd43c7add3cbabbb5b75241d49c96837956a88d00e5d2d2159dbce4d3aa6a417ae3c2b3ba776c7d4f269a8c42b79f64b53d326bc7f9973012d94fb49ae7859d822996b2ccc599fc89f2739b557e352fc9c13e4c160d93cdf3e390a27618b129039ee75a5c27aa196db63abf912cb297164d8b64de155c810b259d689435a85ad38e9e0058c144a6b7c9bccadbd0734c6279c6c70f66407da0e8f502dd79d04f4526ead830b66650cdcaa82d41bbd5691f4e9bebeac7de87af16b3a3b9024ce92f7bf81542322d044818e6ade79e77c0bd309847f19d1501b01929832e82b460fe6e89f36d8e4caa932c89311fd86cb3c3183a083384580a57ab42cb2527cb0a695c9751b172c32b378b6157dd1302fabdca669052ee13a7346e45b7a2128e56d48a662ecf0555f4e7e57c1952f4481b7fba91743d600894eed90ee1c3b6123ec48b7df44958d4ae9bd77a328e2a63df39f9f7d89ab0551e61804a5ffdd0760281ba82f5e4cc0044ec67ead2e13fc506c9457ce7b0291ad1345cada27acb388ab75db0fdc12ba28e8acde97e03b3422a87bde9549fc8a5d311ca85785136095e225739630d4696b9d6ac0691ebc4430dea9e2a6b54ed5fd0870008ce48920799e70e73f4f1339e916f7303698dc88dcb9dfa9160a1c60764abaf5703bb1fcc7ef46b28de50f0bcde7a86ac165c630f43c372383eb42a9d68b5b5fabb8d41f2ca9fe1d87d3347964b7bd23bb231f37a2c06bbbfb5b769a0e9f5f5a756e7a96233fd50abc38c08a653678f0be531a7c45fbff2c7b3745c35d76b129c938140a5d8f6c10c7bf2e3364d9427939a8bcc7ebd24d964fd08937dcce6135fd42dfbce629a882307d784be0eca93c1f5c401d6fd16699c753ed644803b7e0179afc3bde88528a1e74dddbd8e5158dc1dbb9a8f8d7c44e89142ec0722a73153be348117b5f649dd908921edd1d9d13afe03eb0e6957dc15a4f21d2b9bbf34a3b80a491ccbc01386fe6581b74dfbff31d56f88c55791b9c5fb63a04ae10d562448247f6be6eab23f0bfe96e2f9f8d80208dd7c79546b498478a41bde546a0d28b403f1e6fa018431ac0846c79523d7a4ddab2c7423ae22383bec3f8d6f9c4be0f173bd746ff9a0826d60f688a117e051cbdd5cfb5427cb0333fafb25d23831308fe0750e334f8163e71ea43fed42040cedab16c92dc4903e79f8730b06f02eb0da650dc43f7d2871049fd0aec2e1e0c5715c04ddf9a114ce1d7c1df03bbbd4a09f6d8b1f849f7cb22e43cef97fab5c19c286f52d57439dc6882b3e06baec58a15214ff081462175ead72c34d6a0e499fc128546fb407c7180434924edcf50a84d5d2764cf5d65a3496f053a55d12c4e2ee90d6097a80df2218ade7915c21806e79fdad56cc2216fe6b1040f0e8256d76887d02af6892e487719591f0e2af84b019f4ccdc1c145780924ca11d5ee3016c0859c93610e19afc81716578ff1af09cf06d4dee022938cee13ffc8137add903cb3058f936a918513847891361c7c6e47a94d73d9814fdf3f633fffa6082ee75815db9b318763f16176e8d0ec632e5851a8cdbdd247e64bfe213d451c178b2d9114168c3ade9161fcb0b44016eb3065b47e95923832830facd995c89149a32eb7d8f777176d8c225869b95e045aaef60401ed05ebc4108afeb4562efca4868bd956c865d04a70f6f62bcbac18615a2a424043a6840c1194781297c0edc5369f6f3e93c64f9662982e0a4cb60d868c40543bb14a62873438530c121ce6dec995f6da25a71e7afb63d37de7b1f65e9d049e694f1d24731d57fca4eb0125da6f57984377c14a395427b9137f419cec9fdda1fb375034359748359968c3bea3c97a2d9b560194c1e0fa0f4a8ff82707a4ac3062d1652ac3be3ff721f4d98467b65b836ebe95d72647faf22bceca21d6ad067291cb08703b9304c78ce0ae39fb477ae3cf1f2c1bd1f4914b25cf0434ee9cbd22e9db24bdc9f3eba435fcc2c81cdbb647e954fede18288448879a6608d98b9192afecdae96df272bf9066dc72834715a5dde5f7d130dfe3b798722aa14083f26aec8ce4ddaa15d587832cdb57d5c919ea34ba82e1b5f39301ca7165bab89d8f36d46b1dea715fad5f3c5721cd6c33b62875c0a32c48e20dc1fa11c7d8bc972e0e57599be68236882f51225007bb88f2936cf6a1ebe9c73cc03a7eb2693bf4c153c5c93d3f1d8c4a37bdce990c311431e056be30e0e3bd9efbad0b7ab228269dda23b38205baa290cbdaa35b12370fde030bc23b0b3a257e9e1e571c0939951bb9e603324e9e7ade1b0a4dc0aa6609a821da28de1af96ce66e16663cfc2e4c3a3fb051297afe77c304a9d78b909a2f33bd6a88c3b2b668ac570d8ef633feec794fe58a178b161ff30839fdfa688796a55335d3fe8d1eddec6923094879317dba979e7b0fc6e0611ba68283e43ee29682865af1e35a2e88be734fabbe9e37455c43fb512238b7acd6ea57c91644cca46b0d65d7cbbe1452c51f3f65ab42aff817bcd968eb9571e81af099890d48930fe7d4fb9f452d42e0b7532ca240416e0f2baae366f9b8f39b06459f977c277c42a750c40762c56cd0e0510bd250408e920f15c52e16a7da6c92466986886ea6651429de975db63c1d0560f00a41960aaa7d63dbc6cbc8826d7a4d0500f1f7b103d1c3fbad959226a04b0841a01d375c12d4fa60d2aa1fecc212a772ff9d7c4ce6f7e037df9a2b57ee77c82905b745e432fd87ef2bc0680617e43cb3bad28bfcc41f2634448faaee37f36f2102dc5f0a2bddec966facb5e915ca88703c446715e106869d2912834df065fa398c540ba282722d00b37b9d858df63cafc54638090506d3f9edf1fdd529c842937aa2a787941b22bb069674fac213e684d65e3f00b5263989b62fb54a0ddda5647bc68036eaf5329035f84a20f96b9a60c07374ce33e3954113e69c1dc364522a49941c806dce9e7f2eca58b14af48a80cad1fd27a0223118ad5a16219c3cb69a9c4450989a1f394f96537709ccdb9f213aa23015617382847409d9881b63aea73fce8c1d51dea7e8d92d3127a2e755338ee613666813b8aa3c3ced2ae1a15d819d3442a9e99732d6dafe687bf211cc8afc8144147ba967e275df46f318425fa297a9c238c79b7cbb2b614eeba6ec1e972c6b57e3b663a75517883972b740f93983ea4d7f67512bf93de8ac2fe3898643e5ce76a93f3d160d5f160d329e811b4c03f407d46b25d106403473cbdfb7024193b27e0aa875c0020f3b958dedd6dd363ad1eb101a6a43e677110b914b0f6c7ec11e82a90ec8ee9d9e3eecb7ae22a37d0ad4c52b95979f2048486f2b09bbed7701f5317026e1268e2b4a3d9fe745e78a87b197350e92c84896c3c02420c2718fb0a7a9c31f5ec65a2ae47f645be82a679f62c904ff4cbadda541027739aef08962df391b39a202404f71431c5da07b7cbf41506dcd9afc0cfb29198e18397f688257ececced3a9d49d60e71bcb87fd91969186a8a7dd5b03b8ea11a9f415995717ad8d9cfbd911e75352b99e73698c3c01af6942a2422d29942cd6a34759858caec9ffeeccf3371bd981db043450b5c1c7df55e283e3182f9d9a48daae469bfb2468a558d7581b3365e821e647998b6a7b0034bb77a125a777d3a6dd9256318f6031af5d7bd5606ad3a1ef5d5227b262b3fe7436ddb8430a0b2f992fa1ee7b433c3dc95af9878a77d8def3ace7d3df1cd0fd223f030ee36d1f4932724e0cf002dfc22f151c0f8ab6d73c7fc0abdc12c22b606a47b08cb709401b1e4073e52148a11cda8fbfd301d413613542575b4ea27fbcd718be83f4c5196fcde828baf010386a58558228175091d46f41e8ce04f2b1a31bef0c51d6d2dcf1ac39723c25afb9972b0bea48f66f72b68eb2c691d705ccc9627da5ceef61e32781ba83f99158a275cb76718f917eb375c42c4113f537386c254841b21dad35fc2e9f85c3c83c22e74fc8f80b278541a29487b62192318e923e5b95dcc4d01e0efb5f54c11192a0f12136aafd4d48630e94a6884490637fa5f98cbf23fdb895ab00698a3f6de4cb006a4a3727679214fbbcc85199aa111b8c1161b903eeaf6b4c7dc019a5c8e36b8a6e5adf15e3dbc29b0b921a8807481499e00a1e628f90599b4f63c93e45d41a9c79fdf60516204390ff12e631686e2dacc26889cba3fbba05bfcef08ae35100f58c79fab3e6273bfc9d207de9846827ae4007aa0faaa6330b33298785242cd93062e5b3151f4c70a29a5b2e3ff2776a989f2a395c9eb0e6e324fdc38992ff23b7bba59e6f3f4d2e4b68195cb971ae1ef0a44c3f89c9b312a3e08d7f4d2b16070861905439ce5d81b9fd60232e95f92e6e28431b21c599a11e498f8b549431ef842486a39f0117a554be1fdfbacb87f460a0d0c74f969b0788d22ca5599c540ca2be8d400b6f6f28d7f9e0255c9d233cff94c6f5aaa8932876601b25e920a82bbaf493e397736822828fd30668e19e2a77a98754c86c951246df7433470b6ba7d51533a4e274d39088535a334e35895d37579db6b782b959ce1af2b2da5724685a86c97d6f11b843a59e31f6532931d7929c8f38338c6a49d2dd95fc6aedab109e41b86d89716ea162a297b86775dcc56feaeeb65804908752b62b8b40c2584928181864613271ba7391c7ada5dc019db7881e36bee9fc1a8ffe39353f38fc11fc309833517a79dc82de4b560e91edc810369ed404f7889e686b494fd0aeed8cb1f8ef1dd7b653e3a7ce897744fbf151ad576c73c484a962fcad43d45092bc2c3c608c8c41fbd0bb963db6ad3db78c8991062e10fc6b2a9e097e063f5e77be86e82fd00533323be0eb980d58519413afde50887524c6d5caaf64c9ee5467a683e5fdede2fa28356494e7599ace09c53a70e13d99df67aa9884d20777e6b3a75a599c63ecff400dd1bea4c9c685e7c26c9f7ac585f53d5104942831f56882180be2a4203f81a1159b9c8b1c79447c1e589c41c7fd2cbb86e8c818f45c20170479bc53855a986c43f310f41fd305724dc55606a592c2371a116158915ecc2470783d6ff8c0dd186191c65df568306e21e0b1f65995ee6eed6b7a224ac45cc22ca0e090c927e0e67607f15be31bf3a2aad27ba5c4b6297556f2dea0c9ba3765cd24e53cc339f6b663c0763bb741d8193aa75562bf19de57565a581a065cd51547ad6b89d6304b64696b9ef59f12d51c5feb6fe4adcb73230b0018f16398894476c824f3ad0eabed5c158414bb0723a95545f893b833f0cb66877c8ba3a90f0b3509df85b504e260ffa02db04c277eb77dd1952bfb1d4eb77ca4b5b5d655079c89dfe047e0ea1fbcea838abe2e5d21fc1a1de925025fb20f64764a2ecbbf71fffdfed8769845852bb050cd2baeb50f2783e6b8f9ed4b294fdb988ad661a228f3dc853bd4afb32d9eff3bc1ae8a4379951ba459c81dac72d3997f035a306932df3cbd1ea9ddb3cd9602d942125b071dd0b28c2c4c755dd46ddba9b8eb454c5edf0da7f65dc30febde067b0ad0dc950aaee972d549d338452443706b21734fa4203fd435b0968495aec9a7a4aa5d3366e2c06a918d7bccfcb0751eb3815389ecb0e6820d0a29e28254460ae5b5ff0ae3ecffbeb044594640edcf2a598e7918f6f3d46585c57f4f29a649a4a3b75ed7e785c1c5b4c13de8a80df2e5959d194d5305e7fd7b4da100c528584649e81f44959979918755da033664fa7dd031e9530ba51cec3aef365c9e01e43f72f0bd63e10ceedcf9f368dd06602fccc20e8a6e40cc934239fb39085518e1a59dcaa38144458f10c39653d7bf3298d81b12cc6a05abf4ff9a2892f9874ead52cf12aeab616e79a0ef0e47631d3517b8d1aa93bfe1a53fb340dd79e8072f73c7a4e89fa8cba2765dda5524673c056211f54c737f16b91f57f509e7756909477728c99d07f1c3bb0a4bd0f8be03660138ae093dac98cede9101961d5761370689c944ae6300c6d1147ada91f8237d4b00d8416dbdbb30dbeb8630e39b13ca4ff414ae401ea594fd79dd2c1ecc2808ff1ccfdafce711b01efac3b5b17c2b4ea9617d54e238733dc57b22cb936d7326b57f84d73b17091e76dfaae2ef6b56cc478052166e2d75c3b46b6b2d1daddb57db1e1b247e642cd62201bedd170862841851ff3fff8cfa3877c48294c29fa0f89b194bd9b1a8dc3822415da522db6045759f236a12e67b3aa493858da105854127b4e70059d9e97cc7de6cbfbebd5be82d043ebc550c835ce868ed01718fdd21d43827487115e8e16d0f446f154c452022712537e465c8e049c0a7a5a15e65a1bbfe24abda820ae6101915e073c963002115b610859633b60fab3e9d5e26947df70c902828fea3b9d6c4bce2e8ce61e93ee1769a77c4ec672a7d7f924162fde676995778a4a3ea72479c9e7eb6a5d2325121f7e068ebbc59a3febbac25377d86d76e358b3d8c7e66637c343ca7ce8ec5034fb4ae9d3f0c71443ffbf3140d8d368e0857d620ede8347dee1493466ef52c425f93a9714b352bd1f2ac77c52509573751a6cdcf7d0d567d1aafb25e15a2b60629d28de5f0bdc58bc974f67f5e59f48a990ee73d0d7e911f67da897e922dbca8594857229c5360f43abbc5753b9e28d42fb57d12f684c477643eff6bfc6b30bcb445aa18b69fd79dcdf36b61ad78cacb1a3ff1773d86048a502c3b410efa958d02b3552d30e9c934d7dc84c78e0da328dc0203a3d16c6b3b7b69a76bca978c64f14ee4bfb8b1d5ea3cb290e778334fbee2fd66c9ac4219bb4dbc5fea91905aef9bd18af6b3bd3ea94e95579c75244fcf6379475d3d5b8964727425110930890d6e5ae467f69dd2404dce58d758a118900525fd14d23cf88cae629500354159173e246d657acc4533fbeab578b14dbe39aed7b7632f410f5b7e83fcd5f960ec8846799ec52d02adbfa3add69bf32550672c9e3e774f59e9ae9ba51daedf210422150a066aee2012cdb7645fcaa2f52878071c765cee2fc9f3245361d2376669221193cd5bfcb98b288f8efe40019a06329fd62145fe7a36256e41689ea764951ebf0c27eda4be3cd54ade64a9a26cb2e79b5bc08b7064fc9545aec26a7fee027cb483b303688f7685e505203eb4b46b1e0eac57697cc743636d91f72bbc839a69cc37e1d1b57a56a9969553997411ce04c600bad5020bec1251c5f6471a38b83dafc9d82d0d375d38864023b89c985453cdae29b0d7570d39c494c6c82c9cf0b3b243ffe4bee86bb071b76b0d69764c335b18ff04e9a84d41d710c59b44b281687542e753f245303fb63ad4b073283de439902b65a304ae39d29977170e2409e5d30b87b872a1e53b7dfba1e346e124366163800fd81ac37d994e920a436c5ae8423315843abd0b6ca9dd5c84353564c8c992bafdf4800a28c36df949fcaccd915ce8817d2fa151b8dee05ed01aee06c35e36ae32c9ec98911f456cff7af5c4cd59ac7701a8c6071e4ec3982bd594344eb8e3a1db5bd312c92960355d072ad62dfb427e6a3e5313809cf28e0a5d8ae7b28f2d7451f433af75379ab2a1c47fc9dc65521f84b1b4e9720de3c0f02c8d94652a5352e49b61bff9ecfb9d8fd4fcdad2686c607101118f21473f0dc70195ba9a4e51f53fb0fc1a0b405b9dfaf6f3337141712a15bbebc0dc7d079074819c3d32308602e60f71964596c5fa85a63d99b065fc36d4db4f37e02b06508c0b224657367bc3afc293ea4353299cf85f573ba63995515d153ccb3044de20761425a6dfbacb159c72b16668c3d8052fa14c8df343618b5d0b8f68679fd91d7aa05e18f6e31298c1d908560cad4d4c48f5ccf3ddce4ffd8ecc81b5ce81b5b8f39e17fec2dbdf0a05673846fd47a2814198fa315092bbef55a0353b066159005aabbd38afd270920d3be97df725ae960811ba35efb1e1cb20fbcd3a17c68a22af8adb2848831532960baecfc77174d55e5353d2a7f8efd80fac797792a0372b22e57a91c9767eeaf2742393ccc3d82eaa21532dfc9778bc950aeeadb3dfccf769449d61c721d07a86bd50e7d500afc6dc3a7913de3d21ba6e9aa5891908a4dc38da42777fd3b0b4527da8442985e50a3c719c391b6ccce54b81977695954325ffffdf6e9269eafe626d966884993656ca877e2921341de2b1b07d7590bb081074829b481240315a69dac6f7328212a759591033d37945e2cef2a07a6ce88f83062b8357b65cd4b32681dfc0a51b7ba6c94b7867f27e05ae3b54162889d992e688172f34e9a428bdf45fbe5b6597e0c32d7309c335dc90f08707efd33cff00b72e81e6f83ece88c545c0fa69bb3d08f91565a575e8648212cdad61538eb0d1c7a6330dd6df03b260839602dd5d1909e5eb73758710b9035a62f16989f7860f5291524c1f6e26310cb85c2bfd85f355aba8cd0550f803fb30a7a8ce0ecd1d493b4383d264a3828671dc7e614b074b60b938e48e9979a3219b22563f0e5e3046b10abe44a385251c90e82ad1097264388676e470000080566f311b6b7eea282c2e4fdfef6d125251e4e5b0d918a2b04f870e72d980c422cf1d4d6b84bec6be41d30ceacd5f9519eb099358aabfe6c85f1e2a06129c188623abe24435225994c610d8165aa9f8be45ba081ebbd50eec8226b646d255e730cfdc951499277deba6adcdb4df64f7d2353eee1ee143c8f470ed16292e05d0d0a83c9e1e1060da34ca819f1a48cf4fb603c02985dfc02c2579984706876959de6e28e2d8d50154792126b05af1df4daf6c50c5b4ae1c0ceb10470ee74ec53695a2051e83222e956f8fd6fd045187c51dbfedea69e49f23e28a781da55d49545feb2775cf0497ebf55aaca3aaa348bab7f59083e8bc73253a890191602d4d4f91e010756094a7c0326956b9050f17be132be2247221cc392676018ef8cafb13ed391d2a413305bb38ddeba563153471f7da9bf693c221767a260a6eaa1e91802698a4e09a1dc56eb3300eed696756cb3c759ccb400078990fd6f58890992ce0e34b025023d7cc42575503d8b17f020cbf7e0e574adb2efe0addb4fc5d49b9aee460f4d12b69cb28436544876d822b257382c7aa05271725c925714c30b86209bf7f1ccab5eef3f59a174a3e7f803a1891950794139b6ccdceeee2f017487159e64bfbddcf7a27ca6c56a49066d04c907db135d4b7955ab4a3cc856cab6e7f7c5e85a4405a40b0935ec65a1a4efb3b0e3f13f8b63558e25ddff8b4003fbb0b651a467bc8bce6e432c7b5d0f92739208d135add86e4f375a6e79570a7f703591cfb27f188916594a406f8ed08d47ba9a118d7eeac408b5b65e1fe614fb3898e9d74286dbbe420ed82e3285cce79abb6c53c0beb9f8417e74a5fa72f0da0302de47c287e373fea3e1d4e3e04e75d2f40cf8fd519efe73d331d6dadb00c9643374e9cd44912c1716ad8b81e5160eeb81a9220ddc5e898fe16659d933ff62daac1bb3a1b7d1324d59ec05442d8fc8afcd01ede25cedd32601a49e649a44c0dfe0d3bf4fd64858a40439f33522effd6e034e2d847a15e8afb13657e01bef45ffd9ecdbb127aaf95fe6a54bda1fce5fe8046397e02c72097d0757edc09baaf09403b7d256d49f5e41553487dab9ecb5d604898ab2460790994fa2e5c6df4377db75486614590465452f0a872185b1f92b02d0c27aeda98e8c9ac005bea90377e331243e5d936290265e2aada5814f57a08dfff3036ec2dcd8ef0fb4df9aeac09a9ed4f99c4e8058b804c64ec4405481b8f8b224021223c78c1b298323f1a396622c7663400e6fbc80ce85de230c5c55f88de80d1629822112db20945381bd91dfd4a205d6d3c935fbacba88b116c62b370f10a72eff8c023cb6abb65ade45615597f706679e921bc76553ae2d48f066664a31755ae6f59537d7eb176d406b8ca5d185d1fe152cac17f46d2ebb49331876b3efa26f251bb7cdf8549c22152fb5831c3a296ffecf9dc8fb2b68cfbdf8b178564aa8a7d7bac30708433837a384bb2b20e57a20489c45ed7111c922fc3f587e1ee91537dd826327fd797a2541b48fb84100ec6e282f117b17a0a40807abbfc92421b0fc83b3549a4684592b55bce400e4d44797ba05cad9c4a46908d6e84a73117e0bc7f1a364840e059f711e42c7fb3726be61f3f88a12469464caad9a0bc362702b546c233a1c4329dab9efbabcf625dfbbe4881dc349122fc9d17f3626a0583bd5015673f748b1e12e76b2b8c456a651a1c41c57a5a2244bee6a4b63165a8998f77c75953e08eb9b2dd95a1f9a5acc66df851761af4673048a78d781b59dc43c9705fd7c7e461d64d9f4e52e69b0db9ca516ae98d54977c3709a3986b4ff2b1a493300710baab072397185e4f8353432b25635f55904ef8ba5553587db8c46d8e319bafa66d39727ac0a98a76e7e808d078a0a17b9dd5ca86b4bc178060526f74703e7f699a4f3cef43f35ec44b830f33e36bd1f1a10552c2a24aa49f04b5f72682b0bc26d88ce657452196e882158fde3063766a9f4f3432074d6baa7fa950bfd82bdf00da3b77aad286c5dce3126aec8606807d959fbcaed7f2f96bf7faf597b35831dd42c235329d86fe3eec6b7c68179210f4eb9b1902738c68a68b782e4aa142e30053aa17d1db896aecd501153d454cebfcdbb742613fb1d98dc6e928cc33a0838a53455aafeaa5ed188b968189fabd904b6039d702c3742fc28d316420d0af68287799685f6f0fbda38501672ec2e6ae7885935f406f70340c5dded2a509355b5775653a8ad11064051c17e73f55010ab3ed52e7b320de23ad2e03c6e3a6b8ad73b5dbe2abb2e08cdd330c3b7a8a2e7d8a262e5a0850ffcddb7546487eb5b2b7821ad6b767198c6fc53be0d71f24b64253b64de2cb962591d1865c2b4ecddf8fec1ab5f765b13fd8b3e85f0fc9287bfb7938459bbc8c1eb2343afe8c0a8a61587c12b18227187732642650323b5fe38d3b69e8e500acf3f4a4ada262445f27931dc704d25855ec0ee57445ddd41f7cca03552b2458e0db7a52424a79937fe0e7ef8289ac69a236827b8d79b6a16726fa7fea212bdae95fa607b64897d9d91535c7cb7f17bb28370d6ecf7d86ec711bb99d4757efe14b00610c41341ec1b41a087b80519d3f07fd61a7868a99e3c650a471c1e9be9b2684aa295415f5ceaa3dfddcfde0416271a6d24f2e8121c8225195ac127ff3aa8b847ac50bc00c541bb11fcc19b7bbf2b2cdffd129a2d88d980c1f858bb6199c8a14bc9947972c9c13287ee0140bf5f5ada62abeb1eabcb3422380262508fbc07de9dde73d990651b6487f08099776f81002962c56f1fe5a161958edc4d17f143d816cde9af08feb8e5b3756f21851a48f7f59267c33550382d632e54cd51c1527ee5aba98fc6b675b1d34a38d3397ad4e36cbdf9594c8ded7e85eee0c06fd8eda48d11facc0a3976358cf69dfacca4a92169d89ba7c51df8a5fca8a5da5aee22fbeff91d6f6a1409eeb1ca22b39d30aa35341ec740a30bb4e3c37ade8ee4921a12fe8c1bfdc003d94da83c19a5899e0daec964facf0bca0558d80bff1f9d29dac2fd84434846535a31fa4144080a3570e8ce4104a53f2fe530aa2da2663a0fa8c6698ca872beca3a0b2f96624c43b74668aaa0543fde8aadb6733c628df7bf1199e031de796c1f4dd8df459962ba50a70dadf48fa993f56c285095ce9dba7228d840ce461cbc4fbac1d95ddfa687f7a9e304b5ba9e881d95f20eb6ffc0b3ddd0fc18d5299f2deb100be3c8ea0965a38123702ac665052b9dd9d7d706c46bf99fd61f4298b654ada70fff0bf430fdafbc16343a3e3d5cefd9e6ec527c78e4d1b6584b8e8486111247d233e7c331ab35d48ce1d591c3e7c69cc3751ac734de86deeb23a801397bc65e09555c106e727b124460ac7de7094029b1987b25623ae2f0e043abf80f2201ce4db8e91ba4808e48c89e6026a2ff43f14c232f95f386b5bc667ea6fdcea137821dc299b4b8b77eca94463a74acb7f8067c83222c1c2cec759a10457400a7b7f0c302f19a6c477fc7031baac5edd4ce25d04c821a91c2fe9417adaed21dd80938179b5f832a0e4eb6f6e312d07cd0195fa5e0e5d16be59302254db4ba938dd754598f31ad140ad39a6b42b56ffb5d2a6e175b5720194f5a0cfcd41838eb971ab1a1af4e0011d923e6c25e63211b7ae9437565ed202730b17e49f7e553daff0d8bc23057ec952ad3dea18739a948cf86670b51ecfbfea6e575849665d2a2fc374c99b6c747ed826ad9caca0e1bf6e9574ee022742ae1c680b11aa8cdb29503446077f071c42e4a0fa5dc9bdb8b3a70895510b96c6c4c32548c1c668c644e631e51a284b3aa0f680760e6464cfa7f4611e5b50ae7a3fa785cc3e3a694cf51872d1ca00a75f9e9bc5dc92fd08f17b36d86864fcf82ccfc930af1e1a528b24ae4e9b79c923256a676a19a1cd7f0f292734eb51f1326ca87c6a0f2fa0566e0eb4a600596fd915131b181ec40d7e001595c24f6abc32356b789a73e0a3d49f7b76f5d0ca31dbd4cb542b636c3dd711bc5cf4d349338585bf186607aaa58cdf3a686ad494d0a90fbbda27259f4c88875ba97063c0e0a78033c2ec45c4f1b91e2a1a7c1219289c15f20ba64859c5290c90364049b6a109178887bffe893e1282f2b5cb9831fe146befc1782a32d075d903b9c022ff1c2542d938ac78183791c0cba81b1094cf64224b7c9b0e33d7d95d9d998fce8dc881590aaf7005cda6d8f9bdc7bcb533aaf47ddefcec9328db34aa5d14319b8ebcdc7ae20199cc2e21d5cc1453ec76bde785547df2836830f467c9206838e5804ad14f0d1160a03275f653301875e00db67109d73ed1f15db0447a3c517ea4c3c52304cb6698db15cd9bbe63163b936cdc5ec88a9bd3bb37f569cbe56ed56a217b6d24de56b1fd2f7204190f15652e202f0a9dae5c0ba5d136213431f5a2a7bb7c0deff74f05bca356319f3a083da94eb187585c71e93a23c627d79be035fc03bbcfc96f06bf71a8819e3178a3c1bfd4121b714ed4521ba278100d37ac4d873809bbcd4a0f43e1ef716282debf02546053d667eadf6f84a6fd76dd2856b6c2b4386ead771b9d175bd82d85281030fe958b1e0bccc15ea4670f9425146e8440bb67c71bcee28ba4e39d79251932005f4e370affe1e61646c079bc7f171f4f80c86f81b91fd802d49a87a636394f6ffd0c18335c0701dcfbe58af8c57545dadf43c1855ffac34ca38971b647f95ecaf20b80d409634c2aac9217f1674137d96624d4978792ef71fb2b828a85032db18c755bb04e6dab2b24e720b57b3dcc1497fb3682bf66d8d53b6f5c067c9d9d6c1cdad992475a779eb7718897ef53761ad221432aaee36afd0bba4bd164a99c1e4e039933c2a1be92b1c0d8d782e2d57ddb8c473e2e78eefdf1334f560c51f50543720a2b4dc56f50edf06697bfa383ce167617963ff35d18f9160c7040ae8311ad6917a492289f802ffcf91cd8bea1f9396414d69d579f70c49ded4a1d71b59cef19f9958cca04a22548d4f5fc31168aed8411730e9950e261efa520cc068b7d426fe2bbb47311941c310b749e83681873df1e232eb9f1cf91b4728be03a372dd1594dc8bd907c065a9586bff69f7adf72fe579c180712c72431bbefcd88f1f3e5a874f2902ef023b4400bf732c366f9289f47823995c543892ec15f1b8765035d49604b89270dedfb8ffb997f3d8e87a6908c3e6e4b9557f626011ad365bbd65e95eb7a1c49e6c0b81085237172c23912e06a16504aec2b2fdcab78d92506c066ae06d1cd73551eb60d725189e7072898c30326c050080ee83f64395ca4cd7c5a6c3c736ce7879a48ebd3ea8f619a2aa8b427087d7e5504df4fc0cacf52a72416fdd6acd4ada4f5e3fa1596373be91390455743f21bc5301feaab31902373c3b73b0c667efa4b5ebb84f5612bd2c77bd79498a462e9ca30980b3fcb1dad5638fd67d74b6e4c3b4f848c5f5998b68e293c617dcbf81775e3b342ac3c22a0d9868689f2d4f6fd406a8b4e946acf84f09c682634002abfbaa27da9d82db30c0771dfa5f8527373ced0c6f4fa7d1e8ad93f798218f545152d18dfcb92047dfdb2a0f48022c5f185cc824e5fed218b5dc9aa0528e038239829508fbc65d92b0ef0ad8fc4a938f049a764eaeb1abf11439447b83944a954454277009016e8e70aa63b457fb7010371ea0eaf1e728cd347bee85b217930a1fc8575bd3669dfbad7684a6c44e479a49f719740f4ebaa1116a69295adfa0ff68565bbe039dff235e6cb8b1c6e260b360b9c7209fecfcc90dd8305d75ef548330043d19f007724c14e82f17de8581012fdc48022db9f43f0e20fa4023fc565151870a3ca4ec0e2db3c49d39a6328849e590433ff1ea68cc598a8d5893771cc0bcc2716dd8dbf849d471c29284c22e499ecb6b20cdc55db693535f3c6512003615eedbe35d4c1c1fbb1d77bae66868a1a42aa04eba566585b60253cbd8c7326852dc19ffb41a6d8edd056b6ab29e00b96cfd8040e38818d289344fd87d1f59168ac4e508ccbda7a3deba942493aa13e7fe1aeada2c6b1361a1be69f9444b6f8df5033294ee4d8c9ca4db63ca29f26961975f2e3ec958784d2c22536e7fff25683ac91d2a75c6b31089a59c2cfff0dad271271a1d17ecde5025b9575c420282560ad4bc590d6767515ad218462439df5f9f4f88f5c42ec6c97c56f69ce6c5dbd5cc8db70d17dcb8c0c1dcb671e950479cd84fce515f135697615b3874ffb5c1a6b40eaea616de77268e54c0959fd23b0eff15556e1346fe6451b26b4795a267f703d3274c92ee26081244514f536a32287c09e5e27c4cd479c5ab76669f451721163d354f0fcf27e8d093c942e5f8f14b841153f464e9ae000b70d56b61121819863398c68a600f1db166e2b7b45564411a57ba25c078c3aa0d781cb4433d173194ea09752505becaf62c9eabde65af0a0538f00201e785f17f64e4f016258ef99f176647643a4b21445fa88f7e91ea3272e5b256a9ca49a88699e6e40e9c6f4ab38fbabcecc15421d69d58d778cb80a3389321253b4249da450fd3a7a46fd0e24cd7cfd194603f43433174151ca41783f982f4eba6e95a3b3c1607207006370572b8c4ef779aedfd34bf51bbc492def5880c414db0aaa4241eb2d6ae8121fb5804a64fde7dca41e24a57cacfe24b0ceb4fe75748e4e3cc2065dccf1cd77b6c8c612ce194c88558f763c43a7e2a3801ed48beffd96d02e4cfb59ce0dc6a169cfa7170a503a717fae97a71319bbe09f7b0a50c83a7d2f6fb45d541ba32edaefc35f602d0e96e34c6e38c22369e760c93beab78b7181a832ac8278eee13d5225abe1a8836d5e7f897f593059aac564cfb392aacddfd9b4fd9e69c8ea1e14b8af9346029e8640a82a69c66f1198052a56134554709ef9dbe94ada701875e0c835a3a14fd5b243bf99d8f3bb2e5ff7b6a2f0b8f089a0f9f8d3dde304d8b89cab14f6c700ad8a0d1bf6faa762b4dfd6b6f11e2e552ca949d8bd14556b01d0b0f6484d4d3243e74ebf8d2f442282080a3f4ee9689f6330ed8fe80e071bf7202bd48e8b63853261ecb1e3d07738d5e96646e78321eb0102b87c968aecc306b22078e01a14ad20b2f0be6547d52024ad677a7a82041a91ec40e442eea560181b50b9471224a52c8bfaafc29935440bdd14f0697d3fc61b6975b00238fc752d8aca8f5060149cf57a8758b737eda75eeeb3d7cb1585ef10c77136b0d28f4adc2883a2c61e0aaeaba90957e87cd598c38b82317f1f6878d660d34918adb6165dd9457872374a31d1bb6064ae7dc430b4025575ed75e74e23cc0e617470e7839d1c6da7ead2989e72baa6d30b8bc139b375841422fd902f8f6499b58febd774eead17d2d8730512442cca3fe0670a2fba60e64decdf42fc10131acf8db336be1c118c6d88678d5fbb2c8186a5cd5b923bc63766100886ba149a0dacf925ec5f4ec1c1befcbfdf621c6aa709f7d3224318953ba17659775fbc4578d9db0cded2383479f8ce697a6450b2da237234f8fdd855f6afde6e18a60b1e584d7b2d632f54549c0d9c4469f0bee4c5d4e1ea51703478475d21b3565233f3ce2609eba6dc8c52cda5a40c3978844c292915d7d1d34b647917eedff4bbb5090020081dbb0470efa261936459e1d1921eb1c345d0a9c5a12f5bd04ae393ca463fee7b5948282b158d8c98144eeee1babf8b6cf0f6d38981a8091c7562049b8e34b7dbfd945353311c2bba23a90512ca9fc4955013cd652a995f3a9765db9efdc3b9a1cd5038e45a9444cfffe8d9c01cb7c1ae41887dcfa35835c7bfb885cdb10eb8746a36521c47fde7c32c8107548b3823b94dd9d2ef0dafc66f9904aa17d0a37ab520d93f9391643258197ce77d5cb8e0082c38bed8bb178782e6ebebc2a7c01bf43e3a6bf3e842248aa9c78b06b7f60bb89165e43fd32049d799514d09a12a11f54c5ea75f9b71193c0a8162bd978804e77e1e19a16681ed9ee608e3cf386ff0a5d252dcd18225723f137bd0ea8d15d1c134473373de0073306979f021007d6d435aa536fabf708f72951874206557a500a9d921cb8cf9a6ed6a23e56c6ac43dd4b6ef71040b35ad38935ee371946fdb2ebac0bd22f03fd15cefb15f2b20e279d3857af200357f171069f6d6afc698c511ae6833176f2620d6d48dfb5068c5860692988c0a05fa4a1b4a0837e4c846d5b117d4b0817445be5653920cd979aaf6d1165c1ea666c3bed4d5137dcb1a94b3146547792a119574c09d9277ba1bd1f5319852d29becd10e623af4b5fd92ab0ea8179e553e80e5fd9e62baf1389da0496a08c0a001914a02dd8f8e98068db97968c106a5e1e63bec44d5f341a8e1308958fa14f5daa0a19618c294eaf0f360f5a11960d7206bb867871c727acd95905b0643c6d459fd0a485d6b943749e8be4c6233bc31292b04dbcf38a21f644c4056541fa359185501ca14b95319f124d33b7b6cc9c33859b6dc274341675ad3e2b0e31cda296087987538114745f9da5e2e011952f26bb7b527ac1e3952dc40270d146671de361fa34fb6d0d42cb4e7407257a49b603a0d9ddfc8879287d2519f492e3f536fa40ccd9b1a51c298259a627a08d0d212549a10e6adc608e0a5df21c2ca001a0949a6c7e114d0379cf0750f3ca15a88f074767078e392a27a488bb04808ccf92f6a50f4663d511317851e77bba0a5948acfe28c0c9fa2ded835d3187386570f42dff09c97535e2d77c20efca7098840561d9a43ccae963843d9483f1d2dd3f89bd154f598a29236f5b835229df7527302b80dd4f0757aece426024750c06ac950eaf94e8ebe800d73d67df6dcaa968a212b9e9d6d70a86646f08f6df9c6e6f1b2eea09f39a3bf20d619ea59fd179bb05807723238f198112297a1aec9c5758f0c352c70c97b6415703bc47c7d702b95b2c390c2b181dd13ab2070e045212633125a23e23ebfcabea90b91ec2bfc5c49475683d7f1d081b0896078c05982f67d0d830864f403e8a48ef936b3e60a958e6a31580b0bc4f5975328e8774bd2725a01e166b057182bd4d1ff888f2046f247896409ec65176bccae41644f153dbb7e7fa5935cabf057fe324bdb21c29990b75fa26c69fafa8fc38e74e9a6df92de6202179ca1a53a0b9dd192b7df797538b58101bff411bfbbd813a7588379690d2a0754470ef8319611b334ec2b251de4d215aea82bf927fa34df9866b668ca5b02a31ce6b4d2984d34a770f80820865af30494588b06fa7f7d1a7bc273d1a1a0a70c3afb5f3ed3e7e8ba61daf4c2d17986704248339640132b261caa447115a3d258ecdaeece8a183527396b2d586e8106acc28e6162b036e7fa82f5dde4e713fd4b41760cef3dd1c49cf314017426a7f48b5a3cfd46a30d122075419b6f8e9b7fb18c40b4e5c419749ad628d78f0663ada0c82248af9dd8de7e65b0190e4090d4818520c37f34f6fa0257fddff73f4040e3e24cfada3c373e2765802c38d15438b685d82f7720b8264f8df2a94469efa97180b81ea06a8608bdf1b6bb93b7e6b82e5f85833ec6b4decdb859d15f2d55feb55c6e2a3fbe115ce0643bc6d22a85f1e59cbe932b05e0cf5680777087de9c2894c6d461d864a2eadb3a6861b5482c49be01364506bf1f54700c9d1b80fcf76334089c353fd54d27b8e85075b39d440a3099a20e2707bf5e2f40177cdc1c637c79da3a917b207dc28822bc9fc818f99e458d435793950dce4e5ecc09050d92cf74e96d47e3abb9c1d018529183637a8a8872836555e29a8ad794c6f6e7148ac4b381d47cf4bfbeac05a4948ae2fe7c0c8b75fc5786a9ada841caa7f23a07bc0041755870706edb59e1434ddf9caadeba589ab7ad77494b67dd21a3971e69fda140a1d2c765ad74357f748e166d51cbd881d32858a12ad532fc370ab669f15da8f3535c985a3030220048bdb81b3a27168ef08b8a4a313431261666f5487b6e6316c45cec605c97cc5d9e9c42ba853e6be62c79bb31e8bea0573e6af8e551e87448d7c5c8f25bedb5bd3f2ab9609ea1ad4f9cff5587ee661465dd7c7a47994b94fe2e6790826431d4f99e0e412879acf1d0d39b5701c9d9abc3458f78c88fc799c128a784291cbb936fadaf7c550b13dac233e00aab951c5833c8864eaf4e99d6d9353cdbedfd0253b5caaccbdb55aea124664eb6c0a92ddc0143495e3a67111bb4d69b3490e0ddefebbed2c72eab37bad272026c30bf464ccc5b07479454aae9afd7b7e950752aa05ab28a891aaa5a5f58465d1b289e45ad5687f471bbb7c417152bc6afc9634ba411466d0f71c3986d49ae95ad83b676dbeedfce440b5e662f1ae39e47c07bcbe4515afa00bb06d66969cd5efdf92993ca36a1340bdbe530cf26f2b0463d17ae418f1c6c605ec005eb37854094d2674432aa3e7b9f6e4998aae10220b46ca3807f11932ff0ef2f905dc9de2373748cf76a09a3e12226a5b9b1b933a33dbeb8b9bee06f1278e658544fd5b21dca6fc2929728662f8c69c26041cf748f5fad273d180cd9854155f524bfcda849b1db17bc6be0a08f684eaba091f21fa6e825e8a47b9ae6cc9dc7193f2107018d9e72452ea0b2783717885bf504504305f178ab327ead8f87d36c0f5d0aae92c90036a68f66be6e1e1f58fffe9a98d2db7db5a6200e59606b006bf4286b6a639dfd2cf5f736f9e64856530493e7f31141ae47e2d5cf81acd3acb724c3620de0b91fe201721ef8a48b59d0edea33155f45bce364d6ac8d05a49c97974d4ad2d29700e24bf1929565f21b17d22bc5e648e70297c72c5a03f7238a29aa73009ef796f8183fe66d0334dccc0205d9051388e086bfc0fff10ad55d5b0288ec6f6b437fd00a964ff0692381ea845887dadc2216723f5383064011cd563e29d3df38ece9575a0032dbab4391c563f38410b64fd4789242158bf684fc3d48b44ef3140c3a8fb22b497b67df9744aec18202f72315e76714ad8cc0c802c2c7e18a189057c153d2edecfd11ed8e20fa94b46ee7dd4050c69a2c48d599afa1999e9df6952f1599198fdef4334e01385ba83371f83485d460196af543be0dab9a4f8c3a254986041abde5cfeda5b8b3440d5043577a376ef1ce2dcee5a3ce8dd9eb991fc1dcc73a386d8eff7c77935e497527834154ad1bfa80dedf2eafdd3ec3154b218b0e5c89528d1ee0735049ac920d42b3e2625c30d7ef54e7f1d91b271d8ac311334f06925c1fe66d796c79120f127dfaf8426447219d52b5ba807ead6c08e3032e460f9dd2ecf827642c49394a132bf62c279e610b7f1f4db41685b7ec396ae514a6ecc5fc26e59c759bf090daad12eaa495e9e8b93a7f7c11f1b9e3bcc99b2a3b9ae0448d75ae182cd6e4d3c79ae72b9bd9b9ce0c210d85efb540e60af7dd8777e1b460fba8075f7205c0ecf5afeb97ecf0c1abd9057e6d807eeb11c00de7bb877f04208dedda030ae9d950bd2d4397ebf52adda862408370fbe77d7c35459d5f77efac630be11edeb4ced10b5f562a20070be4e4df57e90c70ee4b96333d5b8cfb01a8865a157e749021c4f24b7b17079defc3f83ec139247ebd80cb0b62f2bd3ef68ef322d903e8cf10fd6027fc0cda89cd8a597b8cafac3c67786e8d7d9c9b9d5d7fef93eb276fdca0da57ff7c7ca319cfcd20da07260bc4327e28405e187cb8c4bcbbec3c3ebdbaed549579381363b91716d445879208c2af76e2f152628727e319683b3b87ef126cdcb60fe858e257722ce3c7b7209dd473329ec478887a7511a5800ec963f4f6588eadc780091f18228009ed3230564206de931eacf803bc6c975e575b0b4b548547f3051fabb11dad288fbe7a2ab130af5b238814c2e34ae4ee3da7a2526b20a771af5ebc9b8536912aa1179e2a5a3c4e9f58b4b3a1bc47d38e0e578d6f89b560bd711ad7f5a5500bbf3d47da8715e0aa4bf05f2860ac8aa3a739d2b91871efe99246ad329babaaa0b5327833522d7e38cbd9392456de4a9c0d2c68611c9ab1e07379b4e78728fccc4d7c37e33d255dac851d7e5ca9a8518d6c556d2d89d9dfcc942d36020697702a7eff01260c23017e1ea04c2b3a8d25a2a73009dc2654b26160929162dffb87d3fa3c6a9d8b4ba33db94f7d3338d36cc75e1b1776ff3498454ab7c127cab0d648a9c758b27c7f22c621fdfa1bb1fc7986b1a93602625d6e11e621c2fd0a62285b5561d6e8c8523372b9dfb56efa8d4e4e25fbc7c2d754ce39dc5570de0411a3558cb23463ddcb6aef76924a6afe220fa9f6860d39405c42c01d0f501287f371b9499ee67d531594939a4acf107deb3cd5ed8f0a8fb1f9888dce168c98a2c543b6e982de15904e83b3f0f612e64ddd2c79bbdd4b152f8135e8b84d5808e10d9459509a40526d99e341f9af4c67c9dbf9f399c8fa3b0aff3e50a960c0d5a304d91f9098b2f9c7289ebb6e5405eb9c39412b8d57af6010e88b821ea180361a66c12289f5082c06854d84b0c14c29304260322abb9f0ca4676b96edb98032b8e4e565d02611ecbb804ed1bf15980f9847a76497ccb67b88b0d984f484cdf4b3ba1f2315edc6428454e3fda12a150bcaeede1d93baf06145f250255815f462c025d997f223d7e7d3db9af13fb002a2779ba173908dc045d4747636a55c2b6a94a8a5e349b5cfdc160e78acef544355063cf87d59e169c602309dc07c61fe633613293434a0d9b36fb7c4b3792a3ad7dd5cc409a2595265f6a12547620d89e997313d95899b1617c6251ae431bd68c6e6f4f7249a8c504394048116892429b6fd01bdee33b578b983fe50f6fc63f9b23721f9584dfa29f80c32e0cfd20e4a2477df803fad2f558ac11a5cea7df727ef0f7de9050dc7a47daf67d786f54be349c64e2b88e5f08d4139efd6025c98bfd16d71292ab554f1ae5e3f6dc8571ec4314da45a21fe53d45fee0ba16aae1c06c95758612e9a266413c0b4262bffd9e6640c6e488c878b110b71e0fec6682c9b84f2949bb2a5412d61852995517697409978ace4c9c7698a3f0ddc1e58d4947d0e8b130ca7b15d9ea1604a83af9d02ce9dd4c534b561d3011db3e0a3d9960611159f90d83b069c88e68f9c1102cc1f7d2a1dc5a16fa2a14b31a928444a1ba92d30b30946f64d4febf7e92092d613fff87aab08e2977e5ce4f47518f8e11e5942b921ebb3b5f824892d105e8b40bd1680ac287f79eccc90863dc461493f5e570f5044e57c8793ae634304dcdcfe7bd3ff40ea472f139e90d3694fec15e3dd32e9ed16e9ff60aa455da9a6ade1dd6f837ae637fdb1aeb892a0b0d29cdb722631b8ecd5b2c446f3265559bede1beee9631a12b71d69c871f121ae9d1f40b8d08c54edc4f585deca23d06adea26bb7d0fa8a1ad525a9cbae47ba3c5fcc9e991c9e1e8115db7d040279a8335cd09ea519ca20c4cb068ae9ea07f7484e128556cdf43dd9dbb98317829f310637958960ae9fb3a94c3028995adf4c6d8ee0886cd5bbc0e76730ce26d4f27fe3f3a634d288cf4f2c714fa8ee1f1a4f9526e7bf24b620f0e651279b9f14cd4d2ea11c817e30be84792a80ee94b948d7cfd510bdaafd28cc7f30e20e0f38821443a5cf92cd2296734cdcbef34a88a709d26a0d29771285c5a2971687ccd85bc3ba663f35e581a9ef6514b6d72bbcae1d443277742b2dfe078f0de9da7f24da70ccd7b090eaf95c6605323294d9418def47f5b3c62ed22201e19d6a242cda2c4f362a758a3e2c2821ae957647373779333d7340cdcaab4817e17b106fd41ac5301fa19c3d68eb72cfa7dbe880818d84e52093b9619a6d6426b9a7a3c57878f86a915bf38b08a20f87cb68129c98a9bd027f46d410306886ffda085bcf65f0a24fb48fb08c7b0e3a87be5b87d3efe0604d6835dec130e7779633a23595fe5d5454f4ede0b34ef4b56649bee7946f681f8b57739b035281b4ac4d80f7db40423075a8044052cf775597231c77787f8cf5ab6f0bb0e35db91a9803f3347f730c7f95b7db13238bda4ab9bf3c028018ed405784cc46c47fab664b328351021c0308d557fa0d882332006b3a819bce6e7a83a2146e212ad44c901f34630fc942d82136570fa1d527b4b9c187c486d44cb673fefcaf7d17ac551ea903d8aa5e8afc318f257de05fd44e236bcc38de3dd14bd1a40ec195f6ed8f5297b841581f103a35d729653e55ab3eb290005a48719de2c51d08c5d3880f7a3d3994f746d63a3d72b07a68eb8efaeb0b75ec8f6a8bc670a4a413bdb0fd91d55df04a1d5d12ba2df2721a5dc822cc716aa3439a91356cf88404a7644622ff2f1689ebed45d117126fb387cbf49fdfaf782219011ccc6b550ba05a06ac85b700033711c051ac6ed1fd70c9b2058792b70ba7e86516ac451158b852187d6e9ba894d1af95f10f6987ebd921d7f137d8353664309a218f176b62a816c5f29fa05eb68cc5d4349fd56c2421697fb888a2c0d4a93349a76100b1fd32a174b75c4315d4522788c1782af6a57dfa6ad1799702f8222e31bd2d054e881514ca4ba32f4c5b7a5f36fc5a9cbc0717cc8be8db891874e9061786280de5fa45b2c6d2dd3e23df9323d41c9342b245dac9c9bcfda70e584b1a4989863adeff8d84bc8c846b20d48b1920cad08a31b4836ddd37548d8f3376980be851f1fe737bda13361fc1c8c235429afe149d337b3c0f8ad5af539a07055bd0489a05050d1800b687a5134515fe3ea44db930113aa1d8e5045e9d5086f383eabef8af5c5a91fc367bb0137068a014780a4340207a6d9d511af0aebd61c3178b08dfd2fb61b8f9feaa76af0440e72792556e0dbacf7e1a2158e83a82cbdf285f9ff2aaab30ef7473bf027fbc21be8bda687001eae7893fc5af27ac6025256b6564bd9a8ee53fa5eec75853032cee9dd7fcc441ccfca67b19930e4406e6a805c821b8e03b7a2b98ade191fc8ecdb340e25adb515eb3af145de219b11f03d658a52559cc78cd0299a0f57f9abf1d4271978deb56935205fb720d4024b413ba4267341b08f5a66ffd8222f0fff54a88699ec2cb6e66874ca4da68b73192b56c24c45d5913c6f5214b5f5e31fd815da9043c8c4fba07c3344e0f91dc4b6bf86032b07a8d7a2abb0042915f425cf37c686aed21e38671180c106d376b9ce9eae13437317939f09205e5e7a29eeda3d33896073421e8d255075145fbbd058a93fc6b93691f522ab0cb754e805365490512d5f3a8b8e1dbc854bb0a5976f2c0053cd431f2fcbd354436abb6a4242ba9219f758438e3d7056bd913b530c91b4838a92f61fa5086ef1156fda97bcc579d048cf20b1d14553f6f44d2b6197e1894de6223e17a50e48f55acadaded360c507d9b0c8d503005101cacb134baebba7025caf0fef06241c277b268f6534034dbe14669060d4380f57c49fe3f8dd2eb817a708914385715744d5cead34610fde4d0c537d6fe3938f84a724d6e02c3503755a8867eabee37a4116cabea41eecd011632c3ffffc1170376bf80a34c446dc30007b499556fa1ec370a958eec6bd74aacd162f0d8a8b0896bdddf5c2c0fa47ca5b6bcddc40afb9021615eb92fd1976514c3512fa7cc94d46e40f610e7036aa053b098a5ab2c36102fb67e99529d4a4e8552b051fd974a837abc8247e9e63dca4bfe42b917c058f7a758ad4e1183fb93917ea816b806d5f8d334e0019a95d54f993f2a005485404890d99f65a0c2ee81aae98b4e74d30b1e2dfceee4b62abac313f39b4bb7b86fef1670c0aaaf8e56d8c28c723b759e9623b8691d3ebbee321c56b3cfdb4c37727f2bcaafd51c4d075423790a064f1cd314d3bdd266b2f799309c37e2c7310d849477acdf6d5c12d041d00b1d0fbf4b4ca920d618d241796272502c96e039110a9f304f0d5ed851d7002e324dc91ba7ccf67904dce2ed18b1c269bf22f603ca5da21d149659a1dd445cb511f47aa34121e91d79c9abd6dd01a5ea7ca6108e5c7087d1b308c75de7c0d18728cab63c1492a285aec7b158f1dfc26ed6c647aaa3653f6232b399179a1d2257adb504157690f4dd3a71439ef7bcbbde72dee42db7d6705fd5c4b486c2c9bef0710c2fd7af7cb322031fe8a21a2c15feb176554655e52c8351692c40a1b605426fb661c122bc08232f6f90cea9878d5e2aa3ab56b02d9ed59eaef945f7d024fd3dc1bc3573c91915a2620eb479947af959289009c4438bd08d9c41bbc72354d00f1cf673c3adbee3f69e47f284a8e87d6fc92c016e3ed3bc11bfd8371af9b5a4f322db551676f545a89d310d1d74efa3ee9ce9912ccc31f5369d2dd20372e404dc72b0f0cadda60fdd5e1f3c5683652924f169697f980cd2ed994c95cbe38fef9b6b92b80fa3ebc5d780c3fbad90ee15797d29aac4c8919885142c11ea3acd89d82074e1761d9ac2f8110c594383b8f78e2a0c6d6a05f2555115f58216f785aa4f2388a088b591b9efb410317bab4ab44b58b0fbdd2949095438abfc4365745606042f03145bd5c11ee4f03f39653955a6771458586e126156359feb96670975bc5207ae95c23192c002d5c29cf03d6fc49871b58dedfe3d235a44c3be68a57f2d552a7383cdb3b7153450297d497408c301e4dc27a98a6ef091481c1215da56017ddfacad87f00887e420ff18832fce048b7579d8a1abcf4f594ad3a3af79f05984e2224bb67df44bcad120e3b3706f6f77eefd1f00fe385262e90dd5852dfbdbff15c505e374a71cab5dedac3c3f6f363d91031f8dd7778523caba43fd12a2b2aa92941df8194ff9bc42d739f1550aaa859535971ef0cfc05bb8c0025b959034d293f09198e4f86e3d436b0f6f4283869b073ed5ca1e0976bf7c2a432a4862c516d59aa8ca0c8e50b20bcbe08546dd4de149905ab4c54e3f81b28b3832b9f467c798e64bcffbc66892a0b359dffe0c378b1ec85d03b30f3a96647846eba0d881e00d92fe61bf7d1cffe6050b067a9573191dd6cd4f2da40a00903fda0468f4a928ccb5fc0af5d2801bc78d217708565bf5502a759e0592a029888cb2f79fc9a2454bace9ec83ac6fc86911057f71f18bf83e41806e84c758c89a751b73fa8998ded1c407ca0faa3b81fee36f5a14d88812de55d1ba2857ea9d25f452bb08848d75da836c3f449ab9b314ce6b7387deaacedeb8a012b5f0f1e8ef4ad5118184274def4262e0199c1814303e78f1b32a108aac8bff4ed214e64b71743898b3405f7a105ccd6f88a4a6fb0bb26208241996badc4f11a63a22f8486a079f40c7eb6649845b64c04d4c0696e2bc798eb3acad31cd110d2380c091739b5a8dc4ac55998e7d161e271c0ae91f48aede3deef378512a6821feb4c0951df97bfb21bbb15e0a7d8bb7e5d17536196241c5d30323e207a17fa7a54de2da18fffe77419a28fa1e22d580e3d1d12940f6cfa5a44d32b226c01d63bb442421a4b13ac8ca2290c442bdf7054e39b124b0450ff178afcdb2ebe7ce3b478449344486be233c612cbf6783c5cac7619718843701bb6062782f273317ff3d056c9502f07d95ee13739d83deafd52f80ff1308300a39d9a6b4d026e4ac46b3566221569511b40a1bb0d009d1a3e319f73e35fb943adbe3aba81799ff9164669f572b9d7de1c7f2427c8fe1bef434d67951a31e6d9db18b90b86bc9f10d9a1ce2ddd524668eb1991e8068cf5db3cf3243b706daae3e74d473985760ec332d36e7a7de78e813dcf64af3e62190336b113bb97aadb1e395494f7bd340cd6f53c0dabf1c8f5fb8ca43a31bba81ff5076d9a394d8dc6d585799b677a47e8d505771ecd3d0130a55848d9db1734c7007761c07019c60c503730da326cc75e87dc7e6cd7f26de2abf4294715c6ef7b75d5a0049ce9b9de3c9e8508fb2e301606acab1af42a14833ad4b590e8f892d0605608cae171ce5c13a2efc59ee136fba8c556f59f79150dd208d82f8f2abcd91ef1ba902d78f618cf760c42e6fd142bab91bc00c74a0493af41050484e8d10c98c7aeced24a96ef362034b02771da692af5ecb71e6069548decef1aaa9e000de20e0003fa7a802117ef6300fb9d5254217657c7b505b40eda82811d02838f49c9b283eacf6799344b5634c0f7d0920f9954f25cbd6ab3ac882a6ffa567d4557857d52c48aefb64da7db7221997aae3d286264fdceee1bf4469113b3f524db290c9e74262e621cbc636d748ba580c3ed06e704299a8b2249cf38dd18a97feeceff3d82649ec6ede22e055c81f70ab6672939ea2a251ff687c3d452c6cd2de219ac721dc6ba5928aa9221f7011a39da6238d89d7fc09d731fb7703290db6fd96d80da77e1f673f083c80d15d48b3121428703afc4a7872dadd0fa0246d3d5ece390bf3ed339ffb91fab7e73a50ded2d2a3a3b6a40ac48988b47f374e44c6e4cf65760652670b5c130f982d820df4324bd5b556eb45509db7cb0aba14e3a219c52d2ddda1da15f5a5485edbb202a47a63460a4823e3c51feea86565873f2b2039f0981ee90edc1bc88eb2a8e8b1fea46f17f9e567819b3bc221faf625820f158f50a5f14961bdcd32d4fe41ee78f6a940d5c0bdaa98f76d516bfcfa6df78da9dd21ca817add0e2340db07a2b486870d56dadd3f2acbf899f4906198b4aeb6d56287048c5acfdf11030261afb86e697f62df1246503c789b0f77b936137bd2816cd71ddede33257f6888919b0e7e095f48f814a75afa8bc8802ec23611af302ebcce04e158c6ef6c4ce453a293644ba6b5f8355bebb4d8a9398ecdbaab4c5284099b103eb793a192221cb0e099ae7892fe8da20d1ab6150c62d029991bc7878b6bc42f00ab7f3cc5d033a31d9a4e141ef0adef98abed0a5807edab54497d91c622ec3a1b5e4b904815ef74edd0e57fe903e7593a0c89e731661f3ca1070ab709cf4185fdbee7ce785fbfb4ff140f712b5fdbdb3d339e0dd4c5efbcbfcd5439c4a4fdde896721fd70cfba8379f82f467c7fef40756284d2d195443c176dc6b064a4c0b92fd1a4c8b1e3acd838450b4f7889784f151d957eceed456926c97759ea9e463287241c1a3b52a228628d58e905d93adcb19c1f2202d9f2c12c4370ad96fd8495c0068ec646eeafb68ac1ee1bbe5c758eeb7d85203da484c413a4f1ee4854ad1c04d968de94ab99a6ec75557f7d35e2def251b653dc5d3470014f3c5faf1c7db8137b48398b9286ea48cf5b9e23c48cff0bfac9ad8446e7e5a5d3e1e7518b0d00a877b049e61b5d32ee47db008dc29b3aadbe379b6d61602aeabe9e14e42f765133207dbb893add4d8be36c73fb1e30993f35e9ff79c9e6280876f471e07e9b98dc7719913a9886bfa6f8da45e00b80a37e077ddef1d5e972ae1dc14179437ec35847e61b962113d6999d2332b5c3f423f6523e019c0a6bf81154f6cbfac8d6e4dbc0c2460643b834190343d53987dbbb2b0722b11faab4ac750d06f601a21e4fa1522eef4f84866a02b5b344a44c311f70654ea8608f9155dfb502c4bff9c01292bb411f803bce89df2fddeb7c501736a3cd1fb2a8976ec5620284f19d04045d00ffacee28eaccb09324904559774ade7e8b894df2803d633c63a57afd99aa0a380a0c6fa0c8c4bf220a65578066fe6520b5329785450aeb546312fdd6c4c2e3170b8ce355efd2b61100ab379d37dd08dc24968c31ab5778c27073e2a8ab24388cddf7d7afb4ff4f92de5b9a82c6e2d7ae610d82eb0c480b7b3f440c29fa5cacf81efa97d0d0762b838d8656e2d75fe80be079bf5d2e3416d21cde361a9244d53196585a6e912c8b72fb4fa643b5e5dac74901e7f02743252ec161005641782427c0a6adb14d8afdb28ff73a979500b5cb571b463e095166506effcce32f12d2fa11878b65141b5f5e4c2992974a14405586eb0264a83193b426ebe28b29bb38ff3a39c191c4b7a272f82f4abf17b1f8c97d4852b6aa7aa329d4690fdde2fc53c5a11d09778ba008fb2df34049a4aff42a414a3c6e6c71f640ba7a42af19b06972c7f4ccd96c97a2e00b7c0da59db6258cad5250afb2ecd8dc021d0316ee9d522e759b9b8210b42de5b236d270966f77e715f7e8daf593404a09a066f07e564828c6a71cac9e3118ebef1215bb89aea53dedef9abb4af0c2566449643f235c9d6d567ca8705d5d55c78641b6ed32b9842212f523f06db3d9646904e259d4f2ec8f4ea09d0692a1050b81699d43a35947fedb6ba0154a932750130d64e556eb869ef2c8cc1c37b2c12c7158f7d3caf66a833b3c9a0473c41d7fdfddba02cd244c598a3cdd9b57e4d16b42ec6590543c7d8c2d479ad0ebc7cdb73f767e83bb1ddbaad0ce17b857fd3f1e43fab2cd4b17c1fd062128cd4de84ca00f255af8f7abd2c007bef5122cae7868b995d6a63eef7f5e48158e556f12f81a6df5bc7967883d6e55f26c28e4c2abd2424231a52845d3d4ac801ecbeeb63a33ec48fcdb2589062ac5765c35bde2c6a8025b2d95cf6306e1888f9218bc94fbaf2c790883a3209eecd044e673cd0b84b21465b53bd763f066f1c410e7eef3085e0b8cfe9022a2c799004e9fa9b32da12813c8191ebae38b1ebef167858afe07a4618e57e74d53480a9de8f4cf88c09c9957f23aad146992229352c590f27f575eee87557a7bc3916e4abd841a88b3d9eaacbcf3ecffd19081e573020b4ea36a7fed4f6757261eea0e5688a9a0ef8ee44d02d77b3f8a48ca1416a10f069d78f6f60da647c7261b77527be471a8d4917158fef79470b58f727aa768465cf119973e9d2483ba57eed1ebb09c99bdd413a5ef1aefa5195da43b9958fad36fd5efe6df95d87cbd057b42a5fa866ea9b3203e0a6b17aea40ed7c7d6e46e682f7878118cf696079e61b26ccb2579014cef8b037ae558b10ee29772bb3a839d44565a38609613aa42442404220f969312c07fc8ceb3c230e566520a03b3bb0da4eeb6d8f205c62a3a5be96960206aa1f60367a6a69f1b5e1a9485635e08f23d60971470b25b861f5bf8cdf11a8bd643fefc243f46fba1cba0fb63d7c3511f3417ccd71950815104c74cf03304bd626a8cbfe796d624bec750a028dcb4bf92bfdfe926a627c9714d7833d5c21f09f405d35926fd14c2ab24dbe6781d112e4a6d211623530d0ed287cc2df5b407b8924254821c9fad8905b183aa9c720f6e6b2a4e85d0fb6c05f955873bed2de3ed1c8d48b71bdd1349bf48455a46d40260507b2ebe21e2d0f36588ffef5dafd2c0352f3bc9773dbd71c643d86b40416e3924be997dad7d6ccc268418bd1184727f401bf0bf0e31cbbba1554f406e2cef812d1834497641ab4384780f096d5e8bf63b2ed9a1db129c66dbd595d44f00c99ae938bd1a7da753cf76b919c1d60211d0cab58ad9ef123e4a373c2e61b3b44071be50ed20178ebb3401e0d2a21ddaa88b2cfb84d07d1654c6232a820b7d75283610f4251fc75f65d2717ce2cfd11b868f3a918aac5bc00de2a239ef14e5507a6bc82627a8646a86e10bf8332ae0c37299759959883b132399e0bb6fd849e571ba31b29604513d013ef09c3c08032d5cdf738c3a33cb608338f5b086a1ac5c2ccb436d01d80ba3194a8cf1e0439f31fa21376acb3b9f1c932cbf841894187ad9d8e4edd17967f73d36e7a9cf9c356ba298fff284081cc03fad8ee6bb9677f9d0636db5583ef4024274257aa53c0e5afb5d8abeace93ea6844279f0c3c98b442f65119ddec6c03fc820c07af8de6be6c44b8a80623ba265c03c4ae175fe69a036eae02d38bd2f81ca8999fcb6e23ffc08fbaab32b16cb0a7e5ef2e02e0585059ab228a6cddeaab5463e0fba0a284512a3ba63e05179ca5c33f4bceeb61b87163a648282f693a4ffb3efd0eb6c8cafc02d15e9516fb5b8381689970e5b308a58ffaaf75f9e6a000830d92fcae571e6f0fc89183c572a10d1967b828820ecc3e24938cea120bb4c399947410b9d1c63f957954c9e0a573e90f67dcfde3f20f8533610a09ad0a6dee50fc82f3d0e68ddce40e060de28ff5aeae62b10aa67395b912d3c6161573df3b6eb85cec046a34043bc3195a1cb3b547efabae4900c43510d5528aca5356f2195f8442d90cb93c0785c0f8fb48c8a026178b3685e1818773616a40fc7e0f213eb9ff56c8ff29dded5e51e93a96ce63f1bdd5ff567de394cdd22e9ded1c58d7efcee78cc6e5ec90d6fb393746d4495a5eec700ec35c6a57eae553f307170dd450b4851633249fd595ffae3720a40c4a72ee7a327a0408f33503b2eccae731c8d2986477d3601bddfd1edccdc2c0a801fd80f5b666ea7e5bbea7d1550c6d7e3a02a73325c3ad71f71532ee7221959ecc3bd9c5521bca16a30228229353f1dec0f44a17e4f3068918211605774f1efb5c23d5d10f846a104871f9cfa3881c7ed3073b679c5b64e1f9f475fc5102a618daf729d399d1737232d4c859539449b05d2bae3865c69aac41df20bbf1bafcff04b8ea237645c3e88dd6896c2f7d12b91bb362d02c933f418b033f220ed714bdf7110cdae3798f0a8b808d1e73f98fa14bc337841220a7775494c229fc56e71960822ba08d0b6258ec832bf27d2a3ac5c5261ca2ad77696cce8c7b0d3cf21bcac276b0f019a887152a27da27c808a7e1a2bf4ad093e9805b97d48ff8b1a4fbce16a3ad21dee397dea419737be5ec305703558352e82414ce316f3959b72446179e7ff1ce76afaefad2c19382fd76e19bcbb55cfda377bd59e9348fe5714b4b3728f7b0f2f70067dbe98aeb5aac7b7bc1796fcaefc93d5764151c4c7e3bcc97efb6f4d40cdf2d35cf55b95a92fd2a99e5ff8eebe9c22b82412201a204bdbfe47cc402c56f03b867c9befac5f4759d9e3f26490e9519526e968ee38f9722bb9be7a598e41b6072ab288aa2babf0a601e618f3be51154ef94acf5687ecd5bca620197f3124899e4ea39ced655a6cba075123e12af227f262cbd0ba2d5536f5eededa837c305c718e0e0303bfa9478a3099c708b40f454da35a9c8a7116916f21a88f15f6a10bf0c264eb2b166b491cf907a40894f8aab8f5a01712b98b04fc605f1469da52631560ec0c8f286262e63b96daeddad458dac76863acc399e647facac9da91547d0fadf446b71d62a59ba9c942af39e35a39c06c4c9225030424f830ff1261c73eae1b5bf38000adacbf8f397d0fdcf9063c6758d6bc69a92651b523b527e8c6cbe8158dfa92b69e18b99cf44ee1ba8847e64a165dda242364be640c7e2838151302538385f202624e1dc95939213e229bf9e4ee6c9fa0b497c0f78cd027e9e3456fa0672053fde5688508ccfa74c485e54f9fb757d6260d424914ef273621fa45e0c32646d70a27eb426d1938481339719bd43bafc83b4d84f8215d339ac6afe2cd29fbf93ecf89eb5c9247abfe2022ce20eb5f47fde5a1710bc83de3fde1ddc2192fe2726e14d6b38e79328aaad883fcbbb553e4f677965560a54b3d3ebb5b4c2b1f989d4c2c3f3d7242a113cf2e16d444c978d6d63a80fa44b163f9215ca12d637ae14ffaddad7af755cf57c000acf2b01d4d74bfb9a27ed646676304b1947be77f3db44ef89fa781ab57fa85a1c502b577e1863c59f47d1dcef89458f8da8898d84af7e431bc6a82f433f96b4995a96dc6a80c72322eb3abb0b6cbfaec4d35069227c18fa56524fe0804b8c61ab123e00c3d95934921bcd81bba8a43d885b8eb011df773434ba09b3e13cac2993331546cfacef69c5b3f75ef15e517448fdc402f309d6535eaf2536a2757dce2f34afdb4252a02752d22c080614adc0d11533b55cbdda92e6012245b09295e6ba70bf530beaa1d1130066fb8a292d30f5802c2124398cbc5dc3b05061b00080867201934a4895708e064c961905382583a43a8acdfdddd2f7a4570dacb2594e35fa77fe85aa93b77502fc48abf155069211700395d8274af787d323cfe85d3870b9ce4d0322b055a28a35f96f280fb2c5b29ea6bda5ababae40887626ab425d47797963ec34d95f6708801f6966832883f02ae68aad8d4f2d62e4b80a2a3c49459f7e4a9c11cc2cba68d2a565c217d2ce1ced37d98303650dab850a0953219cdc68b906f822a931cb81685b043e1816a32755d3c2331da5dec6d6d6ad2c020d3f6e485893d754a6363be9b4716c91df972189b018ca487089f5abad3b03f9da9febf838d255faa8ba640e715ccffbf50bb6ba6df786a814eeaf2b08c23f7b35e9f0540bc1efddb9af4840fe48ef78a9eed49be38c72044bb229422a2ab060cac91c38a48f5c29708b1994f364ef30fc7a1fb9c0cc0fb8e5cdddd088db5ef23dc0fedbe0ed8f814490e8327a10317d06da7bc8c664380b3ba91e4752d61cb0fd5d4053b0c87c900ad6db61c0345d07cd2768982e7aad8040bf18d4fd5e97fcd6e0dd3d3f7759350f53d83c43ed9095ca8a74213a384fc1ff986d00409c1d26eacff010f49474dde72b0a30f5d4f2b0d49496b3bff2f2030c41f2d97f43f9fcf7a1773100665e0549e392e37448b0cc99e9a8c774d11db211a87ec69c7b4bfc9732dbced36ac03f041d12fc546e7e18eb5886ec6b0dff04d9b023b9b40ef894341cbeb9f1b128052ee12d38272374e1f02c2fe9238f11224375c093b6500914bfedc23df70f9c2c74851a6173a21779a84d609ada2a94cf5925593d9662d8e0394c1c3f1e3eb6a16280bcac2188cb42c828e2eb6b552e0cea45a33cabe66974a4afb75da0d8d1f783f71a755ebf9f04ef3d9eaf91b63f970ce817c7cbecf6c9368d831cb45c7089b367943541c39d305699c0470c77ea5f18768ce517d6c8acc5bf1065e1821227ca429e7974e0e1a0b134db48566eabf084f3813abe4f842d9475d7ee8f733e780dbc69ab7c2301dae46cabedc645b786a0dd7afa759a98f9b2fc45ff9fb8c112b2911fb7e348dd4afc945a58631bcdbea610d4d224ed21b6d1e4db600d3eb62105c38127e410a631e1f6b5e770b61042ccc5392d4851240e253e19d6d517e3c24846d7f935202264df06d4395a9494b6ba57f17c183fc53785659b0e4c11218ca8815b0cce0cb201aefb07facc208124f90616535f827830447e9151fc603981d1ed06ca414aca7ca05cca300544c0255acf565ac71507bae9748887a7a3e3c2c652a7f1d05b5430ded3869c9ac924db708b983903d4ede8ada8a67ef578840d0dc870822e1f0e446715cbd93ff97f5f0cef8f12125abdd17485c94ce8e864fffc8046dfa3903ac453e8d9122d911d306406fb0fbf4cac6d19bc2e31b1e0bb21bd58676a6e7b6c98dc3b22ef285526cb22371ef902f8b46efd67b9966c6a5f434f255500c72dec628819f4efdeaf856d8626253b8c400416ce16be840751ad01c0e30aea6b622c600007a4188f68db41672be7e985aa3a0f8e222bcd84d5c94bfc47401b0e871281951e84293078668f2daa66d816d170d5ee134aa0977a5e5b0fc6bbf98bb12a4daf1e750f38e9d7defe7818fa99ff2e5d37107beaa06164542efa7c72adf8bd4d4945b801d01ec00efc47353058f9fa64a33d172e0825dadb498f4b9fe1aa12b086e067bd37ed2da1942c3866ec3372479e306029982ed293811b47006593c4df9eb311bf8166d82662e5b164f01f9dbac3813015c475774052c1d95f11eebfe589a5ed4e613dd1f56937391df0a658e4b3c511c5c01bf1297abfdd2f14cc69fde085c7dd3e931f22c3ed6945c37f8038b76c48b3200a09f80cc32e57d728830ad2ecc26f09344a89ae0e5ece79287a6a834cc5640a51df761020345527b2860e41e90f0f14aedb7bab1caca9f7c9b005ff18ea51e503d2c678f3c948c756aedf42e8ab849cc55f115e7535f6cb50deb9dbbf9016d461e33bcf767b00c6db8359dcce5c316a6e5f799248907318e5081530fa065db76df4a0105dcf8fbb528e44a100c3eea2d5b66220f9ba11027ccc92cb50f205c74e4803c41bd4d1617e4a7df69f2c86743401a61b358ca8542ae5bc9887cbe862506b37144a2509ccbb373b3b31d25dda5a6e7b2b04f24d437e328bacf540c8db85f806370368b470d537a9cd47daa49b5c6f93a79350c04dd06ce44d620074eb6c6cb1cbe8f3db85f84ded731cf9cb5c86c593c189474ecf458f635fd05e26f545c8898fc281a26829388177a8dd9b2b47dd2f5753b846775ba0658f0f659be8c0303db36e252ce6363cd2253c7f090e176b38cc1ef5f516b253b7bdd0922fdafdb1d6f823122f60a74381aae744d98231bc16ed9d08bd7cab373bd69a05afc41e8694282e79eeca75c4be4bcfdb8a8708b4c70402a3afb830d487758613b299e949057cc2afc23186601d1a1f9fe50a8cefcf9e4417a4982dbffc8dc4a253c9cd3ed7c34348a030e9afedaeb537b6e9163621b42fd0396e1dd2e954ef494b07785ac9aa8f1b0d56e1dfb724a25d9ea6ab09af50f9f9838a5a5835206be258f7312c6d7113dc614c330fa19d352b6cb879b4722f1c8c52834bfc4feea7a28afbbd56d4a0bf8a53c0eb4a1aedb99f6c585783b5e60e69d69a189b5902f0b8b6d7cddc85a88aa44345b65e5f686ad8d08d7ab1efb5b0bdcca47fcc28980ed45fe509344811fdc8f69add77642d441e6d7567f6f6102ad78f75e210122f6586b8a24b11a45b05fc5ceb85bc99fb7a854979f6cc397d473c39edddd651a22e4d9823fe5d8076f685d3ddce55d342cc535e41d2cee7a313691ffbed986d2403e7ae4c9f69895994abd27e579bf64c8e647d03e6e2858fe515fd81a6f78c73d5da7e9e366614b1486452464e08f0e8e0e2cd96c081eb5af931dddbe2c23569fb454a904a72f03cc83bd39e52e07565d32a638a4db0bbeaeb77166de034b0a50a18442d9bae6e7deda08a9dc423d6c22b1b84e81bb230d5b47142b5a3cd831a6c38691f28a522185fca5323268423330a6e52aa33151a78db8cf9d8dfb47e1d51d8df4f19122a2594797996a38ff29e2fb71187ea6bec4954b83554e8af79d70d4d2fb34d1a3d86fa742d46153a351a0b3c96821a006f5ef1603c4cd1ea576568e65c231ac519b76f8bc41c608b00926d9d9fe86d7eae50a6f0c90277e70265a07c43aa6f1a279f9dd0fc9fb75e741e52907b9278de00bdad518f07ef6d91dd8b52a673a66c1121a84edb70b4a998c469ae07c4deaa27ee99aa94456238d122d975262f778ec9036fe91fde943d5eecafd1a9df4761682ac0093a8c8bca0f8a215c7b631091899c8a8942dc860b599235933d9f2a081ea094216af0bb0d52a39d16a315e80ae41f288ed5983510ff4279192dd55bc324d76a6db40972398dad68c47b0723861ef4cc7982b4b4392ee4cd55acb03e1eccfb227bbca52188bd7dfbba0721b9fc6d36a71dc2cccc17aba15bc035a5cbdb8a07e78b8be0634c56325a3bd5060af73b13f6f2640e3ac867eb2499c441b206be6d883868a451a875ffd209ef36714828a46da0d3a7f0d54f461c7526973ed6892f9d86713ec19aaa6827d4bad1ac53875a1319109e244c5ab441dc1c5d38c9f68046271ef3f09f249e36a001ab8fe3febf1b4869fcc30ccc9cb00e5a41f4910ae35de8ceb8da5d9ee0534dec09376b0eebda86da385e32cb96f62d241db9aff636d7438ba27eb32326adfd9564fb83d814f508de71bd9f58405ff59ef38f960e2e174e542bb7b93d5ba5ca4f5d81c8589a070fa2a6a083ea73111b291bed6bd028ae418ef0b06d81d2b8f6aa88148664e4d76b21e0fe59656b5d525ef0d2b6874bcd94750126af18d683ae50ca8dc83ccc3a1610c460deefd079c4cd233e96e5fb97a15f1646b4e2a81219ecd50f31c0e7f0c947c5566753d3db9802e0c35dd49cdccc0dd771af6b1497d5e927c6b2c89242e0706b7cafc49389de3f48a51024ab0aa818f23356c2545e82d0d957de2ade038cd0bcfa04a5100d2744c59858a9736cd4e1e3688f9e3dcbb863c542fcab9db2db44820e08840a264cb41b28976475a1b3e5f0288dc91817d591314ced10a7181d3a8d810881e81a4df2dafad2bad59c16d1ee4acc1802b541ea1f1945798565956d497771878dc12d84defd00ecd3c6bf0b5cc4e4c2e19980de27ce61d00dd8f0009a3bb3c73c5de60ae4aa0cd8c44e278c8493406cd4e2e2091925720d5c4a13afeace79cd77865ca69cef2025ea1169614f36e0746628b79f44f413d3794e394f2219459652a296a6c399913439a1ba3f229d6f0aeb8f6335de0aac67d9ce0afd94cc877cc58ac1da1e984b40972cb8421043d4fb6bac5fa6a0cd972f8d9fbe64682362735e3712911fb8413ba79fd1aa124090f7c53393ee3402f668f79479c7b62ed2a482e14c0fa44f85f8c1667a644575431ba0af40bd91d3763b18a597da238ced165bea855335814f27043ce4233a4216418f4dbc63a093006bb855adc8d3dc3f492964347d253c01e8fcd828ee298e249beca383094da0fa3d60c8572e59cec2753d4098f5291432d777021a3f06848db5fefc8273c67c4a7ecb67faf1995492fe56f16e2ec967b56996de79a3bf1765926b82ee4f01594510d3f8a3bb58f53cf9a0b0153c0d4aff120a656108d606cdc89f57fd5b0a15b9bfe8e4fa47c7db268bfbe3e48081826f650794cccfad77e40c81e514c1327a7ba2850af63a6fca6457e66735f5b04c4a07ab6eaa5a8e3bb02f9a6db9e7641965036d10ed10c608838e27015361486d7483f0091da7d57e1be3515fbd06f05b756bed68a9471c85c0a9c0acb2ad9989b78c3e747bb9ad24ebc8980647f1be6e06e2877a24473d7dace27678dc8e0a21c5f196e9d9e098f898534796f87726d196bac2b4c861d60275c9dd70e5915ac83ec1c9b6fd2962da24d659bbacf463988cdd2ffb80b56dcc60261bc8c69338fb18597875362d566fe03b6ddba4b2364ac0c4414512e4d8ee1f163b4256be33c32132d0c77f3a0f7a9e75c1668efc11105d412baaccf9d9295fef82562009b34503d8621c35525f9727698c7e28f85fe7b09efd87c67429a24f8c369bc122eb64eeb99efb490991ff5177203783f164468fc6c88c437e040b63c90efb82be08885c8b281e9da8b44db48e160acf4ca588a998353492074fc836daf2c2e8ca125e1c85da8b91025ab9858643e236be2898b83e7f038582ce1b788e2cfd3ecfabe766a1139fa5de5ef2eaffa94ace2ddc4862b3a5d09380c1032f9a4baf6853a73692b8a5503712f3bd8a5e10e1b5ffe173fe2cd93d0ee825b5cfb8cb57529a6e30103a170029ed174d96887891ca58bd3190d9ff2feea8abf922f884d47ad05d445bcab1a1d5bdb4d37004dc569d78166425eabfe24f1a63cf0382f3000397a77c1555194c29dcecf8ead441e44b876e4c9ab345d16752bf06188430400faf9870d11537d31f29a2cb0c779e22c5a53b32c4e95047f36f048381c16cf24df51e101fe3d318387649377fadfb749a09fd4e003d1fa97c6b83d9975125979bf701940d0bf2c0b350fb2372ee9d65ad1c4f297f0818e3ae85ace7d5d2c010d887a5b25239788cec959fd07d30c78c681c65f56c8914e25a0d755685a41cdcb63437da8c3efe205712dfdcc35f3ace6ba5e3c37ffa92e7e321dbf3b4453b06ae77323b46eeb664473da344eebe9b66dd21030a2b098f9ed141e88611a5b85eb83994bfd6941b33d5a0481a8bc38f776251723136c0ec169c3208e20965ba4cab84e46553870d860b3efb3705815e57426ec682f0053c1b338d62da953064f635581c55670753de2266c72a8d88f780f113fb5d2465e52bdc6fee5de6720b54b2cb14792a933cd2e096accde04768bed67bbe453f2a697b3dc4d6310d0940c2cd7966dbf324279861049eced13c51b4ecff149ae4b9505119ca0647007f3b1a0d31de4f7e9498a4d4f952a7fe142020d029421db3af8a59dbceb71213f792159c79d5137c5bc8e218e618760a6c69e3d10271fd8cead2635fb9640d586d11b463292e43d46136f76725e02c29b2a11e03f721169599aaa17076cf08288928286d53caf827c783322d79192c18f14dff860444f1eb00472cd47cf9385b9105ca0ff549f0320e85cf415f0a7ee09b6a86e7785b1c16191efeebf7a0c63148abb6e24ef1e5a03f0137000e3a89b8f7579e7545e1b8ceb6cbf7bf94a53bd4317040ae7aefec4960788a460023d588ed87f53b68e86a6772a16ba93505da5b3fdc5a697a8e6a55eb3cbdd6cb9fc392256450baf6667a311b588e1788c7cc3d6ef544b5d93c002ea2919a12375226c0e70ea0150633023e12c01186ac59e806c3314192ba98a3bbe22887914c9384fa69776ceaa28d03b1e382e15e65fb2d00d9af8eb8cf7081a8ad19b299612586bb34d3bc17182d03b7799f3a1c40f7945ef21d01a59ad3559e0be0ca9395b9d521591b02254cb210f2546167090e15b2f0864fa9e5287141033c84d734af6fdb4f48e745d60106dd80f3ed52730e74478299d48cf9582ed8102482c296696edc63f8f3fb793c4a12ed2f98b46fc23cb94b041dae1e5375ce33c18b0cfabe4fd8b8267a58a8e91bf98821de763b69cf4343014515b6d93aebee8c1281e9c5dfbcd70ba208a464106c2f16a2085931f141dd1a8a778e64782377ca68fb20793bf03ae118a9f853edb4c1055e51ee25cbda9b144925a1634bdff148ae980f5239d3e18c92a2b69dfecca087198790974392f7a952d8bb15d96cc2b6c30714bfc05c5f41e6cd5179ecbebef9e7708016e8e59e6421bf8efeaee3ccd2c101bf26206f8b322d77c23c40c326b54cdd6e17aea2b56497f97e0756fa8114864925f45bd1c0d3713ffdd8e9d1b708ca771da55605c72dde9fd9e15e3999062c1f16ab98f88e34fe50e9872c1a6b0c3368a387ba0cffbd67c62f3ba524d61ebfd986e934ff241cdae943a145b8a767b3cf9d1b81527be5e0c62fd0fd0a00bae8f72c190ac06cc4b9d150831a6cf155dd3a4c37088028bd2d3e1d80f1f04629e0210f5d10f000b0607c2e65fdb18f5fed143f4558203c5aeea75403ae8b6a27500e3abc342b2ce7823f8e889180dc9671a86376e81f00df975c7a988b362fc3f0ee50b6b0a4a4d439f454d19b3261a7872b406e67391cfd30d6c9e122d984609a627de0162650fb6a6cb6131f6c97524287a6176092d8a6baf35c180664126b12c7b231b90ab3838f0e4f861a6fc0cea23a4d813f56711a3c067f48f601a25e1c1bbbf2e2ff9074d7750b2f4e20cc918c4501533488782c6a8ae54cda49b1d61958d4a0f8e194574253f2a6a07af33dfc272894e4fabe04b6440fc80027306d345671008ce69e66fabf1345d8fd91a13e63e568c27d20818da169812b54d0a7673b18231067150b95daa200b53648e8a21b061c5f48db193ab9f0a73c1b0bb41889fd4376a408355a18bd0470bc94268ac2fdc42602e30d809789c306caf96108b2d26d344217c8d52e2b4c77f36c850a40e5ae3b4d2ffa1c4175603875f5769ac6204a1a28f38f115a87ddcb43c2812eed9b8ca02978c9c230eff30cc50489fa949a5bbd9fe59310d5b659ed66a597c75008e92c4db0d4ac8026ee74b7b134ed77bcd512feb5aa9957064524991b3648a2097ab6f318a34575b894ba853021c0dd615a16abeaf3328e5de2cc8e3780eed35210d1b32bf8e347a98ac240f2fa97a422f66b7868cb165252faef81835d5b73da7145bc9a30764840825e4a896939edce9b95a358b75edfa65815aadfcec92ba5fcbbc91d69f1ef02ff8a011ffeecf9c6afae5428292184a10e039082479d828539035d66b6a59dbaccc5378bc387bc28951f32510c428310bc99cba92c5ccc465071e57f011acff7f3739bc896bfeb0ab072677a220c5e39dbd08b8ae7e80e5106827c6295ec943b004e59d7c33e14271e1d906203466a77a05652debb1b18a5621913860133acc6333b1b0ac69666b90ebf8eaed38852fb49a8dae540469fa3b2cef6a11a7bb4f881af24cacda4359adf3110d95c599430905228738f9d31c453b17df762cf1f73e9a028fe6c6ba44579ad121232b6be18fcc0968747b72328904ca9bf2e840dc6ac22ebc006c92048a9c9c11fa8046f37a578d79f6c55dd919893bfda4bdcde17bc1e1aef0df4d60ab03fb1b61ff55f3fb7eaa1da33f10d428f532a5ed29249190ddcba9f82f1fd571890bf7f0d41f583abd71b9dfa3a7d2a3b0a59f4865d25fed43002cf9ec2a175c7f1089e7f22d45923e68c07d383e9c605af82581396d80c3a93526783c73b352b4d0755c37c407aeeabce4b6a76e27f068144f6e9f6da0cedd0b0d41ba21f74ab18a91d6eb5568e768151495916dce4c14f24f5ab44fd091d94a925dec47048b49baed4296ec299776a3ecca76e038d2c472d99badc0b06922502dfd9cf2cf0f51ac369e345f67f4b11a34143b4ba0e750adc8ac87ebb7628479b0b59133a921a347b5a915e457237918293a15d96276974faf4cfb13f4be56714e1b64d611dbb5ae9ace986022c0cd5f2b2fcc3c75e69fa234ce73b0871ea69a0bfb2ae535b171ff07201b4eadee795e95ab6329e00725da4092851f0ab872bf4087af29a6f0505327f59eee09224cad804b6c3073c1498adb73cef061083f20785d29e58cdc005005cf71b11a4e51f9b8a8629d62f67e741380abe856c793c3ddd565849ea2840b446e07a6ddbd52e0ac7f394bb9cb3d190c26372ece7d9398a8024900373344234da32efe27d881ba6fd5cbda3eefc8258534deb5e6cd9e88a62bb9ba503ad80c73cdfe8a06b52e5f41fe242aca61c833896c031f6e6080d62463cf216ad83f2d115ffb51f134028f882ffce340c4f498c24bd32485da99df6f1ccd9f5f16c836280dec0756e95165976a036fc429efb9501a90954879f86d5bc9c24bfac7897aa212932818322085ecff3e136ac2219a298ebdd03caa62b7cd7474886e9781b68e7a0a6434fb72d3969bf1f2867ee6370ac89654608191c2340af94bc6896f198dffc0b37b486a47d606111a95766d2906af3f9f9858645cc1696b2cf7ce481bb41a76d31b1ddfc16ada10d6e12c0ac2fc89ff14e4aaf9159e2b653baf3aa296b6d44a414c6ce3a97abe81e39caaec09d89a1c55bf641fddb1a437125be434abddc9b896d065ac5e49dc012376777959bb776c8459226ab97430de9f0adf4eedeb11e5656e5d04ceeb27fabdfc80966abcc5f80094bb4e05eeaccbb46731fae5c2a829322d1d6c7cc3c49ba410e15c3efe9a3164b926f109fb6e30040925a1b988e71d98e90fbd68ec674c028eebca209f94421de94cee6d3b50e90c33a0130679f409471a9407e393d5f238eccd5231ad33173fc421279431d014392f1256d1f9a1c8787ed0a657c031570c9ac0d4196c078ff16c24e4b3ad60393c25337a563320bb5f6b2a39b5a979f6ba95d7ce17d6164375636bca269e40cebe1367963dc4242de0af01ef74708e81a32d5ba437b4fcf9aa0994ad0d6bb948e4fe017b51ad1740330361c22df9309f908e816e477388a7c95119ef32b120412433b200dd0b6cf0dbcb07bd8623fa404e95f641ddee0ade0dd9ae0431244dea1874224b72031a01c30ed151397ed119cff8cc38783377e7d429a046b047cbb8c068bbc8641bb18e92cdca1a962e8de1fc6382b22fec9f530c67d4765a668ce5e3f69f0f6cf26d0d587edc8b4a8c90ad89c57dbaac84981c783f7bb3c2ad133ff768af4a4d7a6fff7da427862fbf304d40c2d8f2b100690b0c02b2c5f0f3aed10a8f14fa5ee9fcf55ab12bb6f43c26f0fad45b616363eac62c829f336dd52575e02de07f98c43316bdb0f1c066b5b9347a449eb300ce4c11ae204ea89f881df8a9699ef1b645780eeaed43156334b742a7015026bd61d4d0603b022d0fc31504254fe90e464fc05093a21b8dd231e201abe994c8da1065defcd633f9d7c2b954cc0d4156aa3fdb9d43cedfd75b4771fa805746decbfd8e50ec5435db25a4149f238570f66ebc77936eeecaf766a86d5fa054de7830af60db7b22e7cfdbf3172a53af5d0d52e292caa6c7a2f5528e7a9fbf2115d57e9b750a141a3c152558a0aa17c623df3843cd6d044200dddbbbfd691e2f0f040ad2ecf34d321fd219cb0d4d1dc2bdfa0dc98eabd061be82ee5dd9a1ffe0ea1cae4ee0b99b5f2b0e2d7a975c98be6424d7f4c71ce7dac97e3d9363a36a5abd65ea63d36440676d156da0aff669a4a4846ceca90e050eafd205fd859cf3602f3ea999295b81e1a2a0226f4bd33b9bd76f620119dd5a53617f3b8c418b1d0d00b6c0cbf1efc46374cb97b025793cc7be935defda006a89ca0aa286e50ccf0e09a8646dcf1b8a63996c1225c4be479bb83dabe0da6f9a80feee1b8d58da3d44adefb7ff0d035675065f8f6f3ce4659dc98426142bbe3072805b0e7b1b8087b45e500ca681af11256a5e09987e0f2fee8cdbd272816690d7e138c26034fc88537c5717b7da91350b7f00731ea57b131fe2990559fb7087f1300f262f143ed2dfa722c4936868e3ab11dfb3ecf902f1a1ad4eb63025c89248d3e5cfe8fa525bf8e3fa7c2d3d1fa90ae1df8917bf94ffb1751268b5773d09493077217195e73277ad3566aadd8fa80dfeb2c46704af192252ad23d876d3b91cfa8669e92dfa8a5edd5870b1b07095f6bb18b0f5de6b19d53feb4d1bd960ecbf3347d084e7f45fee8c1c9f7ce38c30d2cf9e38fb3bb4b70a0d7789f78d9b6279391308d528d81f91fb395afff08ea466536e48fa5d6f29b45201714d8623d5e27281e016b59b8dc5badf4e901f9a4dd21c2835db6c709c209cae96fe2309123d8f085d9a83794f19049804be9efbdefa10bf2cbffb6c39a0b5dad2fc1ee0d1f787f7218b8b7835d3456ad790c4b048ad083f644565e8f7a40702b855e270240d3b0844b55b8f466f54601ce21b20cf6fbd3e441d691bc22ed7c6f8957045e3210b94f48f2b20d162c75b93859cdf55733caa280b6153f7948acc359ace4fc9e074b31b0d446db2bdc7966f7a76ccf3f745fef69f24cdfc31dff609a7b234be0ad363c578d514df87048fd04b2cc2b25d35db941a2ef1bc0d13565e4aa4649d2f8237ec31c4041a46b15045fd87f7f85c3ddf500602d93ca6880dc13888d8463af1c2d532f44f0281af6c669799f39742ab370920cd6f58c299cb3316673b3eb6afa24f5259f075e6cf036e80939ea9b9dfce2493b3488f03df90340b215b7c8f5c44d34cb96e6c081830a3c2daa7783dc9f1daf6339c61874e1dfeb37ef7c5bb8960aea0716f044c52bc684c5a8a8daeae8494fcd116666a729129d449c58751d9c3f4e1af4f5349b8b107dfe0a1c0e0bdcca362e1508e0108aa076ce83ef769f162de0f304f2a6f807bfe6167b113cc2541c9fa6f63f61ad0611539f623bf21a6504ed2c0b7a67e67fb4d615280a3b6410e3606f4b24b0d05b1ff09bb983089fd3c368d661f86c677dd66cb20391585e072924da7dc2c5846f96432c8a56b34d78327386e46fcb3e21a0b9ddd57660c87a821e938fb970e08d51c98b57030c785f8d14aebfd0b51a33e23fa498085ee58fed9de66399f5c3e21416a157291ac30997d2b8eb9986d3434720ca45eff9b30ef4f0db219a7b7367e41a51c9abfdb116275eefb0508d9076c0fa4bee0456d6e50be9b9cdb5b71e8ca13de0766f1cc039c9fd05f7fe79a385553f03725a1770b53ce1c993f78ed6d454c3d8ddbcef19e6717ccb7c43ae3cbe54b8e61800bc124f93b65be8f86945f970f20a7aa3a45d53ae319fc8fa374fc13259a99e118752387d95ee1bbb114f8e96d4bdec3a488e822eaa76481d60a29c52e845f6f8493057f54098046f9caecb14b46f1728c4ac1c552b326f8ce062aa0dca5079e4121be475540d7cae9e8a20708ecf89ab4bb3a41dd50cd12043f7ec73a0d197d8d399848cdfb9d3b3adc53c74dfb51e6533df6d661451e497046970fbfcc19ac1640e8ecc00cb6a8ab4cb3a2eabac10baea8b1a37ae6175017da5181f03c66ac0fbd6fa9d0ddcf255d1b9062e3b43d8b2ff84deedd9ca3b4b4ed2476d19d412a86d55b321fde4620e7a6f5fe04301b7dd52d32ec9ef21b5c8c9f91f44711271a87e46c3a74e58dad4fae585e26c4e30ce9ae38950f491b9dff934866307e4885db5f5c3a71cdfe4ea21dffcad2c8c9177ae07b206d934fd8d09cd1d7b5df28ec5b21156e88b067a826e97e0eaf6a1794dacd03cdcf26c50df376ddc7bb99030d5a1e95212282d1fd227a627d46618c41e483f3a732c661763fdaed53d567b6fe9ff5e0b8e4f3f8eab92b63a782f5d110c3b039e251c9b0ec7f68561ffdc0383515358a477e2cf7d6280a0b859473e3b7ec1d2d3e17d9c5c7ffe413f00d40571c8be6388f82db3cd24c6ca5a735e99ffcc2b601f39c28f4cd467f4bd2f9e133c3ac13941f0bef6facf7b5676ccb272edf248315226defcacf93e2208eccec94d7416435bb7fae02b35132719ae9eb0c8e7f5bcf494da396f13addd822e03278f289b047e28f48edd176864d91ed10613d83ef6db3c43ac184e332d83f8dec559ee2d9e8e2608becf02b155664fee428f410decc53e1d783c09a9393e09e1e173b58e726156682e62587aa4eeb311eb9616a4f1a56bb06d2da89a39fc5858e466d6d8a2fb92042430506c8906f7ea29629f7c2eb76e5cd3245a91f6e1009eff04d84a14859bee8d129f241aea0bdec108501e1fcd7c89a1ede39f7bdde19b9a2aeb7d9246bc0c8cbe8372a41737e02997cb3a4f8840da7ac764b2315b417dbe8bac053994ef2c3e8c4b8e092baa5360487585a298dfa37a063c8156e3eee28e537bcdbfa95752e6d2bd0d1be0f135caa2bc0f3757474d64f3883d7987ecc08ac9c187797af812b79d3f1642a3f4ca7da870b8bcab0c49eff06f31feaa12fd56d728691d9d33ea50db5dc1be24469587accb3230cd66e29eb32d213a4e1b1bb00de1f05f60e80055daafcd3e4c2f8a8564135c329c997815d2b24bc391ddafa11a041230b77f6ad384082693b80848ad681e9a5dc73cdbf97d06b5020955bcc369c2f7cc232b411fd39bb1c23c2f3aa787cf253ec41c3cae47c4e301be9b0267fed9783f584f254f14e7b59cbca47efe47e0921f54dfef92de8f1aea80036407e1dcadc104290b6477f42645a5e1842581a8c02e28531f170cf805f5881f5ba4bcae244feed409ad5e5bbc4c14b6d58144716279e4815ddd752b1c507933b0cec41b3920822025dda5c6a3d968c71299c3d3e35708ba316683a0777a97eb8631e02a1a588b61d95b8cd48f336919ea9072942abc7c1e8efd46c53dab3dcb8d38b1f91ee0361c10e826efa082349f9b498eaf6ed66d3e9139a25bc4a44c89d1650e4213197c44ad4c8b55df4063556917a4966aedbff83ed1d22f95c10b2b3a57f567da4ee548da82ca179ecc1a4a8f2b6fdb925a540483fa7641d09312b34f5d91bc8e4a242c1b59f8733358c6273f448dca469470f3d73a0e6888619876643d360ff73f77d0fe61dc20765f3020a11c37be44a4b5dd55c134f6e5cf2cc449e9382600b82c1d3b0dd6c367d1ffd30f437aa75699e57492b7c9d173bfed75cc9a66044abba906464adc297f1d323500db24ed38dc27dee6ca1fc99e1fa37c8f7d4fcadeccf8ab3cb3da4cf55fe65ab965e5c120fc4c3fae628a084353053bad1d4f6c1c02bdb196d08810f9021be3e758df453756d07f7a24d13cec75b5308dd93180f04f56fe7817e184c13ef965887b9e26f781bfd8ff57833f127faadc4fbb34a9c00877a4117a072f44db6f1cbb5cef6f94de01c52c53530cf787f1a4243b7b830f177e1376634c967e06b11564f439c00a8f97f3cd4c36fb6ce738098e11b5f30ecb2696bb98dc87306786ab4febbd8efd5627a8cd9e33975d7294db626903f047815865e831ae2350aa0ba781e12b380ea3d6bccbe46ae2955c30993790300e87c73f173cef02f72f4acaded76f1474454bb866b96522113168e48c1d04f1e3830b79fe0af29ceef469b66e752c39878dccc44c899466d1aad3a23a0520f3a45de86b3df69cbf4ced8f6595e9aa3670a090f73cfc6ef5941e91b81d0ffa2ec311b21e9da0cbb6cf5722901e3ad48dbd26df7d6fe0da84adf5c58e938ca2cf17399a63843256405786d37f7e9e2b1dba99381ee19bf31cc8d33efd098f92d7adc9ee43efa1e21534eaac402b23d2c765fadc72df3c182ec5aa006a2f5ddc4af64f2f65e27843c293028b9dff1b015c93ad2d245f45121a86c93fe26c01f985d795fb10a6507df56d13629e72106fa380d80a49b3039855329dc5a5407334f407b6a62f47c559c2361d293b29a9365edbd922cb89dba14e5398da85204b94d71e2a96821ca8837747d716a8522adbd5214bdbcb80e4075e15612d6fcca9bfc7087aa2c5c406d122e20d09db5cb95665901e0e7bfe61e03ff3aa99d10f4360df5daaf75b5811dcaf8b4c8cfdddd64c2464298f8b90b905ade8bdd4d3cdf0c5859ebbb29ba6768d6d59b4cfbef706c0713d4b141ff8cfd34a2ea4df29cb6e8d2d7af3c234fadf366ff62693f623a750264cb961e28b242ca7e5debb10f2023c496a0f4340d36785bc25acd6609fd8e0eeb7f2219aeb800a22a19fc3e25d0b6379cde5749250b2485a5d44d86a99083c9dd90523f6dd92619a837c16a4344447f64baed3a6cd175c7b8fd005def39da1bb54504b6ece14b8c2ee00846bdc3a769666ecb23b70c5297cef51a6e84b57bb5f82b943c9f032b95c516e67c9877a57552385dd5248fde76ce28ae29ef5f99b06f934fed22c8995f2bede22b575053b4f5d488e4d3eaed6ee0de0961107c699c706d821230de27af00d131c02fb6bf612bc0865a146656b626a972db169ba54c3fcb42bb820fd4aa2ccd26514e09c710bdd4dd6a79ec8a1d014171b6ddb55380820e868b58998d05f78de15a3b887ac096351278647168d69eeb4d38db7283749b2287b3730c022d1e56683976e0cb9d923f5db1d4e605e13fc983a1ecbb6db4a1a03f2c251ab4b356e9f30d0399761c160f18f70da9de5bbe72334e56973e212af7075f4bd598dac7d6439f508497ba2165dd9a2337440008cce7c5fec9bb0ad79a9c805c8b10a946b943e8e06597fe0a1d33695607d7fb6de63679f6a826c48ab8d950f5f77ad9fee847639b10638384e1e423fdf8cf04c84034822cf99aa1ad7215d569df29fdbf9dad56494f0160e84e2559304468c24f47168458bb14fc09d230bf0bc147bc8197c139193e5cb3812f300a3c1e5244dbc1a8e250b46785c6d06cc100dccbea3f24a89cd0d0421f5d7b05234d5b378307fe4d3a15e2018e4cd5f4024106869f7877f2f71613e9b0f96adf5634a62c4688ecc22a19a4db95a4a66ae638d8c1480d76140356ab8e2f0c1d32d49e121275b5700f4254026ebbf052559e160fbdedf839a02c729ce38b4c3eec22218897f88550b930714c9a71a6263254a657cf2fda2e29ea624b291005e08316318d33c5363b2ebe790ce156fab9dd8cb81e93c755311396816e620ed340b61b73994a42485e6a38c7f4cd286476d36d0891ce29a9992f249b5ae1d7e42f9bd3be7f9f7d9c2fb9aa1151a5239807aa1741aa876190afb74c9da6369deeada87fa63167dfe5c420c76c767ec2b9a241c1b9c3739c49772b5ae96b9d0429b8826b61c44469ffeadd062cca5b603ac22fc7854d3dbacb6b14cffaa57459b632a32d2ce053b2b7f82bda1b47b07163f74800a2bd2abeae122e3b85c7a4850e8408b2a4d6be598fe1416e3a3bec972ec57f0f53a74632f0fea1eb771a72b38ce877f869863c0f01b433682cb8c8b6e0250a6333d26ca20844646f3b566deb67eb955f84d7ad120c3ca98423563d456d97ed0a1aebafeee06a81574f191492df2ec563eecf8e1e98cdb9583f92804eb2f7e1f62e7c14f1674eaa2d9d61ccff3a5776d197978b2a97ed261afc4369560b2e4006df113cd479a03b27dce91c93f0db9e535b7f991edf5eec67252aec761e3795a6427a698640959f4de8d31bd99cadd29f83080e7c57b353596ed50535d9eaba08207ea29be914dbb8b4a5d31168bc02660d9c4619296a74a74fb979c6374ed21a8154acd3f422fa76b6cee18eb908e17bb3acb5d20f656824626f83a7007919104defe913781d8d7769837793dfc242ec574e47b5c378d8722d4cfc1df604bd02975c82efde35a24ae283ac163a58b8c4eec7beb274c267fd85091a23cf5f53baf966aa66119c7f42cdcf028398a3bae76a35e9c30b651893603cd2b21871073d7b416f72143748032922ff7d5ff2018e09331e6296d7583327e6b59a356c3666f554ba0b2eb364071672037d35908bb76a5500809a5b9e36db226ace09a0e0fa6d99a9c9b3348428e6f27244dd0f23b14c2525029d6d44031eb7a5212143460a5074c2b5081dc759122157575e4ba2e09e5956d1720e4c7d614d5d36f118f54b4ecdb59cd9c7da55d3c55b773ec737c1e61fadca1100a91cf23c00d6d250a630429fe344eb5b73e0f6d3f66fc4b5176757a39296927a0a6960cdc62e0c28dbfc1619cdf26ba92eadc68a5747066890d4d115d4b9f3a4b70a51c83f4f3205175f49c68a20736e1077e6de19ae76b670b6e6ae293b8d32cb45fa1c6457c9ef8b5fe42379b5c314414077990460232112730271fcd721745e19da03772a547ad77555b5f3ecd94ecd9817161e1199fbc23689ac28b3ceeec003df1083312a9b7cd6c9bd2af547cb107fe26c06c849f08ed00f90c6c943e673fea391e9d88ddce19b9da763ca97f26aa9571fab0f0b2deb660818f34efc05b5d26b1d413af5faae0746304c65779fc50529aec2f039c32744dfbf5de74b2722eb0a5448f099ec0d1bed122fa32f86140ed3a703756a14df053c3e1f581ecd21b3c197b1d611302b9073eaec2850546793c31650820e169d62107e36b3faa95433a3a01edbc39cf0f3090f135fb2237ba19841b015b7226ab795f3a4c53b3c0cbd11b54926ccfc86fc15a9bc9145a1ab48e67d88f9924e5c7892112391d50db89cb4c5a6684dce665d1f0f687965d5d8b702aa2223e0ef3668145920bde10b3a39d1ab7a694ec2a85aa7916d9ed9813cfca5c5855454f27b4fc04f9b2e8bf0d6881e8c9502bff7135696c6d0eb1553a760d69903150c5cc17b38ab6a73f7640471b52af1eb8c20db5fec2432d62e5d08f2bf996b80034ee0c8ba252b100f701775c2bc981b5c6357c026ee15ce4ba0632168f81778b0de0a66b06625a10d862c79bcb68b8760111bb7e8b3fcf480d227b3aea88582ff75fe34ef2b016161c315662992657a4c0ab0847b073b8ed0ecb744433960b889640845e290553bfb735da286a1e895cde1c99bfb7fb36d927742fe14be0e01c4db356df27369d1bc424f2ac6faf62a4d23824946f438e84e193f425d03ceaf227dc3e26e192b0ccdc36021b6da50d153c3f5c18e1d2e726330466264173102c49c8575278fe0d7b58ff9f5f6149c12eac25eab934c77595775f7b35347309f58d3c1c2af6976b70c892a02f0e36b0ff705f34bba741183f5e276b2275fe4e9530b5f872f14329f31a53fe414774bf55744e0d15f5a233cfe69546896cf0f765dfead7d35c3e275c851435d5bf6e78260dd34412f75dd36d88ac9f93d8b490abaa9904b01b696ed5a949d184fe4b7dbd09016a33ed48ee742b967fca12c0ad1499322ee47d1b6f4b896b52f70d6ea1763e2bcdde4e93b2e996e9b9e229f4e64b83a0f85c0464bff428b0fa16064b7b76132df6dbc9029e17e958e006eaa29808d90a7bbfe78b13fc4c4b297780b0d201437e2f4e70ab3de28cbb9d8b8d8ca32374821e8bb5f2288fe63e22d0828e8ab5c0efb803647b92a6b07755d1cf8e719687d505c40671e3dbb9559c6f4c694f423cec1007323ebf70d8084437660e16ee6b69f9de683631b620de93e9fa574ad2593d4403688f438ce09c24fcdcab740f0086fd2ab847419cb6773029572dea5e4339ac2bbcecadd03f92cb1752c2a3ad1253fd21eb9439cf10c219843a2628b6f3a92552b3c5d481174798b967b7e5cfddd3912d7b44886ad7542fc67bb00d7f9c9759dde4e9f4e084e690b990800a2b4847e13917b81b74e229e0b1480a8abd2314b6ad6ca882db43dd09d95460c86be5dd17d9197bf74cdf5918575b4693fc3db01c7f77c7298f14fb7b9a748ab28b9427b130424f4eb66b030cba75e65ca2001811a999abe27e73964a71c81123541f39ac0017aebbbbfe768560a6db2801ad7b9cda46cd79a01a14c427be49dafd7734512117e6c0f1874eee92ed0b8791ec9c96ea0acd1070e274bcc2a7a2c5e68ff8daf03603ac1b54490d04cacd1e34bee0baca696f92e6eddae653961ac87ea713e6d9f4d8cbda74c15e5dd936b2f4f0623079abcf1f2b06e0467437b9efd63ebc34695872579b6503237f94bb00f4d4a42892d54dc18604db0eb11ac2d670438e92213c6f2c5a514ae7f9352041e569c6900325dc2fc2dbc528e1d9611d39acae1bff7a1926890cebd06382d8719921a4c884471f502b63e917e15bc1f2c426d6f9820dff0e8e8c326a07d6b3c4c1712a29f62cdc6a97656f44c9e02f3828a86618ba5fa8b2aa11f5a876265e435421d7a8956305d042e41ce10e769d5646823e0898f6708b63aabd8b736461601975184f7cfefa124a464e5b9126d697f125bca43a4e0a5db4c22260aec1a12e05b6fb5aeb9736c9de0a2842f4aac347c047fea41194cfea7ab1ed73cbd59de798fbf0bb13139a0136c4345f80c93c9c3ac51017e90ef339b58c9e8379d616a1c41b91cead894315c7a85576944a4583994380f4fdcfc9043e9a189854aa3bc472c313aa3bc3dea86d9b9c1cffe9121d3196efbe058b2fdc4b7afb0b34c3348e6293dd7a74c3f07f65b967a508537c3ad186ac2115736a62dffbf54252f2999099b30924b7a86370c20bbb19cd8782be686e827d79f539f82b72bc454e3f03e9b11638c990668e78da1744ad7f64e08c3752f3659e23f60d6922a4e89116852d1f2450282b25a4682b0f78aeca8ec0669dbfb45a947fb0c3cdf3123f9ee65eda4999b868ba5e61ad17f174c7525055a99c6bfd9c400c4dec3a4d9b41436c427044f07df6a91119a08c4c512c81f198979ef12b8078a94a6fb820069179bdf8f39b49b1c7256a12dd981c1bf59d404ac09131df93997d8f3a56af6c7b235ce0cd9dca2f8918fffbd8e38a18dd7577ef3e44efe5fef4e9c5faea4b2be992be182c4d7d89c55bf456c3b40fad9a16fd35cf63bbb968ef614786c8e135db877ad832780e9a7fb23d973b3de11709356819ebd5f518b1e2dbdbedee1ed2e0e894f7e6af18c4b7fe06386a452f088941f0ee63dcac07ebfc9a4495c40981e2952a78ea25cf00e771400dfe823a83e0ec430836f0e71f0ad64f565b5c85f76cc169ba26e2dd97d8e71d45df061f153821fac025797797763f43758b252aef77dba8acc8293db9d5bff5673516f319f84424002584977cdb734af7c2687a21fb71ca66a1478a82d804079737b165782d94343a70bb58c2779ab421baf8fc5b6eccac8ae729c0aad6a9084bdd0bdd1ce2344fc7e69e261bc8f296a68ede4d47d265d613bc4d73a92d190df928738b1e82ad2bdb626c71664a8b102a7e431c92caeb5cdf72ce2aa4947458afd63afc831cd69e235cdd8b97c274af185be26d9c20dcf031376b576c2c85ccd2d8595ed60b8c39ac83580553e4fad3f2839d3999052b9f430967a3dac87646d433acf83e951343effe1715b6415b46493043ff08758fe7c70b9acd149d426905fc2f910f93d2aeec8fe82afd04fe2a62ac4c345e59bb1c3c841916bab617274ace1ec7f45e65ee910e9c59107b519adaabf1b23439e477a8f68f33408bee1d9f29759e93a9a1354b2ee6a53527455c4637c9668b11b8c1c8acb2ae711a8c235010f596d3393b2c031a83cd1d1a7397ee674b785fcfb9c1e4e7b3210bdc58911622cdbc1b506df5ef89c9fd167ab6a81d75cddb6af5f057a5d04fc3b790701e8929cf06f0ffd69d37451ed0ddd8c1da781ea59b74b158ac9a7b0bb9e0e9e36fcc5d77bf103cd550e5c980f619e867bea3465aba93d0cc647355a620f4f385ac5f2f48e627bd7a86fcfcd8d697cad253649d797bde3cd243d29cacdfa794cf344f9bbdc9fe1e2993313ea6610c2a8ed6ab4fb95fbc5b42ad0bca2c6cc3832797553298eb0e0c1a2f4ea24b40dc9949b28b09504e73ba92febe402375b5915ea6dd4aa291f945d22bec52d9b890cdbb5eade95075527dea390a62615fa8ed223235e35bf24959c83f11750bf493c8fd1c19f22c77f0d90f1f7689762dddf761d24a5ab315ae837bb59a38cefaf3f667430686a28508cfbd99ef4a53f7495fdbf97d584be984e00e2cdc5c064349ed5d608215db16d4349cbbf00b24e2575f0cedab1025dbf936c143373476a42dc5a93157c14047f4b1b9f70cad7f5f6a66bf7718d19af997fb43c4e2a152193e2eaf2cf9f5b4516b96ffe57ffb55441cecb1b1cee29e54cf196f7ad652c1c1fdc30e1d546ace140894218a9261ec9cd4f2519cba196190658929c07fc24bb8c195a54b7f611b22485c4393fcf9c344d21be2fb88c6f68f5d7a432b36fe9442704cca3ab37f29b71e90cf4fd6504989dbbe9600d01dd181c14853d5b9db5991c53a27a53337432b53eff1a67dc40b2e51274b87c8f8eca33ba424f655d018b8e37877a1cf6596f0213838eefad264d249ac08c16e96c32239da1b8f34a22705ce27d08bc6839cae0f794c0e3781f504263dbaa73a06bad438ee3dc6c8bff6c1ff319fbb975366d8dcb7a665db1840346649e83e8dc1b4f6c005936cb09262d2414661df1accf4ff5a2ab0bb17572099e52d3d2244b59697c11e6b5edf03fcb23a5a56a4c7b7b67788fcaf244d39bde30a3f1318b649d4a2afe1cd532c5196833fd7f188d1a6a39152a4cd1086f41d110eaf6212b006581b335f09288505b65b93d5b0ed3db85672802ea28d2e540d5e973f4a99a81e066c0db0427e31ce4d7f0b0102a8a525d8834eee15f92b978caa99e90efca0f985cc93008bb2ab62ad0814c4c21a805bdaab1a5d34c62ca2ae29d52091d653100309e8db2e2d157598e0164c7b4e10d38f0e94aa2e7b776c8176aad78153fcc32091e468ddc50d8593c204fbe4e9c48a71839cf0a65c20b2b8c4e6070f8854887c4289c7751dc313fd4d1da0381672bc7c321455fbe39021fd5de5919f6c947b4c5ef1e884b6a89e74ecef95888effa93ceb03024d7a7ff11310ac52455766b0eeb06f6ab7323d9d85e7510e01dba0e99939602c52ab2508dad19c0cd8eec687051d32097d4e339d1277f00b955fa43bc15711f496022c485a46eed5f72965275cc20e146342b1561d1f9a6a9a88194f2860ffc8044c8ebc66b22d89592dc3896730dd9c9ab351396bafa728a94308291a25f3060d7bea40f07502efddfbe226172d978fd35d89ef5aea83d3244db7baa4fbb6cdc37714c969f78e02003be2e7a550ad169b755226cbc106619117cb9c5e5fc2fcad8a0bd8a7186e691aba02ebfb127c8bf85bcd01c64bc3a7cfef71729ef821c78f542fc76d2c3ad407e82050018732401f5bebc8f58889915d65395d745ae7e31bb99c45e1e02f310122b401c438b88adeca5016331d523f6b02512fa7965f7a0d0ef41197d5e31ff40c38d47cde60fce5a71e8d584bc63bd466b38e8c969db56f309ddde33561f35e0a626f934cf5323657a15ca525e2b2e7018fc413f0bf7bd7260e2fa7d43132b4eb5bea32dd9919f65f6de7f246780cec9d0d65ed16a99f009ff5145e8647f0bf19969b7ddf6a06e88710bfa1b059e1ff6f660a65eee47dc7bab825711928bf8bcb6323d83a6a5535a05587f2c9f86ba9a6f01cd0ca6dfada5c41f92ba6ae0255d5114768429f9ae678da124b30a765acee6081972a3b96141e019f6b0fac0789733c67ace32b4733916e7c4c2266a4dc8d24e7b07262885bb09988a82b9ff42e4a64c82d0dc0b09f68adbe52f1770d80a752fe014d376c127b7be84a6e8f2adea948cd56b0da01f941f0441b63ed553504a9fec6a750a3b7951db8fd36993b3430fa35d9f14956b5875e37ae15177cd1846e38257eae261ba7dbacbe702858d85e4aacfd72622147b00375ae5e0f9ea2ea0db22e0ce83d4f0bf64ebfcbaba1d138a2f9fb9c2fef9efe76728bb3db756827d46305ce4001702d38168bcdaea0a80b099007ba9d44652534e91c4808f86f6535e5fd5359fb84618b98d435a0c20e12de3d2305c339c3f7e35dd246fb96069219d97107c9981f5cddfdd91aa97cb3a1422a00e1582f7911d08b9c97918bc5ec2f3633cb382450478469ecf5371ef7b16d56c2fae032c55b780c134b486be1bbb386741e4d1e2950f93cf5da4c714301f0da5f3b90b6512548bbad9f0e26a6ab151768551a77f018f6de2379ef59b2b24fef294fc86e8515562622ff4453e3f207442a118febb8fbb6cea3a4d008d4f33fc13f98264d87d860f8bd7512228cec4b7c09de2eb50ab981c0456982cbece375d0eaff236727be7d7be2e13b861c317ed10c3abada386f6df6502f65995239d4f0dfb14bf56b3c49d1e1a2858b582202146f2b6c8462ede57fa5bc0bc53d814cc30fa693a30ca78a3f4d2974a7367588239c6b21457530886dfc04706c4379cedd5de65342d9ddc28a1cc8a55dd2390cf4b45d7455cc8646495ac162eb73bc52e303eaad4366c9903405af4cd27c0ae7d2ee0ed88cc89c9a8a5742837ab2d6bb0779603805ad86ec6c208c82381ad2a0ace9709b34ef42626bfdb12e627476c654e8218ef145816ae45c6488fb06a58a1a14d407564e3fff0170034a033d31e0aacffc5e8765d6aebe76c620446a7dd662578bd22a3bb89a073952b1c6da24931333def13a05f453d03b87b87f50077b671feb1dcadaf6f75df667a07eb76f8d32ea7384202bb5852edf674afee8e81da0444638ab17d253667c5d588c516fd8081372b9eb5f0fa584149142f41e83faa5fbbf056f89611263b7f55e9dfeac7ccfd76c6833282032dec7796bdacaff13eaa4f1e70481f195ee58cb4190d60be8c9c5b049645c0c3c86768063ef29e01cea665f9fb90b1a53d2f7e253c4ef61c2da57b3579139b8980a128d7c85774d95804608e3deb461a4b07f857bc8ce432ba2ad3f9a51878dada6e2f38da27c96d7f945632644d35059f61f577f413cb4a5475c60b2dc4344f4437e31d485ca4e3637fb11bffbfeb1003f0bf20cfa377a3157e8b59c803dde98cd1431fb3d60c500054d4ca798a8e96595808ceecb34636b740a35a305220a338afc47fd03bb04958926c365ea3a8cd248c9b4481503e6ad0620d53bf8ef14667aba541c4f19b9abc433dada978015c1b83c98f9e1aac8b7f65a04f0e82e1979558d8a0aff4252ebed77d919b98a99dc45caf41b3e843ed92198249f71dc73ecc44e659c25c96338b5ea8c6f707d313f01b73e627611b5c7a1e1f55c078c6bb945b629cdfc1372034334e15e85d1240b749c917c4a0d754d83b73f816616d816eba9f8fc2f7443b04db1fe3a0eb792a3c516fce43cd39a7be24ac7732472e9a238c8950c8a78b89660fbda2efa626e155511bf6d1399d76276f2a7c6458582b42fbfa3fbe2cbc415de8b06b85b91ed26adb408315e392662ac69c4e9d69b021740b0a1c1c2ebc432a3ca9ba315fb914acfcbb0b2d7e07889593c344a1e6e1aa5ee06802c54e22695769d637ebb6c249e90c7c10ad31b8fbaeac61ffb42ed242f338a096f1dd94c9a95f84ac5586b47db6e78b65690ca0945e1e883fa76f7589e8e39e4d43d962dbd42759ced5a3e42c8c4389f56cc11d46cf714d4a4b0f74c346775b7bad128b5c7c0c47a4a17fc1e13597e440132f70daa686aeb0dbecd7f418a19f774963e783ef0fc869ea5a4e9d90e50e2929d81884be8191f5611aaeff385f271ba88413aa6e34f83383c931469a48bffcb795bff4c632d61879908d5bab25244dd5c0755dc48ad253d6043c2acca875f3cb0056506d7411a5667a94e505e4948f75da64f8ca7448d74056b02d19ad2a419b8af3b2c33b4d8e8b088a353745f53b5e6f416d9165f9a707cb64b14eb5e73666b31f63de281c39f207a5289f0f47e7fd054d217d9ee18de0f59f1faa12542265d4e0a000199c06ce219e15707bd12e82fdd6662a311be99381a45e06fa61f4322e36ed695c3f62d1c567cfc9107e57b4a44652d6e1bc70f06d3657c5d9a934002532ac3e219d9de7d09007781514d0b510eb8992e3a9d1c210d29097f240419c1cb4aaa8b17eb0d7c8d7c3603189a4b176019c9334a69716347bffeef6e283b2318faa482882f5a77ffef9cdd644821c3229ee6de6dabf52dce8aa74b43b21ea17be1f728db98f1107abd6c67f2a54896b2cccb162c0c427c98855a1487cd123f8141a32f4e17e999c325b655ed1adac7ab50bb70ab110ad0efb2a2a1227ab949f94e33993ff235fe9043a2406aa3d641da95e44f1d9b1de1e52a30165445ae64391df18be47a61eac0ea675e89b3b07deb42a92210ec61433cc58912e7c265808e190e6c4a1ccad0fbb4085737ad6976a9d8b53cb7651d7fe4d2cde0f23c0d1021cf354fa05f5f666e73edad5e0e06e11bfed1ffb2e71039b5b1d8609d9a8b6c6be7f6af6efd879d43c4fc33a8e14dc47a13f86b5ab04416b04425b0c9b82abe64569fb816a0502f82bd63d6b80c22ad9841ba039534b99886992423d4849c28c1900b360d43e815f11244010157ec491d7e150bb3304729baa2ebef91326fa704688669a066f9c98ca5a91dd5c0851e0d391b5ec48f7711778655ce4c8040f6d09f70ebc36df70a780a5f8390c4554cffcb96c361e3d0b84ca530e1ff8d7604e8ecf26e56d6aff13a0413ae71911ece49213ee2860e7ba6d3722e7aa19379fca0e705af3920f216fcab9667401a20752a0a4cfa57e19ede7fedf3a65fdb617a9233027022585b42a2176f44aef60e7777b56d680fffc42d30ef96f9df423944e880486d66042d140e5130fe3106bbcf1deb2cf57b9e072797d822ff671ee50ac22610145173415788938f6dea08899a6e17b1aa9540faca51fb809ca35b02227f998426d78806f72ccec1910e3644b53ab0a06d581928d820b3c9b64d73225003480eb07371c75dacee2b6ce938b74651fd266bf3d685f39435a347e828505aa6f4dfdae6b8e187fafc016a7a34e19143093305e03b745f9502375f9ff4473c6705d2d034374ec6a78a72a2eed391bf75b0f6603b70d3376f697d49e81f84c82a2616ea413770672ae97e75891e8a8098f72c902e5385f952c4e550a30d065fffce581a7314992f3af05fe2b507f96e7e856af5c43cf4fc3e424ea00ba6ab3867e76c23d4c2e7422c3157bbca8c475565768478bb171582e814d5f47968ed08c3863f88973033c7bada2dab010eaf56ea12d06b287d0ba97441db0c3bcf514b693f978d58dedd9117b9ff0ec5c12c3b94a7dc64156aaab7b46cd8697623928db256a4958a47a28c991bcb10ec12e0f97a1bdd7f87fdfd7735e216781e13f2ef74465860504a54cb46f887aee995c5776c6993d1342bdd29710fa9e9e3d0e198472f733e270d50ca1568c946c363afbbc004458e3f7821bc4ea3777f3e7b7939b2bbe7c642bcdc4e51488fe2cc1e022de76cd6d254823a30204d2d61b33f012c900ccaf3e98448351cc6310a51d97630079fcb5f3690c7d76c2ffa007c95734a1a2030741d4f69e6231e1a1b2f27ad98313c5270c911e1f30b0ad7baf4a8a041467cb5f5c1ffcea6a7b341f5e11b7e043a95a4a0aca4d1fd8e04177a0708b1dbf025857bbdc40987794eb3c9289303e998d054f2a2c0b8989b79b62fb06772dde480a02c8df744f005ae1bcc9468adc64843df13d84aa83a66c1fda6f852ce5725e730ce59975c533d0e4b524dc4a3ffc423d7da1ba7b63ea1a2606eb80c6f8a863f93b4d716a7a4c703925be9f6cbf8e4ce4b818702c93d37116d7ef472b5409b0c975ad84f817b85ea8392355b378d44711fac6f37c841bba4d0d2a82d5c32ac7a15cae26000fae91a2d4a2d5f42de399df5d23b48bf18ddfb4f14a28b42b9cbf39a72510923992c41611e40db6eec8d3039da8af380c6d37c4935ee71a6ad04695dbdeec816462f72e8c5ac265d31b60bc05cf40ed652fbbea6650585213acc28c6c039d46969c7f4179354a7833198edde7c7d1fc63e6580b83bac55d6cac6e77636f0846fa61f99aaac11212e285c0092812726fbee4f1a492c52e5ad5bff8cadba26e5f3c39ec1668f641a20a0521c6db8ea7dc439f1b6755c27464895f940b2d92d659543bef2f48eb849055c792646e748563a1e7609a55b5c944b2fb70c4aa0f8ba860d899e06e394ca08b24c7df2dcaac177b23dd8cefd1f7666a3a2f8cd0063dd50dc4ba05bafc44853974fdca35e21f71375aed953f1cb2fbcbb598a2c85e1971fe93a397d663383ae34d07632d41eda05f4c9c492ddb636197222dd00653dc815857927be7774b122952beae4a570749d359b31d2fdb11855b1b444b232272b7a5f3593144c8ab8d2ce92a13f900f37eaa9e2caa468f4a13027280c779c0a909548503d5e0749ceafb3f9605f16c459286dfc4c7991598035e3b5329e45f6e9e1a431839effed2511e61eec6e5ed3ace947c32c2b47f6c4017d8d13f1bf59bc56830fc9ece7ad46bd7fe3c466061a74cd283bf810afc904ea9900c528528424aacc9f239a19546286574ec8d8b167f3e36cf8a629c20763f706b96e302873f9b69701fedeabc0fca24483e57572048072e0c1892cafef3bee17847fd9e3a26572afa6c42d9e6d62ad4bd8287cd516bdf8655f79762093ff8f822108e064e62becca7a5fd01c8d5e5ee1f894f4efe17dc66aff6fb4b6e95e885d086a42c2981be7ba55dbf01e78756658c1de485648bc6c2aa796c3259790070b8c7d062781bae6c86aa598bceacf49ede9c6deb8bfa743e3eed0bbcf970eb6a24ecf9a6222fad067cb9ac09bd6f7844edf6cb5796ba80dae88ba5980bdfdc6ff38b3c3723680a041166d8790de28c05fe547eab0d86c96749615030d578f2034ec77739820846547f2fe9d06a09be386fae6f35d1ce3f89aa206498ad9fc622fa2570f8b04e9c12354db048bb22e2fda2711181218844a24a3cc9e722a1c339a741aab0e83741277eb7e0da4739bdaff126c66297c7ae049dd88838d2e6870cb55e70074d121f8930351921fb3c03301e61152078fe432207fb38fa3079b08f19f400c2e77cf59125218c35b981c6561c280237e03bcd1a4178cc2f6302b2aeb7d48adb3d3a0b618c578646616e7e623a786b7981f0a507e423e9849229291ac03b9a43bb86db6fa645c6bf93a6ba495c5d02c86268e0e2eb8ac10bcce3019873f948544155b05fdeb8914d81ce73bf1c772fe9c5082c7024aba3507a289fb83c2ccb11f8fdca38c2b90dd491feb24f6d59e9b7e5b1303657de129aede1beaa880b7c48919a4ff4b8c888052f44b73ffdec037d047b6eb4b3ec5106c9b89f582555f6b93f2df3c1363b6077181573ddfcd7c9af305404d895715e34e554006b63b571ffbcfb652af1bcb54563bed6c988f7a24640980f637cd4d66ea854b1b99a99f3ce3804f84a1e641114ebee0af8e2ea1ff227996c361524350315a778af11854cfd21e3b4cee8814241aa644a15bc8f92f3e1accd1e9ad0489ea01c7bbae7c0a2990807e11d278ed187b04e0e1811da59d78b8b41fb1fdb01f2ec9e5e3d2df5ba6d946fd7ae0bca684c05ffab3df065f935b1a88340a8e40165fdee190e34ddea9bfeae51d1217d7a16c978a122769127cbc2e4f2cb3f64de31c81f7208bd338abdc77185ee6ed54a6601f579e5c9281652c73efe333a30ab1ca915c8b50d56e2c7d0c75993435a4cf1279fc4309163551733b9cd71bfacbb757de6fee93caa7baea1a82c85551f87dc5172997df2fa037ccb63b8eb337137dd7391d126b8aa798f502f75df2161841087ab4671f03ed7831e75fe69d299b36d8c78dd29c65f1a48f8451ae6da8884b95587d9236315d2e50c5838fed701e2ce9bd4dd8a0930f44865d0c6f87df9a3ebb8b4324ca4bd2e49266cec892c0c2a092d7aaad585959d98f70a1911d7a54c18647cae27e6e20dcfa898092421fc1d804b7bb7e42502ddf6e81a2d04167fec99bbacb8b50ea1dc73967886f174fdabe9f3863d954750af5f0c56638c5877f4ba435917658a15d0c2d1ed9c6694bf2ab45d6e96573fcd849c07e84259c064b87eba1c273a3acb1adee11f9d8e011a9ca0e94f9c2f6403fc4f22208f59b7624cfd566556d53c4cf883e5b9a6bd21b067a2e573d688182f1e9b57a6df453f2f3af9daf9e4512d0e24a290fcbabeeb08397c00e8b36e3d35a98f1715848081de1eae02944e4d7681de6be8d9f76312451dd464c36b1e2d70480d6e65f2b12c5b1a5d2368cb9d666bd99c4d7cf5bd19cc13ba64b61eac27091a5b469ddbed5e5767a2a17a804f4f0cb5674211457ecff1b87d10b3d4648606d51c26666c232ae927ac4c46273a9000ca289434683fe8084001adfa7d152376687eddcd2124224d67057cd2f475139a6f7914701b6e3212232ff221f15b2dd803370039ca1e493aeaeaf9b5b13d2c1a2f2f927245e3864559c10aa293fdcb7764abf62cc762bc2ae117ff5d980db3efc772103dc03c50ef0debc156b7ebf080a5b302418eac98e8b28fe768fe3d8c50acecebe2954bbf07cd3ffb3f33e15564398c3896db4946e0428b890dc1ed1949f7b2d7d24cf714697f5b625334fe1014cc79a2ec7ab3bfc9e09445b60ee9189736f7c60d6b08d235d3e37b2a8eef8ece6e64c3b60321a4a6cbe998901d0809058db3f9a4ae4573a9a20d30c17dd5e4bdecac23c8379b063e2b6d733a74f03d5b4714ec66f4e8e358c5559e0a7b481d4db231a3bfe2d2afabe8941b80e5a353aa48e9a080dea004879e0f379c07a924e422be53e4e2f6313496c60c30fd23605740671c2b48008141b973d1cc61d32a5f727d730224d57f6f089ba3a14d704ec55d9670ccd09ae978ef0709f0abb703f1377fb211b101335db2286d2ebc9014f5151f8ac8760f7a05c602ffaa7a75c5fcaafd24b521bd29a785d590d9434748146373dec400a0f4058fb8053a7393b5d59b0d83b76c923eccc988fc0a0b281de3b3afbcf88b0dea8ba9141247144612ab8c1b5cd5802cd012627d9e0940b1e6061b170a45f6b8ae4de687ae08c9870c88ac6ef83e547f61c6b817336b9497e90d1fce1a1815a8721346a4464bcffd86e0f305dc560dd147716eae199f394c1b3e23c4ba3a232dc622462ec05c61376a02fb8e2f52c23ed8f0d50cda061ddd540ab7ce7b1d3ab5db090bcf33925b8d3ab522e91e5662cf56310538c2a1fc4e641cd388537fbf3d88ba443a2df38fde2dcc992e8dcecb79637acce389e77621b746fe60b28fe863fcf299c76ae48a264f86eeb152d482062d02b686228fa594153d0755e94d23ed200ffc9f17a576b3e556b0f0340c069faac68eed5666108b7d8aae27673d73752d4166c04f416e15cfb9c0a71c1ccc255bb7e36b5c8406d70ed4ba389f1e2f3c7de0b7c81e482029dc9c0a4ae77bf9ba89a9716a47071a03cc58a034b9c006fb968a2495d9774b71172e4df920f44dd7836203fa2f3f98708c57b7f3e874a21e8209235ee6fc79b6ccaa95cab3d0f056b7d85f84e59ddd01b17c3246b2d41fd9725c2fd90d8dc95747cb21f145eb4f5ff2be0a7b124c950bfb01169a77ef886335f7d5f31371b3f8d0540fec9417eff7fb650da552bda04aa57b7746e9b93618c0553d423057d22b37a73c1a81c134856fed51955e3c2d33a731a21c3328ccd9f18553337f2bd1f931db3b175f6725cc3969470f66294b74c19ef25bdb446c4007b3b9cf3f6552a89cc689d2751844b9a09523b60c900ecacb313e81707b8eb938f533dae17308750a8c31d6eb9b4f5bcff080c7bf1ff12a6f6dab34f81891447a54861176df555fea8b36df2758e70ce70d77f16097d871a51de06c7524f53e322a842f3e7cf017a7e7548214e8f481121b78f4c20c22cfa7861a3313cb620a19e8088b60f0aa80a26ed2bb479d8818a0f62b26a05877fb6667cce1587f822d4cc73efae286956864a11c33a4e83a43fd226ce9c67ddb03a83073ab4efa32f6de9379ea0e9e09f8c3a71dcf8dac17d4dd4f57b1002d494fa55815b248178540ee0c843de7e11c2d251666a9824064c1a086c8df7cb43d49c7fbbc4af585f9ccdfbb52734cebb030a7235821b3ac22fbc5f3c01ce63a9ca6347d9a5a99482640b4a7304f322a7c0960352a856ebe6fb368948e27a8fac9f57ebd8354ad7ff64159485a03828c593aeb19f367b07940ab0bcedd0039139646ca29129cd4beea0bd0250ba890a4b95672032874990f5330b9176054d539a349676f6e99fb7129cd7d26c369831de51f2a9283095f84bc94129c653163b13af44cf74ae377057b3255cec05f9c558ed6e1122ba112e1bc16bce71bde028350bd43f38a240da7ff02cba2d6b334eb64d612a3792cd48ff59fd1efc4f389da050cbdcec4badaad8d388f9e2f60de5ef421b9c6de0ebe2679ca2f6685eb0441762611459fbc6c7bec8de8ac663ff9376de931fdf88f882873bf2030d8c750f5f330c3769a03075a4e10aa9ab2b826028217299840eae0ffb7afa78d4ba209ff21fa17a2a539a5f95628c2ca27d921729c2698e25a0ffecee56e93033262f7850563240a2e8693ba4efbfbc6de9e40468a54982a9dd198a51f5d241ca1a1ec02340f544605703675ee0749b467d1b759c71594d78111d7a445da3376683852c67174aac9c0cb44714f1a27027a5ad880f204841571e0a3e6cff1a3728a6a5496dba7244926197fa5b8a67156d9aaccbe6244b4c23fcabc361f7a8555dd9f6b9564722169ee051446f4ef4ccc450b4dfe30dd5734ead04200fbb85543d01abbd79c1127f0a447fcaf0cd3469e1c2710065c135eee2a8a6350cc754762de8c53a57be82c64ea9a01f47d035ab62984437fd034058f1ba5354436bd28d198d3c3a5f4074b6edd707b2ca2fa46466c54fc3e970b82de4ac403079646d7158f86b4c1533263ac2ac8d23d6a54ad888c57548369fba29661be7adeac743b1ccbbaa9b3334dad1fb69239e1e9c22480e4c7d7e114b2317b1f0f7fd73d45257bac80e5fc00c2510bb516f8eccad6bad36da0e42c7c6ee7076a92204bc5bc8b341afe3b5b87882ace5cee58fba61d353eba646c7846605911755ede8520a2fc36e822d5652a7d774a855e1530f8a44b0b2341a005768bf7228aed100c2e3ed6c731a5725d1f7a53cef7e4a92fede489209c22d0c1844b0fa04ecadc2bf4cc8e56f1f96328ee0d647902caa3df2c81a73a07f75e63fa442e277833860c2783a50163e716049941555d0e27677b72c89d262db401992c8b8525e5c482533d33e7ea99ef3f770ed98da14fbc32ebe88832c6b86d73a3266f7d5f47fcce4fc79980ab0df1f40a7671c9e16d73041cecf69eeca4d9a503be0d6a53421932537cf161e37ceeee22f4db39459c5e07debaee6092007970d8c1324b5e3eb1374f4340b618744ce462ad00425f113d11a2195dfda9009e90471f37d7704f262309291ad5c9edc28177ab54b119ce4b8e0531d2227447a5d24d76afd844ced3311bf3f7080b04b43a717b6944411f8a74fded9a82ebf87f0e1052708ca6d04172aa4715c86cd4d1f7360026e76d9d73cd4b9a695d1925d440e356f30b50a75a27e5d179ff664d371f46c414e251a1371b45fda777fe40929fd67520665db05ae75bfe507c0d4e08183ee3e3f1d38c03ff69aa4d894ab8982301edeccd1dedc4fec75349a938d5dcba9922ccd652678ab2e9ff44708c5b8d1cba93f412545b6769798a786c17e044a1081bf3bf2399f8b524a995f4b4eaf0dc072efe9ea56b0a31a2dc0fe6ab72e80de291e608a7643793095858c88f6480f518b379997eaba3a4e416726dfcec8bbf9f573902f7707780bfefa8b47e75daf8b92b48612e6e049c1f5930a1f0b590d1240fcd7039d7e1dbec01c576c51ac81a3782a7d452d28b228af372b908294106561d9723c5f1e50abf9b026e3aaffb95061f88e736de5696f1058ce3ea8fa404230b45b21263413415078d133473251ab434054e4a75ab80f06140aa388b3cede6c11b3c275ba669d425ceb8441a4c59c91813720e99f52c40c69c5382c2ab94f900364ea61a7a193e44db336020ca1d9b22bf7f7623082ae07963e93cb6f6245fa5f77301ef9af8e3655b177c50c846e08a99e70e8ac893be3a99c44987eebdc6559b97ea720f67821985e4c09815e9d45f547da7d3eab360b9fe62dc862dd6854183f57bbfd43d34332076ed88b16826b6f27e1466b5230ae76a3bb8eb74d37773709cccdfa54fa2e2600ccb0a965e2e1e819a581fa0a20fb88678b12f299703ebbf5bbc0eb8800ddeb0c31a1e585b7cdd39198155f9ef970d339cd34966f4f6cf648fb3aaa6135f0db5aee1fd6bee0fc91430e819db304d409e446c8327b6e66cb9fc31aaec5c6874f9cd0c1b232da6cd2c9cba0a4a7e239e2413543cf8004899bd96445fd5f1650ca0d2dfde8a458f201ebe4b6050c9413f263886eba49999001e7e05d7eb6fdf3d0ad1d43e1dcbb57055421ca52a4142b4a078cc002c43204b8564f9dec59e3c0eb10c8e959f5eda7bfa5f6bd147597193f741cbf071227670a432631b4ebe6747ac90afc01cfb998ddf7bda5e8f67f940794ae1e7b81853829ff280cbbfa86afb04ada7da4089b188d097d8c9693df45bf6e30aa74f47377a16c1acfff9525f09e505cd2b30701453df84cc86093a60c8bbcd3deba162996b1d53979649c3329e2ea4bfabe60e4eb1881dafa7a72a1bddce3c815b1030866d4bab835c21ca2dc5da2320cf03e135bbbd87ca3f0978078c33396c492d15dc006b8a5234f199e714ffa3b594aaabc89e18277accb7219aa476ef2fb4e1c47de4cebe033e6e069d3f29a974d559a0253d2f42ba8c3483bcfbb10b9db5ab7068fc96056f8c893520f4c9303796a346193da80047e74c80a76d3f651f2d0d454d6142eb1f615bb8eb0f5d51786f9925fd679d411402ba28c9ad1b94c3b78e2de2ba9996570fdf873164e4f74445130df62ea323b9660e3e3e1025c8949b3c4b732a3792ee4db09fdada1cc2824e28d882c52b51fff278277ee9bccbf3ab27bc919270e547339224acaa59c9c0843d2d8fe9cdc170f6c1c390c96541d323053980ba5c414d8195cc9cc102df99ae6548e24e4517bfa4428a04574d4c93edb152cec2a9d07c28f9a404a927b4a45da22dc7dccddedc059432f2c36745d422f23035ac5db749d285f2a3faf4594c95790e2f02af2172f460d14772cfbf75ae08a7337c1f1ed4be5d887f747681c7af36bd71234ec39e8939218b2b0d147455cf5446c7ec2f068d028a4aaf99158f86e675e8041e94c11122b51e7c72d7b866241e23f1b6189cc6d283390be666e509b6fe9cb233b9be79e7668a911e234259662e4f816cfa1c890eadb458189ce41c191d81bb6e6c981e1197fdd21f26bfcc27910a7174c853325e9edf0e44ebb3c18b5437bacf7cedf99c615ba3405c8907e474911b02525f025afcc1d12df844f76661bac1882c3e2ae104fc49a705abb8ae5b566e96d70799209b01ecbfc6b69d34548a5152b32b6e0c877268850eae8ca2eb31c9cd7915849158a31ccdf0c314e72b807975a5ed56551eaca51f33b691729d186b677e90d0dd1a317c408fac151be582102a840d828665dd640e9794fc5669f127110c10593ed4a6b418f51fa1906d2f05e46602bee4e200c8da126c650d91bd9b71fea2b8c90294d067fd7e3c991185d4f89e17f18d4a702cc2534c16caca45d30370b7604d09a688b818b20f78063f5ba58e99ad35e3ea1a0f79369b4eb7e1daff0036474f84dc72437e491f41638af7ce484983a07218028a86914b14a5f887b400e9fb5e478c923599a796899e66787ca069f8839df2e0f7f04b03a47e6b2fecb7b2c13b86050b222c16813ad10764403f865caa82be000e259a8d9e3a0993c4869e40c42efdeebfbc9f1ee1af66b58629d4158e278e80d3ab00d6da7cf137b4318a680edd3c27962954a5d431851e405a2028d1cc447c3324b6ac7e740116e95e94a03ae01ee7b62e187367e8d4f0c9292891da75e88e9710d9d4aaf51e58281bf7abac364da575a2d92da31983d665d5387226513617c050eba21824a28579f4fcb2ed95359caa6189172e28952bfa8c36622fbf8f6f4df91b05bb335e7090ebe2ceb1d71ec0875a2eb166cefd58e3a8174c62f38ef85920d03923b8960c60e7294bb67af6c8e7d3fcac7d5a20ca717ece41bbeba8f2cc9fdb9394927a7e7658742e09d615e3c348f59e37a3eed2582c013a8881d61aca801e5cd6de66159e42e1e39a6ac86d7d7e2c841f1512e35694cb2b6b609cf782395378279285b70c3111888926637e677f2d989138bcc63d5b269ba108878d63f033e76f8c89a63188341bb10af9df827f22193dace053758717d32713850eda465fb2a00e8a201a8f973fadab0dbe423fd5b762ec11b48abe42536d6fe38c2c24c9fdc65d6526c65c121f0421832a074cf2547bbf1a6899ee4522261965822c2aa0e1a00464f44a318c5bce234ff902e892200297dbbdbc4361d196e1dc2f1cc22a4077fa9b0fe1db602e2148d522a3e4c828e66a5d24aa7e54c67239e5ca495c6ba54fa61624cc4ea5dfa832a66d04c7251bbb4ae4c92993c2dfaddc6676aadbf0dacbbbc4fb99c5f46089086a0de5dd41272bd718bb40c103906cf91410b8aa9fb7fd243469cf185db9d533b8e891bb398f31d4440e0e16a21a485c664f953a08451688db863d37b6acc53fff3fd67d5571ffdfabc86451ae82f9ad83995c235fb591da398b28b005bda5d7e86d9e0b670b3624d35917c00bfbdcb1b4b01c605309236e61f59645432b0d88586c55c823d0ceeb212f4383388f8cc0cf5db61ab228c12e059937c2e66f1256fddc85903ca7c7c4ecc594db4cc8c38e229bb7f68ceb6442070e3b7223078766d6907b986fb33d17acedda01a693fa73a7bbd9d7e5b1690e43f7c99b7b408f5cba85d1a7eb5e283f68e0198e08b1f8a0fcdd0fe38f77ea2921ddb6f233375db2b41ee9351ffa0ad68d5408db7648d93f54862d1c46f7d6e84b0b889a8249564daa01ef592e85c3e8251feb894a59d6248980e6b17a49cbc1551a7d61712f3724e9c3a10083e5ea6841a8fdcf58992ac2903b03d9b6c38106b33b4426e13acf092e305cdae0671652d959d39a49a8569b89d53a3ff814998ed2dd02a9734f6d04991573e6104507c1bf528278640cc23fd441b6d063c57bc0f3e19ece8af07fe01e466664a2888602b61d1436fa4dfd35a64d64d76a91beba0c0fc832ea73407c081a386ef0de3f32c51e8c11befc087db5110a8152dd644e17aab4de58bf6240d1e27c3aa188a1a6684dce1bd802926ff69d8d2a3fb8b970ece46f1647d393a264ca450215361446b04deaecb560714e1f4fe6ebcf222244c4d7df939602f430816c1ff4a01abf51e23ff91b1d8fff58492949308d729d3562e61c1ddc1692ece219f33f222957e9e753318771a50cada0e29e95b9de72bb4eba459a931e873d9ca22d176fb8949ead12bd7de327aa673ce09c0fc490a1baf2e5cd6125efecd3a71acf6ab89d5263600bb01d782044c257147eff326e2cc84f7121deb05d6166b098ceed4e8ec07c08dc8914f19cfa4160dca7a380b969378be90e4e182244542784bd8ba28cb7523feb272a5c33a11e35a55479487bd738f1e248399635e684196a2b9977061eebb739f1aeb12d1225f729d593f829ac28578e4f3749d46aecb70f033b929fe4d8eb28f1198e4f675bd78f49a7d895727c884dea41f21cb6e0e7f146cd98564d944b380ceeb53963ebcd704e7581046b8465bf2ccd025437ba647fa3eb29ef24eb857f3ade56ad46feeb44d60183fe6825425a4c47deac69f161178301cab601934981707d43345b188226466d0c796c9f1e5d7855eede03647e9c07f768e93add02039e7931285fda65f53f0ea0d28a23f6d25e25eaea7a741db3154283b01d03e6c952ec991e1f919d53f3a1a63ea5ad8ab8e561bbd6908728b0f3f7a4fa996facbddaf8e6d8a5cd272b27ea705bc07c337c93b3ae52101136464e7bfa5fe497c43e79737ffae52d73d14120868770e42c057f2ff8381f26efdbc4b9472bd32e8ecd23922fadb0f6a31ab585f833ebda16844a9f6838a443eb49faf41be340c00bf32fa0808bcb8b2009d5cd469d33692e43d6e71d4017220a2096388b089187589dfc4e41313bf8a7c4e11caa01afcae83db85e952a4364c83777d6d5c8d165efa3f3f7b647a5f9004ef50ac24dba85c0fa21628e501d224452ddc055d1458190cb39b5d515f067ba41a1f1be1b4eef9c94ad3bd3baf80c2cd28fc64d96a99d594c1f9184684aca9faa1fbd51c6ea6b639b905d6a8c3bb7e888c531e71af6f58a51dd70e63ab450bf980266be32ac698168cbdae9f1399a280b6b68290053e40d905fcfcb5dcec0f1d982500244a66dc6ec9f807e88f24fefb1d689001f348e3cd91d546d7bd237feab066280e9bcfe85ca3a736d03dd54794524ed368c5d5d0640adfe874b36f23788ba77684344fcc6b1085a093a529c940fa8a210e9655a8ae0b6aa29267cf0630e358ab9391a46b0d24f9e23976db74ae352e09417161e1fd110cc2bcae3e044d9154169c5d16c99c735ca9888f122a14386a7e4d8bd1412799c44449191c17072cbe63be8374c7eb7595e25f4423718627eb4616d67b59390ab18e4af278810ce6360c3349e5d756b3de410589810e75f995612988620617b36f41800fb1842241b061875b8bb1c93e181b76fcdeb560696c088bc70831a7b599085f8cc0dd6eb2a891d0c4aa47fc018990ed19c961f477fd1ee603e4c897506dd078c51a7ce05ba4356cd280b88f0fcc65181d3bd12e66b734d07bc2fb5534f8b673c7dec8608d5b78b00d534750305b7d5fbfd2b3644e41f0e57bb3afc19726a5f0cc79bf439204807af3abf5c56e4fad97f4c7c069aa116b2d7feaad68780ee1f75c11b6eb5e1943efc871249657178b1b5d789f3e98abe76283465a03e261218169915ded158f536d65d40f7b8dad0b4a7fbec664888134e19c9f861b161734acf5cf1601fb66ec43b5ec2e2b0e091c18b9d27799ae0d99875c6fea480c031ece716d4440dc4ebe3bd08f891f08322326cd37810aa41c4fee43a8f85ac6b9057d0daaf6e16db26fa9715ab14aec633395f4e16015330c82053255ffa09c82d0a8c3f3bcf97cd0511ea4af3901a92f818303ebb22448aed4c76768fca406e122f976237261ff10fad0b25b08f769bc09277542238715c30babf02333be346362230c67f8fc6ff5d216d325f93b350bc2177b6d04528fbe728a7678c55773d2f841ddab5fb07bd5dbbfd70b203da3db8295f9471a741f76cd5712f94c48ba66d0328c3e9c2a6e8d63c3b686c1c07bf713a1880685e85b3de5b8560b45f4a379496c74ab14378c83d7a16833a8a1667b29d22ed7440cf3f25fe1e71283ecde3b68adba9ad33535d6a0ff40469de72e1d3a1638a3aac379b500e903c1787f9b0ca22b9806253357595b3cc1d6c6f9a55ff9e22c21d663586ad6bd222373c75897e702adb4cf5dd78f93ed281622f9950b680d467fa3c86213a14b5cd81db8b80b318de3f1704b6b3a0d6dab8e7db1e28c98b934bfba64c49e58305ee960bb3e38fbd7558d7e21a431ad7b769136d89c06f6f71266ae2bd3e61f28956bd65cd5f2003b65e14cc9888709b52806b930eb0f4985d8422e772aa7a2437380290bd693bce6e038cbe04542bb3e2e13ee719621ab6f79c8d48d3956f6eacce49690969881e5254a3086700bf61ddef4e94c8c3a7cb70c70cdb3edde5479071e9c96e2718b8140d08f7a7504db4df1524191924713adddde622263ef2fa48de34ac1cffb7292bf08f1291a81148dd1d65465795b52afe223ac4421faeae3ee93012de5bf31601f377bd7ff5492f14b9003b43efa5ff79dc440f379b30ebca382c86c86f85b67dcb4bc0c576f760379316a74267bb80a712922833942995a4b11db03963d4b1543aca9204e413186ac3b1921e33afe486134f4ec19f54bad4b08dac4f8cbfc02013105c49610b84121f9f293c3fd269267278b76eb05b5ced5e3f98083481beebffee1531ea2eb951e64038136e2483981080048df657e706c67ce1ec52b65a2d2bb30b01e4732925d19eb3350e21bbb9a14280af31da6ba9a6c5c099841dc3afc5df8e0bd0b19bc8f55333a2e5452525d4abc1da57cfaac4020a71b5490cfe2bc60caa064840aa4dbdecbbcf6193356ca1f9138714623d7ea6a0bb689891be66a1f0bb0df4346bd0fd890a97e227217694e6a2068eb2f68224692904cde28e6da91847da0d58a73b4f1d01cb9565a74e513eed2d9183e7d17050ebe3c00bb04c742b962434a862a7cc3a110e2e5b359858186340f16907f90cd4fb12eec3f87e5b108058f57b0a3d81d04cc25d7fbd2ccfd922107e5b87977f70c2548a966237e659048d7f042c78aff88c40c2a0f8949abe4d55b6716c6e8e633349dfbe46ba21f063316ade1d0dfc5fda00b0cc1894d3ee5be8753d2c4618d2477c5c94ac25a726e5bfafa94ae263c06cac099bc9f6d9535b2168dcf987eaa455f1caaeb40992b7cbfb328f7f7124b8443c8d1b66351cb93b23bbeda1e23439451069bf1e7d672f6f02d3abb5d0831a281e03f086fe0a0149eebd11432465cb31de4b5dbcc456a5a79a880ca867be9bfe29140cfc317a5daac08ea3aa01935facd848eea58555d69eaea4c67e63ba6fcae20d7b4735ca23a9bc7d6a31e8fdc28e942097d03308ef6e23a9d97f5a3c101e2faaf45c41fc190437b21f4b31facb3ebf213f64645efa26fd9834ff2eec12acbef00dc5934b731a15c701863d13d483f26971a707d7650a74bbdb731828412be33809ed19233056a724f7f6ff216da960bcad1a7980b0cfdcb6c765462b853528234ae7c824014876d84cc1cd0e4a8091ea2a1e31528e222f02e3f5d1c6f1b5404fe40dda87fab97702f6408f27f236222747f4b55af82c60f92e154aac8a99971226fc9a89bb0dd79b1f8e90dd5bbdc4ede7fa9149ca5d2dde005fe4e7b235a9cd2c866f6c142333804d5fc10a29df1994e64cb29dd4e9286e2eae6207f23212cce40b8d03d7445148e03bc6fc9c814ca9021a59effe6cba62317c97f9649528e086c969d39b71a8d0ee5de33ac43f682b37dc37d75360abee9259ee2bfdcccea0646a5793a65a2e6b695e936f6b7a195f3065f77a2f08434bb9b086be23ff66f57b95a0668b0a7167b19791d5cb0efbf8a1fa4a362572b33cbec2fa3e1378756ab04f2aeff93a33e7f8d420efb31128754db9dd765119111139a43045684aa0ff04addb7cd3745db3194c04c0fd988725a9e5649cc422a84f13937ca40c89e3514cbc16f6f1415a4619cf1768fdc6e7d4f8d334149c57689ccbc9e826db8db261713b3841d7851666da329bf3c392c329bbfa2cd00898cec766d267347519aa688e12797a2af75ac44c2f4071192ab32c6f76fd762eef6f3bcf270bcac98f9451c1af8c088b7d6578156931898b78c9ec1a4c6ce97863302928376884b84cfdb2a7b5b9571157103811df717c1f5cbdcf8c4dbbb590f8f97cb255e22478a76a8814af1f66c742166d2a14ae7fcd89c60d2badbca51c0b3742f4bfbc293bec8e5847dac00688c7d1528c95935478e8868dcc3835e6def200a1d0c333b8ea2b3ecd01c51f02c757e45256fb78e2de68f7a44491ed31fe959ebd5ddc2bc70ae5cad3912a442636a679ffbfe069cdf4efb747b66239a0a0b0f1d4cdc9f902cc67762105d7db54e76d0f1fd32b817543d0f173476e6adc4293c093d1527992d13810b5cd5eb301fe464094a25ed1db116fef27d42a0103727532ee3e3b62746018e8abe98ef488fd9433b799dca752136e63490e14988b0ec7628fa2ca89e8a4ba7700574bab92571cd6021b149cffe2ffc431b0a2af5fd7754e781e4ec1fd370517481a3449aa77205d6c7ef6bc96f894683b1b8e155548a9768c8b2eefc3bddf94a9e036acf146907d7c44ae0226bcbb802be067ea25eac0c56fd24a2431288abd8048f01090dae0cfb7eb6b040148b3074ca2d04a5697212192cfc33f664d523059ae6c3db6a7759a21919c05b6f09b1cdcc9b49115fedec98cd9c769aa9207376fc1599e5b2cf52cab278dff676c6b6219227088f7d388d791a97adcc074229a6c5ef4bb342183b94940be3a93557b522c86a6a3f912a07f123f7e718558c1bc65685bc35c8ec04ee62d3aceb0927e72ec9c497a2ef016e71237730c5225cfed41639e60eb895829d39dc9041e365da9cba7a072f7a238150bce4c9e8f57e605726640466555058bc29dd6c0f2fc847f34222b293afb7ede0e9c5f50194025cb571884431025058ecff38e4e477afeae1c8d3f88ad347a5248aabb597bb41d9c87b76ede72a11bc3c0e2b589595cc925162c60e3100de8e8ba4b7a155a4c507311902333426d1ea521b2a897a77c69d97b265ebf50e3793768ff9b4cbd0f01473931122bfe5d0e9f560ad8d201c1e9f5881b3b9b80a3085f91dda82d0bcee4b5ac07c4ae8153c08ca0d5b499bc2749c6e731b2a60a9d8433b8c8ed8a816045e030238566b008022b497b8cdb3f82412880e90264381f6aa0f36d025e491fd94635584e5e7481c824cc4dc0204b37afdeda0e42fb27454c21f7520567c0134ae66bacf433b372488973df742ae0291a6278cf9b86cf892305f2f77d2b3b0175d5225beafc9026fd81c846afd83261cfdf47446dd50837dacc775ea3e374dd31f5d15f9283b79e5f0d2845bd13c82be3dea5f7677a666c01d298bf8de5ec32fc4911d0d9daade14655f93ac70d5ac7d0aaa396a3b4d061b28e04db4cb13f654a9e1abf3813a23eed8488abdb8e93e8954cf19df01ea5a503b306d0b892cfdd5cf276edd7bc9a7277e4b39115a1d2b0189ceb9cae82e1c35469abc7b06a4c60ee4ead6fcf34bf4f9a11d8eb6bcbbb5e234a962fb08e001d324073b31fd6477c5ed09cf258b759f234604134abd8d4265a22f6ab2f5535258f367f3c0bf4ba412bf5b1f74e89f95412219a59b577acfd682e1f81c063ec1cc7a826e7e008d14dbbb10a949530d604ccba2187cbf1629ad58c46302d258eb88a9b932bc003b98f992eb9fbc80df8da2e717bd1612dc5ad936e3c05c2ac6e11d9d74a6949c55cde0cdcb2e819244d9a6e895db1febef9cdf4d6215e6ac6518849351cb4c4ce396fbea27ba880d4ff41895a2411bf46c9cbaa415456f9f79e8d4da5d19ec9b63dd80832ba2aa695cc32397a76cbba1b5dd0fcdbc84a09d4bbf1e1f7f589ce018abf983efdb21314011bedeac3c1b14e8ab537bb23fc67394c321b38b3da9cae15d08ecc1934f10c62388dfe2d65bf6eda7dfde2169cf2cc8e26458b92c672bbdf598fa92d3f51bf48328c099b9bf29f65dface8d9999e76844bd319a862fac6369905546de3e1217aef1dcc864f714812c0b267b89cd1b2b986ff1d2493ff0b26d899cc282bff0ec7b841878a7324c08d96c1c7f5f707b71e1a7da310e00fa45f28bc0df8f368b1beac893235f847c6cb810afe474f77ad08869d063260bda81bcc0d99143bf5b67cf30fb0f8b9bd113f883be728371557dbc4fdb9c38251f9d9c2dcb22162834a96d87404e743facdc566682f3240e2cc7f4cc2d91725b24ffa9b9f20ca3015b37d41948800b137218cead01859b3a87eda9752ed7f8ae75fb6e6ff8b7656e024b2dfe85e7f9fa543bb4b5a758be9d19bbf21c45dc8585d2a3b3c980c9b1e6dea5fab4e24b16cc9e13e9bee4a6d3d96cb504a5eb389039c443f35b744d638fef6a8d924acb31c8864ade20db8104c7ba8bc29aa270042e8b61622a78e43ef48ca4e200397dea87e63d72a9c786c974b8f26ed31ffde4f44cefec844e9b08313ca5799df8a82aeb1cc8c4fffb58b76133f4225b20ab21669348a0f8741e74593060107cce66df7ca6cf7ec805a008da7e794435c82af6a449a1f76743532e071f283dcdd38979d5fd487d6819b48784dc93b8d263bcc99b345aacb724e152e7c513efd32aacecc80258b1be10f4cb83cec52082eb186c48ff107a17fe1eb2a2416bb45898d53985e11d0efe847d79fcf71461cdcda2e96e373b27b1eb7f7f0b6310fb8a799cd76fb926c7bc312034f3cf23c00ae9b6d7fe16c127fed06fc2afb8e770ce377920e3ba619474b98806ab65cd140927914591649df478082253a19bc2aee86ef05f7db090e71e5e0e9563d13f318b37d3fda10bd58418475e039b448648b2b81983a14a6c595095615c6724fa04801463f9db3e79bc24537dc185a70e866a2ca04c6e1cecaf1bc02ab855ba8df9f3287408f75e36dc984f5e4716771c05d98f398a0a5b8af5bbf252f6001267a362a35fc8e9a06331927809c26d07bf5f4e71772e8cbf31c717f7fb6439addf89ac05ece3b0f009b53d45811dcd0200bdb702cfea498709750f900ad96b3502dd3508431cc058b6b2cfa8e8033fd4729f34f0a637b088580cca5c5ccf9238e6fcb31ca2d65c9c6d5d6d6991ea13fa2f55aa11f6c91b3d7f55391746ffbd6c6289685de199346c6fe8e1c92a1992ab08acf1d286e4180e9fee3e33b4f51cbf969a44e9f36e7fd1f370140d271468bcdb4121d6c5f53ad4b99784a1033c8c55a1b8e927e42f2375c979d68f78ece282c7c532aad8e4eed834fba47ae684fa4c7d1df415043454527fe46d5655d03986068c9fa5ab0549b5ef8bf1d7de4045ecd9bb2dca3356fed681323c0a16581c16366a9fd86256a367ec30c6a9b13e331a3675ed16c8d78a056e374b5ce6769d14d65e24ed789d0a7e4a0a4443948f48f01225e81e9052e34f7f70eb3705e49ce4718948a409051bc75ed7855f6a62d743f6b8930ba07a82933be06fb4c6b9859c20404780e939e441d3c329aed322fcba83117431ee9c2137628175471ef0410af863faa8a6c876f1c87883d8523679b75468b3952e779fbce564e50898363febcafbd165a7935b6f739d63574d60d377b1d3a4b82af6f0c14314cd11b017a92a9cf7bb8057f98506472d6cdecae80dfbde7c62b89727cb3d745517ab0f85ed7e25f69cbc55d5a6d027c91a98a2fa5349a49d1de4766fce8c881b9710c5ea19ab46854c0a525cfebee427c4431446184a831071caa6717fe3fa92a048fd70e2c5238802c87365d6466b4aec37ffd03edd49a894bd64e2ceb863b59ea3ec4fc4548867ebfc446ac48bb88a8aa6220776c9efbcbaead9107e0ea7427f620c32cfa01e806910a10d36cdd7d7d014b14dc823770c32e914e5021466678e9b1d7c228bf1f8069dda67a830751e12857b0a0e68b2a4306691f0259e0ddae8ca8e5d6381990a9d0e35f3affab31ca60e88fee7fdd3b8b17e5fbeb08a308746fe2b242b2c1cc21ba5e972f991f2aaae28cb30a135858eb61b3f2c15c580add1aafe915fe45f22934208eada2ee4906ed2db158b3876ce560a57e252922cca4baecf7e2cca098a5a22c8daabb7d4faefebb3b6b174600e22c1de107e1afe705cc7ffa9bda49372024d85bdcbf6e209e691c8b29b51fe495562cd13cc453b5466d3ef329dfd67562890b7c19fb8054f8ab996f2fa8649dd034b35903a9cb4ac19dbdd4680e1249e4ffd8f3668320292e665bf536951b6ac6da4cf1dc5942bc81662e418ea331ba41ecc13b9941e6a8268d0f4180e8bece3d18a97704cd86837ec312f07c5b2251c379d0de5e9562c682439180c82203011ec2a66ad6cc26782017886798a3800d476b15cde1b879840b3b20ab116301fcdc3abd9d2db60e350affb01dc2dc8e28c6cfb73c40eed3e05e9395d5d0afa98354ae0c12f3c7d216edc7cb938096ddb8f0b848f354c1e4d8b777b227afe5e37803a1eaf0f85563ad52074b8af66f09f68117b2f967d5c4b8327e318e5dd85c6e25be4e1da6c5a2c6e899a20b25a5b186be3007ef64b021c532524cd99e02c0d0395f4604bf62022f3987813e78e6cde9971ba02c16f31b4e21cb2a3f4f0865cfd012fdc4ca1f9613e403fc1eb992506f55b8219de9da8b397aa1a46e6ab7ffbd63964d8f5dcf40cd813c9d2be9a6a3b9e8b0fff140f089e480a9fa0ba27f3024151f3ae63ba97123d732a02c865789a03f9e494c31bf7cf2fe5671d1f3523e6992271a3ebcc3c9afb0870f1a18bd3f5c0adc66c224f5b0b461af790f1e2612277b2f403bf93694bcbc292035efc9779b81f950948857d745cc7d0eff3e1a7d5a04c4534ba528fb3aedf88d521c4a29a34b9f04d1cfed067deb00d8c62054bbc0003e6055a93ec258b0e26acf4e2ce8653ccd92966216efcdf46d1bdbac63140060059a69f117841f3e804e2e2abe828b4a7e04877560d4c6305ae8e01fed143d9e4142a2d2f544cb3da4163f3627f9eb6283676640e23d61892294bb062428466785008d596b314fd54f16eb8b019599d5bb67ddff4af75162f12410f9680b249d963cd1e70dd836318b73178cac45cca57b8a4d74db310abc5414da4515061364009222d9cf831a1601ce7721ab95393a1cdfbdffbd7bc67f133a5358ce08688a27e58532a17cabe6ae77ca89f50ebd8f910fc468ae264e16e9c58e296fd273359bbf7356b6a7b891393059b43dbf2621f48c12b7f6d9f8e39a099088360f7b9e52905243254f0cb8731b8350e7bbd5bfa26ecd986bf5056c225a37d9309fa3c69e2e4a450fb844a04682c097500f577c8c70455d355d3f2408bd93edcf1fa6adba1b1127784574965c9752aca4052b3c0248b7653327ef4f88757f9505094a35974396e061a56db0a9cf6a01287056071c8511ff1ac313464c5fa037d8ee42360d3901f9b4b3c28660597a9dff56f3cec0e4e97ad3f68ccf4a4912c5091fe9e7ea335960ff2dab8f655067761f6ec7b3e3efab1467a1af8a45712059d0c15e207ffdf3bed87a8039b2a841c541f1481d51dc5369b4a0b536a3222061606ff36abfbafed7eee01d18600e5e9b52fa39590635884d2c8d456937fc948da2e9671975a6064221c0fd3a8ee5521db033f99cc45bfa41d0e85b9e38b5750a741113aea701e06fe6c22b265b9f61c34e80a113ea8b110b7908f5a1f4e4fba94a1c24418774ffb00ff22702472ef572d1bcb5f23733513f749238c3536adbb89b2551214ef0e1ada69fc3cef5e41f6811fc0ddbb254775e4fd556994c0e6a27dd4ac655e00c0c7122989d01c2a3fa97e9a768bb0aebd60f329a80cd990bd2ce88ec7b5e1b338ba2ea952a788646bb1bdac6b4b2906cbc8717c7b57875c09d6188b6757ed79528b7af2191121542cb4e624a1a4ef33e0ab40e655f083e6e372077e069a6521d81235834d93f9a262c759a1e2c87111e88f6c5b6f712c16bb55cfa35150668fb1b29d25660f33f949e3c4a570d42d10d83fa11ea4df3979b648709e06c403bcf973c23e4356c631372a35efa1d458cfde108120a190079e497682185ffcf52fe507c61811a17c009dbe91bd8117d5e3fcde619e824cc81c7b5d45b6a12805c60e6687b1c2b5d8ba03fb57aa1260478f636998c8c0cc11a42ea150d4b239235b03c374ef7ba06cfdb308596babe836a9a9b01691e229a21685f56a289366e90ef39c109462906fddb0511905db229a0d9877905e0f29bdcf8f93926ad899bdc06ae31e937d5d4e6689c89e5705f8f562f99cc3fd4e82cec5d4319b5ae2abb126fe1dcf5d2b54f91f29d211b8da85</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Where to go and What to do</title>
      <link href="/2021/11/23/Where%20to%20go%20and%20What%20to%20do/"/>
      <url>/2021/11/23/Where%20to%20go%20and%20What%20to%20do/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="22e7655907ac59753b08d7c6f49c782eb3fd06f996ab0b9ef1ab283698de1fed"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wilcoxon signed-rank test</title>
      <link href="/2021/11/23/Wilcoxon%20signed-rank%20test/"/>
      <url>/2021/11/23/Wilcoxon%20signed-rank%20test/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>Wilcoxon符号秩检验是一种非参数检验方法（总体没有高斯分布），t检验貌似要数据服从高斯分布。</p><p>具体是这么操作的： 假如有两组数据<span class="math inline">\(X\)</span>和<span class="math inline">\(Y\)</span>需要检验对比：<span class="math inline">\((X_i,Y_i)\)</span>首先被转为差值<span class="math inline">\(X_i-Y_i\)</span>，记为<span class="math inline">\(Z_i\)</span>，假设<span class="math inline">\(Z_i\neq 0\)</span>且绝对值均不等： 1. 计算<span class="math inline">\(|Z_i|\)</span> 2. 将<span class="math inline">\(|Z_i|\)</span>排序得排序后的索引<span class="math inline">\(R_i\)</span> 3. 检验统计量<span class="math inline">\(T=\sum sgn(Z_i)R_i\)</span> 4. 通过对比<span class="math inline">\(T\)</span>和原假设下的分布求出p值</p><p>如果存在<span class="math inline">\(Z_i=0\)</span>，有几种处理方法： 1. <code>zero_method=&quot;wilcox&quot;</code>：忽略所有等于0的数据 2. <code>zero_method=&quot;pratt&quot;</code>：排序时考虑为0的项，排完后扔掉这些0项的秩 3. <code>zero_method=&quot;zsplit&quot;</code>：</p><h2 id="refs">Refs</h2><p><a href="https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test">Wilcoxon signed-rank test</a><br /><a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.wilcoxon.html">scipy.stats.wilcoxon</a></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Probability &amp; Statistics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS144 Lab</title>
      <link href="/2021/11/12/CS144%20Lab/"/>
      <url>/2021/11/12/CS144%20Lab/</url>
      
        <content type="html"><![CDATA[<p><a href="https://cs144.github.io/">Introduction to Computer Networking</a>是Stanford的网络课，据说lab质量很高，就把它作为转System后的第一个小系统吧！</p><h2 id="准备工作">准备工作</h2><p>Stanford大气！能让我们这些野鸡学校的同学接触到最顶级的教育资源，甚至开放了lab，也希望大伙不要把题解po到github上！</p><p>因此我做的是Fall 2021的版本，所有的starter code都在<a href="https://github.com/CS144/sponge">这里</a>。</p><p>至于如何在自己的github上备份代码，参考<a href="https://stackoverflow.com/questions/10065526/github-how-to-make-a-fork-of-public-repository-private">这里</a>。</p><p>虚拟机平台用的是VirtualBox，144官方提供了基于Ubuntu的系统镜像，CPU和RAM随便设。</p><p>大致按照<a href="https://stanford.edu/class/cs144/vm_howto/">官方文档</a>配置环境，windows环境可以用powershell，无需<a href="https://putty.org/">Putty</a>。 开启虚拟机，通过ssh client建立TCP连接到远程主机的某端口：<code>ssh user@remote -p port</code>，<code>user</code>是在远程主机的用户名，<code>remote</code>是远程机器的地址（IP/域名），<code>port</code>是ssh server监听的端口，默认22（即登录请求会送进远程主机的22端口），上面通过-p参数改变了该端口。</p><p>不过遇到了点问题： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211103183846716-1107297673.png" alt="image" /> 奇怪！远程虚拟机明明安装了ssh服务!</p><p>从主机去ping虚拟机超时，但是虚拟机可以ping通主机，参考<a href="https://www.cnblogs.com/mengjie88/p/11803879.html">这个设置</a>成功ping通，后来发现国内的这些blog都是在胡说八道，真正的原因和解决方案在<a href="https://unix.stackexchange.com/questions/145997/trying-to-ssh-to-local-vm-ubuntu-with-putty">这里</a>，本质上是虚拟机的端口转发没设置好，设置好后VB会把连接localhost:2222的TCP请求转发到虚拟机的22号端口。</p><p>关于IDE，开始用的VIM，后来想用vscode，Host上安装vscode以及remote-ssh插件，关于配置网上一大堆教程，自行学习吧，powershell以后就负责编译运行了。</p><h2 id="lab-0">Lab 0</h2><h3 id="networking-by-hand">Networking by hand</h3><p>这些小游戏都是为了翻译翻译：什么是可靠的双向字节流，网络通过这种抽象完成许多重要的交互，如上网冲浪、发邮件等。</p><p>第一个事是要手动模拟浏览器的请求过程（注意手速，不然还没输完就408 Timeout了）： 1. <code>telnet cs144.keithw.org http</code>：<code>telnet</code>作为一种client程序，负责和服务器的某个服务建立连接。用telnet客户端程序在本机和服务器之间开一个可靠的字节流，并请求服务器的http服务（80端口），连接成功证明端口可用 2. 建立连接后就要通过HTTP协议请求内容：需要告诉服务器所请求URL的path和host：<code>GET /hello HTTP/1.1</code> <code>Host: cs144.keithw.org</code>，不过为啥需要host呢？难道服务器不知道自己的ip吗，好像是因为服务器可以同时运行多个网站/服务 3. <code>Connection: close</code>：表示希望服务器一旦完成响应，就关闭连接 4. 输入回车（空行）：表示HTTP请求头结束，接下来是请求数据（当然GET没有，POST有）</p><p>其实这就是一个HTTP请求报文，效果： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211104155702139-1679706369.png" alt="image" /> 作业就是瞎玩： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211104215913218-403717095.png" alt="image" /></p><p>第二个事是学着发邮件，请求服务器的SMTP服务（主要用来发邮件），我试试和自己的邮箱互动下： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211106090516675-391035638.png" alt="image" /> 这里要注意：首先要开启IMAP/SMTP服务，还需要获取第三方客户端登录的授权码，登录时邮箱名称和授权码都需要Base64格式。</p><p>文档里说From地址是可以伪造的，有点神奇，垃圾邮件可能挺喜欢干这事！但是我实际操作时是伪造不了的： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211106091008967-598610443.png" alt="image" /> 因为已经登录了本人账户，所以发件人必须一致，Stanford那个没有登录，也许是商业邮件系统一般都比较完善？</p><p>第三个事是作为服务器去监听，主要使用所谓的瑞士军刀netcat： <code>netcat -v -l -p 9090</code>：-v表示显示执行命令过程，-l表示开启监听，-p表示在指定端口监听 <code>telnet localhost 9090</code>： 然后服务器（netcat）和客户端（telnet）就可以通信啦！</p><h3 id="network-program-using-an-os-stream-socket">Network program using an OS stream socket</h3><p>这部分让同志们利用操作系统内核提供的stream socket从Internet上抓网页，和上文中手动抓差不多，不过这次是把手动过程写成代码。</p><p>由于Internet只能提供尽最大努力交付的数据报服务，因此这些数据报可能会：丢失、乱序、内容更改、重复，所以通常OS会把Internet的这种抽象转为可靠的双向字节流，以便应用层软件使用。OS一般使用socket来完成这种转变并向程序员提供接口，socket和文件描述符类似，一旦建立连接就能进行可靠的通信。后续会自己实现一个TCP去揣摩这种转变。</p><p>这个简单的web client程序有几个要注意的地方： 1. 由于<code>connection: close</code>，因此服务器只会处理一次http请求 2. 服务器响应后就会关闭从server到client的socket连接，但是client的<code>socket.read()</code>可以持续读：If the connection is broken on a stream socket, but data is available, then the read() function reads the data and gives no error. If the connection is broken on a stream socket, but no data is available, then the read() function returns 0 bytes as EOF. 3. EOF一般是一个定义为-1的宏，因此没有对应的ASCII字符，因此也无法显示出来（可以强制转int），C语言将其定义在某个头文件的宏里（可以直接用EOF判断），C++一般使用函数判断。EOF的作用就是client可以判断是否读完了server发来的响应，终端输入windows环境是ctrl+Z，linux是ctrl+D 4. 为什么一个<code>read()</code>不够呢？因为<code>read()</code>是有limit的，超过上限就得多次读，<code>std:string FileDescriptor::read(const size_t limit=std::numeric_limits&lt;size_t&gt;::max())</code> 5. 及时关掉socket的写功能是一个<a href="https://stackoverflow.com/questions/4160347/close-vs-shutdown-socket">好习惯</a></p><figure><img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211207143452338-2049325007.png" alt="image" /><figcaption>image</figcaption></figure><h3 id="an-in-memory-reliable-byte-stream">An in-memory reliable byte stream</h3><p>在单机上实现一个可靠的字节流（内存里当然是可靠的），writer可以结束字节流输入，reader读到EOF后就无法继续读。 基本可以理解为一个容量为<code>capacity</code>的buffer，<code>capacity</code>用来进行流量控制，文档说了只会进行单线程操作，因此不用担心并发的读/写。 需要注意：流本身可以无限长，<code>capacity</code>存储的是已经写入但还未读取的字节，哪怕<code>capacity = 1</code>，只要writer每次写入一个字节，reader读走，这个流就可以无限长。</p><p>开始想用<code>queue</code>，但是<code>queue</code>无法支持<code>peek_output</code>操作，那就用<code>deque</code>了。 <code>size_t write(const std::string &amp;data)</code>：如果长度大于<code>capacity</code>该如何处理？这种情况多余的写入只能被丢弃，就和网络上超出线路容量的写入被丢弃一样。 <code>size_t bytes_read() const</code>返回的是所有pop的字节数目，包括<code>read(const size_t len)</code>和<code>pop_output(const size_t len)</code>。 <code>bool input_ended() const</code>返回流输入是否结束；<code>bool eof() const</code>是reader判断是否读取到了流输出的结束位置，因此必须满足writer已经有过写入且buffer为空。</p><p>记得先<code>make format</code>，再<code>make</code>编译，最后<code>make check_lab0</code>自动化测试。</p><h2 id="lab-1">Lab 1</h2><p>接下来的4个lab要自行实现一个TCP，模块如下： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211207210801604-1226780700.png" alt="image" /></p><p>由于sender会将发送的字节流分割为若干segments，每段不超过1460B，封装为数据报交给网络传送，但这些segments可能会乱序、丢失、重复、交叉重叠、长度不一，但是不会出现inconsistent的段，因此Lab 1要实现一个流重组器，将收到的字节流中的segments拼接还原为其原本正确的顺序。</p><p><code>StreamReassembler</code>会用一个可靠字节流<code>ByteStream</code>作为输出：as soon as the reassembler knows the next byte of the stream, it will write it into the <code>ByteStream</code>. 接着应用层就可以从<code>ByteStream</code>读取有序的字节流。<code>StreamReassembler</code>和<code>ByteStream</code>的容量大小是一样的，不过<code>ByteStream</code>真正的size（绿色部分）是动态变化的。</p><p><code>push_substring(const string &amp;data, const uint64_t index, const bool eof)</code>一旦超出<code>StreamReassembler</code>的容量，就只能丢弃该碎片（或者丢弃部分）； <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211118103108010-1947303917.png" alt="image" /> 根据上图：可以想象为我们拥有一条index从0开始的无限长的字节流，每个段都有自己在流中的位置，随着应用层读取流中的数据，<code>StreamReassembler</code>就像一个滑动的窗口，落在该窗口内的段都需要被按序组装。</p><p>显然，需要用某种数据结构把不能直接写入<code>ByteStream</code>中的segments存起来：<strong>data+index</strong>即可唯一确定，因此单个segment可以用类、结构体或<code>std::pair</code>存储，为了方便起见，在segment结构体中增加成员变量<code>len</code>来指示其有效长度。 由于可能需要根据index快速查找合并位置，因此最好按序存储，并且自动去重，所有不能写入的segments可以用<code>std::set</code>来存，底层基于红黑树实现。</p><p>处理逻辑： 1. 新来段是否超出/部分超出了<code>StreamReassembler</code>的窗宽，如超过则进行剪切； 2. 新来段是否和<code>ByteStream</code>之前（蓝色+绿色部分）有重叠，如有则切除重叠部分； 3. 合并新段和暂存段：确定新段插入位置，不断将其前后的暂存段往新段上合并，直到找不到可以继续合并的暂存段； 4. 判断能否写入<code>ByteStream</code>； 5. <strong>处理后</strong>新段的eof为true：<del>若暂存区为空，结束向<code>ByteStream</code>的写入</del>结束写入的时机可能会导致潜在bug，后面有血泪教训；若暂存区非空，<del>报错</del>，可能是last segment先到达但还不能写入，因此存入暂存区。</p><p>根据上述逻辑准备用3个函数完成： 1. <code>void _cut_overlap(segment &amp;seg);</code>完成12 2. <code>void _merge_segs(segment &amp;seg);</code>完成3 3. <code>void _write_to_stream();</code>完成4 4. 直接在<code>push_substring()</code>处理5</p><p>这个实验一般就会开始出bug，我直接跪在了corner case，来了一个eof为<code>true</code>的<code>&quot;&quot;</code>，空串是要被忽略的，但是这个空串带了我们需要的eof信息，由于在<code>_cut_overlap</code>直接返回： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (seg.index &gt;= _first_unacceptable || seg.index + seg.len &lt;= _first_unassembled) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure> 所以没有正确设置<code>_eof</code>： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211211135443937-770319647.png" alt="image" /> 测试样例<code>t_strm_reassem_single</code>报错，所有的测试源码都在<code>./tests</code>文件夹下，对应的可执行程序在<code>./build/tests</code>。 <code>sudo apt-get install gdb</code>安装GDB，找到对应的测试源码文件<code>fsm_stream_reassembler_single.cc</code>打断点开始调试，跳出<code>launch.json</code>稍作修改就可以愉快地debug（面向测试编程😂）了： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;sponge debug&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;/build/tests/$&#123;fileBasenameNoExtension&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment">// &quot;preLaunchTask&quot;: &quot;C/C++: g++-8 build active file&quot;,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;/usr/bin/gdb&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>后来第7个样例一直过不了，而且Byte Stream实际读取的字节数和真实值差距很大： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211212162034900-680357364.png" alt="image" /></p><p>怀疑是提前<code>end_input()</code>了，主要是下面这种case： first unassembled=7且first unacceptable很大，先来一个<code>index=9, eof=true</code>的&quot;&quot;，再来一个<code>index=7, eof=false</code>的&quot;ab&quot;，如果这样判断： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_eof &amp;&amp; _unassembled_bytes == <span class="number">0</span>) &#123;</span><br><span class="line">    _output.<span class="built_in">end_input</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 很容易在第一个段就<code>end_input()</code>导致提前结束写入。 因此核心问题在于什么时候调用<code>end_input()</code>，我用了<code>_eof_index</code>来指示结束的位置而非用布尔变量<code>_eof</code>，一旦<code>_first_unassembled &gt;= _eof_index</code>就结束输入。</p><h2 id="lab-2">Lab 2</h2><p>Lab 2要实现<code>TCPReceiver</code>，将从Internet接收的segments送入<code>StreamReassembler</code>转为可靠的<code>ByteStream</code>，以供应用层从socket读取。 除此之外，<code>TCPReceiver</code>还要负责和sender反馈：1. first unassembled字节的index，也叫做确认号<strong>acknowledgment</strong>，这样sender才知道下次该发送啥；2. first unassembled和first unacceptable之间的窗宽window size，用来告诉sender允许发送的字节范围。两者结合形成滑动窗口用来进行<strong>flow control</strong>。</p><p>第一件必须要处理的事就是序列号sequence number的转换：在<code>StreamReassembler</code>中我们用的是64位的stream index，因此不太可能溢出，但是TCP header空间宝贵，所以第一个字节的index采用32位的seqno，这样就带来几个问题： 1. stream index可以近似于无限大，但是seqno只能从<span class="math inline">\(0\sim2^{32}-1\)</span>不断循环； 2. 为了安全起见，seqno并不是从0开始，而是取一个随机数Initial Sequence Number(ISN)来表示stream的开始SYN(beginning of stream)； 3. TCP header中的SYN和FIN(end of stream)标志位都要被分配seqno，但是SYN和FIN并不是真正的数据，只是表示流的开始和结束。</p><figure><img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211216213718402-1668481893.png" alt="image" /><figcaption>image</figcaption></figure><table><thead><tr class="header"><th>isn</th><th>isn+1</th><th>isn+2</th><th>...</th><th>2^32-2</th><th>2^32-1</th><th>0</th><th>1</th><th>...</th><th>isn-2</th><th>isn-1</th></tr></thead><tbody><tr class="odd"><td>0</td><td>1</td><td>2</td><td>...</td><td></td><td></td><td></td><td></td><td></td><td>2^32-2</td><td>2^32-1</td></tr><tr class="even"><td>2^32</td><td>2^32+1</td><td>2^32+2</td><td>...</td><td></td><td></td><td></td><td></td><td></td><td>2^33-2</td><td>2^33-1</td></tr><tr class="odd"><td>NaN</td><td>0</td><td>1</td><td>...</td><td>first unassemble</td><td>...</td><td></td><td>first unacceptable</td><td></td><td>2^32-3</td><td>2^32-2</td></tr><tr class="even"><td>2^32-1</td><td>2^32</td><td>2^32+1</td><td>...</td><td></td><td></td><td></td><td></td><td></td><td>2^33-3</td><td>2^33-2</td></tr></tbody></table><p>第一行是32位的seqno，可以想象成在圆环上走路（正反走均可），二三行是64位的absolute seqno，四五行是64位的stream index。</p><p>absolute seqno转seqno：<span class="math inline">\(isn+n\%2^{32}\)</span>，<span class="math inline">\(n\)</span>直接强制类型转换即可截取低32位。 seqno转absolute seqno：有点麻烦，可能对应多个结果，因此选择距离<code>checkpoint</code>最近的那个结果，<code>checkpoint</code>取前一次所收段的absolute seqno。原因在于两个前后到达的段absolute seqno的差值几乎不可能超过<span class="math inline">\(2^{32}\)</span>。有个corner case是当<code>checkpoint</code>比较小时计算得到的absolute seqno可能小于0，需要加上<span class="math inline">\(2^{32}\)</span>即<a href="https://stackoverflow.com/questions/4201301/warning-left-shift-count-width-of-type"><code>1UL&lt;&lt;32</code></a>。</p><p>做好索引的转换后，因为麻烦的部分已经在Lab 1完成了，剩下的就是根据<code>TCPSegment</code>写一些业务逻辑。 <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211217214005787-1024116698.png" alt="image" /> 注意下SYN和FIN对ackno的处理就行： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211217214722866-2056520012.png" alt="image" /></p><h2 id="lab-3">Lab 3</h2><p>这次的活是TCP Sender，负责将应用层的ByteStream分割为段发送，根据接收方的反馈情况进行超时重传。</p><p>每次收到接收方的ACK就可以知道其window size, 发送方在每次收到ACK时更新窗宽，并且在下一次收到ACK前，根据发送情况记录窗口的剩余容量，决定是否继续发送。 只要<code>_stream</code>还有需要发送的内容并且receiver还有空闲空间，<code>fill_window</code>就要一直组装成段并发送直到填满该窗口，receiver真正的free space应该是其声明的窗宽减去已发送但未被确认的所有段的长度总和，这个free space才是可以不断继续组装新段并发送时可以利用的，在<code>fill_window</code>组装新段之前要check该空间是否大于0。</p><p>另外，发送的第一个段是SYN段，没有数据，只有SYN和initial sequence number，SYN段发完后就返回等待receiver的connection granted，即第一次握手，此时窗宽看作1： &gt; What should my TCPSender assume as the receiver's window size before I've gotten an ACK from the receiver? &gt; One byte.</p><p>并且在TCP Header中SYN和FIN不能同时为1，否则应该报错RST，FIN段是可以携带数据的。</p><p>如果收到ack表明窗口大小为0，在<code>fill_window</code>当作1处理，但是超时的段不应double RTO，因为这是receiver的原因而非线路流量限制导致的，但是SYN段超时需要double RTO并增加重传counter，以便判断是否终止本次连接请求。</p><p>FIN段的处理需要仔细一些： 如果<code>_stream.read</code>以后<code>_stream.eof()</code>意味着ByteStream已经没有需要发送的东西了，这时就要考虑设置FIN的问题了，但是FIN是要占序列号的，也就意味着要在接收方的window里占空间，如果free space为50最后一段的payload size为30，那可以设置FIN；如果free space为50最后一段的payload size为51，那么最后一个字节就需要进行下一次发送，并且在下一次考虑FIN的设置问题；如果free space为50最后一段的payload size也为50，那么这段数据可以发送，但是这次没法设置FIN了，也就只能等到接收方腾出空间后才能继续。因此只有free space严格大于最后一段的payload size才可以设置FIN。</p><p><code>fill_window</code>有一种情况，free space还有但是<code>_stream.buffer_empty()</code>已经空了，但是只是数据发完了，FIN标志还没发，就需要再发一个段，因此这样写是不行的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!_stream.<span class="built_in">buffer_empty</span>() &amp;&amp; _receiver_free_space) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211224201911692-472858794.png" alt="image" /><figcaption>image</figcaption></figure><p>可以直接多循环一次然后用segment的<code>length_in_sequence</code>判断流是否真的空了以及是否要继续发送： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (_receiver_free_space) &#123;</span><br><span class="line">    <span class="keyword">size_t</span> payload_size =</span><br><span class="line">        <span class="built_in">min</span>(&#123;_stream.<span class="built_in">buffer_size</span>(), <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(_receiver_free_space),</span><br><span class="line">             TCPConfig::MAX_PAYLOAD_SIZE&#125;);</span><br><span class="line">    TCPSegment seg;</span><br><span class="line">    <span class="keyword">if</span> (_stream.<span class="built_in">eof</span>() &amp;&amp;</span><br><span class="line">        <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(_receiver_free_space) &gt; payload_size) &#123;</span><br><span class="line">        seg.<span class="built_in">header</span>().fin = <span class="literal">true</span>;</span><br><span class="line">        _fin = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    seg.<span class="built_in">payload</span>() = <span class="built_in">Buffer</span>(_stream.<span class="built_in">read</span>(payload_size));</span><br><span class="line">    <span class="keyword">if</span> (seg.<span class="built_in">length_in_sequence_space</span>() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    _send_segment(seg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 但是这样可能导致一直发送只包含FIN的段，因此要在while循环限定<code>_fin</code>来确保只发一次FIN段。</p><p>关于重传，闲来无事，把重传计时器单独写一个类，因为这个类相对比较简单，所以就和sender放在同一个头文件吧，不过据说有些公司的coding guideline有规定： &gt; Each class shall have it's own header and implementation file.</p><p>采用累计确认：如果发送方收到ackno代表之前的所有段都正常接收，因此用<code>std::queue</code>存没有收到ack的段（包括只被ack了一部分的段），超时后从队头开始传。 <code>_segments_outstanding</code>发送时在<code>std::queue</code>里是按照seqno有序的，只有每次收到ack才从<code>std::queue</code>里扔掉一些已经被完全确认收到的段，否则认为<code>std::queue</code>里的所有段接收方均未收到。</p><p>收到ack并清理完<code>_segments_outstanding</code>后，如果此时还有未被确认的段，重启计时器并将RTO和重传counter恢复初始值。 注意收到的ack可能是非法的，比如ack了一个还没有发送的段或者ack了已经收到的段的序列号 还有一个corner case在<code>send_extra.cc</code>的95行，如果收到了与上次相同的ack，计时器是不应该重启的，重传时只有收到的ackno严格大于上一次的ackno才重启。</p><p>计时器的启动可以参考课本： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211222163312884-1740072168.png" alt="image" /></p><h2 id="lab-4">Lab 4</h2><p>本次实验要实现<code>TCPConnection</code>负责将同一个主机内的<code>TCPSender</code>和<code>TCPReceiver</code>衔接起来，理论上如果<code>TCPSender</code>和<code>TCPReceiver</code>足够鲁棒，那么<code>TCPConnection</code>写起来很快，然而现实太过冰冷...第一次在项目中体会到测试的重要性，也有点理解TDD的好处了，好的测试不仅能够发现问题，还能根据测试样例debug，再次跪谢Stanford~</p><p><code>TCPConnection</code>既充当接收者，也充当发送者，可以理解为实现以后就可以在你自己的主机上使用，接收别人的消息，发送自己的消息。还有syn的处理需要考虑作为接收方和发送方两种情况分别处理。</p><p>通过<code>segment_received</code>收到TCP段后：</p><ul><li>如果RST为真，sender和receiver都要将其字节流设置为出错状态并立即终止连接；</li><li><code>TCPReceiver</code>获取自己需要的信息：seqno, SYN, payload, FIN。如果ACK为真，需要告诉<code>TCPSender</code>相关信息：ackno, window size。</li><li><strong>只要收到了<code>length_in_sequence&gt;0</code>的段都需要发ACK，如果sender要发数据那可以顺便携带ACK，否则就要发空ACK</strong>，便于peer更新ackno和window size。我遇到的第一个corner case就是空ACK段（比如第3次握手），由于Lab 3的sender只关注ackno和window size，通过要发送的seg的<code>length_in_sequence</code>判断是否继续发送，第二次握手收到一个payload为0的段，以后正常交流是不会这样的，因此第三次握手应该回一个段（可带可不带数据），但是Lab 3的<code>fill_window</code>遇到这种情况会直接返回，不会发送，我们在这里发送一个空ACK段作为第三次握手。</li></ul><figure><img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211225200758037-1347511939.png" alt="三次握手" /><figcaption>三次握手</figcaption></figure><ul><li>还有收到keep-alive段的处理：peer可能发送了一个非法序列号的空ACK段来判断连接是否正常并获取我方的window size，需要回应空ACK段。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (_receiver.<span class="built_in">ackno</span>().<span class="built_in">has_value</span>() &amp;&amp; seg.<span class="built_in">length_in_sequence_space</span>() == <span class="number">0</span></span><br><span class="line">      &amp;&amp; seg.<span class="built_in">header</span>().seqno == _receiver.<span class="built_in">ackno</span>().<span class="built_in">value</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">      _sender.<span class="built_in">send_empty_segment</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>TCPSender</code>负责生成要发送的段并填充相关信息：seqno, SYN, payload, FIN。并且从<code>TCPReceiver</code>获取ackno和window size进行填充，如果有ackno还要填充ACK。</p><p><code>tick</code>这里如果超过最大重传次数，不仅需要关闭连接，还要给peer发送RST段：如果sender的<code>segments_out()</code>不空，直接将队头的段设为RST，否则调用<code>send_empty_segment()</code>设置RST并发送。</p><p>比较抽象的是TCP的关闭这部分，有2种关闭方式： - unclean shutdown：如果<code>TCPConnection</code>发送或收到RST段，立即将发送和接收字节流设为error，并且<code>active()</code>返回false - clean shutdown：不出错的情况下关闭连接。</p><p>由于<a href="https://en.wikipedia.org/wiki/Two_Generals%27_Problem">Two Generals Problem</a>，背后的道理是在不可靠的通信链路上通信双方理论上不可能达成一致，因为总有最后一条消息是不能被确定收到的。因此只能A确认B是否收到即可，A保证B已经收到，但是B并不知道A知道B收到了。即client并不知道server是否收到了最后一个ACK，因此不可能两边都做到clean shutdown。 <img src="https://img-blog.csdnimg.cn/65c25a4886e14a8e82e13e76f33bbe99.png" alt="在这里插入图片描述" /></p><p>四次挥手是这样的： 1. client发完数据后发送FIN通知server自己发完了，但是server不一定收到了，client也不知道server是不是收到了； 2. 因此server发回ACK通知client自己收到了FIN，此时client知道服务器收到了自己的所有数据，但服务器不知道客户端是否收到了ACK； 3. 服务器的数据发完后发送FIN，通知客户端自己发完了； 4. 客户端对FIN做ACK，表示自己收到了所有数据。这个时候客户端知道：服务器收到了自己发的所有数据，自己也收到了服务器的所有数据，客户端没有问题。但是服务器如果没有收到最后一个ACK：它只知道自己接收了客户端的所有数据，但无法确认客户端是否接收了自己的所有数据。因此这个ACK如果没有收到，服务器重发FIN，但如果此时客户端已经关闭连接，最后这个ACK就永远收不到，这也是为什么有time wait。服务器收到ACK后就直接关闭连接。</p><p>从client角度来讲，做到clean shutdown有4个前提： 1. 接收字节流已经被完全组装且该流已经结束（peer不会再有新的输入了），对应<code>ByteStream::input_ended()</code>，即收到Server的FIN，Server确定接收了所有数据。 2. 发送字节流已经被本地应用层终止（即本机不会再发了）且已经完全发送（即字节流为空），对应<code>ByteStream::eof()</code>，即client发送FIN，但是并不代表server收到了FIN 3. 发送字节流已经被peer完全收到，对应client收到的ACK 4. client知道Server收到了ACK，这一点无法保证，因此有time wait。</p><p>总结一下就是：什么时候不需要time wait？如果是第二个发送FIN就不需要，那怎么判断是第二个发的呢，如果已经收到了FIN（对应<code>_receiver.stream_out().input_ended()</code>）并且自己还没发（对应<code>!_sender.stream_in().eof()</code>）就是第二个。什么时候clean shutdown呢？满足前3个前提的前提下，如果不需要time wait或者已经time wait了足够长时间就可以关闭。</p><p>初步写完代码后，就对着测试样例疯狂调bug吧！！有时候打断点会瞎跳，据说是编译优化的问题： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220104111823209-669239914.png" alt="image" /> 默认的Debug模式的编译选项是<code>-Og</code>，会对局部变量等进行优化，因此关掉优化选项，将<code>sponge/etc/cflags.cmake</code>中： <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> (CMAKE_CXX_FLAGS_DEBUG <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -ggdb3 -Og&quot;</span>)</span><br></pre></td></tr></table></figure> 改为 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> (CMAKE_CXX_FLAGS_DEBUG <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS_DEBUG&#125; -ggdb3 -g&quot;</span>)</span><br></pre></td></tr></table></figure></p><p><code>txrx.sh</code>的测试不好调试，可以用<code>cerr</code>打印一些变量，但不能用<code>cout</code>： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../txrx.sh -isDnd 128K -w 8K -l 0.1</span><br></pre></td></tr></table></figure> 调单个测试用例可以：<code>ctest -R test_name</code></p><p>如果按照状态机来写的话可能好一些，但不一定非要按照状态机写，网上有人说不按照状态机写肯定有问题，官方文档也说了，状态不过是一些模块的公有接口而已，不一定非要materialize these states in your code。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220104180142069-201294829.png" alt="image" /></p><p>神呀！Test #104-#160一直过不了，卡了三天，用Wireshark抓包，发现一直在重传SYN： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220104213010425-1104108783.png" alt="image" /> <img src="https://img-blog.csdnimg.cn/144151a19fe844cfbdbb2affc9b163d5.png" alt="在这里插入图片描述" /></p><p>实在没辙了，无奈只能通过替换网上的模块找bug。但是Lab 0-Lab 4全部替换后仍然是那个bug，不知道哪里有问题。。。严重怀疑由于服务器在美国的原因，结果不是。和大神讨论了下，据说换成VMware就好了。。。开始搭环境。</p><p>编译时如果提示g++版本太低，那就安装8.0以上版本并且进行<a href="https://blog.csdn.net/kenkao/article/details/89550641?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-4.no_search_link&amp;spm=1001.2101.3001.4242.3&amp;utm_relevant_index=7">版本切换</a>，如果还是报错<code>The CXX compiler identification is GNU ...</code>，还要修改<a href="https://www.cnblogs.com/minglee/p/9016306.html">编译选项</a>。</p><p>接着就可以正常make和测试了。换到VMware没有任何改动一次性通过了所有测试： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220105234831224-1290189010.png" alt="image" /></p><p>有点离谱...第一次遇到系统级别的Bug，至今还不知道咋回事...吞吐量结果： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220104220146252-1499569230.png" alt="image" /></p><p>虽说是达到了100Mbit/s的最低要求，但肯定还有提升空间。我没做profiling，参考别人的分析基本就是<code>ByteStream</code>的一些操作造成了瓶颈，换成<code>BufferList</code>后有一些提升： <img src="https://img-blog.csdnimg.cn/fe5c520655374b3e96b84ec9cb360262.png" alt="在这里插入图片描述" /></p><p>接下来的瓶颈应该在流重组器，等以后有时间再说吧😂</p><h2 id="lab-5">Lab 5</h2><p>实现IP/Ethernet网络接口，也叫网络适配器/网卡，用于IP数据报和以太网帧的转换，可以作为主机的TCP/IP协议栈的一部分，也可以作为路由器的一部分。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220114094034373-1300829794.png" alt="image" /></p><p>主机与peer之间TCP段的交互主要有以下几种方式： - TCP-in-UDP-in-IP：进程只需提供TCP段和目的地址，剩下的事情均由Linux的<code>UDPSocket</code>完成。内核负责构造UDP/IP/Ethernet header并发给下一跳，并确保每对socket的组合都是唯一的，保证不同进程间的隔离。 - TCP-in-IP：大部分情况下TCP段都是直接作为IP数据报的payload，需要向Linux的TUN接口提供IP数据报，内核负责构造Ethernet header并通过网卡发送，因此进程需要自行构造IP头。 - TCP-in-IP-in-Ethernet：网络接口<code>eth0/eth1/wlan0</code>负责网络层和链路层的转换，Linux提供了更低级的TAP接口负责交换以太网帧。</p><p>大部分的工作都在ARP协议，有3个函数： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::send_datagram</span><span class="params">(<span class="keyword">const</span> InternetDatagram &amp;dgram, <span class="keyword">const</span> Address &amp;next_hop)</span></span>;</span><br><span class="line"><span class="function">std::optional&lt;InternetDatagram&gt; <span class="title">NetworkInterface::recv_frame</span><span class="params">(<span class="keyword">const</span> EthernetFrame &amp;frame)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NetworkInterface::tick</span><span class="params">(<span class="keyword">const</span> <span class="keyword">size_t</span> ms_since_last_tick)</span></span>;</span><br></pre></td></tr></table></figure> 当<code>TCPConnection</code>或者路由器要发送IP数据报时，需要该函数转为以太网帧并发送。 如果下一跳的MAC地址已知，创建一个以太网帧<code>type = EthernetHeader::TYPE_IPv4</code>，将payload设置为序列化后的数据报； 如果下一跳的MAC地址未知，广播ARP请求来获取MAC地址，缓存当前IP数据报。为了避免ARP泛洪攻击，如果5s内某个IP地址已经发了ARP请求，不再针对该IP继续发送ARP请求。理论上如果一直收不到ARP响应，网络接口应该向源主机发送ICMP host unreachable报文，并且丢弃相应的IP数据报。 只要ARP表没找到，说明需要学习目标MAC地址，因此发送的IP数据报均需要缓存。不论收到ARP请求还是回复，都需要学习ARP表，如果是请求，还要发送ARP响应。ARP表中条目的TTL为30s。</p><p>由于以太网帧只传递一跳，如果收到的帧的目标MAC既不是当前网络接口的MAC也不是广播MAC就忽略。</p><p>完成后，就可以将<code>webget.cc</code>中使用的<code>TCPSocket</code>换成<code>FullStackSocket</code>，这样从传输层到链路层的转换都是自己的组件。</p><p>VMware可以过，VB还是挂： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108112730514-116878135.png" alt="image" /></p><h2 id="lab-6">Lab 6</h2><p>这个实验要基于Lab 5的<code>NetworkInterface</code>实现一个IP路由器，负责将接收到的数据报根据路由表转发：从哪个网络接口转发以及下一跳的IP地址。 我们只负责根据生成的路由表转发，至于如何生成路由表（RIP/OSPF/BGP）无需关心。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220111214607248-1624579305.png" alt="image" /></p><p>第一个函数<code>void add_route(const uint32_t route_prefix, const uint8_t prefix_length, const optional&lt;Address&gt; next_hop, const size_t interface_num);</code>负责保存每条路由信息以备后续使用。 <code>route_prefix</code>和<code>prefix_length</code>共同确定一个网段，比如<code>18.47.0.0/16</code>的<code>route_prefix=18*2^24+47*2^16,prefix_length=16</code>，如果一个数据报的目的IP是<code>18.47.x.y</code>那么该条路由即匹配。</p><p>如果路由器直接目的网段，路由信息的<code>next_hop</code>为空，直接通过<code>NetworkInterface</code>发送到目的IP；如果路由器通过其它路由器连接到目的网段，路由信息的<code>next_hop</code>为下一个路由器的IP。</p><p>第二个函数<code>void route_one_datagram(InternetDatagram &amp;dgram);</code>通过最长前缀匹配找到最佳路由，如果没有匹配的路由则丢弃数据报，如果该数据包的<span class="math inline">\(TTL\leq 1\)</span>也丢弃，理论上丢弃数据报需要向源地址发送ICMP报文，否则通过最佳路由对应的<code>NetworkInterface</code>转发。</p><p>这里的abstraction在于路由器只需要关心IP数据报而无需关心链路层实现细节，只是通过<code>NetworkInterface</code>与链路层交互。</p><p>在通过移位比较两个IP地址前N位是否相同时，需要注意32位整数右移32位在C/C++中是<strong>未定义行为</strong>，因此<code>prefix_length == 0</code>需要特判。</p><h2 id="lab-7">Lab 7</h2><p>到此为止，实现了Internet的传输层TCP协议、网络层和链路层之间的接口转换以及路由转发。 这个实验让我们用实现的这些组件和另一个人交互： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220111154943808-1022957497.png" alt="image" /></p><p>由于学校局域网内的IP都是私网地址（10.0.0.0/8，172.16.0.0/12，192.168.0.0/16），为了交互，需要通过<a href="https://www.zhihu.com/question/31332694">NAT技术</a>映射到公网IP，所以使用了<code>cs144.keithw.org/104.196.238.229</code>作为中继服务器。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220111155822569-889084045.png" alt="image" /></p><p>按照文档交互： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108170606232-1565549109.png" alt="image" /> <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108170639108-1941733275.png" alt="image" /></p><p>任意一方按<code>ctrl+D</code>单方向关闭连接后，就不能继续发送数据，但仍可以继续接收直到peer也关闭连接。双方都关闭后，任意一方完成了lingering之后连接才真正关闭。</p><p>除了聊天，还可以收发文件。</p><p>通关截图： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108170828819-1433823727.png" alt="image" /></p><h2 id="reference">Reference</h2><p><a href="https://www.cnblogs.com/kangyupl/p/stanford_cs144_labs.html">【计算机网络】Stanford CS144 Lab Assignments 学习笔记</a><br /><a href="http://yuzijun.life/2021-02/CS144">斯坦福计网实验 / CS144 Lab Assignments</a><br /><a href="https://kiprey.github.io/2021/11/cs144-lab0/">CS144计算机网络</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重新思考机器学习及职业方向选择</title>
      <link href="/2021/11/01/%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E8%81%8C%E4%B8%9A%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/"/>
      <url>/2021/11/01/%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%8F%8A%E8%81%8C%E4%B8%9A%E6%96%B9%E5%90%91%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2830e0491d5e4ccdfa856e82cc2b99a84656c4606261229d85ec6fbf0d09104e">418fac4f173397084caccc18ab9f089e72346380cea4bda0c0689019772f2791aa71bf45f777e02e5ce27643ffc5ef2e83d834f09ec826b9b1bbb07d6e5de94c93fc5381b6424b64187414209feb14ef088737c83dbde3464604fc9b1c90e7074adce8253d0846b9fc8926447b2aae9513a02de7bbeeae1b8ec7a8d63be8b1210295c43b4a31e89e29d319f79b235fe4cb8b8680a7bdbb3a0d85c521acd46d3ef9151a1fe68a617ddf47457464c0f778e22a760d54d188cfec36082d3629c838a5260c0b6d51584526f942103b0f0875cee0e0130c0798c3ace8deb84cde08ce9e867d3aeeee329a6bc60ad768764af666647af17c3270aceea2c11015f3d1c25026f636f5b67facde9ab7201e33008be487643a8f2cef9d5bdfbd9c2bece415f7bedcccae4e813cd551528e6c78a93c6c4ae6ce39d26210c634a8f49cb17fbd790cddf5912a1016f93f0a0df4534a813d33dbc2a2ca20ecbf8cb4472b664377446cd3fd353d4b83d3ab361f2159f67008f6d4f399179f91b2dffdf6f9478273e3e688941fb7f3988d456a98e06c19f498293ccdf4477e3249a1f4a29bc7de80a7a2360d562a3dfa765b76163f22f04f16dbf1bf538e2a790208efed0b57c3ccde43bb08df4733f4f3361b07b4e4e1b58de9bad79017319252880d61e5513e147dc7582cc35b513ef1c038ed6b5812ce72844b4cfd4c4d939bb36cba6110b38d35c41b89c635179d2f3097b58795c692449ad513680f5e150d61d3d7e973f9089b91e2a8955b005fafc8a6c218fe3be885086bbd249edb3cad756547130b6eaad9c035ff208c6bd169524793acab3054a5885968c33266a75fddc128be041f8d31db5812419cdf0c63aa681624a395a7ecedb4afc3e352623ea2f0b57d4c6db98eab500fc092d4c356dbff9891550e55abf189d49b941841cf28fd6cdcfb480fb8502adb234be36d18ac505285ded8340f18fe0b394340411cedf5afcf3d640d4d6d48d445413d52d5072ad331c657201fd95e42abf1e0b72bccd4584310d72b288d1696295474ca4820d535783a22447b52ea4b0c542afa36595075f2f8d74799224e6e2ec51515e8d1e778e627a0e020cfa3519d82cace1295c17aac9eeb9dab237cb84136a1808138c04179bf0752d225073fe989d9c928c254af3635256696900b2ffc0b957db7a419ef5b9db7f501e303335198e1aea95c2e8095ad2aa778fef81d6792f55c2e754560ef69c4ac779bc31b2b9acd97946101bb196a231847de730c0dbd66ad786aeb27cd61630c13540ba64f8e5e6aabdbaa89460a9465be50fef6bc335aaf0a8b391d50ed809b1d05d94d5abf2a33c9ba3a2ab86784b9d79e6bfa22e98e84eb01f3ebf7b6481bb8799c699d3391b6ab85727aefc216c9cb3ba4ccc564bf7925629cd5f2adbb49377f0dbd5b4e723e778efe8881d505522c4f52e25ab7612241982ff1471130b1c6bbaab9c1d40a8c1f8a99a0bd9aeb5529476dfac33c17beee6ab918cc9fbc644d81a972fbfb5ba1902a8d2536b63f25b4114bdbb409740cb7d80ab32b1d49772365998d1b1807c87a6b68bd9452315bdf528426262553350bb8d1a03e283cd425a2621b04d65639ed3f5abd4cb6033622cc35776bb2d1b3e909d7598344928db9d675c4134e098f35a3c36d1fc1dee4129f1043170876be51fab9d1528551de39c18bdf8bc532621b929187c310066308ef902d292bf483d111675341ed5129fd424b7e5779b32d62dfe20d1eb3902828b012cbc5c7b7eeba10360f7abbf3593d1ac777f0218f258d3506ba2a2dde4b731a96b7809b75f1e04d91a14d40377dbf59af869e9d6cfaf18e91a239d240bd412ea5a1a9e8a5d3dcf337662374ef6d284fbfe701e547d9ca0613e327182f2e7a9907585bb3bf018b0ae7e128ad82be6b1dadc4a4efd0d55cce256a6564b1f78dab42bb5bedf6049eac7d359d1c42d347738b9ccdb237b79bda71f4c8916335f8f763365e54a98b58c40144dc5f4ee49959849fb4451172a178034385551f19a345b0b6c138b3b5fa89b6e04489eb16288d7a81fabca2307a46d887c02c2cf938dd688f5deb59bd71341bd3c4a40f601f314ddd1a0166fa689b49a4287904b0a46dd644ca8a2b329a57d35795cfb5d8d8bf9407c976bdeb7e98786b085a937bca7c58a40d2ea95fe2e51812434ce222226bc1a5834029ad19e077dc49348e1193cc7af5b88f66025f17e4e0ca981222a40bbdae5b8d1840d8afa9cf2ff4f341170062a7b0e1ad899e8319a85ba8b38a97e527d22a1b00807ada194c888bfa50303832cd5ef92836b32b0554e89c0007a86aabc62c844777c1ee64bb5aba1d8416273db7278ec1763f53f9dfb0cb44d36a06cca33a4670cb8fb26665d4feef05d20ff37d53bc6c12ec4be6ee263f20b704b8744208e2358f2ae29c857ec4d30c93bdfd06b89c2bc4d49c3367815965b3663d5293ea8b5f64b2a24733842156996bc775a02db771d56408b98abe6b944c398ffc9a230c8abad6d0df08391b4adf4b8bd9173ba6ccd4f213631033c84f61a1bfe77dcd2a99378f9e37b91e1c14e69eb433c205e67aba39c360e7037c75f2bd4a6b39b83fc59e6511bab3c0f2752abe1c184be3a2f82ee43f9065d44ea2cd5dad63cf060c79b22aeec02478bbe87940487f25158761508090f2bb7baf50330782943ffcc11c0348672034b6231b1cfc4984681970d255dbb0e503af5688c2075b734e9c6c8966e87c838a00bf6387fe097fd364970632cbc11614a9352700d97a00b92fd6574676dbb1ce0825e0d7a7ef62256d648d24f7b16a1a1251e21e2203d59790128fc4645bc30585792124c19909237617b7b68d1780d9af487a48593d2225b2ed68f8d2bc49c29d822b8745573fc332e41be062ee7b32e3306de6a063c5138e401deb3f10503eb149c607d23888425bb7e7e0a9cbbceb954f1b33b6f5ffc35eaea5281ac9ee4e0de06a6cb715447c156c0d7d77fa21d5a6f7fe5aba28ffdaa57aa231b954adc4c0a2440d18b5f40ccb3ecac8a724532fada8667d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>屠龙少年 遍体鳞伤</title>
      <link href="/2021/10/24/%E5%B1%A0%E9%BE%99%E5%B0%91%E5%B9%B4%20%E9%81%8D%E4%BD%93%E9%B3%9E%E4%BC%A4/"/>
      <url>/2021/10/24/%E5%B1%A0%E9%BE%99%E5%B0%91%E5%B9%B4%20%E9%81%8D%E4%BD%93%E9%B3%9E%E4%BC%A4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9b30f205e1b2b597d069c4ad9741451f0e156c8f5c8852c43575d79b76ae524d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔试合辑</title>
      <link href="/2021/10/16/%E7%AC%94%E8%AF%95%E5%90%88%E8%BE%91/"/>
      <url>/2021/10/16/%E7%AC%94%E8%AF%95%E5%90%88%E8%BE%91/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://blog.nowcoder.net/n/705b29af83034150830e3c0e9a28e51f">送文件问题</a><br />题意说人话就是：给定线段<span class="math inline">\(A_1A_2\)</span>和<span class="math inline">\(B_1B_2\)</span>，希望从<span class="math inline">\(A_1A_2\)</span>和<span class="math inline">\(B_1B_2\)</span>上分别找一个点A和B，使得<span class="math inline">\(B_1B+BA&lt;=A_1A\)</span>。<br />首先三角形<span class="math inline">\(B_1BA\)</span>三条边满足<span class="math inline">\(B_1A&lt;b_1b+ab\)</span>，因此快递员必然走直线<span class="math inline">\(ab_1\)</span>，即需要<span class="math inline">\(ab_1&lt;=aa_1\)</span>，即<span class="math inline">\(ab_1+aa_2&lt;=aa_1+aa_2=a_1a_2\)</span>，又在三角形<span class="math inline">\(b_1aa_2\)</span>中，<span class="math inline">\(ab_1+aa_2&gt;B_1A_2\)</span>，因此快递员必然选择走直线<span class="math inline">\(B_1A_2\)</span>，也就是说如果<span class="math inline">\(B_1A_2\)</span>的距离小于等于<span class="math inline">\(A_1A_2\)</span>的距离就能满足。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x1, y1, x2, y2, x3, y3, x4, y4 = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">    alice = (x3 - x4) ** <span class="number">2</span> + (y3 - y4) ** <span class="number">2</span></span><br><span class="line">    bob = (x1 - x4) ** <span class="number">2</span> + (y1 - y4) ** <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> bob &lt;= alice:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Yes&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li><a href="https://blog.nowcoder.net/n/62d4211f496e4939a153536e8e89a3ef">及格问题</a><br />我理解的题意（误）是：共有<span class="math inline">\((n+3)*20\)</span>道题，只要做对<span class="math inline">\((n+3)*12\)</span>题以上就可以及格，然后如下代码连样例都过不了： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> comb</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">72</span>, <span class="number">121</span>):</span><br><span class="line">    ans += comb(<span class="number">120</span>, i, exact=<span class="literal">True</span>) % <span class="number">202220222022</span></span><br><span class="line">    ans %= <span class="number">202220222022</span></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></li></ol><p>DP的话：如果将dp(i,j)定义为前i门课至少做对j题的组合数，最终的答案就是dp(n+3,12(n+3))，但这样后面的状态转移可能会比较复杂。</p><p>所以我们将dp(i,j)定义为前i门课刚好做对j题的组合数，答案就是dp(n+3,12(n+3))+dp(n+3,12(n+3)+1)+...+dp(n+3,13(n+3))+...+dp(n+3,20(n+3))<br />卧槽，好像弄错题意了...<br />dp(1,i)=1，也就是说每一门课里做对哪些题没有区别，1门课做对1题不是20种方案，而是1种，所以排列组合也就不对了。唉，最怕读错题啊！！<br />状态转移方程dp(i,j)=dp(i-1,0)+dp(i-1,1)+...+dp(i-1,j)，就是说前i门课刚好做对j题的方案数取决于前i-1门课，如果前i-1门课做对0题，那么第i门就必须要做对j题；如果前i-1门课做对1题，那么第i门就必须要做对j-1题...<br />这里要注意：因为一门课最多只能做对20题，所以前i-1课做对的题数要满足k &gt;= j - 20 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">mod = <span class="number">202220222022</span></span><br><span class="line"></span><br><span class="line">n += <span class="number">3</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span> + <span class="number">20</span> * n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">    dp[<span class="number">1</span>][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i * <span class="number">20</span> + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># k表示前i-1课做对的题数, 第i课做对的题数&lt;=20, 即前i-1课做对的题数k &gt;= j - 20</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> k &gt;= j - <span class="number">20</span>:</span><br><span class="line">                dp[i][j] += dp[i - <span class="number">1</span>][k]</span><br><span class="line">                dp[i][j] %= mod</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误示范</span></span><br><span class="line"><span class="comment"># for i in range(12, 21):</span></span><br><span class="line">    <span class="comment"># ans += dp[n][i * n] % mod</span></span><br><span class="line">    <span class="comment"># ans %= mod</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span> * n, <span class="number">20</span> * n + <span class="number">1</span>):</span><br><span class="line">    ans += dp[n][i] % mod</span><br><span class="line">    ans %= mod</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure> 3. <a href="https://blog.csdn.net/Derrick12/article/details/119712588">牛牛施肥</a><br />这种题要注意循环不变性，就是说每一趟是否要包含第一行和最后一行，采用左闭右开，这样每一趟需要的肥料都是固定的，比较好实现而不至于淹没在细节里 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FarmerNN</span>(<span class="params">self, n, m</span>):</span></span><br><span class="line">        k, b = m // (n - <span class="number">1</span>), m % (n - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> k % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            ans = [k] * n</span><br><span class="line">            ans[<span class="number">0</span>], ans[-<span class="number">1</span>] = k // <span class="number">2</span>, k // <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(b):</span><br><span class="line">                ans[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ans = [k] * n</span><br><span class="line">            ans[<span class="number">0</span>], ans[-<span class="number">1</span>] = k // <span class="number">2</span> + <span class="number">1</span>, k // <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, n - <span class="number">1</span> - b, -<span class="number">1</span>):</span><br><span class="line">                ans[i] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Online Judge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常碎碎念</title>
      <link href="/2021/09/24/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
      <url>/2021/09/24/%E6%97%A5%E5%B8%B8%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="449f56984c9e95e299ffddfc4d05dca92a2fe65ea98ef3728004d142b7d9058f">418fac4f173397084caccc18ab9f089e07699afa44e088ef428d1995e53e30a52290b2c6788b6f7bc23944b66d477f9a8cd1018e0902eccfa97f33c38ef57fd3f883a3166b79ec8a79622834f0435b6561816bb443d9105b84a61929478fd5bae86f640f539bd3f1141fd24989024a0845ca516d54e30dc18e75e4b80db9fcc2c393dad95a45b023226dc017e09e55d1e03c903733fc9d917ca528deb32bb65cdf5d224e5479826e30c582e08695136b9a202a4ad9c1d0830cc5b12a07ad1d6e11c5814d685e02e7e70c17d2ce60ed3930dffac1ab37d62216d8c37c1a288166d2d28a31ac98bedfb6c2028e0ca5a92189dd0fedb562135e37e207420550761237c908b7e235a8f7db0c910f4add49b4d8991f82c305dff42aafadaa8e9f6b4f515674ca9d25466af41868c702a41d0d6b0447b553d01d92edc2dfa22da4a2f9b602dd9a47061214b8bd5beda902e3291d6754946577b9eed5bdea24abd6b932f83a8b8ccb93aca77ea86ebc2b646749ebab4f302e0b607cb718b71097e98e1ca5c85d9205c46b733d1a6a7241555fc0e3d3a5cc68109fa96da35aa5685f85c03855c6754e0c66b0bae46510c28b83129bf94804fa56069e509dfb1452b686b7220c0cd9d798a5a430dd67d54f858dc4f65f8fe2a6c996159060046ceca23ba323f9922f036307a2ec7414904fd4f5e57c7d7be735bca0d924eea670e6ce4c05e76cec5198b57791105c8538bcc86a3df462576017eb47243fb4a4843cdb1ab5a5fc1b85b1eee5ca09426f4499f2b2ce9f031fff20905ea40da7b6ee31285e00e1f6294a57e9d57449a3bc1ef1fb86868ca2d789bdd40f2f236113321acc321146a72b72a9fa26e7103afbbd9941d88b1187ad41a873ad8422259e32b4661a2a8af5b19613849b90316515fff4510d3d1faea296ae89b79733b02ad3879a41458f144ec8241ccd564cecd3cdc485c7487ccbd367becd68faee68e9bc6777b8a2c57bf6503d51b782f2d83ed61a040c52b83224488dfee8a5920f8666d84d07a942a4eb728ce32d2c0a033856a7d64331b7ccf6eac9e70620d0e47a12f58eab2a77348179198ce3d55542a93f430feaf64b9c157bdaf4c987c071583e0e89107d4af3336be0b21a1255bc7c2ac9512625f76a7080db3e72aa686f8525f97ef45f7973299ae597158d2971f07628f74644</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是江湖</title>
      <link href="/2021/09/11/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B1%9F%E6%B9%96/"/>
      <url>/2021/09/11/%E4%BB%80%E4%B9%88%E6%98%AF%E6%B1%9F%E6%B9%96/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ca7c827d4a70ae8192ba11dd308e4097cb85386328b1cf7eee1fca89812ab857">418fac4f173397084caccc18ab9f089e33454325b3f64e7888d2ac510983d0d00d4bef259e2c3960d3669f41b0ca476aa36ae741b30b0141137548f67d4907bae215979c5a51e8a82c88bb17b4521fb9e8a8812a826d810d4e2e7bef765c2716fcdb5e3eb9ab90d5e54c37db4efcd4dc23c6744587ec3e5a866accbafce17afaf8db7350c99f1a17cdf386c19e6ca8db67368452fa35c5323c60987c035ae511b5937a8a255b0c30b8a71458b62f660d027cec0d99f668025946e95f69db2b071450e1d779696f8a7bb907bd6e99e4d029f4bd4936666f9985390effea40e738870bbeedf62a1c6f47669c45a698e57389a7112620b01bed1e582c714c75edf52394f2a7060bc0edb839749ff1fad85d08621c2232551dc43dc0f5bdb1033594d5c6989ebc371d4dcba9093cd2f652a5eddf431b612ce6f048dee366a1179bc5eb397fdd71d64f8eb1f1e94e5867c554ad66e57c1557c5728ca87e6e5922ff9dde9d7c14f8a692c01a5a334047690de16e0edff443069f7977a81fc61a847797a42e9e42bae0a7af2a3ea9baa072a179d9351a550d193b3da7b9159abded84d88f72738b5b9b69973631d0376cfb27ea17a6f04147a6f59c2c3127c908ba2dc684fcd2149b2eeeba539c63e5adceb3989ff1d235c6dc17ae8962b4a7118008b6759fb4807a66f3888f03a83f497c4c74b4dbc28a55ac6613c0f3d979f998c97df00bc468ab9c126a87b19f66f059c1d3d649914c844fdaa65843cbe080fa0a3c287ecf614b43ebe7878a05dcff8db3cf93055612672afae95db0627e370e4e9c42556d3b4b10240ffe6a936eb65fb8d6168d02d00320ce4391e146cc24be034b80a5f69a79c0eb93dce4cf4f8b6b83422586afd5e81de268075cffe9877e1ef13cb9665a90c82d8053963b533ed6dd9ea213cc63f6e7c8bfc225b6485910950fb7adaa557470d86dcbc3e033147f229a45c2a33bb533a65e34b01916e24e3f1fdaf31cbb36a9492617cbfa402436be45b6c3a28207da1f9c559d37340c95c14771b1820216a85a49fd6ba06b326feee8775d9ef79a66635a8da9a6ec985d116d5f7869ea60a5274c0982ac33479e98a6d8e5d6813bf99fc4661c1bc0c46e8d3d1eb1c84ad1beaa90112f03b646e54668d467fc65fb1b6379170e11b60471ff111295d2641f9483450ba41c8de358663c6081880699b8519ddf56fa76cfaf1e21b70264a324e35f61e8c11a15e4298ce37a82fe920edfed6c2ceda5bc6ea5983b633310e0cc2e96a7f46243158ed17fd80ee11ef3b0205854140efde61ba8d4d9a9994295249d11a222831408dda3995d398c4fc2c434606a44ac9219573de4f634c90897ffdd9be2408ff662d6139a54ba2621b5bb6586c72e57e3ef2f650cf03cea04739d4bbe0773cd2a33264d88fbb3f6e927f25e7315278623e2617c9334c3c2c875b1c593bf07dbeac88d18c633d4b9fb65fd602f5c2c8c58413c823e84b785139792d5658af74954994ed85e40cca5a19f57887f687c69b6dad9aef32ecd8d69a360547ffdb86eddc722308f6899b41b68ae431beca47362383660d6a4ea1be12a5ba4a13b1659cd45397ebedb8d843efc00eb488f30dbd9fede630d6c9db8bd05a698e530403cfb1085df6116926765a77a6898b4e9edd9d0fd4f20263641b68b4ea12d48a75392d990eb3238d523f71873040a4dfa6b7a608b852244024fdd22b01eba762d53d75a3279da46bc04bcc3777fa9bb1820ef9e97d53c266462b84adc0ad333fbb2edaeedfcbb9f714f61d96442fb95b4adcab071dfaa5336443fc27e633d72eba901a52433412f0f5d466374ae8f35c1777f7afa2facbfc96f31c8af08a5cab375f9e684c9e3cef1c393a59eadbde6a4703766f251be157a40d10c4b8053252dace93104135bd54e8dd340edba3b5899300a4adcae7584e94be61a60cd690b2cdabd2536182ec8942f6efd9e82e9014a8d1d4cb1a4eb6dea313173c584f5946e2557f3f536deabb417c466c8b8fb2e84d620293a2f70b4efcba719e067d77784914926f17c6041e655221adb60d021fdc524182d37e1109f6b1981dd9e2ea73859c8689a4ad842abc8c42d4a1a56fd139d334fb6e20fcfc581220c17282b9cc36ea5766b53c1359532e9aed306fb64ee66ba0232cdd70b52ad8e9fd7a7d62648bd1420a214e64d71cf5c808b0159e62a4a195e20dfd9ec7cdba4ff0d26eeb98e80a4fd78e20937e640e297214a61fa80c540c3cba52478769f5a49778a791f6934e16bf7ef055548f02856a552f0e665d3c25667fc1163b4c8bc61254c2dfd9cba800bf05adb6ebcd3bf3dfc53da1a5c9edf1fad94e59b5c6e7fe819910df7fa54f1820eb9435d02d5d4e2f2813531926ddbcec8005cd727f44a7ccd3024998cab9a6f68166e6296110ad2606717e0eaa133f8994eac6de6c3b6701e0e6f2f5cac7aa5543d0677805083ed09b48d1f913ee815526d626a6c9cd59001e5651e875b4fc11c27c07087bef93c93f04b8aebb06810d636329c53ad43165731c8cd71a46a336d13e5a16cf54fdc646e6a640631a3bf568e69b6c1b1a2b5cdab476076475a702816f62413311f1a60530fc8cd7b48a7d3bc91725769a04f2e5c9cc669531438cacbfff9d07b91c22574e3bc575f87d1b7abb411cff9716ffd41538ab500099b57ab09ab047492bb28dc6327e366e46085718362abbb734ac931358f3d6ab3f6abecc94b584cb723789ebb36a48429d598ffc37cc43ada297bce23beba92829f2ba21c833aab7eb9bbfc1f2b5b2d2f08d2c2f3e82ae624264f20d466936f96fecc0cfc38fd6ea4b9e3884e93a2c02c52b5a70db9bb9d58e4d47b47410d6181f972de3b073ce2a0e1dd68d5c3e494fd4919c7718c8ebc27a9d608cd1052488545faccca58d919e578e7de4751089d3ff4e0a89d3d2d23f73883a3bb472b1a114500ace1b4541f48860b8e5ae01d0ad4eb676b8a4166c6bd9a6c768177bc759d635914e4c92205d4b0ccf6386085e126ce80c11867ec398b96dc35b8232906cf93e5987f46eb8e271432321a53cda53c8728164a00c37081fe671dfe815d15e9831480315fc786844c6520e20c7b67445e0fc1c7d7ceed4005281368a1957c66819936eb14d3dcad2ddc2d1eb5c1eb5af4859aeca5ad9b1850836ee90674717bdd14e818f78bdf8044849b44b9017ee60763692dcde99d23d0ad62c5a3e80b1cd4352057d2a538286e40c6857fe095e13cf5847020f4bbf0002a336ae804631c14e289c2747c5aea68bd9f4f06ad30921943b8d2278bb4c6cd4dd6ba3ae011443789b009a0b6ac3643e84f810b58b45e9b897034707aa80c7f363f32ce177c80cdc8053ac21d84d7388238dae2ca2213a339d8f7a432c64e3865ff2a3f58f0898381dc07c594fe3f1b5f3499cd230e9a56175b308c0b6950bd0ef6ae1cb02120ced2dd1c021acd23c38ca1ebce5b9fd0a4f2cb0f7aefe3bed86385d13225f784f470a7e649b21a04f9065b45ab39d48d1ae07963d75b65a997b354581cb7c02949d785460a8915dc18d9639de52179aaeaf87ecdd5de1f2baf7b1f39719746243eeab89f17fe62adffbef256c76642168478864cbacd3a43bddbd67e2c2dac695e371faec330f74c01e76974d136ee2e5d78b3b9ca907d62a39d31e5cc7767fc73508a8d8ba110a23e3883df34aedbafd96a9fcef1a0611170a00949139e14c2ad46e8ec34a33b4112ef8911da3f201aefa54658fb4fc420ce912d93e4f9762401e7759b802425574041527cadb21f15884034aec055d163675fdd98153a3a1ea583675fef3189434e496eb1fda7b27dfd0723c973568fbf03839df3c393cc77a23015ebbba3bb1257bea8a21254bd97fc27c90893be5bfccc9f6a5ff7b8d17723578aadd4ec8fc1b16616bc84827f89662c8acb2505a80caa84c562f54b9fd0b984957dfd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Make Plans</title>
      <link href="/2021/08/30/How%20to%20Make%20Plans/"/>
      <url>/2021/08/30/How%20to%20Make%20Plans/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6a2504bbd846b1f03f9b5afe5db04c8c86ac921c4eb991309a8dc14919d44513">418fac4f173397084caccc18ab9f089e0dbe5a3f55ea9f5889ce3b2b354a143dbb8fb8de69281e5be84d3d0bd8f2cd11f9a3f2c716010bb4afa88b47b913f73b1783a60b8488c70bb3b5a1d8fe8e84d2087d284b4a31fbfa1719aef35c8658ffb7e6bb004df7d61293d6718784830be32f273ecd4c35cd6729798e06eae79d60c5a153598d66c12c5330fc4a42928929c823fc6729709455414abb677f69acdd85d6a6117711f018ec32fd50ef569f85b0634d78e5495bf4a199a0b958258d312ab277827ce5004747e8d4395ed8923ff49e4b490bb481703f7aae08e321c0536bdf110f5a1ee897fcb53dccb38299ea54ae1315c6a0c42136f30f3561359a05b683de77d28fee7fb1ec07bd1e91ca520c94977f49d8a70898456e867c12b2de7aa9187548d4a980615e134a75b7ec9409872fc60c2f26879b2d7cd46779f6ceafc1aca722a405ad74f908e9932649d5442e86da4be342f699021646047434e1fd10c22a228409a46e54a06f5cc69c0630e57c16dc665aac0100cf21f4c047f6d0088957499f4cba523ba73b4b6f172e733a3030386c2aeb81c7ef648efd9683a504b7340be3d3c8c0beb4bf7fdbe24e39f6db2fcafb43374f6b8cb204eeff0b8cd3719ade68afaf7ab61e59ff1cbbc4a900c352fd84c95a7746ff45160ccf5cde02ee2b09467e7947a3b93d0daf99aadc64ca057c3d7e4359bb06e3a5fe4d228b762239469fa9f74dec43e821b4ead6036f1c2ad0909c5e5d9faa19acd3d53dbc23a704e4000d5bd89d14ff7f159996f0f1f685408790ff1426671d87957d7a7255a4dc7464879f502c22e728e9a09b594c4f57e4a921d3875b872d37122235b4cd4383a7c0d8c774ddf1cea7256ec33021dea9b6450bffaf6fad123a6095be819f25e494e37e83aac8f64a3ff45dfc043f8f5c13cb2386bb75b0fa96390398d4475a234b2b7e7d5e655142af715042f86d5453f5e88938326fe405fe5552d524124af92735abfcd4615bc81e16e3d0e24929cb050077084e12b5615b9940d60e7d33b9c3965e51040cd801bc9e69f42e4d7e38dd77c4ee45f62fd54b52504a02f1c0dd763f17374852aa4f582673f5ff2cee9d799d4086543ff616e97e76858aa508f61b16f2e6cbbefef3323fdda19791d4f051f16059a94b77181034ab564aa876f843e857a14499a78977e48ebf0084b4aaa62669aa191f1c9a327bd712dd0f6a7fc1f02df31730ef8908c29399f090857dcee6818c95fa86452ea52e3c346057353d89a23d247c9362a630793f15610b3e4246010c531e1ca8508583a38450af6be48c5a95cb734ed657d481439c4b6e4b1c20eb64c37f15458862e5db11cb4740734106e2039e8c8dca350b44bce2aa402e994c5802e236fa9eb3920e3fc1d84f29230d62f8c1029fb81778d0cfd027fc15277439b3808233eaf6fa119dfe591d8bd0465acb0b5e25f9a616b3bf172844d85222a07dd721af159b056a460775ecb270d87c8d5d58ed12c809282f96c1f4338dc2bce49551a537ae4aa19bca5da5f512b130b1c1b6b4feb84b03d1ccdde1279113b6e482a2a37b734bb37977c408c338935ecf5dc73226d7bcd57b8b13019d3b7d5fc2570cdb24f7a28951cdbac36e1cc8af36889e86dd34becd14b5b3d10a3982a5a450b2eb2b8332c8b1400987f505c7386f6a2985c37b6da1e2f0500214ea4ab71f36d8c21c7c630c46f0695f33109581f80891972afdb3f0b6ae5c1ca17738f67c865ceae2ab94741bec8ac861e3d75622d292fb556e49c7a13a6f6968779c7263ebe9efe0d0ae97c990e046625ed802e03c41a9a930ae87d4ffc582e31eea9682d0b31227484b30c967817cd5b28a6e72c49452e1ad871725c86b3e9dbb57b26032265cb66e3781eb2c4e6be2cb998f8d365082bee833173c3fd929c7f70071fc509c13a8d3d26266336b3055becca079c28668ce9fcc7454a1665aed80ff2be1d5047521ae482ad087de9cd1d5c8be1c1c39b5bbbad59fa402a5c9d062228c1fc2652799e1e61e67f057fbfc3b5db4fb698ff063f708a7bba1a5b1128e922f382b1e06c78cb80e2876f394f2b0c411f52880a2ac39846afa4c77f6821f95d96757996c73d59b2edbb3638b9e01cc32994f111b626e360c7584619f021127224b7899555bb5ba37fbb3d0196d648397c9d8c77c2d32520bfb225037d408ef919cc4b080ae10f4138623caada233c3a63bce519bc5819616c9764dfc8e368bef3a3a0cab39ae6feb3918eab02e10e98eef4819750e054d9bbd4485f7fc3b80ad247df6c85b0abab4edf0d301ed537bdd4e32bd650f612bde862b2b92cb5272d9256bcff54bef565dd0d1403fa8ce31b53ca6aa40603e7573d37b48188f1daf7f4d77cb32716bda75d657d4c05cde35dd461b5561cff4cb9d236899e4f7ad54700d6806c23f7c2a5dc3a6dcb45242603b0bf7fca32f53c409de946307fec4a37c0d951cfaff916e84e34958c80076f84145673fdf044ea43e9cc83675dbce26b81d04d98b18baa824bc97ca8b543ab92f706cb53b57a9434eb29319ef919f1fa2e186840a4dfc4f6f56ac064d4e6d1a233b3e3f883c629da7a7f4d307d8f8a8852377c091923375e3b98e3574d5e666f449ae74f1ae7c4543601548123d3b7e001e73d6047ec96b6bd79e1a2aa555553637405a9e0e95a208769651ab8bb77a5256cb1f1a04475d9b44daeb951547978e192476dcd71dc8629d594fc60ad84cb004c1461a4a9ca856c438645a9722832f8d38919ba387891df0fbce79c0f073b888bcb0a6bc07e84c1c45de6019264066eb9cf147b8f7671f0a172849a396f6a73651d09466e41ae2f6441f5a1fe7ef0eebc83e63395c60d857c4a6fa4e0c2d49f75d5c2b8f0c7e3b9acca46dcf3424511b009741c2c998936ed8a567049f63794d1cf35be18440f8bf781b2fb98d06e8209efb8091e5b09ddf1ba7974858241efad3817489d9264b69ecb4356acf4cb7da1111dc72678ad8c2c1cdc07fa9be29ec389da6f7f0f76467ae20d6fa81a7e52819cbe9cba73a812ad57ad9e25486a62facb80c4f9f3ad5cddc00d1819da952eceefd5e8425b1a34518ecc484ffefca87c24cbbac97111f4745d9d95ac17ca365c3de4723d3a7d7f508f03c7e1563f56e17f1eee86da53314af8718c32dcb22fed58a773284a75a394f991dbff57695c86414fcd5a62639c7cf81349a7817cf19d62cd414601ec72177eaa351731ab0b9850acd19ecf085505fb455634f0d968d41db7207883fc4d87dba8c16616a9cbbac3bd179110c0c1b0a0056961fbcf74280047c6524d4bb44e0899b1ba9befc9e83302b0300bc99af0485b45f8653f9960ea7f1a60701e9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inspiring Quotes</title>
      <link href="/2021/07/28/Inspiring%20Quotes/"/>
      <url>/2021/07/28/Inspiring%20Quotes/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="da248e403a89093155a85d8d41b09be708f94460fde770c6c5d6622ce8e76976">418fac4f173397084caccc18ab9f089e07699afa44e088ef428d1995e53e30a59d519c6a4de6bd064bf82735b89d8323405e3bf9657f296d285b30c5beeafa6312f6b99cc1f3788e6cc77b926eaa90fc169efea59b2266efe8dac8dd02c546f198ec6e742389028366a8f642cab94a308953304522e25159bf02570c835324d307c66127ab79deeb6d61551699846084d70a09c60c614f98ce920ab08d4380f91e61688185c0c66a7de7c8039cb3a84023f44e271fc75b80d8ccceffa8fe342c24a358dacf35d0ea9432cf36bee823fa3bd22b0eb7cdea564f2b5901b23391157dcd1765f229fdbf25c81e69fe3a5a24c540330f6bab9bdfb9287e9b99afe7d28416488b522333e75d4044ed83bd5d9b0ccc5786750310ba3cd20a1e2a316963f5679f2f1ce79cd7b33c48f4dc1c01b7ba8f28d650d0833f5e1b7fa4b3a531da3671fa87969346c812c61feac1df603cb40d15dd9f682929672d815ebb83e8effc0e625d7c7a688f67508b33bc91d9953fd937827209e71fc45c909820c67d73b3bca4f147e7f2bd51c25eba58cbaa976240396ce1b522dd315f0471516371da65163e037d2135fd37263fb7f11adfb86376af3969132f64ce2905103142c6bed4de52501756e87f34803da8b75ab357632ab0426fe7f25a88fe146a32c5fff695603c4a04fe059778c36a8e21dcbab46f22ea93974487dddd8b63188d127f11dc344db08a56c251de0d54ea5a5e98427c23d01bc461ae5add5d6d22dc04735c85409cc8ececfd6bdcb1cb739f65fd4da095ba8381007086cb1c7eedac8089ee4b3f3fbbf095e27fa3c44e8549e60b8e8f776be06f8c8c139f77f0cd88cd54c0536379ba7bfedfee163de181d40852a0751060ed2c08ea91e91664fd81ccfcf90269df0638e8eb45de55ffb79ac6a0174ca5a7c55d6ca0cd9595b0f18c1a7d291895a4d74033586ddfa633c808033b2d2bef4f3a7d7a142ca166f157f7783eaa6558a0f30ce17c97781b7bb6ed462ae32b996eb0e23d9d4a0f2dff0044dc2b3b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Hills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CS231n Assignment</title>
      <link href="/2021/07/21/CS231n%20Assignment/"/>
      <url>/2021/07/21/CS231n%20Assignment/</url>
      
        <content type="html"><![CDATA[<p>先吹一波Google Colab，所有操作都可在云上进行，还能白嫖🐕家的GPU；再吹一下Stanford的骨架代码，真的是干净整洁优美，堪称典范。 <a href="https://github.com/EIMadrigal/CS231n">My Code</a> ## kNN 最幼稚的机器学习算法。</p><ol type="1"><li>计算测试集和训练集的距离 训练集<code>X_train</code>的shape为<span class="math inline">\((N, D)\)</span>，<code>y_train</code>的shape为<span class="math inline">\((N,)\)</span>，<code>y[i]</code>取值范围<span class="math inline">\([0,C-1]\)</span> 测试集<code>X_test</code>的shape为<span class="math inline">\((M, D)\)</span>，最终的distance matrix的shape为<span class="math inline">\((M,N)\)</span> 声明：不能使用类似于<code>np.linalg.norm()</code>这种东西作弊。 首先来看看2重循环：第一重遍历测试集，第二重遍历训练集，当然如果你愿意，还可以用第三重遍历dimension去累加距离； 再来看看只遍历测试集的单层循环：对于每个测试样例<code>X[i]</code>，减去<code>X_train</code>，通过广播机制得到一个<span class="math inline">\((N, D)\)</span>的差矩阵，做element-wise的平方，按列相加得到<span class="math inline">\((N,)\)</span>，表示测试样例<code>X[i]</code>与每个训练样例的距离，作为距离矩阵的第<span class="math inline">\(i\)</span>行； 最后来看看full-vectorized的版本，数学推导见<a href="https://zhuanlan.zhihu.com/p/146076139">NumPy之计算两个矩阵的成对平方欧氏距离</a>，吃饱没事干的同学可以自己推推，我数学太差就溜了。</li><li>根据距离矩阵预测测试集的标签 对于每个测试样例<code>X[i]</code>，选k个距离最小的训练样例，将其label（从<code>y_train</code>获得）存入<code>cloest_y</code>中，投票决定最终的预测标签。 先用<code>idx=np.argsort(dists[i])[:k]</code>取出前k个训练样例的index，再用<code>y_train[idx]</code>得到对应的k个label，最后用<code>np.argmax(np.bincount(cloest_y))</code>得到最终的预测label。</li></ol><p>kNN效果当然比较拉垮了，在CIFAR-10的子集上分类正确率大概在27%左右。比较令我震惊的是三个计算距离函数耗费的时间，2重循环57s，单层循环41s，fully-vectorized只有0.57s，竟然<strong>降低了100倍</strong>，写出高效的代码对于程序性能有着至关重要的影响，反思下自己写出的junk code，不由得留下了伤心的泪水...</p><p>最后就是用cross-validation确定超参k的取值，就略过了哈。 ## Linear Multiclass SVM 首先要为多分类SVM写一个损失函数，老规矩还是先写一个naive版本<code>svm_loss_naive(W, X, y, reg)</code>： 权重矩阵W：<span class="math inline">\((D, C)\)</span> minibatch输入X：<span class="math inline">\((N, D)\)</span> 标签y：<span class="math inline">\((N,)\)</span>，<code>y[i]=c</code>表示<code>X[i]</code>的标签是c，<span class="math inline">\(0 \leq c&lt;c\)</span> <span class="math display">\[l=&quot;\frac{1}{N}&quot; \]</span>l_i=&quot;_{j&quot; +=&quot;&quot; -=&quot;&quot; )=&quot;&quot; ),s_j=&quot;f(x_i,&quot; =&quot;&quot; =&quot;&quot; _i=&quot;&quot; <em>k<em>l=&quot;&quot; </em>{j=&quot;&quot; f(x_i;=&quot;&quot; loss为：=&quot;&quot; loss和正则项两部分，对于第<span class="math inline">\(i\)</span>个训练样本，data=&quot;&quot; loss是这么定义的：=&quot;&quot; machine=&quot;&quot; multiclass=&quot;&quot; s_j=&quot;&quot; s</em>{y_i}=&quot;&quot; support=&quot;&quot; vector=&quot;&quot; w)_j=&quot;&quot; w)_j<span class="math display">\[=&quot;&quot; w)_{y_i}=&quot;&quot; w_{k,l}^2\]</span>=&quot;&quot; y_i}=&quot;&quot; 什么意思呢？<span class="math inline">\(s\)</span>是第<span class="math inline">\(i\)</span>个训练样本的得分向量<span class="math inline">\((c,)\)</span>，<span class="math inline">\(s_{y_i}\)</span>表示正确标签的得分，<span class="math inline">\(s_j\)</span>表示其他类的得分。不妨看看什么时候损失为0呢？稍作变形即有：当<span class="math inline">\(s_{y_i}-s_j=&quot;&quot; 看着有点复杂哦！主要有data=&quot;&quot; 返回浮点数`loss`和解析梯度`dw`=&quot;&quot;&gt;\Delta\)</span>时，第<span class="math inline">\(j\)</span>类损失为0，说人话就是只有当正确类的得分减去其他类的得分大于某个间隔<span class="math inline">\(\Delta\)</span>时才不会累积损失，否则就累加损失（必然为正数），这就是大名鼎鼎的<strong>Hinge Loss</strong>。</p><p>如果<span class="math inline">\(f\)</span>用的是linear score function，进一步有： <span class="math display">\[L_i = \sum_{j\neq y_i} \max(0, w_j^T x_i - w_{y_i}^T x_i + \Delta)\]</span> 其中，<span class="math inline">\(w_j\)</span>表示W的第<span class="math inline">\(j\)</span>列。 至此，naive版本的<code>loss</code>实现就不必废话了。接着来求<code>dW</code>，老规矩，还是先研究单个样本。</p><p>如果你的数学还行，下面的梯度推导可以略过： <span class="math display">\[L_i = max(0,w_1^T x_i - w_{y_i}^T x_i + \Delta)+max(0,w_2^T x_i - w_{y_i}^T x_i + \Delta)+...+max(0,w_C^T x_i - w_{y_i}^T x_i + \Delta)\]</span> 共有<span class="math inline">\(C-1\)</span>项，因为<span class="math inline">\(j=y_i\)</span>那项不算。另，只有在<span class="math inline">\(w_j^T x_i - w_{y_i}^T x_i + \Delta&gt;0\)</span>时第<span class="math inline">\(j\)</span>项的梯度不为0。</p><ol type="1"><li>对<span class="math inline">\(w_{y_i}\)</span>的梯度 每项都有，并且都是0或<span class="math inline">\(-x_i\)</span>，因此只要看几项大于0，梯度就是几倍的<span class="math inline">\(-x_i\)</span>，正式点就是： <span class="math display">\[\nabla_{w_{y_i}} L_i = - \left( \sum_{j\neq y_i} \mathbb{1}(w_j^Tx_i - w_{y_i}^Tx_i + \Delta &gt; 0) \right) x_i\]</span></li><li>对<span class="math inline">\(w_j\)</span>的梯度 只有第<span class="math inline">\(j\)</span>项有，0或<span class="math inline">\(x_i\)</span>，正式点就是： <span class="math display">\[\nabla_{w_j} L_i = \mathbb{1}(w_j^Tx_i - w_{y_i}^Tx_i + \Delta &gt; 0) x_i\]</span></li></ol><p>naive版本的<code>dW[:,j]</code>和<code>dW[:,y[i]]</code>就2重循环按部就班更新即可，别忘了除以<span class="math inline">\(N\)</span>和正则项梯度。</p><p>接着来实现<code>svm_loss_vectorized(W, X, y, reg)</code>：</p><ol type="1"><li>loss 首先求得整个训练集的得分矩阵<code>scores</code>，shape为<span class="math inline">\((N,C)\)</span>，每一行表示一个样例的得分。正确类得分向量<code>correct_class_score</code>可用<code>scores[np.arange(num_train), y]</code>得到，shape为<span class="math inline">\((N,)\)</span>，注意这里不能用<code>scores[:, y]</code>，简单试验下：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">X = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]])</span><br><span class="line">y = np.array([<span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(X[np.arange(<span class="number">2</span>), y])  <span class="comment"># [3,4]</span></span><br><span class="line"><span class="built_in">print</span>(X[:, y])  <span class="comment"># [[3,2],[5,4]]</span></span><br></pre></td></tr></table></figure><p>下来到了最关键的<code>margins</code>矩阵，该矩阵和<code>scores</code>矩阵shape相同<span class="math inline">\((N,C)\)</span>，第<span class="math inline">\(i\)</span>行表示第<span class="math inline">\(i\)</span>个训练样本的margin即<span class="math inline">\(max(0,s_j - s_{y_i} + \Delta)\)</span>，在每一行第<span class="math inline">\(y_i\)</span>个位置上应当设置为0，其余位置按照公式即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">margins = np.maximum(<span class="number">0</span>, scores - correct_class_score[:, np.newaxis] + <span class="number">1</span>)</span><br><span class="line">margins[np.arange(num_train), y] = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>需要注意：<code>correct_class_score</code>是一个<span class="math inline">\((N,)\)</span>的向量，如果直接<code>scores-correct_class_score</code>就会报错，广播机制从最后一个维度开始比对，只有相等或者其中某个为1才行，因此用<code>np.newaxis</code>将<code>correct_class_score</code>的shape变为<span class="math inline">\((N,1)\)</span>；还有就是<code>np.max()</code>和<code>np.maximum()</code>的区别，<code>np.max()</code>和<code>np.amax(a, axis=None, ...)</code>等价，返回数组的最大值，<code>np.maximum(x1, x2, out=None, ...)</code>返回element-wise的较大值。</p><ol start="2" type="1"><li>梯度 这里也稍微有点tricky，根据naive版本对梯度的讨论：对<span class="math inline">\(w_j\)</span>的梯度需要知道margin的正负，对<span class="math inline">\(w_{y_i}\)</span>的梯度需要知道<strong>有几项大于0</strong>。怎么借助<code>margins</code>矩阵统计每一行大于0的项数呢？无聊的程序员先将矩阵中大于0的项都设为1，然后按列相加即可：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">margins[margins &gt; <span class="number">0</span>] = <span class="number">1.0</span></span><br><span class="line">num_to_loss = np.<span class="built_in">sum</span>(margins, axis=<span class="number">1</span>)  <span class="comment"># (N,)</span></span><br><span class="line">margins[np.arange(num_train, y)] = -num_to_loss</span><br></pre></td></tr></table></figure><p>对单个样本<span class="math inline">\(i\)</span>来说，其对<code>dW</code>的贡献要么是在第<span class="math inline">\(j\)</span>列（即第<span class="math inline">\(j\)</span>个类）加上<span class="math inline">\(x_i\)</span>，要么在第<span class="math inline">\(y_i\)</span>列加上<span class="math inline">\(-kx_i\)</span>，<span class="math inline">\(k\)</span>为<code>margins[i]</code>中大于0的元素个数，即<code>num_to_loss[i]</code>，整个训练集对<code>dW</code>的更新即是在累加单个样本对<code>dW</code>每一列（每个类）的影响。对第<span class="math inline">\(j\)</span>列，其更新即为每个训练样本对该类贡献的线性组合，组合系数取决于该样本的标签以及是否满足指示函数，即为<code>margins</code>的第<span class="math inline">\(j\)</span>列，取值范围<span class="math inline">\(\{0,1,-k\}\)</span>，0表示该样本对第<span class="math inline">\(j\)</span>个类的梯度没有贡献（该样本标签不是<span class="math inline">\(j\)</span>且不满足指示函数），1表示贡献了<span class="math inline">\(x_i\)</span>（该样本标签不是<span class="math inline">\(j\)</span>且满足指示函数），<span class="math inline">\(-k\)</span>表示贡献了<span class="math inline">\(-kx_i\)</span>（该样本的标签就是<span class="math inline">\(j\)</span>），因此：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dW = np.dot(X.T, margins) / num_train + <span class="number">2</span> * reg * W</span><br></pre></td></tr></table></figure><p>可以从矩阵维度相容的角度验证。 ## Softmax 先用循环实现一个<code>softmax_loss_naive(W, X, y, reg)</code>，输入的shape和SVM相同。 softmax分类器不再将<span class="math inline">\(f(x_i;W)\)</span>看做每个类的得分，而是希望输出normalized class probabilities，最终选一个概率最大的类作为预测，<strong>softmax函数</strong>就能将<span class="math inline">\(f(x_i;W)\)</span>映射到<span class="math inline">\([0,1]\)</span>且满足概率的性质： <span class="math display">\[P(y_i \mid x_i; W) = \frac{e^{f_{y_i}}}{\sum_j e^{f_j} }\]</span> 从预测函数可以看到：softmax是把<span class="math inline">\(f(x_i;W)\)</span>看作unnormalized log probabilities，因此对<span class="math inline">\(f(x_i;W)\)</span>先指数再归一化得到每个类的概率。</p><p>再来看softmax的损失函数： <span class="math display">\[L_i = -\log\left(\frac{e^{f_{y_i}}}{ \sum_j e^{f_j} }\right) \hspace{0.1in} \text{or equivalently} \hspace{0.1in} L_i = -f_{y_i} + \log\sum_j e^{f_j}\]</span> 从直觉上说：属于正确类<span class="math inline">\(y_i\)</span>的概率（括号里的分式）越高，损失应该越小，这就是大名鼎鼎的<strong>cross-entropy loss</strong>，衡量了真实分布<span class="math inline">\(p\)</span>和预测分布<span class="math inline">\(q\)</span>之间的差距： <span class="math display">\[H(p,q) = - \sum_x p(x) \log q(x)= H(p) + D_{KL}(p||q)\]</span> 具体到softmax： <span class="math display">\[q=\frac{e^{f_{y_i}}}{ \sum_j e^{f_j} },p = [0, \ldots 1, \ldots, 0]\]</span> 其中，<span class="math inline">\(p\)</span>在第<span class="math inline">\(y_i\)</span>个位置上为1。 由于<span class="math inline">\(H(p)=0\)</span>，因此其实是在最小化<span class="math inline">\(p\)</span>和<span class="math inline">\(q\)</span>的KL散度，即希望预测结果<span class="math inline">\(q\)</span>尽量向<span class="math inline">\(p\)</span>靠近。</p><p>从概率的角度出发看损失函数，我们是在最小化正确类<span class="math inline">\(y_i\)</span>的负对数似然，本质上就是在做一个极大似然估计。</p><p>看完理论，还要考虑一些现实问题。比如数值稳定性，由于指数的原因可能会导致overflow或者underflow，因此做一个简单的等价变换： <span class="math display">\[\frac{e^{f_{y_i}}}{\sum_j e^{f_j}}= \frac{Ce^{f_{y_i}}}{C\sum_j e^{f_j}}= \frac{e^{f_{y_i} + \log C}}{\sum_j e^{f_j + \log C}}\]</span> 一般选<span class="math inline">\(\log C = -\max_j f_j\)</span>，这个变换不会改变预测函数或者损失函数，只是将得分做了平移。</p><p>至此，naive版本的loss就基本有了，接着看看梯度咋求。先稍稍展开康康： <span class="math display">\[L_i=-f_{y_i} + \log\sum_j e^{f_j}=-w_{y_i}^Tx_i+log\sum_je^{w_j^Tx_i}\]</span> 其中，<span class="math inline">\(w_j\)</span>表示W的第<span class="math inline">\(j\)</span>列。 然后使用我们的小学数学知识去求偏导： <span class="math display">\[\nabla_{w_{y_i}} L_i =(\frac{e^{f_{y_i}}}{ \sum_j e^{f_j}}-1)x_i \\\nabla_{w_j} L_i = \frac{e^{f_{j}}}{ \sum_j e^{f_j}}x_i\]</span> 记<code>p = np.exp(scores) / np.sum(np.exp(scores))</code>，shape为<span class="math inline">\((C,)\)</span>，表示样本<span class="math inline">\(i\)</span>属于每个类的概率。 所以<code>dW</code>的第<code>y[i]</code>列更新即为<code>(p[y[i]] - 1) * X[i]</code>，其他列更新为<code>p[j] * X[i]</code>。</p><p>接着看下vectorized版本，<code>scores</code>的shape变为了<span class="math inline">\((N,C)\)</span>，首先处理数值稳定性问题，每一行都减去该行的最大值（注意<code>keepdim=True</code>）；接着求出概率矩阵<code>p</code>，shape与<code>scores</code>相同，那么loss为： <code>loss = np.sum(-np.log(p[np.arange(X.shape[0]), y])) / X.shape[0]</code> 与SVM类似，<code>dW</code>的每一列（每个类）是由每个训练样本影响的线性组合决定的，组合系数取决于该训练样例的标签，比如对于<code>dW</code>的第<span class="math inline">\(j\)</span>个类来说，如果某个样例的标签恰好是<span class="math inline">\(j\)</span>，那么其对梯度的贡献就是<code>p[j]-1</code>，否则系数就是<code>p[j]</code>。因此只要将概率矩阵<code>p</code>中所有正确标签的值减1即得到系数矩阵，进而得到<code>dW</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p[np.arange(X.shape[<span class="number">0</span>]), y] = p[np.arange(X.shape[<span class="number">0</span>]), y] - <span class="number">1</span></span><br><span class="line">dW = np.dot(X.T, p)</span><br></pre></td></tr></table></figure><p>同样可以用维度相容去check。 ## Neural Network 这是一个两层的全连接神经网络，架构如下： 输入<span class="math inline">\((N,D)\)</span>-&gt;全连接层1-&gt;ReLU-&gt;全连接层2（输出每个类的得分）-&gt;softmax 参数们的shape为：<span class="math inline">\(X(N,D),W1(D,H),b1(H,),W2(H,C),b2(C,)\)</span></p><p>第一步Forward Pass，根据输入X和权值W计算<span class="math inline">\(scores(N,C)\)</span>，然后计算softmax loss； 第二步Backward Pass，需要计算loss对于参数们的梯度，根据网络结构： <span class="math display">\[h=XW1+b1\\o=ReLU(h)\\s=oW2+b2\\L=\sum_i(-s_{y_i}+log\sum_j e^{s_j})\]</span> 根据链式法则+维度相容： <span class="math display">\[\nabla_{w_2} L =o^T \nabla_{s} L\\\nabla_{b_2} L =(\nabla_{s} L)^T(\nabla_{b_2} s)=(C,N)(N,1)=(C,N)(all\ 1\ col)\\\nabla_{w_1} L =X^T \nabla_{s} L\nabla_{h} s\\\nabla_{b_1} L =\nabla_{h} s (\nabla_{s} L)^T\nabla_{b_1} h=(H,C)(C,N)(N,1)=(H,C)(C,N)(all\ 1\ col)\]</span> 可以看出：关键在于求出<span class="math inline">\(\nabla_{s} L\)</span>，在对softmax的讨论中可知，对于第<span class="math inline">\(y_i\)</span>列导数为<code>p[y[i]]-1</code>，对其他列为<code>p[j]</code>，因此该偏导为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d2 = p</span><br><span class="line">d2[np.arange(X.shape[<span class="number">0</span>]), y] -= <span class="number">1</span></span><br></pre></td></tr></table></figure><p>另外对于<span class="math inline">\(W_1,b_1\)</span>，还需要<span class="math inline">\(\nabla_{h} s\)</span>：这玩意在<span class="math inline">\(h&gt;0\)</span>就是<span class="math inline">\(W_2^T\)</span>，否则就是0。因此<span class="math inline">\(\nabla_{s} L\nabla_{h} s\)</span>可以写为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d1 = d2.dot(W2.T) * (h &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="image-features">Image Features</h2><p>之前的样例都是直接用raw pixel，加上都是线性模型，效果拉跨太正常了。这里用的人工feature包括HOG(Histogram of Oriented Gradients)和color histogram，HOG捕捉texture（纹理变化？）信息，color histogram捕捉颜色信息，两者互相辅助。&lt;/c$&gt;</p><h2 id="fully-connected-neural-network">Fully-connected Neural Network</h2><p>我好菜啊！！很早就写完代码了，gradient check也过了，但是需要过拟合50张图片的时候一直不太对，调了几下学习率，我看train acc只有0.14左右，loss曲线波动也很大： <img src="https://img2020.cnblogs.com/blog/1260581/202109/1260581-20210912161403754-1113281186.png" alt="image" /> 因为最后要100%的train acc嘛，我看差的挺远的，就开始怀疑是网络哪里写错了，就没管超参数，检查代码检查了好几天tmd，深度学习debug还真是无从下手...后来跑去看了下别人的东西，发现原因竟然是不会调参(T^T)。</p><p>仔细看下，这里还是很明显的，20个epoch训练损失才下降了一点点，说明学习率太小了。 <img src="https://img2020.cnblogs.com/blog/1260581/202109/1260581-20210912162656860-43278840.png" alt="image" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同辈压力</title>
      <link href="/2021/07/17/%E5%90%8C%E8%BE%88%E5%8E%8B%E5%8A%9B/"/>
      <url>/2021/07/17/%E5%90%8C%E8%BE%88%E5%8E%8B%E5%8A%9B/</url>
      
        <content type="html"><![CDATA[<p>见过更广的天空，才能愈发意识到自身的渺小，并保持谦逊的态度。</p><p>中国或者世界上不论做任何事情，牛逼的人都太多太多了，不论是天赋型亦或是刻苦型，因此不可能超过大部分人，只要自己学到新东西，过得幸福充实就可以了，归宿也没必要苛求，尽力够到或者接近自己的天花板也就无憾了！</p><p>很多同龄人的经历会让你惊掉下巴。向更优秀的人学习！</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode解题报告</title>
      <link href="/2021/07/16/LeetCode%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
      <url>/2021/07/16/LeetCode%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="寻找两个正序数组的中位数">4 寻找两个正序数组的中位数</h2><p>最直观的做法就是合并2个有序数组，根据奇偶返回中位数，时间空间复杂度均为<span class="math inline">\(O(m+n)\)</span>。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">        sortedArray = [<span class="number">0</span>] * (m + n)</span><br><span class="line">        i = j = k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[j]:</span><br><span class="line">                sortedArray[k] = nums1[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                sortedArray[k] = nums2[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; m:</span><br><span class="line">            sortedArray[k] = nums1[i]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; n:</span><br><span class="line">            sortedArray[k] = nums2[j]</span><br><span class="line">            k += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (m + n) % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> sortedArray[(m + n) // <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (sortedArray[(m + n) // <span class="number">2</span> - <span class="number">1</span>] + sortedArray[(m + n) // <span class="number">2</span>]) / <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>空间的改进可以避免开辟新数组而采用2个指针，时间<span class="math inline">\(O(m+n)\)</span>，空间<span class="math inline">\(O(1)\)</span>： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span>(<span class="params">self, nums1: <span class="type">List</span>[<span class="built_in">int</span>], nums2: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">float</span>:</span></span><br><span class="line">        m, n = <span class="built_in">len</span>(nums1), <span class="built_in">len</span>(nums2)</span><br><span class="line">        i = j = cnt = <span class="number">0</span></span><br><span class="line">        left = right = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> cnt &lt;= (m + n) // <span class="number">2</span>:</span><br><span class="line">            left = right</span><br><span class="line">            <span class="keyword">if</span> i &lt; m <span class="keyword">and</span> j &lt; n:</span><br><span class="line">                <span class="keyword">if</span> nums1[i] &lt; nums2[j]:</span><br><span class="line">                    right = nums1[i]</span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    right = nums2[j]</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i == m:</span><br><span class="line">                right = nums2[j]</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = nums1[i]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (m + n) % <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> (left + right) / <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>要做到log级别的复杂度，需要使用<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/">二分法</a>。</p><h2 id="正则表达式匹配">10 正则表达式匹配</h2><p>判断字符串<code>s</code>是否匹配正则表达式<code>p</code>，<code>p</code>仅包含<code>.</code>和<code>*</code>。<code>.</code>匹配任意单个字符，<code>*</code>匹配0或多个前一个字符。题目保证不会出现连续的<code>*</code>。</p><p>可以发现此题的难点在于<code>*</code>，<code>a*</code>可以表示<code>&quot;&quot;, a, aa, aaa</code>，<code>.*</code>可以表示<code>&quot;&quot;, ., .., ...</code>。第一次看到这个题不一定能想到DP，甚至暴力做法也不知道从哪入手。我认为核心在于先不要考虑<code>*</code>到底需要匹配几次，而是考虑<code>*</code>到底是否需要匹配，即匹配0次/匹配1次的问题，多次匹配不过是将匹配1次重复而已。</p><p>例如<code>s=aa,p=a*</code>，从匹配0次/匹配1次的角度出发，暴搜的过程可以表示为一棵二叉树，左孩子表示匹配1次，右孩子表示匹配0次，开始时指针位置<code>(0,0)</code>，此时我们发现<code>s[i] == p[j] &amp;&amp; p[j + 1] == *</code>，意味着可以选择匹配0次或1次a：如果0次，意味着放弃目前遇到的这个<code>*</code>，那么只能<code>i不变, j = j + 2</code>，j越界匹配结束返回False；如果1次，意味着<code>s[i]</code>匹配成功，那么可以继续使用目前的这个<code>*</code>匹配<code>s[i + 1], j不变</code>。直到将<code>s</code>的所有字符匹配完毕，时间复杂度<span class="math inline">\(O(2^n)\)</span>。</p><p>另外一个例子<code>s=aab,p=c*a*b</code>，从<code>(i,j)</code>开始，先来看看可能使得匹配成功的情形：</p><ul><li><p><code>p[j + 1] == *</code>：无论当前字符是否匹配都要继续，因为<code>*</code>可以匹配0次，保留了成功的可能。此时可以选择匹配0次/匹配1次，如果选择匹配0次，意味着抛弃目前的<code>*</code>转移到<code>(i,j+2)</code>；如果选择匹配1次，意味着当前字符必须匹配且转移到<code>(i+1,j)</code>。</p></li><li><p>如果<code>p[j + 1] != *</code>，那么当前字符必须匹配即<code>s[i] == p[j] || p[j] == .</code>，否则无法继续进行返回False。如果当前匹配，那么继续判断<code>(i+1,j+1)</code>。</p></li></ul><p>如果上述2种成功的条件均不满足，那么只能返回False。</p><p>终止条件则是：</p><ul><li><code>i &gt;= len(s) &amp;&amp; j &gt;= len(p)</code>意味着字符串的所有字符匹配整个模式，返回True</li><li><code>i is ok &amp;&amp; j &gt;= len(p)</code>意味着<code>s</code>中仍然存在未被匹配的字符但模式已经耗尽，返回False</li><li><code>i &gt;= len(s) &amp;&amp; j is ok</code>意味着<code>s</code>中所有字符均匹配完毕但是模式仍未耗尽，此时不能判断成功与否，需要继续递归。</li></ul><p>即递归函数<code>dfs(i,j)</code>返回<code>s[i:]</code>与<code>p[j:]</code>是否完全匹配，暴力做法存在着很多重复计算，因此用哈希表存储已经求得的结果提高效率。</p><p><a href="https://www.youtube.com/watch?v=HAA8mgxlov8">Top-Down Memoization - Leetcode 10</a>讲得比较透彻。</p><h2 id="同时运行n台电脑的最长时间">2141 同时运行N台电脑的最长时间</h2><p>有n台电脑和一个电池数组<code>batteries</code>，第i个电池可以让一台电脑运行<code>batteries[i]</code>分钟，求n台电脑同时运行多久。</p><p>我第一次看到的时候就想到了优先队列，时间最久即每次选n个最大的电池<code>a=[]</code>，然后可以支撑<code>min(a)</code>分钟，直到<code>batteries</code>中正数个数小于n停止。</p><p>但发现连样例都过不了，比如<code>n=2,batteries=[3,3,3]</code>，第一次选2个最大的支撑3min，<code>batteries=[0,0,3]</code>，无法同时继续，但答案是错的。贪心策略不太对，每次选最大的n个是对的，但是不一定要支撑<code>min(a)</code>分钟。</p><p>最后发现二分答案是反着思考的：虽然求的是最长时间，先假设n台电脑可以同时运行t分钟，一台电池最多能供电t分钟，所有电池的可供电时间总和为S = min(sum(batteries), t*len(batteries))，检查这些时间是否能给n台电脑供电S / t &gt;= n</p><p><a href="https://leetcode-cn.com/problems/maximum-running-time-of-n-computers/solution/er-fen-da-an-de-checkhan-shu-de-si-kao-f-g8no/">这张图很形象</a> 对于当前枚举的时间P，共有k台电脑。需要看电池能否填满该矩阵，同一行不能有相同颜色。</p><p>对于大于等于P的电池，只能利用P，让其一直供应一台电脑即可，即填充一列，剩余电量只能丢弃，因为该电池不能同时供应2台电脑。对于小于P的，让其供应一台电脑直到电量耗尽，注意这些小于P的电池不可能出现同时供应2台电脑的情况，对于小于P的电池，首先拿一个填充一列，当然填不满，接着拿第二个继续填充，如果该列满了就填下一列，以此类推，由于小于P的电池最多填充P - 1行，因此不会出现相同颜色。（最极端的情况就是：某种颜色的电量为1，只能填1行，第二种颜色最多P-1行，因此下一列不会重复，如果第二种颜色可以填P行，那么下一列才会重复）。</p><p>因此判断P是否合法只需要求所有电池里：如果电量大于等于P，sum += P，否则将剩余所有的电量小于P的电量全部加到sum起来，判断sum是否大于等于P * K。</p><p>二分法一般的题目就是求最大的最小或最小的最大，假设要求的是ans，那么从ans=0开始判断是否满足要求，然后判断ans=1,2,...直到上界。例如本题就是求最小里面的最大，比如0,1,2,...都满足要求，需要在其中挑一个最大的。</p><h2 id="section">767</h2><p>给定字符串，重排其中的字符使得任意两个相邻位置的字母不同。 样例：s=&quot;aab&quot;，输出&quot;aba&quot; 最开始的想法是贪心+双指针，指针i从前向后遍历，指针j从i+1开始，如果s[i]==s[j]，j不断向后遍历找到第一个与s[i]不同的字母s[k]，将s[k]与s[j]交换。WA在了&quot;baaba&quot;，期待&quot;ababa&quot;，输出&quot;&quot;，所以这种贪心策略显然是错的。</p><p>接着就想到需要考虑字符的出现频率，先按频率高低排序再去按照上述贪心，WA在了&quot;aabbcc&quot;，期待&quot;abacbc&quot;，输出&quot;&quot;，很显然这种贪心策略本身就是错的。</p><p>接着就想到先安排出现次数最多的，如果当前要安排的与前一个字符相同，就选择出现次数第二多的，这样交替下去，可以写出如下代码： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def reorganizeString(self, s: str) -&gt; str:</span><br><span class="line">        if len(s) == 1:</span><br><span class="line">            return s</span><br><span class="line"></span><br><span class="line">        from collections import Counter</span><br><span class="line">        dic = Counter(s)</span><br><span class="line"></span><br><span class="line">        ans = &quot;&quot;</span><br><span class="line">        prev = &quot;&quot;</span><br><span class="line">        for i in range(0, len(s)):</span><br><span class="line">            cnts = list(dic.items())</span><br><span class="line">            cnts = sorted(cnts, key=lambda x:x[1], reverse=True)</span><br><span class="line">            if prev == cnts[0][0]:</span><br><span class="line">                if len(cnts) &lt;= 1 or cnts[1][1] == 0:</span><br><span class="line">                    return &quot;&quot;</span><br><span class="line">                ans += cnts[1][0]</span><br><span class="line">                dic[cnts[1][0]] -= 1</span><br><span class="line">                prev = cnts[1][0]</span><br><span class="line">            else:</span><br><span class="line">                ans += cnts[0][0]</span><br><span class="line">                dic[cnts[0][0]] -= 1</span><br><span class="line">                prev = cnts[0][0]</span><br><span class="line">        return ans</span><br><span class="line"></span><br></pre></td></tr></table></figure> 时间复杂度<span class="math inline">\(O(n^2lgn)\)</span>，空间<span class="math inline">\(O(n)\)</span>。</p><p>因为涉及到出现次数最多的问题，可以考虑max heap。每次迭代时，从堆里弹出堆顶元素（意味着下次迭代该元素不会考虑）加入res，如果上一次迭代加入res的元素还有剩余，就将其重新加入heap，意味着下次迭代需要考虑该元素。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def reorganizeString(self, s: str) -&gt; str:</span><br><span class="line">        ans, cnt = [], Counter(s)  # decent order</span><br><span class="line">        max_heap = [(-value, key) for key, value in cnt.items()]</span><br><span class="line">        heapq.heapify(max_heap)</span><br><span class="line">        prev_ch, prev_cnt = &#x27;&#x27;, 0</span><br><span class="line">        while max_heap:</span><br><span class="line">            cnt, ch = heapq.heappop(max_heap)</span><br><span class="line">            ans.append(ch)</span><br><span class="line">            if prev_cnt &lt; 0:</span><br><span class="line">                heapq.heappush(max_heap, (prev_cnt, prev_ch))</span><br><span class="line">            cnt += 1</span><br><span class="line">            prev_ch, prev_cnt = ch, cnt</span><br><span class="line">        if len(s) != len(ans):</span><br><span class="line">            return &quot;&quot;</span><br><span class="line">        return &#x27;&#x27;.join(ans)</span><br></pre></td></tr></table></figure> 时间复杂度<span class="math inline">\(O(n)\)</span>，空间<span class="math inline">\(O(n)\)</span>。</p><p><a href="https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/">题目链接</a></p><h2 id="题意">题意</h2><p>给定一个单链表，删除和为0的连续结点序列，直到最终链表中没有和为0的连续结点序列。 样例：head = [1,2,3,-3,-2]，输出[1]</p><h2 id="分析">分析</h2><p>由于链表头结点可能会被删除，因此首先创建dummy结点。一个比较直观的想法就是记录前缀和，依次遍历链表，遇到出现过的前缀和也就意味着出现了和为0的序列，就删除两次相同前缀和中间的序列。因此需要一个hashtable记录前缀和出现的位置，手动走一个简单样例吧： dummy设为<code>(0,head)</code>，hashtable初始包含<code>&#123;0:dummy&#125;</code>，避免[1,-1]这种情况。</p><ol type="1"><li><code>cur=p(1),sum=1,hash=&#123;0:dummy,1:p(1)&#125;</code></li><li><code>cur=p(2),sum=3,hash=&#123;0:dummy,1:p(1),3:p(2)&#125;</code></li><li><code>cur=p(3),sum=6,hash=&#123;0:dummy,1:p(1),3:p(2),6:p(3)&#125;</code></li><li><code>cur=p(-3),sum=3</code>：此时hash返回p(2)，因此就让p(2).next指向cur.next，相当于删除了[3,-3]，<code>hash=&#123;0:dummy,1:p(1),3:p(2),6:p(3)&#125;</code></li><li><code>cur=p(-2),sum=1</code>：此时hash返回p(1)，因此让p(1).next指向cur.next，相当于删除了[2,-2]，<code>hash=&#123;0:dummy,1:p(1),3:p(2),6:p(3)&#125;</code></li></ol><p>大概可以写出这样的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeZeroSumSublists</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">        cur = head</span><br><span class="line">        prefix_sum = <span class="number">0</span></span><br><span class="line">        hashtable = &#123;<span class="number">0</span>:dummy&#125;</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            prefix_sum += cur.val</span><br><span class="line">            p = hashtable.get(prefix_sum)</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                p.<span class="built_in">next</span> = cur.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hashtable[prefix_sum] = cur</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>交上去WA了，问题出在哪呢？ 走一遍出错的样例：输入[1,3,2,-3,-2,5,5,-5,1]，期待[1,5,1]，输出[1,5,5,-5,1]</p><ol type="1"><li><code>cur=p(1),sum=1,hash=&#123;0:dummy,1:p(1)&#125;</code></li><li><code>cur=p(3),sum=4,hash=&#123;0:dummy,1:p(1),4:p(3)&#125;</code></li><li><code>cur=p(2),sum=6,hash=&#123;0:dummy,1:p(1),4:p(3),6:p(2)&#125;</code></li><li><code>cur=p(-3),sum=3,hash=&#123;0:dummy,1:p(1),4:p(3),6:p(2),3:p(-3)&#125;</code></li><li><code>cur=p(-2),sum=1</code>：此时hash返回p(1)，让p(1).next指向p(-2).next，链表变为了[1,5,5,-5,1]，<code>hash=&#123;0:dummy,1:p(1),4:p(3),6:p(2),3:p(-3)&#125;</code></li><li><code>cur=p(5),sum=6</code>：此时hash返回p(2)，但此时p(2)已经删除，因此让p(2).next指向p(5).next肯定是错的。</li></ol><p>至此应该可以看出问题了：在删除改变链表指针的同时，hashtable并没有做相应的同步删掉对应的元素，所以每当出现重复前缀和时只要删掉hashtable中两次前缀和之间的项即可，可以借助<code>OrderedDict()</code>实现，按照插入顺序即链表顺序有序：</p><ol type="1"><li><code>cur=p(-3),sum=3,hash=&#123;0:dummy,1:p(1),4:p(3),6:p(2),3:p(-3)&#125;</code></li><li><code>cur=p(-2),sum=1</code>：此时hash(1)返回p(1)，删除后为<code>hash=&#123;0:dummy,1:p(1)</code></li><li><code>cur=p(5),sum=6</code>：此时hash返回<code>None</code>，符合预期，继续迭代即可。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeZeroSumSublists</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="built_in">next</span>=head)</span><br><span class="line">        cur = head</span><br><span class="line">        prefix_sum = <span class="number">0</span></span><br><span class="line">        hashtable = OrderedDict(&#123;<span class="number">0</span>:dummy&#125;)</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            prefix_sum += cur.val</span><br><span class="line">            prev = hashtable.get(prefix_sum, cur)</span><br><span class="line">            <span class="keyword">while</span> prefix_sum <span class="keyword">in</span> hashtable:</span><br><span class="line">                hashtable.popitem()</span><br><span class="line">            hashtable[prefix_sum] = prev</span><br><span class="line">            prev.<span class="built_in">next</span> = cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>Two-pass： 上述做法的hashtable记录的是第一次出现前缀和的位置。现在换一种思路：首先遍历一次链表，hashtable记录<strong>最后一次</strong>出现前缀和的位置，第二次遍历链表设置相应的指针到最后一次前缀和的位置，这样即使第一次前缀和位置被删除，指针也会相应地跳过：</p><ol type="1"><li>第一次遍历后：<code>hash=&#123;0:dummy,1:p(-2),4:p(3),6:p(-5),3:p(-3),11:p(5),7:p(1)&#125;</code></li><li>第二次遍历：<code>dummy.next=hash[0].next,p(1).next=hash[1].next=p(5),p(5).next=hash[6].next=p(1),p(1).next=hash[7].next=null</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeZeroSumSublists</span>(<span class="params">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>, head)</span><br><span class="line">        prefix_sum = <span class="number">0</span></span><br><span class="line">        hashtable = &#123;<span class="number">0</span>:dummy&#125;</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            prefix_sum += head.val</span><br><span class="line">            hashtable[prefix_sum] = head</span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">        prefix_sum = <span class="number">0</span></span><br><span class="line">        head = dummy</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            prefix_sum += head.val</span><br><span class="line">            head.<span class="built_in">next</span> = hashtable[prefix_sum].<span class="built_in">next</span></span><br><span class="line">            head = head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> dummy.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><p>时间复杂度<span class="math inline">\(O(n)\)</span>，空间复杂度<span class="math inline">\(O(n)\)</span>。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Research Proposal</title>
      <link href="/2021/07/15/Research%20Proposal/"/>
      <url>/2021/07/15/Research%20Proposal/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff106061ee89eb32e8256b6dde62c6e9568854a50f12b8fb723fdddea2ab7074"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于职业发展的考虑</title>
      <link href="/2021/07/14/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E7%9A%84%E8%80%83%E8%99%91/"/>
      <url>/2021/07/14/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E7%9A%84%E8%80%83%E8%99%91/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="544d2c0a2def03f9f9895694c8130dbe9ca424754a5cce84e34e07600aebb6db">418fac4f173397084caccc18ab9f089ee8d2e0585c7d65a08462be01d6193c251aac8540f52de98e7ae892a41d7a18e85d8f1b3b11b0656f42aee5c600fe9e0594f2f1616d3bf64610475824146e0f864a1241b8fdc0068d555811d5011ef9f05650aeb0487bab8004de963e29a0c5bd15e12527429b949591799ca7b1e2d43e3a15ca995d9abec1b12cb68cf2810817b818337faa406a67ddb597c2f2988f7237661e35966b811de629f273a90af844217bf0d7258400bef9c864c499895ac646b9e751935e761e3b313990e6201061a26d1a89852c23604c558abb03213889fd17f0423ae772e745e25e66447a2ca4ebd40768992a715de80e0414cf817f2682aea09056d77c6b5f95bab0b8fb616cc8b6e07c5d065883c79f37a6aeaf42b3239d4bb182513e15bbf6413a022ded90dc25cb4d7ab348e65f0fdf6f59025c663869a252e4f63fd0d4a977d338d817ebabda41558384cb0867e43b5347037dd36171c8a72d5cd1f9d657ab5789cc2a50e00212f666f129479c175083ef79e8dc83804b70c8b9d9a316a126b2317ae4422f74c8806dadfd44495957d679aef4f86d1fdca087fd0b550a13d6aca1fafd4fea96bb955b94f9c71146854f7ace2a16cfc084bf589ceb4c5c811c9f6a2dc6487b2ded64cf9ddd3cf489056974f7cd72308e4f37555a4931f408dfa50168bc7ada05c0967044f1ccae89b9c7885b73836298ea8171e1f81674ad3538d985ef37a1f5a43ee01d80868e1a22ee6c24e7963da8a9b51c7093f28c72879aa0d2d76c92f54f8175c57fc17f3f39d604d2a650276e19d96d2ffb865c725c1cc9f34a4ec38cfaecc040f043884d4096d166255d40065bc3f3c1adaa968785333a4df9a2338d113ca04fad443cc4ff1d43d635a40a70dc2cf072c5ce352996bd7603ab99ec5ffb2d48712453fc26823978a9fc9e4340edc115a545e5d8240b04cd64bf2cc8fe8e32350c938688bf944ae00f30bc88f18ec0ea79ff6d8f240e826b52b2bac4a8b09053173982964399c2accd21f53b48851e1c0eab6e8ec68d6b8d3f3d84d0f98c962852a83c894d2e4b750ec177f93403cf689d15b14f46a8d692ca4ec67749d9ecf53f4b6948132daac9deadeb56e09f10505ef2f3c27b0087a064e592007d5f1759a0f7522cc3739a05ff4a8041942e7e4318356815542f530ace858f17a899d6d136083b5b7825807d246bfd538d168da4223b949bcdae9f31e682ee7b94b77702d91361c34b9b9f13989bc5694d884fd42925d7761baaade9fd166606d1daf98266f77964e55bf351a7641c941449e541b5f3027ce7a814ef149432b88773b4a9a5190d48f802d35d91079a91da7aa2179674af8a4e61a1430a05dce081565eb89220c019ee6320fa6c15b3e6e0f561ea205f13c999ba662db15e905297b444a819600cd1047b1dd72947906264c3ca9f1b8c84a39d65a42888a2f4b8e61d20298d3ad2af8c1afcc927212795d199252bab2aa2b6f324e18e008f0fbe8606852d28f14da9c7eacf8bd8b6f3b521b4c3c6338f3ff4108c5693bcfd12945f19dfcb3893f96b89895e813401fa04536ad10b88cb4847afe45dcdac73af356ea51d3ce86948aa56959427e4f1799ab2629274de0aaf98503fd16ce010b06135a2b84ec5ac76ad25fa8d19edf9391fb64d39b4a4d2bdbce6c881e4000a554a6a4102fd560b38b1c8f11c024670a10b2b42377fa7be7656074e89d1a2dfb319565487903be825f4ec55db41f89c9e4fde2370bc0613453a175e2b24bdfda342cc5eef603d1f373b68f379ca6ff970b514dc11d3a37c20efc7cd7fbad9b82cec5482e7e41b6ee1187c05040b40aa5f01299dde9791badfc6d8ee5da31ae9f53e11367ef42913a58cd27c3d0f0fca56d300608ae506514a4c1b674000516cc4e4d8a671e4185ea8a71df6522823b2447954e402aacd229659b2d05327995c4e9b21c439726ebae11de2023ff5990a1bbf1c3624350ca02d2ed9e8ba9f2e55a76bef917e37b8b99ecb3d15c4e53fffe2d2bfbe36d1c1191959b1ec02195666ebc7e0c8abb701867b30ec4b77a7c54c7c548246277000413b6dd12bead37ed00d1e61c2c3f6c423bd1d136ba432c358a5c38635d3f08b8d801113e2d6a715bd9a43cfdc8424f2d11527506129296253d052bf9cfa2431d192491b2bfea4731d19f399b3535360fdbdf7216e71f0e5d353c651e5d4e95a2bfb582cae48d5206eccfda4598968d0ad377f7fcb62a07c6a80b0973cbe11f0eab96a9d320f9f573e0ecb14a62ea2f9c7a7c6689ff4bfd820f61343db344252ef209f64ba814cdd606ba1ab5ac7ea20ad2d3774e5e2a60e29f4c98313901984e4b874a15ed3a7ab035ced170ad200022b647746a0496b4e2ae8c987eda42de5452273be55581772decb384a2d9cd0fb84e8db52ae29f72adefd201a3d0b247a38664040a30af917d496114ffc8dda7075b947c2e3c3475698fdf9bad14dad35435bcd9a0a7dd31730cff87e28e0e8e5cbd83e0ce6a6c97c7e8e333ac631af7e7fff38699e71b172963cd085b630106fa24e60bac6456d6629182b9ca6e0944b2434584dce7ee2770967819860d5f66e93bb4654b6dfecaae0804034aa4fbca7ffece3cbedfdadbe1c54ec9245d5027a4afada2087ab2569e033a2959a2ba5fd5aec58744af80ca8fb586a27133f72522ccff0d1f2b88114a948508a867a87c5af9c4daa32d8542c76e24930934c7d3063e22fd2356c57442898dc3dd28d69a11961c3dc94703fe2bdd0434b9ce8bd8d8616fe852a3172292079fdcf389e9c8637ec3256c5b0de0bc0f67f3bac8dd15f30990f5ddad48da9dd9c6f1a167fa64c5e506bfc8041dec2bc61c22519d88c9c293dc3fc6b6872bad42a23a577bf9c77c544e6b2aef500a31633b89ed2591e2776221061c699f9f5de4d498099760caef19b6f03930f60deabe7aa1b2c976dc9d04384a80ac621763870c222d0432a6aa887d1e5906e6f514797ac76e344c25bc91857cefa49c669af7e94fbf0563d932f0564fca655ed4464ff2cc600d2af704f355c0cafef9576003e586dc6e9fb94b04600a8714035b9917febda0cc525d053ab12c386a853fd4bc84c9e1114744108bcfad5db24087dd8f5e43e01e08bc8a572515e61fd43650c8427e1c1ace56014bb6a512c995abcb4df84e0efc22eac1f1d969ca072505048a9695d18bcc3465ab9644dd86ef3526ce7698f607ca1c4b239337e97a88c9ce6bed238f95e83184daa808a02d6723f10c769eb382bf78cd045532ac508e81b341a28b73dd833fa288e34c2cbbf94cb82bf229155117e1d067ae5dc40e3dbf0f5c9d648bf784122319c1d9044386d46ea1d4a19c2abf05479d1c5930b02bcb63e6e16966a98f90699f54d6e0c80cca29e7418f8610549088484d0d61788de9ea761df3eecf6b6f0c4fd5cb6f10a0fa4224636dc31c07178d7f5b26f2b9fac6af3c5ddd4a3bf0b6e53e417d7ff238d5974a6e0447fb312b68690d5b528151cc111ceee30c4998021ff25b31ab7ff131e136d3ca770dbb779d6aa4e694a5b37091407d9ee868ac07bf255168568aa195fdb6bbd7de7e938fc2c1db7eb895083881bbb15a757ea40bf55149b6a9a3f264de73c7f06fe88ddfdb2eac0e51e16cde1111ad79d65d3b8b5b9dfda5c8a65623134c729e801d5cd4b6e042f4dfed2f72980c5a89886868c0df57d4de1a336f91dab2fb537b5148831323e115dc5cbac2ee9dd8aa9e31d52ebbfe92a451effef312f254776f15156f9ed55dea3ffebd5d9322cbbf1581380a8d77f72875a2389de701ac839db021e2493e7c08e45b50bfcb49b352edee357610a60c5f8f0f4fb801516d5af1b6b3ae4ab2a9edbe27b8d704b4017660aff75237cbdd9601712150693d27c64c9214ccfbd1255630a94789b3307f4b18c1c99fdab1872d214408bbf2cb8d911463c6038659217004eb26028b7ef3caefa40457e04221659e3087256d993de271ea0fcfcc89d2df4bb8b1acc4d918ef2babe1054de34d20b234e1e221a2a046c56a30d464a84fe2a89ef980e199487c93a02e6801b5a5bc65dd3bcdc4923f4b737b513ebced73d7811bf3de52743b298dbfe5188c2b692f60f7fb6fab38c131c71e740a12bfd497112876fba49e2781e9f0ea0b0da3cee284b25fd5d184741744c23998afc3dd8f1f722e14ba3135b6acb5915c24063e93448fe389286e5cc48b050e0805a41c1e705e815ae5b620ba2091fa1e0c54f761b7541d753aa23d43a6fd3c2690668c3f46f65d354ee4368be7fd5b665e5ba38ac6ba8daa6344adcf8aa048293e6f90984e6b9f4c06d6616f5372c0cd64d607b54d656cd21c4046ab897c0a6ac940f9fe80d4ad6bfc80d524672950e69398d0343e483099f9c9e693c57af23e3c61e81f7b2c4949bda254692e590d5dcd4de641e43b4fb998f9b434006adaa1221d52f3dcfad3702af63e47f3bf6e84ce4b6f17f957d58078fffceee92c468f20f6a2af7a5bb7eae786ce7c54dc17b79ee0893b03ae633723eef8bb36d00d6f5b513979b86eefeaaa00d76d2f4fd527e6f1d6e82625243114ef941187be5fcab7adc6c0d72b8fc6ac7b768f4d152a3c928d30157c796e22d714b6636446935b013556d49f39ff81f69ba02ab73560d5da7fe48c750216f9c17ce55775bfc298097426a427ebb9d17b12318ae43e93ae0983951f4b0b36104b6928cf2f96e8bb2493a80b65661974402ff521e290ae8530c7910bf111cc2376cd360e8a2ca8182a4b7ed0170271fda60e4bfb4459883fd1c572f79335b764bfad1860fb4b04dc95bc550daab061db242beffb5f4e3d5dc774d63b000196a62e4bef784c314f744f994a3fa20832938964732723fe7554b75f283ab599165d9f3765dedc0bb83cdb21af6163c1faabb5a9f50e29b72210a4000c6c2b0f810b5639d56e221f735ab206b0dab2c0cb19dbd6196a9c48ec485767e7a5f6557d883b7271ce780af8bef014d28acc5880ba91584c479482f115b4ad4a4d14b3ef54f997c3b1c2cd8173d1d45504dc0f5575850c8acd3aec7d1b1911753e676fb0430a6b77a1cb00cb966ee170255e7ff2fd03af6ab74aba2de1061c5b631e118f9390121cbb4beecfc556831dc40364008be6b127183a86843c4ad174a1b455fd49466eaf3d0b9a528282d8f15d0ad8c9880d89a2a35d4cf76174b90cba30778928199bab1b3c9e6a06741896169b1936265e8a4bdf35d1883a9f8301e2acfe669d9510e719cde49801ff1dc867c9f9cedc1147b80f33338e511ced2ef6b659dab88d4e0b2a040cd042a857efc20318613dcbb58894df6e61bb6b2c1c2895e733807ddf6aaf9d960bf1016013eac5a67cc57a51ffc630454119592fe2f9766f7a0dcf4aeb0659b08dfa82d8cebfc3f56f90ce205a7d8d86802feb61a0e6ea3877dadd97123a8464caae0565d20f941e076fd51b92a15fa82288406e84321a354da807fd1d7eca7c5e85b2818e97a237be74f4e2fb43579024a87e14017ada43cf131faf012016b74ddf11d6be588efdb279321ee1e33c4b5fb60556b959b7685e8f60d5de71fb634ef8318fe65923dbce50f25f6fa7cbab051a7ca0182f2f1164b2e59fd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optimization Methods in Deep Learning</title>
      <link href="/2021/07/10/Optimization%20Methods%20in%20Deep%20Learning/"/>
      <url>/2021/07/10/Optimization%20Methods%20in%20Deep%20Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="background">Background</h2><p>深度神经网络的训练过程主要通过求解一个特定的优化问题来实现，然而由于该问题是一个复杂的高维非线性优化问题，并且不同的网络结构差异很大，不能将传统的优化方法直接使用。即使数据集和网络结构完全相同，不同的优化算法也可能导致完全不同的收敛效果。实际应用的一些简单方法虽然行之有效，但现有理论无法充分解释其有效性，超参数的不断增加也给优化增加了不少难度。如何确保算法收敛、如何尽快收敛以及能否收敛到全局最优一直是困扰学术界和工业界的问题。如果能够用优化理论去解释神经网络的训练行为，对于深度学习的推广应用将会起到巨大的推动作用。</p><p>对于有监督学习，给定包含n个样本的训练集<span class="math inline">\(\{(\mathbf{x}_1, y_1), \ldots, (\mathbf{x}_n, y_n)\}\)</span>，<span class="math inline">\(\mathbf{x}\)</span>表示样本的特征向量，<span class="math inline">\(y\)</span>表示该样本对应的标签。我们的任务是利用样本信息来预测相应的标签，使预测值尽可能接近真实标签。如果用深度学习来完成这个任务，就需要通过调整神经网络的参数（权重W和偏差b）来近似数据背后的函数映射关系，这个关系往往是高度非线性的，网络越深表达能力也就越强，逼近效果的精度也就更高，因此网络结构很可能是极其复杂的。</p><p>为了衡量预测值和真实值之间的接近程度，通常需要采用某种距离度量方式<span class="math inline">\(l\)</span>，<span class="math inline">\(l\)</span>一般设计为<strong>可微</strong>的，接着用一些优化算法去最小化该目标函数。因此优化问题变为寻找最佳的参数使得<span class="math inline">\(l\)</span>最小，在不考虑正则项的情况下有： <span class="math display">\[\mathop{\mathrm{min}}_f \frac{1}{n} \sum_{i=1}^n l(f(\mathbf{x}_i), y_i)\]</span> <span class="math inline">\(f\)</span>就是我们从输入到输出的映射函数，<span class="math inline">\(l\)</span>通常也叫损失函数，衡量预测值<span class="math inline">\(f(x_i)\)</span>和真实标签<span class="math inline">\(y_i\)</span>的差距，比如回归问题中经常使用的平方损失函数<span class="math inline">\(l=||f(x_i)-y_i||^2\)</span>。</p><p>需要注意的是：深度学习中的优化问题与传统意义上的优化问题有所差别。传统的优化问题需要尽可能找到目标函数的最值，而深度学习的最终目的是为了<strong>预测未知</strong>的数据，而不是将训练数据上的损失降到最低。我们定义的损失函数<span class="math inline">\(J(\Theta)\)</span>衡量的是当前模型参数<span class="math inline">\(\Theta\)</span>在<strong>训练集</strong>上的优劣，然而，最小化训练误差并不意味着模型的泛化误差也会最小，为了降低泛化误差我们还需要关注过拟合问题，因此损失函数往往要加上<strong>正则项</strong>。统计学上称为经验风险最小化，即由于无法获得全部数据，所以只能用经验风险作为实际风险的近似。非常有意思的是：尽管大多数神经网络都是严重过参数化的，但是反而有着比较不错的泛化能力，这与传统的机器学习观点是矛盾的，泛化理论也需要更加深入的研究。</p><p>深度学习中的<span class="math inline">\(f\)</span>通常是多层的复合函数，由于太复杂而无法求出解析解，所以要用数值优化算法去求解。实际中主流的深度学习优化算法都利用梯度下降来求解，梯度下降是深度学习优化算法的基础，尽管目前已经很少直接使用，但它却是其他高级优化算法的基石： 假设网络的参数为<span class="math inline">\(x=(x_1,x_2,...,x_d)^T\)</span>，优化的目标函数为<span class="math inline">\(f\)</span>，那么<span class="math inline">\(f\)</span>的梯度为： <span class="math display">\[\nabla f(\mathbf{x}) = \bigg[\frac{\partial f(\mathbf{x})}{\partial x_1}, \frac{\partial f(\mathbf{x})}{\partial x_2}, \ldots, \frac{\partial f(\mathbf{x})}{\partial x_d}\bigg]^\top\]</span> 每个元素对应着目标函数在该方向上的变化率，因此只要沿着梯度的反方向就可以使目标函数减小得最快：<span class="math inline">\(\mathbf{x} \leftarrow \mathbf{x} - \eta \nabla f(\mathbf{x})\)</span>，<span class="math inline">\(\eta\)</span>是一个被称为学习率的超参数，用来控制每一步的大小。<span class="math inline">\(\eta\)</span>过小，收敛过程极度缓慢；<span class="math inline">\(\eta\)</span>过大，可能造成损失函数在最小点附近波动甚至发散。学习率的调整是神经网络训练过程中一个重要的调整参数，常常使人头痛不已，因此也出现了很多学习率自适应调整的算法，将在下面深入分析这些算法的优劣。</p><p>有了优化模型及最基础的求解方法后，我们需要对其性质和优缺点进行分析，以便于后续的改进。深度学习的优化问题大多是非凸的，因此存在很多挑战：</p><ol type="1"><li>局部最优：对于凸优化问题，局部最优即是全局最优。然而对于非凸问题，当损失函数到达局部最优点时，<span class="math inline">\(J(\Theta)\)</span>的梯度为0，<span class="math inline">\(\Theta\)</span>无法继续更新，损失函数无法继续下降；</li><li>鞍点：该点既不是局部最小也不是全局最小，但是该点的梯度消失，无法继续更新；</li><li>梯度消失/爆炸：由于初始值和激活函数选择不当 (如sigmoid)，当梯度反向回传时，可能在某一层求导后梯度值很小/很大，导致训练速度极其缓慢。因此初始值的选择通常采用很小的随机数，避免收敛到比较差的区域，激活函数通常也会选择ReLU，避免梯度消失问题。</li></ol><p>局部最小和鞍点示意图如下： <img src="https://img-blog.csdnimg.cn/20210710191530881.png" alt="在这里插入图片描述" /> 尤其在高维空间中，鞍点的问题变得更加严重：假设<span class="math inline">\(\Theta\)</span>是一个k维向量，<span class="math inline">\(J(\Theta)\)</span>的海森矩阵就有k个特征值，其梯度为0的点有可能是局部最小（特征值均为正）、局部最大（特征值均为负）或者是鞍点（特征值有正有负）。高维空间中特征值有正有负的概率很大，因此鞍点出现的可能性远大于局部最优点出现的可能性，并且鞍点周围的平坦区域可能很大，需要增加噪声扰动来逃离鞍点。</p><p>由于上述问题的存在，通常很难找到<span class="math inline">\(J(\Theta)\)</span>的全局最优解，但实际上为了减少过拟合的风险我们并不需要训练集上的全局最优，经典的梯度下降就可以带来足够的局部最优。</p><p>分析完优化模型本身的问题，再来看看最基础的GD的问题：目标函数通常是训练集中所有样本的损失的平均值，故目标函数的梯度为： <span class="math display">\[\nabla f(\mathbf{x}) = \frac{1}{n} \sum_{i = 1}^n \nabla f_i(\mathbf{x})\]</span> 如果用Full-batch GD，那么每次迭代每个参数的梯度计算的时间复杂度为<span class="math inline">\(O(n)\)</span>，对于大规模数据，这样的更新速度显然无法令人忍受。</p><p>学习率的选择是一项重要的调参工作，因此学习率的自适应变化就成为了研究热点之一，一些二阶方法应运而生，我们首先来看看牛顿法该如何解决这个问题。</p><p>对于损失函数<span class="math inline">\(f\)</span>，利用泰勒展开式有： <span class="math display">\[f(\mathbf{x} + \boldsymbol{\epsilon}) = f(\mathbf{x}) + \boldsymbol{\epsilon}^\top \nabla f(\mathbf{x}) + \frac{1}{2} \boldsymbol{\epsilon}^\top \nabla^2 f(\mathbf{x}) \boldsymbol{\epsilon} + \mathcal{O}(\|\boldsymbol{\epsilon}\|^3)\]</span> 式中的<span class="math inline">\(\nabla^2 f(\mathbf{x})\)</span>即<span class="math inline">\(d*d\)</span>海森矩阵，存储了函数的二阶偏导数。为了求得<span class="math inline">\(f\)</span>的最小值，令上式对<span class="math inline">\(\epsilon\)</span>求导得0，有：<span class="math inline">\(\boldsymbol{\epsilon}=-\nabla f(\mathbf{x})H^{-1}\)</span>，即每次的参数更新为<span class="math inline">\(\mathbf{x} \leftarrow \mathbf{x} - \nabla f(\mathbf{x})H^{-1}\)</span>。二阶近似利用了损失函数的曲率信息，即如果曲率比较小，那么这步更新就会比较大，反之则更新较小。这里没有了学习率，而是通过“梯度的梯度”自动调整步幅，看起来比一阶的梯度下降要好一些。</p><p>然而深度学习的参数空间往往十分巨大，因此存储和计算海森矩阵的逆是不现实的，这也是牛顿法无法在DNN中使用的重要原因。为了缓解这个问题，学术界提出了一些拟牛顿法如L-BFGS等试图去降低存储消耗，但是计算代价仍然很高。</p><p>从以上的分析可以看到：无论是Full-batch GD还是牛顿法，都存在计算消耗大等问题，不适用于深度学习任务的大规模数据集训练，因此已经很少被直接用在深度学习模型中。为了处理这些问题，学术界提出了很多替代的优化算法，因此接下来我将调研分析当前常用的深度学习优化算法 (SGD/Adam...)的优缺点，并结合实例及前沿研究进行相关讨论。 ## Popular Algorithms 优化算法在神经网络的训练中有着举足轻重的作用，选择合适的优化算法可以使得损失函数收敛地更快，同时收敛到更好的区域。目前比较流行的算法有下面几种： ### 1 SGD 尝试用mini-batch的梯度平均值作为整体梯度的无偏估计，参数的更新非常简单，沿着梯度的反方向即是loss下降最快的方向： <span class="math display">\[x_{t+1}=x_t-\alpha\nabla f(x_t)\]</span> 如果是Batch GD并且学习率足够小时可以保证损失函数单调不增。实际使用时一般会采用学习率递减策略保证模型收敛。</p><p>实现也非常简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x -= lr * grads</span><br></pre></td></tr></table></figure><p>SGD存在几个问题：</p><p>首先，如果loss对于不同参数的敏感程度不同，那么收敛过程会在敏感参数方向上抖动： <img src="https://img-blog.csdnimg.cn/20210710192205509.png" /> 对于非常大的参数空间，可能会收敛到不同的区域。 其次，如果loss函数有局部最优或者鞍点，这些点上梯度为0，无法收敛到全局最优； 最后，如果采用mini-batch，那么计算出的梯度值是有噪声的，意味着收敛过程可能会是非常曲折的，也即需要更多时间。 ### 2 SGD+Momentum 为了解决SGD的问题，有学者提出了带有动量的SGD，其思想也很简单：更新参数时不仅考虑当前的梯度方向，还要考虑历史累积梯度方向，如果两者方向一致，那么这一步更新幅度就会增大；如果不一致，就会减弱沿当前梯度的下降幅度。 <span class="math display">\[v_{t+1}=\rho v_t+\nabla f(x_t) \\x_{t+1}=x_t-\alpha v_{t+1}\]</span> <span class="math inline">\(\rho\)</span>可以看作是对历史梯度的衰减，一般取0.9。</p><p>带有动量的SGD实现： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = rho * v + grads</span><br><span class="line">x -= lr * v</span><br></pre></td></tr></table></figure> 这样就解决了SGD的三个问题： 首先，由于历史梯度的存在，朝敏感方向步进的数量就会减少，会更加平滑的向最优点前进，减小了震荡，加速收敛； 其次，对于局部最优点，虽然当前梯度为0，但是依靠历史梯度可以越过该点继续下降； 最后，梯度噪声引起的震荡可以通过历史梯度互相抵消。 ### 3 Nesterov Momentum Nesterov Momentum由SGD+Momentum衍生而来，SGD+Momentum是将当前点的梯度和速度结合起来，而Nesterov Momentum则是将当前点的速度和下一个近似点的梯度结合起来，意味着我们不是在当前位置去看未来，而是多看了一步，在稍远一些的下一步看未来，可以提前调整步进大小： <img src="https://img-blog.csdnimg.cn/20210710192712932.png" alt="在这里插入图片描述" /> 所以Nesterov Momentum的更新规则为： <span class="math display">\[v_{t+1}=\rho v_t-\alpha\nabla f(x_t+\rho v_t) \\x_{t+1}=x_t+v_{t+1}\]</span> 通常我们希望针对<span class="math inline">\(x_t\)</span>计算梯度，通过简单的变量替换，得到新的更新规则： <span class="math display">\[v_{t+1}=\rho v_t-\alpha\nabla f(x_t) \\x_{t+1}=x_t+v_{t+1}+\rho(v_{t+1}-v_t)\]</span> Nesterov的实现： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v_prev = v</span><br><span class="line">v = rho * v - lr * grads</span><br><span class="line">x += (1 + rho) * v - rho * v_prev</span><br></pre></td></tr></table></figure> ### 4 AdaGrad 前面的几种方法都是设置了一个全局的学习率，AdaGrad则通过引入二阶动量使得学习率可以针对<strong>每个参数</strong>自适应地取值：对于更新频繁的参数，已经有了很多认知，不希望因为单个样本影响太大，所以学习率可以小一些；对于更新稀疏的参数，希望从偶尔出现的能更新该参数的样本中多获得一些信息，所以学习率可以设置地大一些。为了了解参数更新的频繁程度，引入二阶动量——每个维度上历史梯度值的平方和： <span class="math display">\[grad\_squared +=\nabla^2 f(x_t) \\x_{t+1}=x_t-\cfrac{\alpha\nabla f(x_t)}{\sqrt{grad\_squared+10^{-7}}}\]</span> 此时的学习率实质上是<span class="math inline">\(\cfrac{\alpha}{\sqrt{grad\_squared}}\)</span>，为了避免除0，一般分母加上一个很小的平滑项。如果某个参数更新频繁，那么grad_squared就会增大，学习率也就越小。</p><p>AdaGrad的实现： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grad_sq += grads**2</span><br><span class="line">x -= lr * grads / (numpy.sqrt(grad_sq) + eps)</span><br></pre></td></tr></table></figure> AdaGrad的问题在于随着grad_squared单调递增，学习率最终会单调衰减到0，意味着很可能会提早终止训练过程。 ### 5 RMSProp/AdaDelta 为了缓解AdaGrad的学习率变化过于激进的问题，二阶动量的计算不累积全部的历史梯度，只关注过去某段时间内的梯度变化，用指数移动平均值来表示过去某时间段的二阶动量的均值： <span class="math display">\[grad\_squared=decay\_rate*grad\_squared+(1-decay\_rate)\nabla^2 f(x_t) \\x_{t+1}=x_t-\cfrac{\alpha\nabla f(x_t)}{\sqrt{grad\_squared+10^{-7}}}\]</span> decay_rate是一个超参数，一般取值0.9。</p><p>RMSProp的实现： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grad_sq = decay * grad_sq + (1 - decay) * grads**2</span><br><span class="line">x -= lr * grads / (numpy.sqrt(grad_sq) + eps)</span><br></pre></td></tr></table></figure> 因此，RMSProp仍然是通过梯度的大小来调整每个参数的学习率，不过现在学习率不会单调递减。</p><h3 id="adam">6 Adam</h3><p>Adam的出现是集成了一阶动量思想和AdaGrad等的二阶动量思想，即Adaptive Momentum： <span class="math display">\[m_{t+1}=\beta_1m_t+(1-\beta_1)\nabla f(x_t)\\V_{t+1}=\beta_2V_t+(1-\beta_2)\nabla^2 f(x_t)\\x_{t+1}=x_t-\cfrac{\alpha m_{t+1}}{\sqrt{V_{t+1}+10^{-7}}}\]</span> 由于m和V初始化为0，所以开始的几次迭代会偏向取值0，为了弥补这一缺点，又引入了偏差纠正项，完整的Adam算法如下： <span class="math display">\[m=\beta_1m+(1-\beta_1)\nabla f(x_t)\\m_t=\cfrac{m}{1-\beta_1^t}\\V=\beta_2V+(1-\beta_2)\nabla^2 f(x_t)\\V_t=\cfrac{V}{1-\beta_2^t}\\x_{t}=x_{t-1}-\cfrac{\alpha m_{t}}{\sqrt{V_{t}+10^{-7}}}\]</span> Adam的实现： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">m = beta_1 * m + (1 - beta_1) * grads</span><br><span class="line">m_t = m / (1 - beta_1**t)</span><br><span class="line">v = beta_2 * v + (1 - beta_2) * grads**2</span><br><span class="line">v_t = v / (1 - beta_2**t)</span><br><span class="line">x -= lr * m_t / (numpy.sqrt(v_t) + eps)</span><br></pre></td></tr></table></figure> 如果Adam再加上Nesterov的向后看一步的思想，就是Nadam算法。 ## Experiment 为了对上述算法有更加直观的认识，同时在部分程度上比较不同算法的性能，构造一维函数<span class="math inline">\(f(x)\)</span>作为损失函数，其表达式如下： <span class="math display">\[f(x)=0.01x^2+sin(x)+\frac{1}{3}cos(3x)+\frac{1}{5}sin(5x)+\frac{1}{7}cos(7x)\]</span> 这个损失函数含有大量的局部最小点以及悬崖，如图所示： <img src="https://img-blog.csdnimg.cn/2021071019313296.png" alt="在这里插入图片描述" /> 为了公平起见，比较时将x的初始值设为-29，每种算法的迭代次数均设置为300次，学习率均设置为0.1，迭代过程如下图所示： <img src="https://img-blog.csdnimg.cn/20210710193206336.png" alt="在这里插入图片描述" /> 最终的收敛结果如下表所示： | 算法 | 最终x | 最终损失 | | -------- | ------ | -------- | | SGD | -27.98 | 7.19 | | Momentum | -24.00 | 6.21 | | Nesterov | -24.00 | 6.21 | | AdaGrad | -27.98 | 7.19 | | RMSProp | -28.95 | 9.10 | | Adam | -26.46 | 5.59 |</p><p>从上图和上表可以看到：Adam算法在前期收敛很快，并且最终效果最好，是综合性能最佳的算法；带动量的SGD能够越过一些局部极小值，在没有精细调参的情况下一度达到了和Adam类似的效果；AdaGrad开始时的梯度很大，但是由于学习率过早地减小，最终效果并不出众；这些结果进一步佐证了之前对各种算法的分析。</p><p>如果将学习率设置为0.01，对比如下： <img src="https://img-blog.csdnimg.cn/20210710193256448.png" alt="在这里插入图片描述" /> 可以看到：精调后的Momentum、Nesterov和Adam的效果几乎不相上下，这只是初步调整了学习率参数，如果通过验证集更加精细地调整超参数的值，那么SGD+Momentum完全可以达到甚至超越Adam的表现，当然这也需要人为付出更多的努力，Adam这个烦恼则小得多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Created on Sun Apr 11 18:31:58 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Jingtao Ren</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">b = tf.constant(<span class="number">5.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">7.0</span>)</span><br><span class="line">d = tf.constant(<span class="number">0.1</span>)</span><br><span class="line">x = tf.Variable(initial_value=-<span class="number">29.0</span>, name=<span class="string">&quot;x&quot;</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_f</span>():</span></span><br><span class="line">    x = np.linspace(-<span class="number">30</span>, <span class="number">30</span>, <span class="number">1000</span>)</span><br><span class="line">    <span class="comment"># y = -20.0 * np.exp(b * np.abs(x)) - np.exp(np.cos(c * x)) + 20.0 + np.exp(1)</span></span><br><span class="line">    y = (<span class="number">0.1</span> * x) ** <span class="number">2</span> + np.sin(x) + np.cos(a * x) / a + np.sin(b * x) / b + np.cos(c * x) / c</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Loss Function&#x27;</span>)</span><br><span class="line">    plt.plot(x, y)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_train</span>(<span class="params">y</span>):</span></span><br><span class="line">    x = np.arange(<span class="number">300</span>)</span><br><span class="line">    labels = [<span class="string">&#x27;SGD&#x27;</span>, <span class="string">&#x27;Momentum&#x27;</span>, <span class="string">&#x27;Nesterov&#x27;</span>, <span class="string">&#x27;AdaGrad&#x27;</span>, <span class="string">&#x27;RMSProp&#x27;</span>, <span class="string">&#x27;Adam&#x27;</span>]</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;Iteration&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&#x27;Loss&#x27;</span>)</span><br><span class="line">    plt.title(<span class="string">&#x27;Algorithm Comparison&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):    </span><br><span class="line">        plt.plot(x, y[i], label=labels[i])</span><br><span class="line">        plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>():</span></span><br><span class="line">    <span class="comment"># y = a * tf.exp(b * tf.abs(x)) - tf.exp(tf.cos(c * x)) - a + tf.exp(tf.constant(1.0))</span></span><br><span class="line">    y = tf.<span class="built_in">pow</span>(d * x, <span class="number">2</span>) + tf.sin(x) + tf.cos(a * x) / a + tf.sin(b * x) / b + tf.cos(c * x) / c</span><br><span class="line">    <span class="keyword">return</span> (y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimize</span>(<span class="params">optimizer, iters = <span class="number">300</span></span>):</span></span><br><span class="line">    y = []</span><br><span class="line">    <span class="comment"># optimizer = tf.keras.optimizers.SGD(learning_rate=0.1)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tf.<span class="built_in">range</span>(iters):</span><br><span class="line">        optimizer.minimize(loss, [x])</span><br><span class="line">        y.append(loss())</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;Final x = &quot;</span>, x)</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;Final Loss = &quot;</span>, loss())</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># plot_f()</span></span><br><span class="line">    ops = [tf.keras.optimizers.SGD(learning_rate=<span class="number">0.1</span>), tf.keras.optimizers.SGD(learning_rate=<span class="number">0.1</span>, momentum=<span class="number">0.9</span>),</span><br><span class="line">           tf.keras.optimizers.SGD(learning_rate=<span class="number">0.1</span>, momentum=<span class="number">0.9</span>, nesterov=<span class="literal">True</span>), tf.keras.optimizers.Adagrad(learning_rate=<span class="number">0.1</span>),</span><br><span class="line">           tf.keras.optimizers.Adadelta(learning_rate=<span class="number">0.1</span>, rho=<span class="number">0.9</span>), tf.keras.optimizers.Adam(learning_rate=<span class="number">0.1</span>)]</span><br><span class="line">    y = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        x.assign(-<span class="number">29.0</span>)</span><br><span class="line">        y.append(minimize(ops[i]))</span><br><span class="line">    plot_train(y)</span><br></pre></td></tr></table></figure><p>当然，这个实验非常简单，损失函数形式是一维的，实际中的网络模型参数的数量可能达到百万级别，超高维情况下算法的效率、鲁棒性以及模型最终的泛化能力才是我们真正关心的。</p><p>最后贴2张神图总结下： <img src="https://img-blog.csdnimg.cn/20210306203509952.gif#pic_center" alt="在这里插入图片描述" /><img src="https://img-blog.csdnimg.cn/2021030620351970.gif#pic_center" alt="在这里插入图片描述" /> ## Research Adam虽然是集大成者，而且也被推荐为起始的默认优化算法，但是一些Paper揭示了Adam的一些问题。 ### 1 过拟合 Berkeley在NIPS 2017的一篇文章指出：如果一个问题有多个全局极优，即使从相同的初始值出发，不同的优化算法也会得到完全不同的结果。文章构造了一个简单的线性可分的二分类问题，证明了SGD在这种情况下测试误差为0，而AdaGrad等自适应方法会把所有的测试样例分为正类，泛化能力极差，也就是根本不能工作。</p><p>随后作者又用VGG+BN+Dropout的网络结构在CIFAR-10数据集上进行了实验： <img src="https://img-blog.csdnimg.cn/20210710193712619.png" alt="在这里插入图片描述" /> 可以看到：前期训练中Adam有优势，但SGD的泛化能力确实比Adam要好。</p><p>最后，为了彻底黑化Adam，文章又用了文本数据集和一些NLP模型做了实验： <img src="https://img-blog.csdnimg.cn/20210710193823396.png" alt="在这里插入图片描述" /> 即便有时候自适应方法的训练loss会更低，但SGD的泛化能力都无一例外地胜过了自适应的方法。自适应方法在训练初期速度很快，但是后期表现平平。</p><p>泛化能力差的原因在于：自适应方法倾向于关注稀疏的特征，因为这些特征对于训练样例的鉴别是很有效的，尤其在训练样例数少而特征较多的数据集中，但是这些特征其实并非关键特征，这样自适应学习率算法出现过拟合的风险就会增大，导致泛化能力不佳，最终的收敛效果不如传统的SGD。 ### 2 二阶动量波动 Google的一篇文章从数学上证明了在某些特定情况下Adam可能不收敛，因为二阶动量取的是某个时间窗口的变化，所以<span class="math inline">\(V_t\)</span>的变化可能会剧烈震荡，尤其在高维情况下，梯度的方差可能随时间波动很大，导致学习率震荡，模型无法收敛。这也是为什么一般<span class="math inline">\(\beta_2\)</span>要取0.999这么大的值，避免二阶动量有太大波动。</p><p>一般认为Adam默认的<span class="math inline">\(\beta_1\)</span>和<span class="math inline">\(\beta_2\)</span>不需要调整，采用默认的0.9和0.999即可。但是这两个超参如果不按这样设置，Adam可能永远不会收敛到最优值。文章从数学上证明了对任意的<span class="math inline">\(\beta_1,\beta_2\in[0,1),\beta_1&lt;\sqrt{\beta_2}\)</span>，都存在一个随机的凸优化问题使得Adam不能收敛到最优解。</p><p>为了避免二阶动量的剧烈震荡，文章对其进行了控制，提出了一个新算法AMSGrad确保模型收敛，<span class="math inline">\(V_t=max(V_{t-1},\beta_2V_{t-1}+(1-\beta_2)\nabla^2 f(x_t))\)</span>。</p><p>作者随后通过人造数据和真实数据进行了实验：</p><p>人造数据上的结果： <img src="https://img-blog.csdnimg.cn/20210710193934596.png" alt="在这里插入图片描述" /> 很显然在Adam没有找到最优解的这些数据上，改进后的算法都表现良好。</p><p>在MNIST上的效果： <img src="https://img-blog.csdnimg.cn/20210710193956571.png" alt="在这里插入图片描述" /> 这篇文章最终获得了2018年ICLR最佳论文，但是引起了很大争议。主要原因在于其构造的令Adam失效的数据在实际情况中出现的概率极低，即使出现也会在数据预处理时被筛掉，因此并没有特别广泛的实际用处。另外，文章过于强调训练集上的损失函数值，甚至有人通过复现表明文章提出的AMSGrad算法在测试数据上表现很差，与原文中的某些结论相互矛盾。 ### 3 学习率下降 arXiv上的一篇文章通过在CIFAR-10上的实验证明Adam在一些情况下虽然速度快，但收敛效果没有SGD好： <img src="https://img-blog.csdnimg.cn/20210710194231292.png" alt="在这里插入图片描述" /> 文章通过实验发现主要原因在于后期Adam的学习率过低，影响了最终效果。文章尝试通过控制学习率下界，提高了最终收敛效果。</p><p>既然Adam后期有问题，那么一个自然的改进就是前期训练使用Adam，用来快速减小loss；后期训练转换为SGD，用稍慢的速度寻找更佳的解甚至是最优解。但是这样也会引入新的问题：在什么时刻切换？切换为SGD后的学习率又该如何设置？</p><p>文章提出了SWATS(Switches from Adam to SGD)策略来解决上面2个问题，在CIFAR-10和CIFAR-100数据集上实验效果看着还不错： <img src="https://img-blog.csdnimg.cn/20210710194309531.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20210710194329636.png" alt="在这里插入图片描述" />这些文章都采用了一些比较极端的数据去探索Adam的不适情况，然而实际中遇到这些极端情况的概率并不大，因此Adam并不失为首选尝试。通过上面的讨论可以看到：SGD和Adam各有优劣，精调后的SGD一般最终会收敛到更好的效果；Adam在训练前期收敛速度快，在稀疏数据上表现更好，对超参不敏感，不需要十分精细的调参。</p><p>如果对优化算法不熟悉，可以先尝试SGD+Nesterov Momentum或者Adam；如果对某个优化算法很精通，那么调参就会相对容易些。如果资源足够，也可以尝试L-BFGS等二阶优化方法。另外，选择之前要充分了解数据的性质，对于比较稀疏的数据可以优先尝试学习率自适应调整的算法。</p><h2 id="reference">Reference</h2><p>[1] CS231n: Convolutional Neural Networks for Visual Recognition. lecture 8, Stanford University.<br />[2] The Marginal Value of Adaptive Gradient Methods in Machine Learning. NIPS'17<br />[3] On the Convergence of Adam and Beyond. ICLR'18<br />[4] Improving Generalization Performance by Switching from Adam to SGD. arXiv<br />[5] Optimization methods for large-scale machine learning. SIAM Review, 2018.<br />[6] Optimization for deep learning: theory and algorithms. arXiv, 2019.<br />[7] Understanding Black-box Predictions via Influence Functions. ICML'17.<br />[8] Understanding Deep Learning Requires Rethinking Generalization. ICLR'17.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradient Boosting</title>
      <link href="/2021/06/17/Gradient%20Boosting/"/>
      <url>/2021/06/17/Gradient%20Boosting/</url>
      
        <content type="html"><![CDATA[<h2 id="gradient-boosting-regression">Gradient Boosting Regression</h2><h2 id="gradient-boosting-classification">Gradient Boosting Classification</h2><h2 id="xgboost">XGBoost</h2><h2 id="决策树集成">决策树集成</h2><p>集成学习可以组合多个基学习器，产生更加优异的性能。将决策树（如CART）作为基学习器，结合每个基学习器的预测结果作为最终输出，就像<a href="https://xgboost.readthedocs.io/en/latest/tutorials/model.html">下图</a>这样： <img src="https://img-blog.csdnimg.cn/2021061621501811.png" alt="在这里插入图片描述" /> 正式一些的表示： <span class="math display">\[\hat{y}_i = \sum_{k=1}^K f_k(x_i), f_k \in \mathcal{F}\]</span> 其中，<span class="math inline">\(K\)</span>是决策树个数，<span class="math inline">\(f_k(x_i)\)</span>表示第<span class="math inline">\(k\)</span>个决策树的预测值。</p><p>为了定量描述模型参数与训练数据的匹配程度，我们还要定义待优化的目标函数： <span class="math display">\[\text{obj}(\theta) = \sum_i^n l(y_i, \hat{y}_i) + \sum_{k=1}^K \Omega(f_k)\]</span> ## Boosting Decision Tree 集成多棵树的方式可以是Bagging，也可以是Boosting。Boosting的motivation是用一棵新树不断拟合当前的集成模型与真实值的残差，拟合后将该树也加入模型中，即所谓的Additive Training： <span class="math display">\[\hat{y}_i^{(0)} = 0\\\hat{y}_i^{(1)} = f_1(x_i) = \hat{y}_i^{(0)} + f_1(x_i)\\\hat{y}_i^{(2)} = f_1(x_i) + f_2(x_i)= \hat{y}_i^{(1)} + f_2(x_i)\\\dots\\\hat{y}_i^{(t)} = \sum_{k=1}^t f_k(x_i)= \hat{y}_i^{(t-1)} + f_t(x_i)\]</span> 好了，接下来的问题就是每次迭代时的那棵新树<span class="math inline">\(f_t\)</span>要怎么训练呢？一个直观的想法就是选择那棵令目标函数最小的树： <span class="math display">\[\text{obj}^{(t)} = \sum_{i=1}^n l(y_i, \hat{y}_i^{(t)}) + \sum_{i=1}^t\Omega(f_i) \\          = \sum_{i=1}^n l(y_i, \hat{y}_i^{(t-1)} + f_t(x_i)) + \Omega(f_t) + \mathrm{constant}\]</span> 我们先选择MSE作为损失函数，看看会发生什么： <span class="math display">\[{obj}^{(t)} = \sum_{i=1}^n (y_i - (\hat{y}_i^{(t-1)} + f_t(x_i)))^2 + \sum_{i=1}^t\Omega(f_i) \\          = \sum_{i=1}^n [2(\hat{y}_i^{(t-1)} - y_i)f_t(x_i) + f_t(x_i)^2] + \Omega(f_t) + \mathrm{constant}\]</span> 虽然MSE的形式比较友好，但是如果选择其它损失函数就很难有上式那般人性了，吃得太饱的同学可以试试logistic loss： <span class="math display">\[L(\theta) = \sum_i[ y_i\ln (1+e^{-\hat{y}_i}) + (1-y_i)\ln (1+e^{\hat{y}_i})]\]</span> 为了增强可扩展性、便于计算，一般采用损失函数的二阶泰勒展开去做一个近似： <span class="math display">\[\text{obj}^{(t)} = \sum_{i=1}^n [l(y_i, \hat{y}_i^{(t-1)}) + g_i f_t(x_i) + \frac{1}{2} h_i f_t^2(x_i)] + \Omega(f_t) + \mathrm{constant}\]</span> 其中，<span class="math inline">\(g_i = \partial_{\hat{y}_i^{(t-1)}} l(y_i, \hat{y}_i^{(t-1)}),h_i = \partial_{\hat{y}_i^{(t-1)}}^2 l(y_i, \hat{y}_i^{(t-1)})\)</span>。 扔掉所有常数项，就得到了第<span class="math inline">\(t\)</span>步的目标函数： <span class="math display">\[\sum_{i=1}^n [g_i f_t(x_i) + \frac{1}{2} h_i f_t^2(x_i)] + \Omega(f_t)\]</span></p><p>弄完了training loss，接着还得研究下正则项<span class="math inline">\(\Omega(f_t)\)</span>，首先得给<span class="math inline">\(f(x)\)</span>来一个正式点的定义： <span class="math display">\[f_t(x) = w_{q(x)}, w \in R^T, q:R^d\rightarrow \{1,2,\cdots,T\} .\]</span> 其中，<span class="math inline">\(w\)</span>是叶子结点的得分向量，<span class="math inline">\(q\)</span>是将样本点映射到对应叶子的函数，<span class="math inline">\(T\)</span>是叶子数目。 如果有点抽象，就看看上图中的左子图吧：<span class="math inline">\(w=[2,-1],f(男孩)=w_{q(男孩)}=w_0=2\)</span>。</p><p>模型复杂度的具体定义随你了，XGBoost是这么定义的： <span class="math display">\[\Omega(f) = \gamma T + \frac{1}{2}\lambda \sum_{j=1}^T w_j^2\]</span> 就用上式重新写出我们第<span class="math inline">\(t\)</span>步的目标函数： <span class="math display">\[\text{obj}^{(t)} \approx \sum_{i=1}^n [g_i w_{q(x_i)} + \frac{1}{2} h_i w_{q(x_i)}^2] + \gamma T + \frac{1}{2}\lambda \sum_{j=1}^T w_j^2\\= \sum^T_{j=1} [(\sum_{i\in I_j} g_i) w_j + \frac{1}{2} (\sum_{i\in I_j} h_i + \lambda) w_j^2 ] + \gamma T\]</span> 其中，<span class="math inline">\(I_j = \{i|q(x_i)=j\}\)</span>表示第<span class="math inline">\(j\)</span>个叶子中样本点的索引集合，由于任意一个叶子中样本点得分相同，因此上式写成了对<span class="math inline">\(T\)</span>个叶子的求和。</p><p>令<span class="math inline">\(G_j = \sum_{i\in I_j} g_i\)</span>及<span class="math inline">\(H_j = \sum_{i\in I_j} h_i\)</span>，就有了一个相对简洁的表示： <span class="math display">\[\text{obj}^{(t)} = \sum^T_{j=1} [G_jw_j + \frac{1}{2} (H_j+\lambda) w_j^2] +\gamma T\]</span> 因为叶子之间相互独立，所以令目标函数最优的得分向量<span class="math inline">\(w\)</span>为： <span class="math display">\[w_j^\ast = -\frac{G_j}{H_j+\lambda}\\\text{obj}^\ast = -\frac{1}{2} \sum_{j=1}^T \frac{G_j^2}{H_j+\lambda} + \gamma T\]</span> 目标函数<span class="math inline">\(obj^*\)</span>的值衡量着本次迭代树结构<span class="math inline">\(q(x)\)</span>对训练数据的拟合程度。</p><p>云里雾里一大堆，我都烦了，来看个例子： <img src="https://img-blog.csdnimg.cn/2021061716123725.png" alt="在这里插入图片描述" /> 假设在第<span class="math inline">\(t\)</span>次迭代选了这么一棵树，按照if-then规则将训练样本分到相应的叶子，将梯度信息相加得到每个叶子对应的<span class="math inline">\(G,H\)</span>，接着用<span class="math inline">\(obj^*\)</span>计算这棵树最小的损失，不行就换一种树结构，以求减小<span class="math inline">\(obj^*\)</span>。</p><p>忙活了大半天，终于知道了怎么度量一棵树的好坏。那么只要枚举所有可能的树结构，选那个令<span class="math inline">\(obj^*\)</span>最小的就好了。傻子都知道这是不行滴，所以只能贪心地一层一层地剥开你的心...哦不对，一层一层地优化：将结点分类为左孩子和右孩子的得分增益为： <span class="math display">\[Gain = \frac{1}{2} \left[\frac{G_L^2}{H_L+\lambda}+\frac{G_R^2}{H_R+\lambda}-\frac{(G_L+G_R)^2}{H_L+H_R+\lambda}\right] - \gamma\]</span> 其中，第一/二项分别表示左/右孩子的分数，第三项表示原始节点的分数，最后一项表示增加叶子的惩罚。可以看到：如果分裂后的得分增益小于<span class="math inline">\(\gamma\)</span>，就不要继续分了，凑合过吧...</p><p>为了在每层获取到最佳的分裂点，通常先将训练数据排个序： <img src="https://img-blog.csdnimg.cn/20210617164041605.png" alt="在这里插入图片描述" /> 暴力枚举一遍分裂点找最优就可以啦！</p><ul><li><span class="math inline">\(f_0(x)=0\)</span></li><li>对于第m棵树的训练：<ul><li>首先计算每条训练数据的残差：<span class="math inline">\(r_{mi}=y_i-f_{m-1}(x_i),i=1,2...,N\)</span></li><li>接着通过拟合上面得到的残差数据，训练出回归树<span class="math inline">\(T_m(x)\)</span></li><li>此时第m棵树的输出即为<span class="math inline">\(f_m(x)=f_{m-1}(x)+T_m(x)\)</span></li></ul></li><li>进行M次训练后得到最终的模型</li></ul><p>可以看到：Boosting Decision Tree每次迭代都将上一轮预测结果的残差作为当前的训练集，对于平方损失容易求得损失函数最小值的点，但是对于稍复杂的损失函数，残差的获得就只能通过负梯度<span class="math inline">\(\frac{\partial L(y_i,f(x_i))}{f(x_i)}\)</span>去逼近，这就是GBDT的核心思想。 GBDT的训练与Boosting Decision Tree很相似：</p><ul><li>初始化弱学习器<span class="math inline">\(f_0(x)=\underset{c}{arg\ min}\sum_{i=1}^{N}L(y_i,c)\)</span>，如果损失函数是MSE，那么<span class="math inline">\(f_0(x)=\frac{1}{N}\sum_{i=1}^{N}y_i\)</span></li><li>对于第m棵树的训练：<ul><li>计算负梯度：<span class="math inline">\(r_{mi}=-\frac{\partial L(y_i,f(x_i))}{\partial f(x_i)},f(x)=f_{m-1}(x)\)</span></li><li>得到新的训练集<span class="math inline">\((x_i,r_{mi})\)</span>，训练产生一棵新的回归树，对应的叶子结点域为<span class="math inline">\(R_{mj},j=1,...,J\)</span>，<span class="math inline">\(J\)</span>为叶子结点个数</li><li>对第j个叶子结点，计算最佳拟合值：<span class="math inline">\(c_{mj}=\underset{c}{arg\ min}\sum_{x_i\in R_{mj}}L(y_i,f_{m-1}(x_i)+c)\)</span></li><li>更新强学习器：<span class="math inline">\(f_m(x)=f_{m-1}(x)+\sum_{i=1}^{J}c_{mj}I(x\in R_{mj})\)</span></li></ul></li><li>最终的学习器为：<span class="math inline">\(\hat f(x)=f_M(x)=f_0(x)+\sum_{m=1}^{M}\sum_{j=1}^{J}c_{mj}I(x\in R_{mj})\)</span></li></ul><h2 id="implementation">Implementation</h2><h2 id="properties">Properties</h2><ol type="1"><li>extrapolate问题 众所周知随机森林回归是不具备推理能力的，那么XGBoost可以吗？ 答案是可以，因为梯度提升模型并不直接根据训练集的结果做预测，而是通过一系列树的加和得到，加和结果取决于每棵树的权重，权重则是由损失函数的一二阶梯度优化得来，并不依赖于训练集的上下限。</li><li>缺失值问题 GBDT/GBRT自身不支持缺失值的自动填充，例如使用sklearn中的GradientBoostingRegressor在训练数据包含缺失值时将无法训练，人工填充可能会引入偏差，但是XGBoost却可以自动地处理缺失值（但并不是填充）。 根据陈天奇大佬的说法： &gt; Internally, XGBoost will automatically learn what is the best direction to go when a value is missing. Equivalently, this can be viewed as automatically &quot;learn&quot; what is the best imputation value for missing values based on reduction on training loss.</li></ol><p>那么究竟是如何自动学习最佳的分裂方向呢？ 假设在结点A有50条训练样本，并且该结点只有一个可能的分割点：比如只有一个二元特征x，那么分割点就只有该特征取值为0或1，这样训练数据可以被分为3组： 1. x取值为B的20条样例 2. x取值为C的20条样例 3. x缺失的10条样例，叫做M组</p><p>那么M组的样例会被分别赋到B和C，接着计算<span class="math inline">\(\{(B,M),C\}\)</span>和<span class="math inline">\(\{B,(C,M)\}\)</span>的得分及损失函数衰减，两者中选择损失函数衰减大的。 如果使用MSE作为损失函数，并且B的标签均值为5，C的标签均值为10，M的标签均值为0。 如果使用<span class="math inline">\(\{(B,M),C\}\)</span>：<span class="math inline">\(\frac{|M|}{|B| + |M|}\text{mean}(M) + \frac{|B|}{|M|+|B|}\text{mean}(B) = \frac{10}{30}0 + \frac{20}{30}5 = 3.\overline{3}\)</span> 如果使用<span class="math inline">\(\{B,(C,M)\}\)</span>：<span class="math inline">\(\frac{|M|}{|C| + |M|}\text{mean}(M) + \frac{|C|}{|M|+|C|}\text{mean}(C) = \frac{10}{30}0 + \frac{20}{30}10 = 6.\overline{3}\)</span> 最后计算两者的MSE与划分前MSE的差，选择使得MSE下降更快的作为分裂方向（也就是得分gain更大的方向）。</p><p>在寻找最优特征分裂点（如年龄＜20还是年龄＜30）时，只访问该特征不含缺失值的训练样例，即如果年龄缺失，就不参与20和30的决策，这样计算复杂度也就降低了，尤其是对于稀疏数据。</p><p>预测时的缺失值有２种情况： 1.　训练阶段已经见识过该缺失值了：按照训练时选定的方向往下走就行 2.　训练阶段该特征没有缺失：默认走向右子树。</p><p>Ref里还有一个更加全面的例子，训练集有6个小孩，只有一个特征年龄（其中有2个样例年龄缺失），标签是身高，初始预测值为0.5，接下来每棵树都要拟合残差。 | Age | Height | Res | | ------------ | ------------ | ------------ | | 7 | 130 | －129.5 | | 9 | 148 | －147.5 | | 6 | 115 | －114.5 | | 15 | 164 | －163.5 | | ？ | 125 | －124.5 | | ？ | 140 | －139.5 |</p><p>接着要根据年龄特征寻找最优的分裂点，将年龄排序并选择中点（<strong>注意：这里就不考虑缺失值样例了</strong>），因此候选分裂点有6.5，8，12，对于每个候选点，分别计算将缺失样例划到左子树和右子树的Quality/Similarity Score：</p><p><span class="math display">\[Quality\ Score=\frac{(\sum residuals)^2}{\#residuals + \lambda}\]</span></p><p>比如，对于分裂点6.5： 如果划到左子树：<span class="math inline">\(Gain＝划分后的Quality\ Score－划分前的Quality\ Score＝\frac{(-114.5-124.5-139.5)^2}{3} + \frac{(-129.5-147.5-163.5)^2}{3} - \frac{(-129.5-147.5-114.5-163.5-124.5-139.5)^2}{6}=640.7\)</span> 如果划到右子树：<span class="math inline">\(Gain＝划分后的Quality\ Score－划分前的Quality\ Score＝580.8\)</span></p><p>接着对于8：1083；630.8 对于12：874.8；216 从中选择gain最大的（也就是使得损失函数最小的），分裂点选8，缺失值划到左子树。</p><h2 id="bug">Bug</h2><p><a href="https://www.lycecho.com/archives/2364">PYTHON XGBOOST 报错 KEYERROR: ‘BASE_SCORE’</a></p><h2 id="references">References</h2><p><a href="https://www.youtube.com/watch?v=3CC4N4z3GJc"><strong>Gradient Boost</strong></a><br /><a href="https://xgboost.readthedocs.io/en/latest/tutorials/model.html">Introduction to Boosted Trees</a><br /><a href="https://datascience.stackexchange.com/questions/15305/how-does-xgboost-learn-what-are-the-inputs-for-missing-values">Missing values in XGBoost</a><br /><a href="https://stats.stackexchange.com/questions/304962/is-is-possible-for-a-gradient-boosting-regression-to-predict-values-outside-of-t">Is is possible for a gradient boosting regression to predict values outside of the range seen in its training data?</a><br /><a href="https://datascience.stackexchange.com/questions/77234/can-boosted-trees-predict-below-the-minimum-value-of-the-training-label">Can Boosted Trees predict below the minimum value of the training label?</a><br /><a href="https://github.com/dmlc/xgboost/issues/1581#issuecomment-249853718">Why does XGBoost regression predict completely unseen values?</a><br /><a href="https://medium.com/hypatai/how-xgboost-handles-sparsities-arising-from-of-missing-data-with-an-example-90ce8e4ba9ca">How XGBoost Handles Sparsities Arising From of Missing Data? (With an Example)</a><br /><a href="https://www.youtube.com/watch?v=OtD8wVaFm6E"><strong>XGBoost Regression</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn to Learn</title>
      <link href="/2021/06/03/Learn%20to%20Learn/"/>
      <url>/2021/06/03/Learn%20to%20Learn/</url>
      
        <content type="html"><![CDATA[<p>上了十几年学，依然不会学习。不知是因为中学一些糟糕习惯的延续，还是当代知识难度的加深，我总是感受到日常学习的辛苦：身体累、脑子累、心也累。</p><p>刻苦的确是一种很好的品质，但这种品质有些时候未免有些夸大其词了。傻傻地机械地重复在中学时代那种应试环境或许可以带来一些成绩的提升，但是显然已经不适应现在的我。我尝试将每天安排得满满当当，恨不得每一分每一秒都在学习，然而效果却并不如人意。</p><p>除了智力等一些先天因素外，我个人觉得有以下几点问题：</p><ol type="1"><li>没有找到合适的学习方法，缺乏深度思考和知识体系。我总是试图单点单点地掌握未知的知识点，试图掌握每一处细节，甚至使用死记硬背的方式处理核心问题。笔记和博客也多是摘抄型，独立理解实现太少。</li><li>效率低下。尽管学习时长可能足够，但是且不说大多时间都在摸鱼，即使纯粹学习时间也经常犯困，无法专注完成手头的某项任务，总是过于频繁地切换。效率*时长=最终效果自然不会很好。</li><li>单打独斗。周围少有一起交流进步的伙伴，遇到问题只能单向地从互联网获取信息，没法通过讨论等形式取得快速进步。</li></ol><p>最近看了Marty Lobdell的一个演讲Study Less, Study Smart(<a href="https://www.youtube.com/watch?v=IlU-zDU6aQ0">YouTube</a>/<a href="https://www.bilibili.com/video/BV1Pz4y1f7oi">B站</a>)，有些启发，但是如何学习这种事是绝没有普适准则的，只能结合自身实际摸索总结。Marty还写了一本同名的书，内容比演讲稍微细化一些。</p><p>Marty认为比较重要的有：</p><ol type="1"><li>番茄工作法。每学习25~30min应该休息5min，可以听一首音乐、出去上个厕所、吃点喝点、回消息等等，这样再次回来后注意力和效率又会回升到一个较高的水平，而非效率指数级下降的持续长时间学习。完成一天的工作后，对自己进行更丰厚一些的奖励，比如看个电影、吃顿大餐等等，以形成正反馈。</li><li>寻找一个专门的学习地点，书桌是用来学习的，床是用来睡觉的。Intend to learn rather than incidental learn.</li><li>费曼学习法。看完材料后，深加工以后尝试用自己的话复述给别人听，能准确复述或者能把别人讲懂才行。</li><li>对于学习材料要SQ4R(Survey, Question, Read, Record, Recite, Review)，要主动理解思考自己的笔记，产生更加深刻的认识，而非机械地摘抄背诵。</li><li>高质量睡眠、高质量运动。</li></ol><p>结合自身缺点和学科特点，我认为可以有以下改进措施：</p><ol type="1"><li>每学习一个新东西，理解算法流程、数学推导、实现细节等确实重要，但更重要的是领会方法的思想动机，掌握优缺点和应用场景，将其纳入知识体系中，也就是所谓的“解决现实问题的能力”。</li><li>合理安排学习计划，劳逸结合。不要安排得过于紧密，也不要过于松散。制定的目标不能模棱两可，要有可评估性，即某段时间里要扎扎实实做完TODO LIST上的某件事。</li><li>组队学习，提出自己的问题，解答别人的问题。</li><li>累了就休息，不要在低效率状态下学习工作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人生永远艰难</title>
      <link href="/2021/05/23/%E4%BA%BA%E7%94%9F%E6%B0%B8%E8%BF%9C%E8%89%B0%E9%9A%BE/"/>
      <url>/2021/05/23/%E4%BA%BA%E7%94%9F%E6%B0%B8%E8%BF%9C%E8%89%B0%E9%9A%BE/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="cda79e3805e4221116f21b16070d17fbe4aabec1b9cce770096bfa14e6e2cfc2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dealing with Imbalanced Datasets</title>
      <link href="/2021/05/07/Dealing%20with%20Imbalanced%20Datasets/"/>
      <url>/2021/05/07/Dealing%20with%20Imbalanced%20Datasets/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>The Imbalanced Datasets are very common in our life such as illegal users or illness check. The machine learning model always performs bad on these datasets if there are no specific dealings, especially the prediction accuracy of minority class. For example, if the data is highly imbalanced such as 9995(negative):5(positive), then if your model just let every instance to be negative and you can get an acc of 99.95% but the result is meaningless. Another example is that misclassifying the minority is very severe. Assume that you misclassify the patient as normal. Oh my god!</p><p>So researchers proposed two kinds of methods for this problem:</p><ul><li>Cost Sensitive Learning<br />When <strong>training</strong> your model, it will give different classes different weights in the <strong>loss function</strong> thus let the model focus more on the minority class. In sklearn, there are <code>class_weight</code> and <code>sample_weight</code> for you. For <code>class_weight</code>, you can specify the weights for different classes such as <code>&#123;0:0.1,1:0.9&#125;</code> or you can set it to <code>balanced</code> then weights will be computed by <span class="math inline">\(\frac{\#samples}{\#classes\ *\ np.bincount(y)}\)</span>. For <code>fit(sample_weight=)</code>, you give <strong>every instance</strong> different weights. When computing the loss for the instance, it will be <code>class_weight</code> * <code>sample_weight</code> * <code>loss</code>.</li><li>Sampling<br />Sampling means that we will change the original dataset rather than giving them different weights.</li></ul><h2 id="sampling-methods">Sampling Methods</h2><p>Over-sampling means to increment the minority class.</p><ul><li>Random Over Sampling<br />To sample from minority class with replacement to let the number of each class is 1:1. Overfitting on minority class.</li><li>Synthetic Minority Oversampling Technique (SMOTE)<br /><span class="math display">\[x_{new}=x_i+\lambda(x_{zi}-x_i)\]</span> First you find the <code>k_neighbors</code> of <span class="math inline">\(x_i\)</span> in the minority class, then just select one <span class="math inline">\(x_{zi}\)</span> randomly and produce the new one. There are some variants such as borderline SMOTE, SVM SMOTE and KMeans SMOTE.</li><li>Adaptive Synthetic (ADASYN)<br />The difference between SMOTE and ADASYN is that SMOTE will generate new samples for random minority data until 1:1. But ADASYN will automatically decide the number of new points generated for each <span class="math inline">\(x_i\)</span>. There will be more points generated if there are more majority data around <span class="math inline">\(x_i\)</span>.</li></ul><p>Under-sampling means to decrease the majority class.</p><ul><li>RUS<br />Data waste.</li><li></li></ul><h2 id="example">Example</h2>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>彻底作别</title>
      <link href="/2021/05/02/%E5%BD%BB%E5%BA%95%E4%BD%9C%E5%88%AB/"/>
      <url>/2021/05/02/%E5%BD%BB%E5%BA%95%E4%BD%9C%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d28b5611a64fb60a4ff5194ce4bee203b58140ece51f18ae090d44d16917f4b">418fac4f173397084caccc18ab9f089e36dcfd7e71f1615fbaa638f2770ad6d08d76addb150923c952b907f42c1d2475ced04847945256620d9e37df30e2857f62a8fdb2230177e18d295f4987b5e8e7075f4e1442402564430cbafd642ae2df50fc39d4a5b1c889e09c9399c936b77e1fd3fa9d3ab66098dcddfc49748779c1678cecc4ce1ba8348be16c085d8da72a92cd1da4fbb20b4800ef928633edd11a86bb3e52d1a79b4a012b6ef6e15df781be3ad4a0859d1a88e3b2c71271db1e0f5f880171ecb6b09ada2a2f8a5ddcc4ff9524af18c31d85a4a7a620c5d6f055c4cc9363739d47711adf420253af46f5a733f297d69ae3b135d5ec3637994dd3e3be06af0be3943798fc414933766f5d3868c6ac8635cf7ab6dccdbc4e0d06430a9d482696cb52ac8ed15ecb98e45efa5e4f75522f47bb7d3e54007f2201e9ee15c058a8b51f0dbd015fc5b3542dfb1cd928d6f7d24042fcb23c6188efc7c7cfe0fb61f8e32d1d7c60d9805c2b646ae104e8ba6b7c5c22cc67f6921bf54bee21e56d38c13035b5e3f6fd890550bae4934f40bf3c9bbf1ee2eccf17b4852fe2a2b6e0c5ceb3facf5675779c631ba089cc1887506873a2f6e560d1437b3f674bdef927f98289a8a9c45d52c3b4ed105793e08a42935a0718294888b1245ed18316c5ac7229ae04ea54445f5e2ad4ac2166f75309a3f104b2988601583b29a8be5f2ed9b1a1ee36175a4558dff762995f8f2bfd82822660c6fc7ce7ca45f5f9a7e1a1b03edaaddf4fd01f871e44b667977721347efbd394319004db7ac134309795a2a498d1d51541c79d6b9e6746361e4467bdb5c52404b818898b55750ff1963726efecc603e8d4f6c918d170d33987202b3b355a6b549ff1aa27ae59adf9e2e309a6759f5fbdb6f3b61d2e065a939f2625c701fb9a23e630edc18073aa3b04ac8e76e394ae36c7261517511e36182ec6f755d4bdfd2ef68a90eef7a4c0da81bd78885e9ce953750564396b5fcb78a6b6861cd8ed7f7d9b5915bc35c4ef05448af61363e7cd574592f61ff1cd8d8fc3841bf32c4bd9b6bf541d8d4299007d6cd1618f137bf5a94838b3316d7ed3b50c228921477ef11a7a897aab872fb187839dc88a1f5d01a26ba73c23ac4662e7d51a2648a50ecb8b1ad853e28ec8a40ae86b1b01f23651c45ab0c2a23c31ddae2806748ed716ad0fd27e4a331d4056703f56092c1f0e299bfa45c60ddd175ab3e53053691c4693277c080257aa18e1589738547ce32ef0c31a415d1c3bf8a894158da7386ed7d4c42a95c45ae4ab8478e523ff2a439a1cc3ec4edb57e16dec8bc58df365943a0b0209f90f1580b2f6b176b26711fd25e0af1e75cff9a175d4b063beec35b9f0fcd1e819135a07cb13b47a738b8aa523cb1418d7e99a6221bd8527559a4bf64319aaf083155535c9ac034ae7d130d51848d1c38c1f2f246d532a1b798be1b5fa484b25911bf10d85569a251aa9e0bd683a35f06b01c0e800dcad43961db2a8ef280c644c5c3a62b2b1b3f6da97036902711b4aa450db6fce9c4a104a78d5e36f480db99fbc41fa3ef35a0fffac5f20744f2bb71e0ae45302b5cbe438663d5020387c22b35a052d00249123f7555940f7ac0011b55a403bb1a6b23dee1051880a553c0d225cd70948fb3b4b50d120158cfb7d4c2eee3bff8ec7461ce7a3b364175d09b82bdf6304fc4029eb4418d98fe033b603787bc99d3f9f65009d518ed27fefe207337af5d5f76fc33d67d152dcfb1755acd1dc79f43d2f62eeb6b8f9f5badce4d058cd60edcfd90394ae95da6ed04685b2e2ca29662e04536f3fb745e06aa88e693849b2145b569b273265db8aae03770286ef68ee2ee86024186b45b85ccda048d1b10015e89a11b90924e24f63983f6208df5d97f10d890032c5c44fae0a04ddb597532d2a36b646c7ef02f9238e6f744446143315a02fd24c1960e7bb53be9604823aa17c62e1752e5b5fd17279d2545f7916898a7eb820225d044cfc6ffa2de91988e919cd125247083bde4e42540bfde13bc24dbd7632f07baf6550985945511d33d1b3a16e2cdd03e93003da2817848c20765ca50091c5497e4c89d0c7731cd039a603fdbb410b8bc798f32baf7475cc9544c8eae4336484d890595e98a235190d964c5377d4ae203c72ba397cc0da331c3dfccae5a0fac1e9d9554587ce3ff83ebf5bc053e91a31aba82b0fa8a443e0f8a5b6788f6299b10e788e566a40cce987768b2e8b89c67cf0a0eb4bbb51112953d48ee9cff67a367d38570a00bf0457de6def6421507df1b03c1bf90cc785b75039708ce7cda35035e3316cae84d3f976fbc3ca96f7f9bf56b454de33f5730e4a6f3c008d6520f3e382bdd06c094b962055eeeb0426891ec7046d145c10d4bd8e01616656b58e578bd005171946e57bbe644d44368a2324a5888f8214469dc010fc7163df1e0585c3d890d760d31b34ab60cb9cd93f69c139448119cc6d241bb3e1f88fe85af78d31679eb766dfe1ec7ca44bc6b88560af06d73cba38f2cebbc4cd9e0302bfd270486af84cccd5a3e02c824505466a700c11c9daefa3f9bcba42cbc5ca3016cc2a9928a4f53be0e76e6f981641274448e35e82a40551d0f463d059a4f75f0a0be083d13c7f2cfd9701e57c78e9b6c6557f331f5702c2d6ce4a9dc89970a70ffd653ac50232877b1f8ef81d15d317f03d46a294af65ac1ac65b2404df72e90e6b6f1cdf8e88e685778d427a0bda97ba16b6efca5effd62f051cf689460abb31fb8f491edde96288a72797af96e1ebd9e7571ac0ae8811f0d197f57130dc70943e7c2581084802d3d9b467ef5dcbead0a4db405b6acbb264bed8fceac0f904e2475e8ff22fb5c15f6c5c511ac5de5d5e44b41d71d227d7090488d69c23eb5e446fd57e93f939a8420c44c8b60c5da4857bbf3b85dd7de55dbab521cac5b2f9101b259469be8f9f7155f6daadb2232a3f13e013ffa92340d260e118147c13db3bcf984d0dea657c774a33a5ff312eb2f34baa68b6b9c1eea206ad2440d8448988a7391b2b6f065213b9186eededeec797e5ccc675200f14932fa80c3f8f676d8aeb9343c87daa7a5a3b0f29c4b941942fe5a3ea46e9fcbdfc224d8d10e78302bb84685c9965e5d1bb0ba08b06c6e3afc4bdf98c500530a00f17069d8648206e1ef025a20f26b396f01f829047890c367e4db5b6508e8bb52b3012eb3c7ee8b918ca8a29c4ba3a944e012b237be890cc12eb60886a86982ff067701a360f634b27d807aee6101fa736126a235aad4e4ddfc7b81730a7b9ece332e24355e6aa4a9b19fdfb3c13e9fc80d81e7697c22e24de2fa498cc7be9703f593dc3d1e73fa04e76123a7f0de9255b87e7d6f417807ae86d4a58cca0a546f0d1484f9303710a2e5c31f532f94956c85a5de86c91451460be6b60bb67524b24a4a667756c00d8efc128c47a95dac5d89f25616d8cd98f6411141dc3f26927a60b5775c75e289bc3d1ce70b76bf261789773ef271c16357961830568bc9be99379dfe1b35498d733a15da63e818ffa514d0703441c18e8b04b1bc3a984155490a266961cbb45e1c1a5893163dd78359c74ae0292a6ebd5988a1aa5b046f118a39c22ebc2b9e3d1bec03d7f4a9b3b3977fe2bd272ff7ec3ac05104712a2cb30abbe067ca5af0e3346b0011a13bad8da18a7b6da686aaf24f1b560ee7f700c268494c8b4a03c50cf38a81d53b583be8b2ae6cae8e9e7a816a55e1af68c76f27874a2ca0f07b698753c337208e4227e141686683b9e85eeab34a8ff3758648ae07ea4a46e85037a50c659b2e7ede220754a142f0e2ccaddcb8892fc3e82a73400442d9e68cd1dfe1dd43f7009a1537136c462f5308354b9af7df583859af528e647296e8d38225b2c21d6a4f013166d9402bf991b9cd9ee671c11c01c57e9b8575a0f72b3b16279accaa7c15a09a6aa039f530ebf53ff70dff69bfb501eefbfcaa8d13ad1f5be6815fbf190ec8fe2254a30282bc472c0db9cf0d064767e992f2f1f551e29c0a0d7f976541998e134171e9e21ce1108acf13162666df90d288502708df94090265cb056313a190530d4f40bd46d78b1193e794273d3d14462d01f0a148696d042767acd24bf7f8343dc2966b809e693d4ae51b83d5bde05cef16d88eb3e75b203940baeb7e941974a3ae3e7773b1704f9a478f6771d31a64bd64ffc130b8b7d889a8d7a8a8ef86ef477e5034c92eaf1ec307cabc0e356b1eb99277608abedccaed9f0810e6ec9f5bb5e05f931c6dc236c65167122f29e6d07a9570740be54f60b3d6b2937b59241087e0bc6dfae3ade48fa048906117d5fdd59b58f49bb801976f259bda17b16359c5cca015e4f3f714c13af5c18be7b177f8ad9ee092e6f0f3b082c4312eb343b5a1c805882021df36d96c7048e85f9f10e5db5e66989ab800b1fb4cd8bef66b66e899aa6bc0ba6b1d47cdbe8368e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kick Start 2013</title>
      <link href="/2021/04/22/Kick%20Start%202013/"/>
      <url>/2021/04/22/Kick%20Start%202013/</url>
      
        <content type="html"><![CDATA[<h2 id="practice-round">Practice Round</h2><ol type="1"><li>题目大意：给定一堆人名，从上向下扫描，一旦当前值比前一个的字典序小，就将当前值移动到正确的位置，不论移动多远，代价都是1，求代价总和。</li></ol><p>和插入排序类似，如果当前值<span class="math inline">\(j\)</span>比<span class="math inline">\(j-1\)</span>小，将<span class="math inline">\(j\)</span>移到前面合适的位置，此时前<span class="math inline">\(j\)</span>个数是局部有序的。这道题只要求出代价和即可，不需要输出排序后的结果，不需要真正去移动，只要记录前<span class="math inline">\(j\)</span>个的最大值，如果<span class="math inline">\(j+1\)</span>比最大值小，那么必然触发一次移动。举例： 2 1 5 3 0 j=1, max=2, cost++ 1 2 5 3 0 j=3, max=5, cost++ 1 2 3 5 0 j=0, max=5, cost++ 0 1 2 3 5 有2个地方要注意：<code>cin</code>读入<code>string</code>时，会把空格/回车作为分隔符，遇到即停止，所以要用<code>getline()</code>，默认以回车结束；<code>cin</code>读完<code>int</code>后，换行符<code>\n</code>仍然在输入流里，所以下一次的<code>getline</code>会先读<code>\n</code>，故用<code>cin.get()</code>先取走<code>\n</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, N;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; ++i) &#123;</span><br><span class="line">        cin &gt;&gt; N;</span><br><span class="line">        cin.<span class="built_in">get</span>();</span><br><span class="line">        <span class="function">vector&lt;string&gt; <span class="title">names</span><span class="params">(N)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="built_in">getline</span>(cin, names[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        string curMax;</span><br><span class="line">        <span class="keyword">int</span> money = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">                curMax = names[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (names[j].<span class="built_in">compare</span>(curMax) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ++money;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                curMax = names[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; money &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>题目大意：</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Monte-Carlo Tree Search</title>
      <link href="/2021/04/13/Monte-Carlo%20Tree%20Search/"/>
      <url>/2021/04/13/Monte-Carlo%20Tree%20Search/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>We all know that Monte Carlo Simulation is used to estimate some unknown variables through random simulation. It is because that the process is too complicated so we cannot know the true rule behind it. Only god knows. But thankful to the randomness we can do lots of experiments to approach the truth.</p><p>MCTS has the same idea but it is based on a tree. Every path from root to leaf forms a solution and the whole tree defines the search space. It is a heuristic search strategy based on some loss functions. But it will follow not only the loss but also try to explore the unvisited nodes. So it's also trying to make a balance between exploration &amp; exploitation.</p><p>One iteration has 4 processes: Selection, Expansion, Simulation and Backpropagation. Let's start to build the tree. Initially the tree only has a root node. Every node holds 3 info: action list for the next decision; visit times to measure the exploration; quality values to measure the exploitation.</p><ol type="1"><li>Selection Using some criterion to select a child node which is eager to expand. There are 3 possibilities for the current state: If all the actions have been expanded thus the node has finished a complete search, then we will find a child with max UCB value and go down the tree recursively; Else if there are still some actions which have not been expanded (e.g. the node has 20 possible actions but there are 19 child node in the tree), then it will select one action randomly from the unexpanded actions and do Step 2 Expansion; Else game over and do Step 4 Backpropagation.</li><li>Expansion We have found the most eager node N to expand and the action A after Selection. So we need to add a new node S to the tree as N's child node by doing A.</li><li>Simulation/Playout Start from S to let the game run randomly until game over. Then we get a performance to be S's initial quality value.</li><li>Backpropagation The nodes along the path from root to N will update their quality values after S's simulation.</li></ol><p>After some fixed number of iterations or time limit, we will get a large tree and select the best leaf node as the result. Below is a figure: <img src="https://img-blog.csdnimg.cn/20210404201349819.png" alt="在这里插入图片描述" /> ## Upper Confidence Bound (UCB) When we need to select a child node to go down the tree, we usually use UCB criterion: <span class="math display">\[\underset{child}{\operatorname{arg\ max}}(\hat\mu_{child}+C\sqrt\frac{log\ n(s)}{n(child)})\]</span> <span class="math inline">\(\hat\mu_{child}\)</span> is the average reward gathered over all tree-walks with prefix child, <span class="math inline">\(n(s)\)</span> the number of the parent's visits and <span class="math inline">\(C\)</span> is constant controlling exploration &amp; exploitation. UCB tends to select a node with high quality value (for exploitation) and relatively low visit times (for exploration). ## An example 1. Initial tree Actually we only have root node <span class="math inline">\(S_0\)</span>. Assume there are only two actions <span class="math inline">\(A_1\)</span> and <span class="math inline">\(A_2\)</span>. <span class="math inline">\((Q,N)\)</span> means the quality value and #visits of this node. <img src="https://img-blog.csdnimg.cn/20210519201721793.png" alt="在这里插入图片描述" /> 2. First Iteration Since <span class="math inline">\(S_0\)</span> is a leaf node now, we should expand. Since the 2 actions are both unexpanded so we randomly select one (assume we select <span class="math inline">\(A_1\)</span>). Then we add <span class="math inline">\(S_1\)</span> to the tree and playout from <span class="math inline">\(S_1\)</span>. <img src="https://img-blog.csdnimg.cn/20210519202838706.png" alt="在这里插入图片描述" /> Assume we got a performance of 20. Next we need to backpropagate the value to <span class="math inline">\(S_1\)</span> and <span class="math inline">\(S_0\)</span> and update Q and #visits. <img src="https://img-blog.csdnimg.cn/20210519203559429.png" alt="在这里插入图片描述" /> We finished the first iteration. 3. Second iteration Start from <span class="math inline">\(S_0\)</span>, since <span class="math inline">\(A_2\)</span> has not been expanded so we have to choose it. Then add <span class="math inline">\(S_2\)</span> to the tree and playout from here. <img src="https://img-blog.csdnimg.cn/2021051921175522.png" alt="在这里插入图片描述" /> Then backpropagate to <span class="math inline">\(S_2\)</span> and <span class="math inline">\(S_0\)</span>: <img src="https://img-blog.csdnimg.cn/20210519212028325.png" alt="在这里插入图片描述" /> 4. Third iteration From <span class="math inline">\(S_0\)</span> there are no unexpanded actions so we need to select one child using UCB (assume C=2). <span class="math inline">\(UCB(S_1)=21.67,UCB(S_2)=11.67\)</span>. Thus we select the leaf node <span class="math inline">\(S_1\)</span>. Assume <span class="math inline">\(S_1\)</span> has 2 unexpanded actions. Choose one randomly (assume <span class="math inline">\(S_3\)</span>) and playout from here and backpropagate, assume we get performance of 0: <img src="https://img-blog.csdnimg.cn/20210519212745377.png" alt="在这里插入图片描述" /> 5. Fourth iteration From root we should decide which one to select. Again using UCB: <span class="math inline">\(UCB(S_1)=11.48,UCB(S_2)=12.10\)</span>. So we choose <span class="math inline">\(S_2\)</span>. Assume there are two unexpanded actions so we randomly choose <span class="math inline">\(S_5\)</span> and playout and get a performance of 14. After backpropagate: <img src="https://img-blog.csdnimg.cn/20210519213431456.png" alt="在这里插入图片描述" /></p><p>Assume the max iteration number is 4 so we get the final tree above. Finally we can select the best solution from <span class="math inline">\(S_0\)</span> to leaf node according to UCB value.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bayesian Optimization</title>
      <link href="/2021/04/06/Bayesian%20Optimization/"/>
      <url>/2021/04/06/Bayesian%20Optimization/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>Hyper-parameters tuning has become an important work during training neural networks. As the number of Hyper-parameter is becoming larger, researchers proposed Grid Search &amp; Random Search to wish to get better combinations of Hyper-parameters. However, Grid Search has a high time cost. Although some experiments showed that Random Search got a better result than Grid Search but the result is still not fulfilling.</p><p>Besides, there are some gradient-based methods to solve the problem. But the objective function is usually not differentiable or even not continuous. Thus these methods have a very finite usage.</p><p>BO is a gradient-free optimization method to get global solutions of a black-box function. The function usually has a high cost to compute such as training a deep neural network after tuning the Hyper-parameters. For this reason, we usually find a <strong>surrogate</strong> function to approximate the original function <span class="math inline">\(f\)</span>. In the field of AutoML, we often use Gaussian Process, Random Forest or deep network as the surrogate model. The simplest form of BO is as follows: <img src="https://img-blog.csdnimg.cn/20210401193953429.png" alt="在这里插入图片描述" /> <span class="math inline">\(f\)</span> represents the black-box function that we want to optimize (black-box means that the function transforms a configuration <span class="math inline">\(x\)</span> to an output but we don't know the exact function relationship). <span class="math inline">\(\chi\)</span> represents the search space of the combination of hyper-parameters. <span class="math inline">\(S\)</span> represents <strong>Acquisition Function</strong> which is used to select the promising <span class="math inline">\(x\)</span>. <span class="math inline">\(M\)</span> represents the surrogate model which takes a configuration <span class="math inline">\(x\)</span> and outputs the performance (much like <span class="math inline">\(f\)</span> does).</p><p>First we need to get some samples from <span class="math inline">\((f,\chi)\)</span>, thus we get <span class="math inline">\(D=(x_i,f(x_i)), i=1...n\)</span>.</p><p>Next we iterate <span class="math inline">\(T\)</span> times (often fixed) to select configuration <span class="math inline">\(x\)</span>. Use the dataset <span class="math inline">\(D\)</span> to train the surrogate model <span class="math inline">\(M\)</span> (much easier than train <span class="math inline">\(f\)</span>). <span class="math inline">\(M\)</span> has several choices such as Random Forest, Tree Parzen Estimators. Here we use GP so we get the probabilistic model <span class="math inline">\(p(y|x,D)\)</span>.</p><p>Then we need to find the most promising configuration <span class="math inline">\(x\)</span>. The most important thing for Acquisition Function is to make a balance between <strong>exploration &amp; exploitation</strong>. It means that when selecting the next <span class="math inline">\(x\)</span> we not only want to select those untried points (exploration) but also want to select those tried points which has a great <span class="math inline">\(f(x)\)</span> (exploitation).</p><p>Finally use the promising <span class="math inline">\(x_i\)</span> to get corresponding performance <span class="math inline">\(y_i\)</span> and join the pair into <span class="math inline">\(D\)</span>. ## Gaussian Process If we assume <span class="math inline">\(x_i\)</span> is independent with each other, the Multivariant Gaussian Distribution's probability density is as follows: <span class="math display">\[p(x_1,...,x_n)=\frac{1}{(2\pi)^{\frac{n}{2}}\sigma_1...\sigma_n}exp(-\frac{1}{2}[\frac{(x_1-\mu_1)^2}{\sigma_1^2}+...+\frac{(x_n-\mu_n)^2}{\sigma_n^2}])\]</span> We can rewrite the formula to the vectorized version: <span class="math display">\[p(x)=(2\pi)^{-\frac{n}{2}}|K|^{-\frac{1}{2}}exp[-\frac{1}{2}(x-\mu)^TK^{-1}(x-\mu)]\]</span> in which <span class="math display">\[K=\left[\begin{matrix}  \sigma_1^2     &amp; 0      &amp; \cdots &amp; 0      \\ 0      &amp; \sigma_2^2      &amp; \cdots &amp; 0      \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 0     &amp; 0      &amp; \cdots &amp; \sigma_n^2     \\\end{matrix}\right], x-\mu=[x_1-\mu_1,...,x_n-\mu_n]^T\]</span> Thus <span class="math inline">\(x\sim N(\mu,K)\)</span>, <span class="math inline">\(\mu\)</span> is the mean vector and <span class="math inline">\(K\)</span> is the covariance matrix (a diagonal matrix since the independence).</p><p>But what should we do when <span class="math inline">\(x\)</span> has infinite dimensions? Such as in a continuous temporal T or spatial S. Actually GP means Gaussian Distribution and Stochastic Process (about time T). GP is defined by an infinite number of Random Variables on a continuous domain. In other words, it is an infinite dimension Gaussian Distribution. Formally, let's sample n moments from T: <span class="math inline">\(t_1,...,t_n\in T\)</span>, thus we get a n-dimensional vector <span class="math inline">\((\xi_1,...,\xi_n)\)</span>, if this vector is a n-dimensional Gaussian Distribution then <span class="math inline">\({\xi_t}\)</span> is a GP.</p><p>Let's take an easy example to illustrate: suppose during peoples' life time, at every moment <span class="math inline">\(t\)</span> the energy of the population forms a Gaussian Distribution but different moments have different <span class="math inline">\(\mu\)</span> and <span class="math inline">\(\sigma\)</span>: <img src="https://img-blog.csdnimg.cn/20210404141525979.png" alt="在这里插入图片描述" /> If we take 5 moments during a population's life time, then <span class="math inline">\(\xi_1-\xi_5\)</span> all forms Gaussian Distribution but they have different <span class="math inline">\(\mu\)</span> and <span class="math inline">\(\sigma\)</span>. If we sample an arbitrary moment <span class="math inline">\(t\)</span> then <span class="math inline">\(\xi(t)\sim N(\mu_t,\sigma_t^2)\)</span>. If we sample at some points and connect them together we get two samples of the GP, as the figure shows.</p><p>Now that we know what happens at <span class="math inline">\(t\)</span>, let's consider the whole <span class="math inline">\(T\)</span>. We know that for a finite Gaussian Distribution, it can be determined by a n-dimensional vector <span class="math inline">\(\mu_n\)</span> (reflects every Random Variable's expectation) and a <span class="math inline">\(n\times n\)</span> matrix <span class="math inline">\(\Sigma\)</span> (reflects every RV's variances and covariance between different dimensions). It is almost the same for GP except that we cannot use a vector to describe every <span class="math inline">\(t\)</span>'s mean since it is infinite. So we need a function <span class="math inline">\(m(t)\)</span> to describe the continuous <span class="math inline">\(T\)</span>. For <span class="math inline">\(\Sigma\)</span> we should use a kernel function <span class="math inline">\(k(s,t)\)</span> to describe the covariance between time <span class="math inline">\(t\)</span> and <span class="math inline">\(s\)</span>. Once <span class="math inline">\(m(t)\)</span> and <span class="math inline">\(k(s,t)\)</span> is defined the GP is determined <span class="math inline">\(\xi_t\sim GP(m(t),k(s,t))\)</span>.</p><p>The most popular kernel function is RBF which is defined as follows: <span class="math display">\[k(s,t)=\sigma^2exp(-\frac{||s-t||^2}{2l^2})\]</span> <span class="math inline">\(\sigma\)</span> and <span class="math inline">\(l\)</span> are two hyper-parameters. If <span class="math inline">\(s\)</span> and <span class="math inline">\(t\)</span> are close in <span class="math inline">\(T\)</span> then the output covariance will be larger and it means the correlation between the two points is bigger.</p><p>Once we have some knowledge about GP we can start to know Gaussian Process Regression, which is a kind of Probabilistic Model. It means that we can use Prior and Observations to calculate Posterior. First we define a GP by <span class="math inline">\(m(t)\)</span> and <span class="math inline">\(k(s,t)\)</span>, which is a Prior. Then we observe some data to revise the GP's <span class="math inline">\(m(t)\)</span> and <span class="math inline">\(k(s,t)\)</span> to get Posterior. But how?</p><p>Here we need to use some Gaussian Distribution's nice properties: Once Gaussian always Gaussian. It means that marginal distribution, summation and conditional distribution of a GD are still GD. Assume a n-dimensional RV <span class="math inline">\(x\sim N(\mu,\Sigma)\)</span> and we divide it into two parts <span class="math inline">\(x_A\)</span> and <span class="math inline">\(x_B\)</span> then we get: <span class="math display">\[x=\begin{bmatrix} x_A\\ x_B \end{bmatrix},\mu=\begin{bmatrix} \mu_A\\ \mu_B \end{bmatrix},\Sigma=\begin{bmatrix} \Sigma_{AA}, \Sigma_{AB} \\ \Sigma_{BA}, \Sigma_{BB} \end{bmatrix}\]</span> Then we can get: <span class="math display">\[x_A|x_B\sim \mathcal{N}(\mu_A+\Sigma_{AB}\Sigma_{BB}^{-1}(x_B-\mu_B),\Sigma_{AA}-\Sigma_{AB}\Sigma_{BB}^{-1}\Sigma_{BA})\]</span> Thus we could update the GD's Posterior parameters. It is much the same in GP. If we get some samples <span class="math inline">\((X,Y)\)</span> then the rest is <span class="math inline">\((X^*,f(X^*))\)</span>. The joint distribution forms an infinite GD: <span class="math display">\[\begin{bmatrix} Y\\ f(X^*) \end{bmatrix}\sim N(\begin{bmatrix} \mu(X)\\ \mu(X^*) \end{bmatrix},\begin{bmatrix} k(X,X), k(X,X^*) \\ k(X^*,X), k(X^*,X^*) \end{bmatrix})\]</span> So we want to know the rest of the points based on the observed points: <span class="math inline">\(f(X^*)|Y\sim N(\mu^*,k^*)\)</span>. <span class="math display">\[\mu^*=\mu(X^*)+k(X^*,X)k(X,X)^{-1}(Y-\mu(X))\\k^*=k(X^*,X^*)-k(X^*,X)k(X,X)^{-1}k(X,X^*)\]</span> Here is an example: <img src="https://img-blog.csdnimg.cn/20210404155244142.png" alt="在这里插入图片描述" /> Finally let's return back to our BO's <span class="math inline">\(M\)</span>. We first assume our prior: <span class="math inline">\(\mu(X)=0,k(X,X^*)=RBF\)</span>. Plus the observed and evaluated <span class="math inline">\(D=\{x_i,y_i\}\)</span> we can get <span class="math inline">\(\hat \mu\)</span> and <span class="math inline">\(\hat{\sigma}^{2}\)</span>, then the posterior prediction is <span class="math inline">\(p(y|x,D)\)</span>, which is still a Gaussian Distribution. The calculation process is as follows: <span class="math display">\[y=(y_1,...,y_i)^T \\\hat \mu=k^T(x)(k+\sigma_{n}^{2}I)^{-1}y \\\hat{\sigma}^{2}=k(x^*x)-k(x)^T(k+\sigma_{n}^{2}I)^{-1}k(x)\]</span> Once we get the posterior prediction <span class="math inline">\(p(y|x,D)\)</span>, we can feed them to the Acquisition Function to get next <span class="math inline">\(x_t\)</span>. ## Acquisition Function There are some popular Acquisition Functions:</p><ol type="1"><li>Upper Confidence Bound (UCB) <span class="math inline">\(x_{t+1}=\underset{x\in X}{\operatorname{arg\ max}}[\mu_{t}(x)+\beta_t^{1/2}\sigma_t(x)]\)</span> The weighted sum of posterior mean and posterior standard deviation. The two items correspond exploitation and exploration, respectively.</li><li>Expected Improvement (EI) <span class="math inline">\(x_{t+1}=\underset{x\in X}{\operatorname{arg\ max}}\ E_{f(x)\sim N(\mu_{t}(x),\sigma_t^2(x))}[max(0,f(x)-f_t^+)]\)</span>, <span class="math inline">\(f_t^+\)</span> is the max observation value during the first <span class="math inline">\(t\)</span> iterations.</li></ol><p>Except the above functions, there are Probability of Improvement, Entropy Search and so on.</p><h2 id="reference">Reference</h2><p><a href="https://jgoertler.com/visual-exploration-gaussian-processes/">A Visual Exploration of Gaussian Processes</a><br /><a href="https://www.zhihu.com/question/46631426">如何通俗易懂地介绍Gaussian Process</a><br /><a href="https://zhuanlan.zhihu.com/p/76269142">贝叶斯优化/Bayesian Optimization</a><br /><a href="https://github.com/fmfn/BayesianOptimization/blob/master/examples/exploitation_vs_exploration.ipynb">Exploitation vs Exploration</a><br /><a href="https://github.com/fmfn/BayesianOptimization">BayesianOptimization</a><br /><a href="https://www.cs.cornell.edu/courses/cs4780/2018fa/lectures/lecturenote15.html">Lecture 15: Gaussian Processes</a><br /><a href="https://distill.pub/2020/bayesian-optimization/">Exploring Bayesian Optimization</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inductive Representation Learning on Large Graphs</title>
      <link href="/2021/03/29/Inductive%20Representation%20Learning%20on%20Large%20Graphs/"/>
      <url>/2021/03/29/Inductive%20Representation%20Learning%20on%20Large%20Graphs/</url>
      
        <content type="html"><![CDATA[<p>Stanford的帅哥Jure发在NIPS 2017的一篇文章。</p><p>GCN是Transductive Learning，训练时的图要包含所有结点，是固定的，不能快速泛化到未知结点（图），本文提出了一种Inductive Learning的GraphSAGE。</p><p>GCN学习的是每个单独节点的低维embedding，由于输入的图是固定的，所以可以很好捕获全局信息。但如果要获得新节点的embedding，加入图以后需要调整其它结点，至少也是局部重新训练，计算开销太大，应用受限。</p><p>GraphSAGE学习的不是每个结点的固定的表示，因为图结构不断变化，所以学习一种节点表示的函数，这样就可以快速得到未知结点的表示。</p><p>简单来说：学习每个结点的特征如何由邻居的特征聚合而来，学到聚合函数后，只要已知新节点的特征和邻边关系，就能得到表示，并且这个表示会由于图结构的变化而变化，是动态的。</p><p>前向传播是为了生成结点的向量表示， <img src="https://img-blog.csdnimg.cn/20210207163418476.png" alt="在这里插入图片描述" /> 如果聚合K次，就需要K个聚合函数，初始时每个结点的表示是原本的特征向量，对第k层，对结点v，先得到v的第k层结点的聚合表示，加上v在上一层的特征，最后得到v的最终表示。</p><p>以作者的图为例， <img src="https://img-blog.csdnimg.cn/20210220111424640.png" alt="在这里插入图片描述" /> 我觉得知乎上这张更清楚： <img src="https://img-blog.csdnimg.cn/20210220111932548.png" alt="在这里插入图片描述" /> 每一层的表示都是由上一层生成，与当前层其他节点无关。</p><p>由于需要学习参数，所以要设计损失函数。无监督学习的损失函数应该是让临近节点有相似的表示，有监督学习用cross-entropy即可。</p><p>聚合函数作者给了3种选择：</p><ol type="1"><li>Mean 取邻居的平均值</li><li>LSTM</li><li>Pooling</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Loss Function</title>
      <link href="/2021/03/13/Loss%20Function/"/>
      <url>/2021/03/13/Loss%20Function/</url>
      
        <content type="html"><![CDATA[<p>For binary classification (+1, -1), if we classify correctly then <span class="math inline">\(y\cdot f = y\cdot \theta^Tx\gt0\)</span>; otherwise <span class="math inline">\(y\cdot f = y\cdot\theta^Tx\lt0\)</span>. Thus we have following loss functions:</p><ul><li>0/1 loss<br /><span class="math inline">\(\min_\theta\sum_i L_{0/1}(\theta^Tx)\)</span>. We define <span class="math inline">\(L_{0/1}(\theta^Tx) =1\)</span> if <span class="math inline">\(y\cdot f \lt 0\)</span>, and <span class="math inline">\(=0\)</span> o.w. Non convex and very hard to optimize.</li><li>Hinge loss<br />Upper Bound of 0/1 loss. Approximate 0/1 loss by <span class="math inline">\(\min_\theta\sum_i H(\theta^Tx)\)</span>. We define <span class="math inline">\(H(\theta^Tx) = max(0, 1 - y\cdot f)\)</span>. Apparently <span class="math inline">\(H\)</span> is small if we classify correctly.</li><li>Logistic loss<br /><span class="math inline">\(\min_\theta \sum_i log(1+\exp(-y\cdot \theta^Tx))\)</span>.</li></ul><p>Fortunately, hinge loss, logistic loss and square loss are all convex functions. Convexity ensures global minimum and it's computationally appealing. <img src="https://img-blog.csdnimg.cn/20210226181824674.png" alt="在这里插入图片描述" /> Figure 7.5 from Chris Bishop's PRML book. The Hinge Loss E(z) = max(0,1-z) is plotted in blue, the Log Loss in red, the Square Loss in green and the 0/1 error in black.</p><p>From the figure we can observe that the hard instance (near the boundary) will influence the loss function a lot so we need to make the model robust and can deal with the hard ones.</p><p>For binary classification we can unify the two cases (classify correctly or not) by <span class="math inline">\(y\cdot f\)</span>, but for multi-class classification (0, 1, 2, ..., k) we cannot unify all the cases. So we use cross-entropy as the loss.</p><p>There exists a vivid example for transform the target function: If a noisy picture is given, and want to output the clean one. Here the clean one is hard to control so we can let the noise be the target function and wo should minimize the amplitude of the noise. Thus the problem becomes controllable.</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BusTub</title>
      <link href="/2021/03/05/BusTub/"/>
      <url>/2021/03/05/BusTub/</url>
      
        <content type="html"><![CDATA[<h2 id="project-0---c-primer"><a href="https://15445.courses.cs.cmu.edu/fall2020/project0/">PROJECT #0 - C++ PRIMER</a></h2><p>这个Warm-Up主要是要熟悉C++ 17的一些Features，只需要实现<code>p0_starter.h</code>即可；<br />提交gradescope，要上传zip文件，但是路径总是不对，文档里也说得不明不白，一定要加上路径名：<code>zip solution.zip src/include/primer/p0_starter.h</code>；<br /><code>unique_ptr</code>拥有对象的独占权，可以用<code>move</code>将对象的所有权转移到另一个<code>unique_ptr</code>。</p><p>第一次提交时有内存安全隐患： <img src="https://img-blog.csdnimg.cn/20201227221401866.png" alt="在这里插入图片描述" /> 网上说可能是valgrind版本过低，用高版本测试后发现没问题： <img src="https://img-blog.csdnimg.cn/20201227221456847.png" alt="在这里插入图片描述" /> 其实代码是有bug的，经过测试，发现问题在于实现矩阵乘法时定义了临时变量<code>double tmp = 0.0</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> tmp = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mat1-&gt;<span class="built_in">GetColumns</span>(); ++k) &#123;</span><br><span class="line">  tmp += mat1-&gt;<span class="built_in">GetElem</span>(i, k) * mat2-&gt;<span class="built_in">GetElem</span>(k, j);</span><br><span class="line">&#125;</span><br><span class="line">ans-&gt;<span class="built_in">SetElem</span>(i, j, tmp);</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mat1-&gt;<span class="built_in">GetColumns</span>(); ++k) &#123;</span><br><span class="line">  ans-&gt;<span class="built_in">SetElem</span>(i, j, ans-&gt;<span class="built_in">GetElem</span>(i, j) + mat1-&gt;<span class="built_in">GetElem</span>(i, k) * mat2-&gt;<span class="built_in">GetElem</span>(k, j));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我个人理解是这样：因为原本代码中是模板参数<code>T</code>，如果定义<code>double</code>作为临时变量，测试时用<code>int</code>测试，最终<code>SetElem</code>时要存入<code>double</code>，但是预先分配的内存只有<code>int</code>大小，所以内存溢出报错。<br /><img src="https://img-blog.csdnimg.cn/20210127214548109.png" alt="在这里插入图片描述" /></p><h2 id="project-1---buffer-pool-manager"><a href="https://15445.courses.cs.cmu.edu/fall2020/project1/">PROJECT #1 - BUFFER POOL MANAGER</a></h2><p>整体要为<a href="https://github.com/cmu-db/bustub">Bustub</a>做一个面向磁盘的存储管理系统： <img src="https://img-blog.csdnimg.cn/20210225225705723.png" alt="在这里插入图片描述" /></p><p>第一次作业是要实现一个内存缓冲池：负责将物理页面在磁盘和主存之间移动，这样DBMS就可以支持比内存更大的数据库。缓冲池的操作对其它系统部件是透明的，比如系统通过唯一的页面标识符<code>page_id_t</code>向缓冲池要求访问页面，而不管页面是在内存中还是在磁盘上。</p><p>缓冲池的实现必须是线程安全的，多个线程同时访问时需要用latches保护（OS中叫locks）。<br />关于DBMS中的🔒：</p><ul><li>locks：高层次的逻辑原语，在事务的整个执行过程中保护数据库的内容（元组/表/数据库），可以rollback</li><li>latches：低层次的保护原语，DBMS用来保护内部数据结构的安全访问（hash table, regions of memory），只在某个具体操作时使用，不可以rollback</li></ul><p>具体来说：有2部分：LRU替换策略+缓冲池管理</p><ul><li>LRU<br />LRU的实现有多种方式：<br />1、数组+时间戳：每次插入新数据项的时候，先把数组中存在的数据项的时间戳自增，并将新数据项的时间戳置为0并插入到数组中。每次访问数组中的数据项的时候，将被访问的数据项的时间戳置为0。当数组空间已满时，将时间戳最大的数据项淘汰。<br />2、双向链表：每次新插入数据的时候将新数据插到链表的头部；每次缓存命中（即数据被访问），则将数据移到链表头部；那么当链表满的时候，就将链表尾部的数据丢弃。<br />上面两种复杂度均是O(n)<br />3、双向链表+Hash Map：当需要插入新的数据项的时候，如果新数据项在链表中存在（一般称为命中），则把该节点移到链表头部，如果不存在，则新建一个节点，放到链表头部，若缓存满了，则把链表最后一个节点删除即可。在访问数据的时候，如果数据项在链表中存在，则把该节点移到链表头部，否则返回-1。这样一来在链表尾部的节点就是最近最久未访问的数据项。本质上是list看作时间戳，hash table记录元素值到链表位置的映射关系，get和put均是O(1)。</li><li>缓冲池管理<br />缓冲池的组织形式是frame数目固定的数组，访问时将page从磁盘拷贝到frame。<br />与OS内存管理相似，也需要有page table记录哪些page在buffer pool中，page id -&gt; frame id；page directory记录了磁盘上的位置，page id -&gt; page locations in disk。<br />还需要有dirty位以及pin/ref counter记录当前正在访问的线程数目，只有flush或者置换脏页时才写回磁盘。 <img src="https://img-blog.csdnimg.cn/2021022523062865.png" alt="在这里插入图片描述" /> 缓冲池和<code>Replacer</code>的大小是相同的，如果page的ref counter变为0时就可以加入到<code>Replacer</code>中作为替补牺牲页面。</li></ul><p>从缓冲池中根据ID fetch的时候有3种情况：</p><ol type="1"><li>如果page在缓冲池，直接返回；</li><li>如果不在，但缓冲池有空闲frame，从磁盘读取page放入该frame；</li><li>如果不在且缓冲池没有空闲frame，从buffer中牺牲一页，从磁盘读取page放入对应的frame。</li></ol><p>第一次提交忘了处理并发问题，只得了65分： <img src="https://img-blog.csdnimg.cn/20210209211524362.png" alt="在这里插入图片描述" /><br />加了一些🔒后，还有2个test挂了：<br /><img src="https://img-blog.csdnimg.cn/20210209215248107.png" alt="在这里插入图片描述" /></p><p><code>isdirty</code>一直过不去，后来在群里看到：只有page当前的脏位是false且传入<code>is_dirty==true</code>时才需要修改当前的脏位。这里我是这么理解的：如果页面应该标记为dirty那么传入的参数就是true：</p><ul><li>当前为true &amp;&amp; <code>is_dirty==true</code>：页面修改过，也做了正确标记，不用管；</li><li>当前为false &amp;&amp; <code>is_dirty==true</code>：页面其实修改过，但没有标记，改正；</li><li>当前为false &amp;&amp; <code>is_dirty==false</code>：页面没修改，标记正确，不用管；</li><li>当前为true &amp;&amp; <code>is_dirty==false</code>：页面没修改，标记为修改过，这种也不用管，大不了置换时写回磁盘耗费些时间。 <img src="https://img-blog.csdnimg.cn/20210210204925713.png" alt="在这里插入图片描述" /><br />数据库真的太难了，尤其是涉及到并发控制的部分，我真的没有足够时间去debug这些，以后有空再继续做吧。。</li></ul><h2 id="project-2---b-tree"><a href="https://15445.courses.cs.cmu.edu/fall2020/project2/">PROJECT #2 - B+ TREE</a></h2><h2 id="project-3---query-execution"><a href="https://15445.courses.cs.cmu.edu/fall2020/project3/">PROJECT #3 - QUERY EXECUTION</a></h2><h2 id="project-4---concurrency-control"><a href="https://15445.courses.cs.cmu.edu/fall2020/project4/">PROJECT #4 - CONCURRENCY CONTROL</a></h2>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flow Control &amp; Congestion Control</title>
      <link href="/2021/02/25/Flow%20Control%20&amp;%20Congestion%20Control/"/>
      <url>/2021/02/25/Flow%20Control%20&amp;%20Congestion%20Control/</url>
      
        <content type="html"><![CDATA[<p>In order to make sure that every packet reaches its destination, we use Retransmit. There are 3 approaches: Stop-and-Wait, Go Back N and Selective Repeat.</p><ul><li>Stop-and-Wait Sender transmits packet one by one, label each with a sequence number and sets timer after transmitting. If receive ACK, send next. If timer goes off, resend the previous packet. When receive packet, send ACK. If packet is corrupted, ignore it and sender will resend.</li><li>SR Send packets from the window and set timeout for each packet. On receiving ACK for left side of the window, slide forward and send packets that have now entered the window. On timeout, resend only the timed out packet. Receiver keeps a buffer of size of the window. On receiving packets, send ACK. If packet comes in out of order, just store it in the buffer and send ACK anyway. ## How big should we size the sender's window Don't overload the receiver. Sender cannot send as fast as possible since it will overflow the receiver's buffer. <img src="https://img-blog.csdnimg.cn/20200417151819468.png" alt="在这里插入图片描述" /> The solution is Advertised Window (W): tell the sender how much space the receiver's buffer has through ACK. So the window size of the sender: the size &lt;= W. Thus we won't overload the receiver. This is Flow Control.</li></ul><p>But if we set the size to W, we cannot solve the problem thoroughly: <img src="https://img-blog.csdnimg.cn/2021022516554078.png" alt="在这里插入图片描述" /> Sender's window contains a set of packets that have been transmitted but not yet acked. But some packets will get dropped at router and sender will never receive ACKs for these packets. The result is these packets will remain buffered in the window. It means that we cannot set the size to W, we only want to send at 50Mbps. It will take a RTT(200ms) to receive an ACK back for the first packet. We will send 50*200=1.25MB data and that's exactly the definition of the sender's window.</p><p>The window size of the sender should &lt;= bandwidth-delay product (BDP). Thus we won't overload the network. This is Congestion Control. BDP is the &quot;volume&quot; of the link, the amount of data that can be &quot;in flight&quot; at any time. ## How should we determine the BDP Things are much harder to calculate the BDP:</p><ul><li>We don't know the bandwidth or RTT</li><li>My share of bandwidth is dependent on the other user on the network, so the window size will change as other users start or stop sending</li><li>The router will stall the excess packets in the bottleneck queue instead of dropping, so you can overshoot the size a little bit</li></ul><p>There are many algorithms to solve the problem given the prior constraints. The old one is Reno, although no one uses it anymore, sigh!!</p><p>Use Multiplicative Increase at startup to find the right sending rate quickly, this process is called &quot;slow start&quot;; Then uses Additive Increase/Multiplicative Decrease (AIMD) to adjust the sending rate over time. <img src="https://img-blog.csdnimg.cn/20210225174103869.png" alt="在这里插入图片描述" /> ## Reference <a href="https://computer-networks.github.io/sp19/lectures.html">CMU 15-441 TCP Part 2</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maximum Entropy Model</title>
      <link href="/2021/02/07/Maximum%20Entropy%20Model/"/>
      <url>/2021/02/07/Maximum%20Entropy%20Model/</url>
      
        <content type="html"><![CDATA[<p>熵是对随机变量<strong>不确定性</strong>的度量，是对所有可能发生的事件产生的信息量的期望，没有外部能量输入的情况下，封闭系统趋向熵增。</p><p>信息熵指离散随机事件的出现概率：<span class="math inline">\(X={x_1,x_2,...,x_n}\)</span>，<span class="math inline">\(P(X=x_i)=p_i\)</span> <span class="math display">\[H(X)=-\sum_{i=1}^{n}p(x_i)log\ p(x_i)\]</span></p><p>Joint Entropy <span class="math display">\[H(X,Y)=-\sum_{i=1}^{n}\sum_{j=1}^{m}p(i,j)log\ p(i,j)\]</span></p><p><span class="math display">\[H(X|y_j)=-\sum_{i=1}^{n}p(x_i|y_j)log\ p(x_i|y_j)\]</span></p><p>按照<span class="math inline">\(Y\)</span>的各种情况进行加权平均，得条件熵<span class="math inline">\(H(X|Y)\)</span> <span class="math display">\[H(X|Y)=-\sum_{i=1}^{n}\sum_{j=1}^{m}p(y_j)p(x_i|y_j)log\ p(x_i|y_j)=-\sum_{i=1}^{n}\sum_{j=1}^{m}p(x_i,y_j)log\ p(x_i|y_j)\]</span> 易证<span class="math inline">\(H(X|Y)=H(X,Y)-H(Y)\)</span></p><p>交叉熵，<span class="math inline">\(P(X)\)</span>和<span class="math inline">\(Q(X)\)</span>是<span class="math inline">\(X\)</span>的两个概率分布 <span class="math display">\[D_{KL}(P\ ||\ Q)=\sum_xP(x)log\frac{P(x)}{Q(x)}\]</span></p><p>互信息 <span class="math display">\[I(X,Y)=\sum_x\sum_yp(x,y)log\frac{p(x,y)}{p(x)p(y)}\]</span> 互信息就是联合分布<span class="math inline">\(P(X,Y)\)</span>和独立分布乘积<span class="math inline">\(P(X)P(Y)\)</span>的交叉熵。 易证<span class="math inline">\(I(X,Y)=H(X)+H(Y)-H(X,Y)\)</span></p><p>直观上看：在已知部分知识的前提下，对于未知分布最合理的推断就是符合已知且最不确定的推断，整个系统趋向于无序，熵最大。 在一定<strong>约束条件</strong>下，使得<span class="math inline">\(H(X|Y)\)</span>最大。 <span class="math display">\[p^*={\underset {p\in P}{\operatorname {arg\,max} }}\,-\sum_{i=1}^{n}\sum_{j=1}^{m}\bar p(y_j)p(x_i|y_j)log\ p(x_i|y_j)\]</span> 约束条件： <span class="math display">\[\sum_xp(x|y)=1 \\...\]</span> 又可以通过拉格朗日乘数法变为对偶问题求解。</p><p>由于无法求得解析解，只能用迭代法求数值解： <span class="math display">\[p^*(x|y)=\cfrac{1}{Z_\lambda(y)}e^{\sum_i\lambda_if_i(x,y)} \\Z_\lambda(y)=\sum_xe^{\sum_i\lambda_if_i(x,y)}\]</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python FAQ</title>
      <link href="/2021/01/30/Python%20FAQ/"/>
      <url>/2021/01/30/Python%20FAQ/</url>
      
        <content type="html"><![CDATA[<h2 id="lambda表达式">lambda表达式</h2><p>对于一句话的函数，均可以用lambda表达式，一种语法糖。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">f = <span class="keyword">lambda</span> x: x ** <span class="number">2</span></span><br><span class="line">g = <span class="keyword">lambda</span> x, y: x + y</span><br><span class="line">a.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quadratic</span>(<span class="params">a, b, c</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: a*x*x + b*x + c</span><br><span class="line"></span><br><span class="line">f = quadratic(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">f(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">quadratic(<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>)(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></p><h2 id="decorator">decorator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># messy</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    t1 = time.time()</span><br><span class="line">    c = a + b</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t2 - t1)</span><br><span class="line">    <span class="keyword">return</span> c</span><br></pre></td></tr></table></figure><p>如果使用装饰器： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_time</span>(<span class="params">func</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span>(<span class="params">*args</span>):</span></span><br><span class="line">        t1 = time.time()</span><br><span class="line">        res = func(*args)  <span class="comment"># do something</span></span><br><span class="line">        t2 = time.time()</span><br><span class="line">        <span class="built_in">print</span>(t2 - t1)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@display_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">ans = add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></p><h1 id="易错">易错</h1><p><a href="https://stackoverflow.com/questions/51950193/python-a-b-b-a-implementation-how-is-it-different-from-c-swap-function"><code>a, b = b, a</code>赋值问题</a><br /><code>print(1 != 0 != 1)</code>输出<code>True</code>，因此不能用来判断3个数是否不等。</p><h2 id="basics">Basics</h2><ol type="1"><li>两个列表转字典：<code>dict(zip(list1, list2))</code></li><li><a href="https://blog.csdn.net/weixin_37579123/article/details/89515577">Python中__new__()和__init__()的区别</a>：Python中的constructor是<code>__new__</code>，initializer是<code>__init__</code>。<code>__new__</code>首先被调用创建新实例并返回该实例，始终作为类的静态方法，类级别方法，默认调用父类的<code>__new__</code>构造该类的实例，也可以重写<code>__new__</code>，构造出来的对象取决于<code>__new__</code>，<code>__new__</code>返回什么就是什么；<code>__init__</code>没有返回值负责初始化创建的实例，实例级别方法，其<code>self</code>参数就是<code>__new__</code>返回的实例。</li><li><a href="https://hj24.life/posts/%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%92%8C%E5%8D%8F%E7%A8%8B%E6%B5%85%E6%9E%90/">Python中的进程/线程/协程</a>： 协程是比线程更小的执行单元，也叫微线程，用户态，在单线程上执行多个任务，一个任务等待时执行另一个任务，使用的内存动态变化，切换调度由用户控制，避免线程的系统级别切换的开销，内存利用率更高。 Python的协程是1：N</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">animals = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;monkey&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> idx, animal <span class="keyword">in</span> <span class="built_in">enumerate</span>(animals):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;#%d: %s&#x27;</span> % (idx + <span class="number">1</span>, animal))</span><br><span class="line"><span class="comment"># Prints &quot;#1: cat&quot;, &quot;#2: dog&quot;, &quot;#3: monkey&quot;, each on its own line</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;person&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;cat&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;spider&#x27;</span>: <span class="number">8</span>&#125;</span><br><span class="line"><span class="keyword">for</span> animal, legs <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;A %s has %d legs&#x27;</span> % (animal, legs))</span><br><span class="line"><span class="comment"># Prints &quot;A person has 2 legs&quot;, &quot;A cat has 4 legs&quot;, &quot;A spider has 8 legs&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">animals = &#123;<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;fish&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> idx, animal <span class="keyword">in</span> <span class="built_in">enumerate</span>(animals):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;#%d: %s&#x27;</span> % (idx + <span class="number">1</span>, animal))</span><br><span class="line"><span class="comment"># Prints &quot;#1: fish&quot;, &quot;#2: dog&quot;, &quot;#3: cat&quot;</span></span><br></pre></td></tr></table></figure><p>one of the most important differences is that tuples can be used as keys in dictionaries and as elements of sets, while lists cannot.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name  <span class="comment"># Create an instance variable</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instance method</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">greet</span>(<span class="params">self, loud=<span class="literal">False</span></span>):</span></span><br><span class="line">        <span class="keyword">if</span> loud:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;HELLO, %s!&#x27;</span> % self.name.upper())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Hello, %s&#x27;</span> % self.name)</span><br><span class="line"></span><br><span class="line">g = Greeter(<span class="string">&#x27;Fred&#x27;</span>)  <span class="comment"># Construct an instance of the Greeter class</span></span><br><span class="line">g.greet()            <span class="comment"># Call an instance method; prints &quot;Hello, Fred&quot;</span></span><br><span class="line">g.greet(loud=<span class="literal">True</span>)   <span class="comment"># Call an instance method; prints &quot;HELLO, FRED!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])   <span class="comment"># Create a rank 1 array</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))            <span class="comment"># Prints &quot;&lt;class &#x27;numpy.ndarray&#x27;&gt;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.shape)            <span class="comment"># Prints &quot;(3,)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])   <span class="comment"># Prints &quot;1 2 3&quot;</span></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">5</span>                  <span class="comment"># Change an element of the array</span></span><br><span class="line"><span class="built_in">print</span>(a)                  <span class="comment"># Prints &quot;[5, 2, 3]&quot;</span></span><br><span class="line"></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])    <span class="comment"># Create a rank 2 array</span></span><br><span class="line"><span class="built_in">print</span>(b.shape)                     <span class="comment"># Prints &quot;(2, 3)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>, <span class="number">0</span>], b[<span class="number">0</span>, <span class="number">1</span>], b[<span class="number">1</span>, <span class="number">0</span>])   <span class="comment"># Prints &quot;1 2 4&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">2</span>))   <span class="comment"># Create an array of all zeros</span></span><br><span class="line"><span class="built_in">print</span>(a)              <span class="comment"># Prints &quot;[[ 0.  0.]</span></span><br><span class="line">                      <span class="comment">#          [ 0.  0.]]&quot;</span></span><br><span class="line"></span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">2</span>))    <span class="comment"># Create an array of all ones</span></span><br><span class="line"><span class="built_in">print</span>(b)              <span class="comment"># Prints &quot;[[ 1.  1.]]&quot;</span></span><br><span class="line"></span><br><span class="line">c = np.full((<span class="number">2</span>,<span class="number">2</span>), <span class="number">7</span>)  <span class="comment"># Create a constant array</span></span><br><span class="line"><span class="built_in">print</span>(c)               <span class="comment"># Prints &quot;[[ 7.  7.]</span></span><br><span class="line">                       <span class="comment">#          [ 7.  7.]]&quot;</span></span><br><span class="line"></span><br><span class="line">d = np.eye(<span class="number">2</span>)         <span class="comment"># Create a 2x2 identity matrix</span></span><br><span class="line"><span class="built_in">print</span>(d)              <span class="comment"># Prints &quot;[[ 1.  0.]</span></span><br><span class="line">                      <span class="comment">#          [ 0.  1.]]&quot;</span></span><br><span class="line"></span><br><span class="line">e = np.random.random((<span class="number">2</span>,<span class="number">2</span>))  <span class="comment"># Create an array filled with random values</span></span><br><span class="line"><span class="built_in">print</span>(e)                     <span class="comment"># Might print &quot;[[ 0.91940167  0.08143941]</span></span><br><span class="line">                             <span class="comment">#               [ 0.68744134  0.87236687]]&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the following rank 2 array with shape (3, 4)</span></span><br><span class="line"><span class="comment"># [[ 1  2  3  4]</span></span><br><span class="line"><span class="comment">#  [ 5  6  7  8]</span></span><br><span class="line"><span class="comment">#  [ 9 10 11 12]]</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use slicing to pull out the subarray consisting of the first 2 rows</span></span><br><span class="line"><span class="comment"># and columns 1 and 2; b is the following array of shape (2, 2):</span></span><br><span class="line"><span class="comment"># [[2 3]</span></span><br><span class="line"><span class="comment">#  [6 7]]</span></span><br><span class="line">b = a[:<span class="number">2</span>, <span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A slice of an array is a view into the same data, so modifying it</span></span><br><span class="line"><span class="comment"># will modify the original array.</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">1</span>])   <span class="comment"># Prints &quot;2&quot;</span></span><br><span class="line">b[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">77</span>     <span class="comment"># b[0, 0] is the same piece of data as a[0, 1]</span></span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>, <span class="number">1</span>])   <span class="comment"># Prints &quot;77&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the following rank 2 array with shape (3, 4)</span></span><br><span class="line"><span class="comment"># [[ 1  2  3  4]</span></span><br><span class="line"><span class="comment">#  [ 5  6  7  8]</span></span><br><span class="line"><span class="comment">#  [ 9 10 11 12]]</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>], [<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Two ways of accessing the data in the middle row of the array.</span></span><br><span class="line"><span class="comment"># Mixing integer indexing with slices yields an array of lower rank,</span></span><br><span class="line"><span class="comment"># while using only slices yields an array of the same rank as the</span></span><br><span class="line"><span class="comment"># original array:</span></span><br><span class="line">row_r1 = a[<span class="number">1</span>, :]    <span class="comment"># Rank 1 view of the second row of a</span></span><br><span class="line">row_r2 = a[<span class="number">1</span>:<span class="number">2</span>, :]  <span class="comment"># Rank 2 view of the second row of a</span></span><br><span class="line"><span class="built_in">print</span>(row_r1, row_r1.shape)  <span class="comment"># Prints &quot;[5 6 7 8] (4,)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(row_r2, row_r2.shape)  <span class="comment"># Prints &quot;[[5 6 7 8]] (1, 4)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can make the same distinction when accessing columns of an array:</span></span><br><span class="line">col_r1 = a[:, <span class="number">1</span>]</span><br><span class="line">col_r2 = a[:, <span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(col_r1, col_r1.shape)  <span class="comment"># Prints &quot;[ 2  6 10] (3,)&quot;</span></span><br><span class="line"><span class="built_in">print</span>(col_r2, col_r2.shape)  <span class="comment"># Prints &quot;[[ 2]</span></span><br><span class="line">                             <span class="comment">#          [ 6]</span></span><br><span class="line">                             <span class="comment">#          [10]] (3, 1)&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># An example of integer array indexing.</span></span><br><span class="line"><span class="comment"># The returned array will have shape (3,) and</span></span><br><span class="line"><span class="built_in">print</span>(a[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># Prints &quot;[1 4 5]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The above example of integer array indexing is equivalent to this:</span></span><br><span class="line"><span class="built_in">print</span>(np.array([a[<span class="number">0</span>, <span class="number">0</span>], a[<span class="number">1</span>, <span class="number">1</span>], a[<span class="number">2</span>, <span class="number">0</span>]]))  <span class="comment"># Prints &quot;[1 4 5]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When using integer array indexing, you can reuse the same</span></span><br><span class="line"><span class="comment"># element from the source array:</span></span><br><span class="line"><span class="built_in">print</span>(a[[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])  <span class="comment"># Prints &quot;[2 2]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Equivalent to the previous integer array indexing example</span></span><br><span class="line"><span class="built_in">print</span>(np.array([a[<span class="number">0</span>, <span class="number">1</span>], a[<span class="number">0</span>, <span class="number">1</span>]]))  <span class="comment"># Prints &quot;[2 2]&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a new array from which we will select elements</span></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># prints &quot;array([[ 1,  2,  3],</span></span><br><span class="line">          <span class="comment">#                [ 4,  5,  6],</span></span><br><span class="line">          <span class="comment">#                [ 7,  8,  9],</span></span><br><span class="line">          <span class="comment">#                [10, 11, 12]])&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an array of indices</span></span><br><span class="line">b = np.array([<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Select one element from each row of a using the indices in b</span></span><br><span class="line"><span class="built_in">print</span>(a[np.arange(<span class="number">4</span>), b])  <span class="comment"># Prints &quot;[ 1  6  7 11]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mutate one element from each row of a using the indices in b</span></span><br><span class="line">a[np.arange(<span class="number">4</span>), b] += <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># prints &quot;array([[11,  2,  3],</span></span><br><span class="line">          <span class="comment">#                [ 4,  5, 16],</span></span><br><span class="line">          <span class="comment">#                [17,  8,  9],</span></span><br><span class="line">          <span class="comment">#                [10, 21, 12]])</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">bool_idx = (a &gt; <span class="number">2</span>)   <span class="comment"># Find the elements of a that are bigger than 2;</span></span><br><span class="line">                     <span class="comment"># this returns a numpy array of Booleans of the same</span></span><br><span class="line">                     <span class="comment"># shape as a, where each slot of bool_idx tells</span></span><br><span class="line">                     <span class="comment"># whether that element of a is &gt; 2.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bool_idx)      <span class="comment"># Prints &quot;[[False False]</span></span><br><span class="line">                     <span class="comment">#          [ True  True]</span></span><br><span class="line">                     <span class="comment">#          [ True  True]]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We use boolean array indexing to construct a rank 1 array</span></span><br><span class="line"><span class="comment"># consisting of the elements of a corresponding to the True values</span></span><br><span class="line"><span class="comment"># of bool_idx</span></span><br><span class="line"><span class="built_in">print</span>(a[bool_idx])  <span class="comment"># Prints &quot;[3 4 5 6]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can do all of the above in a single concise statement:</span></span><br><span class="line"><span class="built_in">print</span>(a[a &gt; <span class="number">2</span>])     <span class="comment"># Prints &quot;[3 4 5 6]&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>])   <span class="comment"># Let numpy choose the datatype</span></span><br><span class="line"><span class="built_in">print</span>(x.dtype)         <span class="comment"># Prints &quot;int64&quot;</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1.0</span>, <span class="number">2.0</span>])   <span class="comment"># Let numpy choose the datatype</span></span><br><span class="line"><span class="built_in">print</span>(x.dtype)             <span class="comment"># Prints &quot;float64&quot;</span></span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>], dtype=np.int64)   <span class="comment"># Force a particular datatype</span></span><br><span class="line"><span class="built_in">print</span>(x.dtype)                         <span class="comment"># Prints &quot;int64&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]], dtype=np.float64)</span><br><span class="line">y = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elementwise sum; both produce the array</span></span><br><span class="line"><span class="comment"># [[ 6.0  8.0]</span></span><br><span class="line"><span class="comment">#  [10.0 12.0]]</span></span><br><span class="line"><span class="built_in">print</span>(x + y)</span><br><span class="line"><span class="built_in">print</span>(np.add(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elementwise difference; both produce the array</span></span><br><span class="line"><span class="comment"># [[-4.0 -4.0]</span></span><br><span class="line"><span class="comment">#  [-4.0 -4.0]]</span></span><br><span class="line"><span class="built_in">print</span>(x - y)</span><br><span class="line"><span class="built_in">print</span>(np.subtract(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elementwise product; both produce the array</span></span><br><span class="line"><span class="comment"># [[ 5.0 12.0]</span></span><br><span class="line"><span class="comment">#  [21.0 32.0]]</span></span><br><span class="line"><span class="built_in">print</span>(x * y)</span><br><span class="line"><span class="built_in">print</span>(np.multiply(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elementwise division; both produce the array</span></span><br><span class="line"><span class="comment"># [[ 0.2         0.33333333]</span></span><br><span class="line"><span class="comment">#  [ 0.42857143  0.5       ]]</span></span><br><span class="line"><span class="built_in">print</span>(x / y)</span><br><span class="line"><span class="built_in">print</span>(np.divide(x, y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Elementwise square root; produces the array</span></span><br><span class="line"><span class="comment"># [[ 1.          1.41421356]</span></span><br><span class="line"><span class="comment">#  [ 1.73205081  2.        ]]</span></span><br><span class="line"><span class="built_in">print</span>(np.sqrt(x))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">y = np.array([[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>]])</span><br><span class="line"></span><br><span class="line">v = np.array([<span class="number">9</span>,<span class="number">10</span>])</span><br><span class="line">w = np.array([<span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inner product of vectors; both produce 219</span></span><br><span class="line"><span class="built_in">print</span>(v.dot(w))</span><br><span class="line"><span class="built_in">print</span>(np.dot(v, w))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matrix / vector product; both produce the rank 1 array [29 67]</span></span><br><span class="line"><span class="built_in">print</span>(x.dot(v))</span><br><span class="line"><span class="built_in">print</span>(np.dot(x, v))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Matrix / matrix product; both produce the rank 2 array</span></span><br><span class="line"><span class="comment"># [[19 22]</span></span><br><span class="line"><span class="comment">#  [43 50]]</span></span><br><span class="line"><span class="built_in">print</span>(x.dot(y))</span><br><span class="line"><span class="built_in">print</span>(np.dot(x, y))</span><br></pre></td></tr></table></figure><h2 id="问题">问题</h2><p>遇到一个问题： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            inorder(root.left)</span><br><span class="line">            nums.append(root.val)</span><br><span class="line">            inorder(root.right)</span><br><span class="line">        </span><br><span class="line">        inorder(proot)</span><br></pre></td></tr></table></figure> 这段代码不会报错，但是如果： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cnt, ans = <span class="number">0</span>, -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inorder</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            inorder(root.left)</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt == k:</span><br><span class="line">                ans = root.val</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            inorder(root.right)</span><br></pre></td></tr></table></figure> 就会报错<code>UnboundLocalError: local variable 'cnt' referenced before assignment</code> 不太理解为啥list没事，后来<a href="https://stackoverflow.com/questions/2609518/unboundlocalerror-with-nested-function-scopes">SO</a>上的回答我大概明白了： python通过赋值操作来判断是否是局部变量，但是nums的append不是赋值，因此只要不在嵌套函数里赋值都不会报错。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A new classification algorithm recommendation method based on link prediction</title>
      <link href="/2021/01/28/A%20new%20classification%20algorithm%20recommendation%20method%20based%20on%20link%20prediction/"/>
      <url>/2021/01/28/A%20new%20classification%20algorithm%20recommendation%20method%20based%20on%20link%20prediction/</url>
      
        <content type="html"><![CDATA[<p>这篇文章主要还是在元模型上创新，采用基于链接预测的方式为新数据集推荐分类算法。基本框架如下： <img src="https://img-blog.csdnimg.cn/20210127113628615.png" alt="在这里插入图片描述" /> 用元学习做AutoML主要关注：元特征、元目标的表现形式、元模型。 ## 元特征 第一步包括提特征和识别可用算法。 目前流行的元特征有5种：</p><ul><li>statistical and information-theory based</li><li>model structure based</li><li>landmarking</li><li>problem-complexity</li><li>structural information</li></ul><p>由于每个数据集可能有不定数目的可用算法，文章采用了multiple comparison procedure：如果我们用acc作为衡量标准（除此以外本文还用了ARR作为标准，将时间因素也考虑进去），这个程序能用统计检验的方法发现一系列与最佳算法相差不显著的候选算法。文中具体使用的统计检验方法是Friedman Test+Holm procedure test，即如果Friedman Test认为所有算法性能相差不显著，那么所有的算法都是meta target；否则以表现最佳的算法为参考，用Holm procedure test去识别和最佳算法没有显著差异的算法们作为meta target。 这样就得到了元数据<span class="math inline">\(M=\{m_1,...,m_n\},m_i=&lt;x_i,y_i&gt;\)</span>，其中<span class="math inline">\(x_i=(f_{i1},...,f_{ip})\)</span>是该数据集的p个元特征，<span class="math inline">\(y_i=(a_1,...,a_q)\)</span>是q个合适的算法。 ## 元目标形式 有4种： - 单标签 - 多标签 - 连续值：预测算法的表现，回归问题 - 排序：预测算法之间的相对顺序 ## 元模型 - 分类 - 回归 - ranking</p><p>本文将问题看作多标签分类，并采用DAR图+链接预测作为分类模型。 建的是一个异构图，有数据集（元特征作为结点属性）和算法（算法名作为属性）两种结点，有d-d和d-a两种无向边，d-d边的构建通过数据集间的相似性（<strong>欧氏距离</strong>最近的k个邻居，需要将元特征标准化min-max scaling），d-a边就用每个数据集的候选算法构建。 建图的伪代码： <img src="https://img-blog.csdnimg.cn/2021012815482635.png" alt="在这里插入图片描述" /> 建好图后就可以推荐了，伪代码如下： <img src="https://img-blog.csdnimg.cn/20210128161524948.png" alt="在这里插入图片描述" /> 文章里LPMethod有3种：Katz,LRW,SRW。 综上，预测时需要的参数有：训练集<span class="math inline">\(D=\{d_1,...,d_n\}\)</span>，候选算法集<span class="math inline">\(A=\{a_1,..,a_m\}\)</span>，推荐的算法数目，每个数据集结点的邻边数目<span class="math inline">\(k\)</span>。 ## 评估 评估指标包括5个：Hamming损失、F值、acc、HitRatio、RA（推荐准确率）。 考虑DAR图的边的权重，类似概率图模型 &lt;/x_i,y_i&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Climbing Summary</title>
      <link href="/2021/01/22/Climbing%20Summary/"/>
      <url>/2021/01/22/Climbing%20Summary/</url>
      
        <content type="html"><![CDATA[<p>看完<em>Everest</em>之后，我也做着有朝一日登顶珠峰的白日梦。懒癌晚期也没爬过几座山，希望有机会挑战下雪山（嘿！又一个雄心勃勃的flag）。</p><ul><li>骊山 没什么好说的，海拔1300+，高中翻个墙就是山路，基本没有难度。</li><li>太白山 很冷，海拔3700+，6月上到峰顶还是很冷，只有下面是旅游开发区，上面一大部分路段都没有开发，只是用石头简单铺了，手机没有信号，基本没有歇脚的地，风吹得你怀疑人生。</li><li>华山 海拔2100+，夏天上去完全不用外套，注意防晒，爬起来也没啥难度，基本开发地都不错，只是很多地方非常险峻，比如鹞子翻身、大索道，听说还有完全透明的那种。 <img src="https://img-blog.csdnimg.cn/20200829222658646.png" alt="在这里插入图片描述" /> 路线很多，随你怎么走了。 我们是前一天晚上到华山北站，休息一晚，然后游客中心-&gt;北峰索道-&gt;北峰-&gt;中峰-&gt;东峰-&gt;南峰-&gt;西峰-&gt;西峰索道-&gt;游客中心，本来想走玉泉院徒步上去，但是人家关闭了，而且一天时间也不够，晚上在华山北休息了一晚，第三天早上回西安。 我觉得最刺激的有几处： 很多地方都有那种近乎于垂直的台阶，甚至有超过90度的，反正我上到一半就撤了。。 鹞子翻身：没敢玩 长空栈道：没敢去 西峰索道：下行20min，真刺激，山谷间吹个小风，索道就左右飘~</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MLE &amp; MAP</title>
      <link href="/2021/01/16/MLE%20&amp;%20MAP/"/>
      <url>/2021/01/16/MLE%20&amp;%20MAP/</url>
      
        <content type="html"><![CDATA[<p>自从贝叶斯理论诞生以后，频率学派和贝叶斯学派的争论一直没有停歇，平时的学习太注重公式计算，故在此谈谈自己对贝叶斯理论的一些认识。</p><p>频率学派认为概率是基于大量实验所得的定值（大数定理），比如抛掷一枚材质均匀的硬币10000次，出现正面的次数有4995次，反面的次数有5005次，大致认为出现正反面的概率都是50%。然而现实生活中很多事情是无法做大量实验的，比如某人得心脏病的概率是5%，显然我们无法通过多次实验来计算出这个概率值。回到硬币的例子，如果只允许你抛5次，5次的结果都是正面，那么出现正面的概率是100%了吗？显然这是存在弊端的。</p><p>再来看一个非常经典的医学上的例子：有一种很稀有的病，得病的人检测结果呈阳性的概率是0.9，没得病的人检测结果呈阴性的概率也是0.9，人们患这种病的概率是0.01。如果某人的检测结果呈阳性，那么他患这种病的概率是多少？</p><p>直观上看：患病的人检测呈阳性的概率是0.9，这个人被检测为阳性，那么有很大概率这个人是患病的。不妨试着算算：</p><p>假设用A表示检测结果为阳性，B表示患病，那么可以很轻松的计算出： <span class="math display">\[P(B|A)=\frac{P(A|B)P(B)}{P(A)}=\frac{P(A|B)P(B)}{P(A|B)P(B)+P(A|\bar B)P(\bar B)}=\frac{0.9*0.01}{0.9*0.01+0.1*0.99}=0.083 \\P(\bar B|A)=1-P(B|A)=0.917\]</span> 可以看到：即使检测结果呈阳性，患病的概率仍然只有8.3%，和我们的直观认识并不相同。</p><p>上面的计算其实就用了贝叶斯公式：后验概率<span class="math inline">\(P(B|A)\)</span>等于条件概率<span class="math inline">\(P(A|B)\)</span>（似然函数）乘以先验概率<span class="math inline">\(P(B)\)</span>，再除以一个常数因子。我们在已知先验概率的前提下，通过新的观测值<span class="math inline">\(P(A|B)\)</span>（检测结果是否阳性）来预测患病的概率。</p><p>关于常数因子<span class="math inline">\(P(A)\)</span>可以这样理解：分子<span class="math inline">\(P(A,B)\)</span>表示检测结果呈阳性并且患病的概率，那么还有一部分人<span class="math inline">\(P(A,\bar B)\)</span>检测结果呈阳性但是没有患病，<span class="math inline">\(P(A,B)+P(A,\bar B)=P(A)\)</span>，我们要求的<span class="math inline">\(P(B|A)\)</span>即检测呈阳性的人中患病的人所占的比例<span class="math inline">\(\frac{P(A,B)}{P(A)}\)</span>。</p><p>更加一般的贝叶斯公式：</p><p>如果参数<span class="math inline">\(\theta\)</span>的分布是离散的： <span class="math display">\[\pi(\theta_i|x)=\cfrac{\pi(\theta_i)f(x|\theta_i)}{\sum_{i}\pi(\theta_i)f(x|\theta_i)}\]</span> 如果参数<span class="math inline">\(\theta\)</span>的分布是连续的： <span class="math display">\[\pi(\theta|x)=\cfrac{\pi(\theta)f(x|\theta)}{\int_{\Theta}\pi(\theta)f(x|\theta)d\theta}\]</span> 后验概率密度表示在已知x的前提下关于参数<span class="math inline">\(\theta\)</span>的一个概率密度函数，即<span class="math inline">\(\theta\)</span>是一个分布，而不是一个固定的值，这是贝叶斯学派与传统学派最大的不同。</p><p>似然函数<span class="math inline">\(f(x|\theta)\)</span>可以这么理解：每个事件的背后都有一个分布，这个分布里是含有参数的，并且传统学派认为这个参数<span class="math inline">\(\theta\)</span>是固定的，我们做了大量的实验，用很多样本x就是为了求出这个参数的值，观测到的样本x是以参数<span class="math inline">\(\theta\)</span>为前提的一个分布。为了估计<span class="math inline">\(\theta\)</span>，我们用到了<strong>矩估计</strong>和<strong>极大似然估计</strong>，本质上都是一样的，我们在参数<span class="math inline">\(\theta\)</span>的前提下，从总体X中采样n个样本，用样本的性质来大致替代总体的参数<span class="math inline">\(\theta\)</span>。具体到极大似然：通过找到使似然函数<span class="math inline">\(\prod_{i=1}^{n}f(x_i|\theta)\)</span>最大的参数当作<span class="math inline">\(\theta\)</span>，其实就是选择一个<span class="math inline">\(\theta\)</span>使得样本出现的概率最大，本质上仍然是在拟合样本数据。</p><p>从上面的分析可以看出：我们的未知参数<span class="math inline">\(\theta\)</span>是从样本中计算得到的，必然和总体中原本的参数值存在误差，并且只能求得一个固定的参数值。贝叶斯理论认为：参数<span class="math inline">\(\theta\)</span>不应该是一个单独的值，更加合理的解释应该是参数<span class="math inline">\(\theta\)</span>有很多取值，并且每个取值都有相应的概率，即参数是服从某种分布的。概率最大的那个参数值即<strong>最大后验估计</strong>，参数取值的中位数即<strong>后验中位数估计</strong>，参数取值的均值即<strong>后验期望估计</strong>。为什么仍然叫估计呢？因为我们的后验分布是从似然计算得到的，我们无法采样所有的总体中的样本，所以也就无法计算出参数<span class="math inline">\(\theta\)</span>的精确分布。</p><p>最后来看看先验分布<span class="math inline">\(\pi(\theta)\)</span>，即在获得实验观测值之前对未知参数分布的一个主观认识，这也是贝叶斯学派一直被攻击的一点，客观的统计学中竟然引入了主观的因素！比如对于材质均匀的硬币，在抛掷之前，我们脑海中就会认为出现正反面的概率各是0.5。</p><p>但是很多时候先验分布是很难获得的，如果硬币材质不均匀，我们的先验又应当是什么分布呢？此时就引入了课程上讲的<strong>无信息先验</strong>，当我们对事件没有了解的时候，认为参数所有取值的概率都是相等的，在硬币实验中，我们认为<span class="math inline">\(\theta\)</span>是服从(0,1)的均匀分布。接着我们来做实验，看看后验分布会怎么变化（图源：Cameron Davidson-Pilon, Probabilistic Programming and Bayesian Methods for Hackers, 2016）：</p><figure><img src="https://img-blog.csdnimg.cn/img_convert/11e883581dd48f9c8442b8273371766d.png" alt="img" /><figcaption>img</figcaption></figure><figure><img src="https://img-blog.csdnimg.cn/img_convert/3110af9ecffd601bb7acd89d86ad9784.png" alt="img" /><figcaption>img</figcaption></figure><p>从图中可以看出：起初是均匀分布，连续抛掷了2次正面，此时认为该硬币正面向上的概率为1的可能性是最大的，但注意：正面向上的概率取0.6,0.4的可能也不是没有，不过这种可能性更小罢了。如果我们用极大似然去估计，就会得到该硬币正面向上的概率是1，正面向上的概率取0.6,0.4的可能为0，这显然与现实不符！接着抛了一次反面，正面向上的概率分布又进行了修正，不断通过观测值修正我们的后验，最终得到一个稳定的后验分布。</p><p>均匀分布<span class="math inline">\(U(a,b)\)</span>作为先验看起来很好用，但是他本质上还是有倾向性的，即认为在区间(a,b)内是有取值的，在区间外是没有取值的可能的，更加合理的无信息先验可以选取一个大方差的高斯分布。</p><p>选择高斯分布作为先验带来的一个问题是计算上的复杂性骤然提高，所以引入了<strong>共轭先验分布</strong>：即后验分布<span class="math inline">\(\pi(\theta|x)\)</span>与先验分布<span class="math inline">\(\pi(\theta)\)</span>是同一种类型的分布，就称先验分布<span class="math inline">\(\pi(\theta)\)</span>是<span class="math inline">\(f(x|\theta)\)</span>的共轭先验分布。这样我们在计算后验分布时，就无需计算复杂的积分，只要调整先验分布的参数即可确定后验分布。可以证明：<span class="math inline">\(\beta\)</span>分布是二项分布<span class="math inline">\(B(n,p)\)</span>中参数<span class="math inline">\(p\)</span>的共轭先验分布。即如果总体<span class="math inline">\(X|\theta\sim B(N,\theta)\)</span>，从中采样n个样本，样本分布即似然函数<span class="math inline">\(f(x|\theta)\)</span>服从<span class="math inline">\(\beta\)</span>分布，假设先验<span class="math inline">\(\theta\sim\beta(a,b)\)</span>，那么后验分布<span class="math inline">\(\theta|x\sim\beta(a+\sum x_i,b+nN-\sum x_i)\)</span>。</p><p>证明： 总体<span class="math inline">\(X|\theta\sim B(N,\theta)\)</span>，先验<span class="math inline">\(\theta\sim\beta(a,b)\)</span>，<span class="math inline">\(X=(X_1,...,X_n)^T\)</span>是来自总体的n个样本，则样本分布为： <span class="math display">\[p(x|\theta)=L(\theta)=\prod_{i=1}^{n}\tbinom{N}{x_i}\theta^{x_i}(1-\theta)^{N-x_i}\propto\theta^{\sum_{i=1}^{n}x_i}(1-\theta)^{nN-\sum_{i=1}^{n}x_i}\]</span> 可以看到：似然函数<span class="math inline">\(L(\theta)\)</span>具有<span class="math inline">\(\beta\)</span>分布的核，先验的核为<span class="math inline">\(\theta^{a-1}(1-\theta)^{b-1}\)</span>，所以后验为： <span class="math display">\[\pi(\theta|x)\propto\theta^{a-1+\sum_{i=1}^{n}x_i}(1-\theta)^{b-1+nN-\sum_{i=1}^{n}x_i},0&lt;\theta&lt;1\]</span> 显然后验分布的核与<span class="math inline">\(\beta\)</span>分布的核是同种类型，即<span class="math inline">\(\theta|x\sim\beta(a+\sum x_i,b+nN-\sum x_i)\)</span>，所以<span class="math inline">\(\beta\)</span>分布是二项分布<span class="math inline">\(B(n,p)\)</span>中参数<span class="math inline">\(p\)</span>的共轭先验分布。</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Probability &amp; Statistics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率统计基础</title>
      <link href="/2021/01/11/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/01/11/%E6%A6%82%E7%8E%87%E7%BB%9F%E8%AE%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>联合概率<span class="math inline">\(P(A,B)\)</span>即两个事件同时发生的概率 条件概率（后验概率）<span class="math inline">\(P(A|B)P(B)=P(B|A)P(A)\)</span> 全概率公式 <span class="math display">\[P(A)=\sum_nP(A,B_n)=\sum_nP(A|B_n)P(B_n)\]</span> 贝叶斯定理： <span class="math display">\[P(A|B)=\frac{P(B|A)P(A)}{P(B)}\]</span> <span class="math inline">\(A\)</span>的后验概率等于标准相似度乘以先验概率</p><p>离散型随机变量概率分布（分布律）： |<span class="math inline">\(X\)</span>| <span class="math inline">\(x_1\)</span>|...|<span class="math inline">\(x_i\)</span>|... |--|--|--|--|--| | <span class="math inline">\(P\)</span>| <span class="math inline">\(p_1\)</span>|...|<span class="math inline">\(p_i\)</span>|... 满足<span class="math inline">\(p_i\geq0, \sum_{i=1}^{\infty}p_i=1\)</span></p><p>0-1分布：<span class="math inline">\(X\sim B(1,p)\)</span> |<span class="math inline">\(X\)</span>| 0|1| |--|--|-- |<span class="math inline">\(P\)</span>|<span class="math inline">\(1-p\)</span>|<span class="math inline">\(p\)</span>| <span class="math display">\[P(X=k)=p^k(1-p)^{1-k},k=0,1\]</span></p><p>二项分布：<span class="math inline">\(X\sim B(n,p)\)</span> <span class="math inline">\(n\)</span>重伯努利试验 <span class="math display">\[P(X=k)=C_n^kp^k(1-p)^{n-k},k=0,1,...,n\]</span></p><p>Poisson分布：<span class="math inline">\(X\sim P(\lambda)\)</span> <span class="math display">\[P(X=k)=\frac{\lambda^ke^{-\lambda}}{k!},k=0,1,...,n,\lambda&gt;0\]</span> <span class="math inline">\(E(X)=\lambda,D(X)=\lambda\)</span> 可以证明：Poisson分布是二项分布在<span class="math inline">\(\lambda=np,n\to\infty\)</span>的极限分布。</p><p>连续型随机变量概率分布函数：<span class="math inline">\(F(x)=\int_{-\infty}^{x}f(t)dt\)</span>，<span class="math inline">\(f(x)\)</span>称为概率密度函数。 均匀分布：<span class="math inline">\(X\sim U(a,b)\)</span> <span class="math display">\[f(x)=\begin{cases}\cfrac{1}{b-a}, &amp;x\in(a,b)\\0, &amp;其它\end{cases}\]</span> 指数分布：<span class="math inline">\(X\sim E(\lambda)\)</span> <span class="math display">\[f(x)=\begin{cases}\lambda e^{-\lambda x}, &amp;x&gt;0\\0, &amp;x\leq0\end{cases}\]</span> 正态分布（高斯分布）：<span class="math inline">\(X\sim N(\mu,\sigma^2)\)</span> <span class="math display">\[f(x)=\cfrac{1}{\sigma \sqrt{2\pi}}e^{-\cfrac{(x-\mu)^2}{2\sigma^2}}\]</span> <span class="math inline">\(\mu\)</span>是位置参数，决定对称轴位置；<span class="math inline">\(\sigma\)</span>是尺度参数，决定分布的幅度。 标准正态分布<span class="math inline">\(X\sim N(0,1)\)</span></p><p>数学期望： 离散型：<span class="math inline">\(E(X)=\sum_ip_ix_i\)</span> 连续型：<span class="math inline">\(E(X)=\int_{-\infty}^{+\infty}xf(x)dx\)</span></p><p>方差：随机变量的离散程度，距离期望的距离 <span class="math inline">\(D(X)=E[(X-E(X))^2]=E(X^2)-E(X)^2\)</span> <span class="math display">\[D(X)=\cfrac{1}{N}\sum_{i=1}^{N}(x_i-\mu)^2=\cfrac{1}{N}(\sum_{i=1}^{N}x_i^2-N\mu^2)\]</span> 离散型：<span class="math display">\[D(X)=\sum_{i=1}^{\infty}[x_i-E(X)]^2p_i\]</span> 连续型：<span class="math display">\[D(X)=\int_{-\infty}^{+\infty}[x-E(X)]^2f(x)dx\]</span></p><p>标准差（均方差）是方差的算术平方根</p><p>样本标准差： <span class="math display">\[s=\sqrt{\cfrac{1}{n-1}\sum_{i=1}^{n}(x_i-\bar x)^2}\]</span> 对于二维随机变量，协方差用来描述<span class="math inline">\(X\)</span>与<span class="math inline">\(Y\)</span>之间的相互关系： <span class="math display">\[Cov(X,Y)=E\{[X-E(x)][Y-E(Y)]\}\]</span></p><p>相关系数： <span class="math display">\[\rho_{XY}=\cfrac{Cov(X,Y)}{\sqrt{D(X)D(Y)}}\]</span></p><p>de Movire-Laplace中心极限定理： <span class="math inline">\(n_A\)</span>为<span class="math inline">\(n\)</span>重伯努利试验中<span class="math inline">\(A\)</span>发生的次数，<span class="math inline">\(P(A)=p\)</span>，对任意实数<span class="math inline">\(x\)</span>，有： <span class="math display">\[\lim\limits_{n\to+\infty}P(\cfrac{n_A-np}{\sqrt{np(1-p)}}\leq x)=\int_{-\infty}^{x}\cfrac{1}{\sqrt{2\pi}}e^{-\frac{t^2}{2}}dt=\Phi(x)\]</span> <span class="math inline">\(n\)</span>充分大时，<span class="math inline">\(n_A\sim N(np,np(1-p))\)</span>，故： <span class="math display">\[P(a&lt;n_a\leq \]</span>=&quot;&quot; <span class="math inline">\(n\)</span>充分大时，<span class="math inline">\(\sum_{i=&quot;1}^{n}X_i\sim&quot; \cfrac{\sqrt{n}(\bar=&quot;&quot; \lim\limits_{n\to+\infty}p(|\cfrac{n_x}{n}-p|&lt;\epsilon)=&quot;1&quot; b)\approx\phi(\cfrac{b-n\mu}{\sqrt{n}\sigma})-\phi(\cfrac{a-n\mu}{\sqrt{n}\sigma})=&quot;&quot; b)\approx\phi(\cfrac{b-np}{\sqrt{np(1-p)}})-\phi(\cfrac{a-np}{\sqrt{np(1-p)}})=&quot;&quot; n(0,1)=&quot;&quot; n(0,1)\)</span>，即：=&quot;&quot; n(0,1)<span class="math inline">\(，故：=&quot;&quot; n(n\mu,n\sigma^2)\)</span>，<span class="math inline">\(y_n\sim=&quot;&quot; p(a&lt;\sum_{i=&quot;1}^{n}X_i\leq&quot; x-\mu)}{\sigma}\sim=&quot;&quot; y_n=&quot;\cfrac{\sum_{i=1}^{n}X_i-n\mu}{\sqrt{n}\sigma}&quot; 中心极限定理表明：任意的一个概率分布中生成的随机变量，其序列和统一地归约到正态分布：\)</span>y_n=&quot;&quot; 伯努利大数定律：事件<span class="math inline">\(x\)</span>在每次试验中发生概率是<span class="math inline">\(p\)</span>，<span class="math inline">\(n\)</span>次独立重复试验中，<span class="math inline">\(x\)</span>发生的次数为<span class="math inline">\(n_x\)</span>，则：=&quot;&quot; 即事件的发生频率依概率收敛于事件的概率。=&quot;&quot; 独立同分布中心极限定理：=&quot;&quot; 辛钦大数定律：<span class="math inline">\(x_i\)</span>为独立同分布的随机变量序列，且期望<span class="math inline">\(\mu\)</span>存在，则对<span class="math inline">\(\forall\epsilon=&quot;&quot; 随机变量\)</span>x_1,x_2,...,x_n,...<span class="math inline">\(独立同分布，\)</span>e(x_i)=&quot;,D(X_i)=^2<span class="math inline">\(，前\)</span>n<span class="math inline">\(个变量和的标准化变量为：&quot;&gt;0\)</span>，有： <span class="math display">\[\lim\limits_{n\to+\infty}P(|\cfrac{1}{n}\sum_{i=1}^{n}X_i-\mu|\geq\epsilon)=0\]</span></p><p>正太分布熵的大小，取决于方差的大小。&lt;/n_a&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>逼乎摘选</title>
      <link href="/2020/12/31/%E9%80%BC%E4%B9%8E%E6%91%98%E9%80%89/"/>
      <url>/2020/12/31/%E9%80%BC%E4%B9%8E%E6%91%98%E9%80%89/</url>
      
        <content type="html"><![CDATA[<p><font size="2"><em>早已决定退乎，将一些曾经的收藏稍加整理摘录于此，均已注明出处，侵删</em></font> ## <a href="https://www.zhihu.com/question/374401049/answer/1055275763">多任务下如何保持高效率</a> 第一件事情，是想一想什么事情是自己应该做的，什么是要推给别人的，什么是要找人讨论再做，什么需要等一阵子的。这个是战略问题，比任何战术上的技巧都管用。多任务完成得再快，做自己不应该做或者不需要做的事情，只会累死累活还没什么用。</p><p>随时想着如果不玩这局棋了，把棋盘掀翻重来会是什么结果？也许会有更好的解法。</p><p>在这之后，再讨论战术。以下是一些应付多任务的具体方案： 1. 每做一个任务要百分百集中（比如说现在在写这个答案的时候，就不要写一半刷手机了）。 2. 每个任务最好持续一段时间（我的经验是最少15分钟），切去一个需要一定脑力的任务，做5分钟再切回来基本上没有成功的例子。10分钟的任务除非在做之前有非常清楚的规划，不然要不什么事都没做成（比如说还在手忙地找浏览器里的相关标签页），要不因为专注而超时。 3. 每个任务有非常明确的完成指标。比如说某个任务是代码能跑起来，文章的introduction看完，或是审完一篇论文并且写出评审建议。不完成不要停手。如果实在得要暂停（比如说得去开会），记得把完成指标再分得更细一些。 4. 难的和简单的任务可以错开做。做完难的需要休息可以做些简单但不得不做的，做完简单的可以再切回难的（这样有挑战性）。如果发现自己并不需要休息就迫不及待地去做下一个任务了，说明任务安排得好。 5. 不要安排得太满，不要要求每天都一定要全部完成。总会有完不成的事项。我觉得我每天订的TODO list总有一两个没完成，然后就会发现，有些其实并不重要，有些其实挺重要但下意识逃避了，下次就要把它们拿出来第一个做完。 6. 经常锻炼，充足睡眠，合理膳食，才能保持充沛精力。偶尔熬夜也许确实活多，但天天熬夜，就说明战略上有大问题了，身体不是这么玩的。 ## <a href="https://www.zhihu.com/question/27032313/answer/315544084">应届生是选择一个公司，还是选择一个行业</a> 人生的幸福，我的感觉来自自律，独立思考能力，控制住自己的欲望，保持对新事物的敏感度和参与度。</p><p>比选择行业更重要的是一个人独立思考能力，自己纠错，自己拯救自己的能力。</p><p>我混到今天一直在自己做决策，从大学填写志愿，到跳槽，找工作，做生意，都从来不问别人，都是自己研究琢磨。我也有问人的时候，但是我从来不问人生该怎么选择，我只问具体的技术性问题。</p><p>保持对物欲的控制，管理好自己，培养良好的习惯，我们可以摆脱很多不必要的麻烦。 ## <a href="https://www.zhihu.com/question/24917544/answer/154775610">你生命中最艰难、痛苦的一段时间是如何度过的</a> 对于我来说，从来没有觉得有什么最艰难和痛苦的日子。人生本来就是一场旅行，能够和爱的人在一起度过，又何必在意旅途的风景是什么风格。也许，这场旅途对于我来说，只是可能比父母和孩子早下车几站而已。</p><p>当你用心拼尽全力过好每一天，会发现早死晚死都是一种平淡无奇的结果，艰难困苦只是自己给自己懦弱和懒惰的开脱词。祝尚有余生的各位安好。 ## <a href="https://www.zhihu.com/question/29956916/answer/311913864">活着不开心怎么办</a> 如何减少不开心？一是别瞎去比较，人确实都有损失厌恶，但你如果不主动去做一些无谓的比较，就能让自己舒服很多；另一个是别瞎揣摩别人，别因为不理解别人，而给自己制造不必要的不快。</p><p>说完这两点还没完，因为它俩都属于“别做什么”，还要再聊一点“要做什么”。</p><p>要自在如风，要在不违反法律、不伤风败俗的前提下去尽情享受生活，享受自由。</p><p>我以前觉得那些走在马路上唱着歌还唱得不好听的人特别蠢，可是人家一点都不蠢，他唱歌的样子就能证明他很快乐。</p><p>那些跳广场舞的大妈，人家是真的开心，在跳舞的过程中，她们是心情愉悦的，不然谁会每天都准点跑去跳啊。</p><p>咱们也得好好对待自己，别老那么在意别人的目光，人家路人其实压根就不在意你。 ## <a href="https://www.zhihu.com/question/278108330/answer/400776080">如何看待论调「所谓稳定不过是在浪费生命」</a> 纸醉金迷可能会有一时之爽，但午夜梦回，浮现在眼前的是孩提时代的无忧无虑，还是高档场所的推杯换盏，真不一定。</p><p>内心的平安才是真正的平安。</p><p>人活着，要常常问自己，到底想要什么。不要总跟别人比较，不要过于苛求自己。和自己相识，和自己和解。</p><p>盗用头文字D的一句台词，这世界上只有一种成功，就是能够用自己喜欢的方式度过一生，这才是成功最返璞归真的定义。 ## <a href="https://www.zhihu.com/question/33220674/answer/58248246">我们是怎样一步步地走向平庸的</a> 认为我这么一个大好人才，却被投闲置散，落至今时今日这样的田地。</p><p>也试过自怨自艾，认为自己不知不觉间变成了一个废人。</p><p>直到这个时候，我才知道，我之所以觉得亲朋好友们的夸赞大惊小怪，其实是因为在我心底，我一直以为自己本来就应该是个天之骄子。</p><p>一路以来走得太过顺畅，我以为自己并不高傲自大，其实这种高傲自大已经深入骨髓，我根本没有机会察觉。</p><p>及至看到周围那些，曾经和我一个水平，甚至不如我的人，踏踏实实地走每一步，一步一步地抛离我，我才慢慢意识到，我并不是什么天之骄子，我只是一个平平凡凡的人。</p><p>接受自己是一个庸人这个过程非常痛苦。我每天都在剧烈的内心煎熬中。</p><p>一时劝说自己，生来便是庸人，坦然接受便是。一时又斗志激昂，只要努力，我便能回到原来天之骄子的位置上。</p><p>食不能安，夜不能寐。精神的压力直接导致身体的衰弱，一度卧病在床。</p><p>每个人都理所当然地演绎着自己的每一日。</p><p>相比之下，我国内的朋友，最近一个个结婚生子，安居乐业。我的妹妹，看起来学历能力一切不如我，却兢兢业业安安稳稳地工作着，闲时与朋友吃吃烧烤喝喝啤酒，上瑜伽班，学画画，日子过得不亦乐乎。</p><p>你说这样是平庸吗？然而她却觉得幸福无比。我拿着两个名校的学位又一次进入了名企，努力了那么久，曾经我以为我也算一直在进步，最后也不过是朝九晚五地工作。</p><p>而此时此刻，我只想回到家人的身边，过那带着油烟味的乏味无奇的日子。</p><p>我想，大千世界，谁人不平庸谁人平庸，一切不过是心魔。努力上进也好，安稳度日也好，若是不幸福不快乐，又有何用。 ## <a href="https://www.zhihu.com/question/20004337/answer/18961389">大学毕业之后，同学之间慢慢拉开了差距，还有必要参加老同学聚会吗</a> 唯有真正的好朋友，你过得好，他们反倒会问候你，这样累不累，不累就好；你过得不好，他们也会真心体贴你：「没关系，加油，做你自己想做的事，兄弟帮不到你，但你不开心的时候，可以找兄弟出来喝喝酒、吃吃饭、唱唱歌，哥儿几个陪你。」</p><p>当朋友之间不用显示优越感时，就能好好聊天了。 ## <a href="https://www.zhihu.com/question/20657503/answer/28028792">如何让自己变得开心起来</a> 不要和他人比较。我在精神病院工作，我可以直截了当的告诉你：太多看上去成功和开心的人被自己内心的骚动活活折磨疯了。所以，只要专注自己就好。</p><p>参与社交。即使你是一个内向的人，也要强迫自己去进入社交环节，这会给你和人结识、建立联系的机会。这些联系会使你和你的人性连接在一起。</p><p>做有关健康的决策。运动和好的饮食会改变你的世界观，这是很神奇的。你脑中看起来很真实很迫切的消极想法会消失的。</p><p>做不一样的事情。不要再浪费时间试图找到“完美的爱好”了。学习一点新的，无论是纤维艺术还是品尝咖啡。找到一件你可以投入精力的东西，自己能够胜任，然后等待结果。</p><p>和转折点保持联系。当我们长大的时候我们就慢慢失去了那些转折点。试着在任何一个你觉得亲切的群体里更好的安置自己，无论那个群体是你的家庭，你的邻居，你的文明，或是你的种族。</p><p>少往前看，少往后看。试着更多关注现在的自己。开始建立回忆而不是活在回忆里。开始创造你的未来而不是期待更好的未来。如果你不这样做，你的生活就会成为一片雾，横跨你的整个人生。（在某个阶段做事时候，不要总想着下一阶段，专注于现在。）</p><p>创造。在旅行中书写，或者画点什么。写一首歌，即使你从未演奏它。当你走的时候，开始改变你遗留下来的纪念品。</p><p>放手。原谅那些伤害你的人。我很遗憾你受到了伤害。但是如果你不将那些伤痛留在过去，它就会像狼一样跟着你——当你做任何事情的时候，它永远扮演着一个危险的影子。</p><p>更多的为他人担心。很多时候是我们的自恋毁了我们。这听上去很反直觉，但是每天花些时间想想你生活中人们的需求。帮助他们实现一些需求会使你更加开心，这个你现在可能不会理解。</p><p>停止奔跑。其实没有一个地方是“在远处”的。你想旅行多远就多远，但是当你到达那里的时候，你将始终发现你在等待着自己。拔出你的剑。是时候回头和你心中的巨龙搏斗了。 ## <a href="https://www.zhihu.com/question/24047876/answer/37943380">关于高考，你印象最深的是什么</a> 高考前的人生轻薄如纸，越往后走，生活才越显出复杂与沉重的本来面目。</p><p>我希望各位能在高考中取得好成绩，但我更希望，当你们背负着越来越沉重的人生往前走时，依然不会失去感受幸福的能力。</p><p>从知道得病至今我一直坦然和平静，我总是想，人不能只允许自己遇到好事，不允许自己遇到坏事。当不顺或困境找到我时，我会反问自己：为什么不可以是我？于是就能平静地去面对。 ## <a href="https://www.zhihu.com/question/23606484/answer/25156325">这样的努力真的有意义吗</a> 强者懂得，不管喜欢与否，现有的事情要做得漂亮。才有资格在人生方向确定时，发现自己已经有充分的积累，实现他们的梦想。</p><p>不管你是什么level的，永远有无数的人跟你同一个level，而你只要不断努力，就能超过这些本来跟你同level的人。 ## <a href="https://www.zhihu.com/question/19627497/answer/15875565">你是如何变得不浮躁的</a> 浮躁是因为急于求成而产生的一种不安的心理。心中总是想着做更多的事情，更快的获得成功，更快的抵达自己的目标，使我们忘记了，我们是为什么去做一件事情。</p><p>做一件事的最重要的是求的心灵的安宁。当我们充满激情的想做完成一件作品时，我们的心不是安宁的。一直到作品呈现出，它应该有的形式，我们心灵才获得了安宁，才获得了喜悦。</p><p>然而当你想着赶快做完一件事的时候，就说明你不再关心此事，而是想着下一件事，你匆匆忙忙的应付了眼前的事，然后又赶紧开始下一件事，你的心没有得到过安宁。前面事情又做的不够好，你会更不安，更浮躁。戒浮躁就要做好当下的事，投入你的热忱，直到做好它，那时你的心才得到安宁。</p><p>高僧把扫地也当成他生活的一部分，他沉浸于扫地这个过程，直到把地扫干净，他获得了心灵的安宁，这种安宁对他来说比任何东西都重要。他过得是一种沉浸式的生活。而心浮气躁的人总是过着肤浅的生活。</p><p>放慢自己做事情的速度，投入自己的热忱。不要着急地去做一件事情，先端正自己的态度，寻找做此事的热忱。</p><p>冥想，静坐，都是不错的训练方法。 ## <a href="https://www.zhihu.com/question/34970791/answer/63071829">能否用一百字写清楚你最想要的生活</a> 冬。 大雪。 小火炉。 热巧克力。 温暖的沙发。 脚边打滚的猫。 阳台上赏雪的狗。 笼子里好动的仓鼠。 靠在我肩上瞌睡的你。 水瓶里开得正盛的鲜花。 爸妈刚打来一个电话。 你们有空回来喝茶。 我给你盖上被子。 没想吵醒你啦。 你揉了揉眼。 一起睡吧。 那好吧。 讨厌！ 哈。 ## <a href="https://www.zhihu.com/question/28639137/answer/374782107">如何做一个让人眼前一亮的 presentation</a> 当然，不同场合需要不同的风格，但是整体流程一定要像讲故事一样，大致有3步： 1. 一个看似平静的现状 不超过10%时间，用一个小故事开场引出问题，接着要改造，团队应运而生，我是xx团队的xxx，团队致力于xxx，最主要的feature是xxx 2. 遇到困难，甚至已经不行了 对比，幽默、数据展示、逻辑说明（乔布斯） 经典采访音频、震撼的图片 大图片+小文字 大数字+小文字 3. 凭借聪明才智翻转，最终战胜困难 勾画出一个美好的愿景</p><p>下来就是看一些经典的发布会，加强练习。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Performance Measurement</title>
      <link href="/2020/12/20/Performance%20Measurement/"/>
      <url>/2020/12/20/Performance%20Measurement/</url>
      
        <content type="html"><![CDATA[<p>程序性能的衡量一般有2种方式：Benchmarking和Profiling。 ## Benchmarking Benchmarking通过绝对运行时间来比较程序的整体性能，例如给定一组同样的输入，比较不同版本的程序在同样硬件环境下的运行时间，或者比较相同版本程序在不同硬件环境下的运行时间。 ## Profiling Profiling通常用来识别程序的耗时瓶颈（通常是一些函数），优化这些瓶颈后再去做Benchmarking评估整体性能。 Unix系统提供了GPROF工具，CSAPP上有一个示例：</p><ul><li>编译：<code>gcc -Og -pg prog.c -o prog</code> <code>-Og</code>表示关闭了很多编译器的优化开关，并且优化了调试信息；<code>-pg</code>表示产生供GPROF剖析用的可执行文件。</li><li>执行：<code>./prog file.txt</code> 会比正常执行要慢一些（慢一倍左右），生成待分析的文件<code>gmon.out</code>。</li><li>分析：<code>gprof prog</code> 结果通常有2部分。 第一部分是不同函数的耗时情况： <img src="https://img-blog.csdnimg.cn/20201012215440170.png#pic_center" alt="在这里插入图片描述" /> 第4列显示了该函数被调用了多少次（不含递归调用），库函数一般不显示在列表中，但是可以通过wrapper function去显示它的执行情况。 第二部分是函数的调用情况，以递归函数<code>find_ele_rec</code>为例： <img src="https://img-blog.csdnimg.cn/20201012220111993.png" alt="在这里插入图片描述" /> 前2行显示了调用该函数的情况：自己递归调用了158555725次，被<code>insert_string</code>调用了965027次，<code>insert_string</code>自己递归调用了965027次；后几行显示了<code>find_ele_rec</code>调用其他函数的情况。</li></ul><p>由于GPROF采用的是interval counting，所以计时可能不太精确，尤其对于运行时间小于1s的程序误差更大。 如何使用Profiling去优化程序，CSAPP上给了一个非常精彩的例子，这里不再赘述。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Quarterly Review</title>
      <link href="/2020/12/10/Quarterly%20Review/"/>
      <url>/2020/12/10/Quarterly%20Review/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="fd76465805cca9bca2fa8fac963fc3e855277383269a210871d160485338d6b0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Malloc Lab</title>
      <link href="/2020/11/28/Malloc%20Lab/"/>
      <url>/2020/11/28/Malloc%20Lab/</url>
      
        <content type="html"><![CDATA[<h2 id="basic-info">Basic Info</h2><p>这是CMU 15-213的Malloc Lab，本来没打算做，被同学安利了一波~需要用C语言实现一个动态内存分配器（Dynamic Storage Allocator），类似于<code>libc</code>中的<code>malloc/free/realloc</code>，整体来看难度较大。</p><p>开始没什么思路，看了下CSAPP动态内存分配那一节，内存的划分是这样子的： <img src="https://img-blog.csdnimg.cn/2020101116464245.png" alt="在这里插入图片描述" style="zoom:80%;" /> 程序动态申请的内存主要是Heap段，Allocator将堆视作不同size的块，Allocator有2种：</p><ul><li>Explicit Allocators：需要应用程序手动释放申请的内存块，<code>malloc/free</code></li><li>Implicit Allocators：就是garbage collectors</li></ul><p><code>malloc</code>返回的对齐地址取决于编译环境，32位是8的倍数，64位是16的倍数；<code>malloc</code>不会初始化申请的内存，<code>calloc</code>会初始化内存为0。 堆的增长是通过增加内核的<code>brk</code>指针来增加/减小堆： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">sbrk</span><span class="params">(<span class="keyword">intptr_t</span> incr)</span></span>;  <span class="comment">// success: old brk pointer; error: -1</span></span><br></pre></td></tr></table></figure> 如果<code>free</code>的是一个非法指针，那么结果未定义。</p><p>主要实现在<code>mm.c</code>中，有4个主要函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mm_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mm_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p><code>mm_init</code>负责初始化，比如分配初始的堆空间，成功返回0，失败返回-1；<code>mm_malloc</code>负责分配指定大小的空间，但是这个空间必须在已经初始化的堆里，不能与其他空间冲突；返回的指针按照8B对齐，与<code>libc</code>中实现的<code>malloc</code>类似，最后会有一个PK； <code>mm_realloc</code>负责：</p><ul><li><code>ptr</code>为<code>NULL</code>，等价于<code>void *mm_malloc(size)</code></li><li>size=0，等价于<code>mm_free(ptr)</code></li><li>如果<code>ptr</code>不为<code>NULL</code>，把<code>ptr</code>所指的内存块增加/减小到<code>size</code>个字节，返回新地址（可能与原来的块相同，也可能不同，取决于实现方式、原块里内碎片的数量以及请求<code>size</code>的大小），保持原块的内容不变（如果申请变大，剩下的空间是未初始化的；如果申请变小，那么只保留<code>size</code>大小的原块内容）</li></ul><p><code>memlib.c</code>为我们的分配器模拟了内存系统，可以调用里面的一些函数：</p><p><code>void *mem_sbrk(int incr)</code>: 将堆扩展<code>incr</code>B，参数是正整数，返回新分配的内存首地址；</p><p><code>void *mem_heap_lo(void)</code>: 返回堆的首地址；</p><p><code>void *mem_heap_hi(void)</code>: 返回堆的最后一个字节的地址；</p><p><code>size_t mem_heapsize(void)</code>: 返回当前堆的大小；</p><p><code>size_t mem_pagesize(void)</code>: 返回系统页面大小。</p><h2 id="implementation">Implementation</h2><p>首先明确设计约束条件：</p><ul><li>可以处理任意的请求释放序列</li><li>请求需要被立即响应</li><li>内存对齐要求</li><li>不能修改已经分配的内存块</li></ul><p>再明确设计目标：</p><ul><li>最大化吞吐量</li><li>最大化内存利用率</li></ul><p>吞吐量最大化：单位时间处理的请求，分配复杂度<span class="math inline">\(O(n)\)</span>，n是空闲块的数目，释放复杂度<span class="math inline">\(O(1)\)</span>；</p><p>内存利用率最大化：用peak utilization衡量，假设有<span class="math inline">\(n\)</span>个请求：<span class="math inline">\(R_0, R_1, ... R_k, ..., R_{n-1}\)</span>，在<span class="math inline">\(R_k\)</span>完成后，将aggregate payload(申请的字节总数)记作<span class="math inline">\(P_k\)</span>，当前的堆的大小记作<span class="math inline">\(H_k\)</span>(单调不减)，单调不减的条件可以通过使<span class="math inline">\(H_k\)</span>为high-water mark来松弛，这样堆就可以上下都增长。那么peak utilization为： <span class="math display">\[U_k=\frac{max_{i\leq k}P_i}{H_k}\]</span> 我们的目标是最大化<span class="math inline">\(U_{n-1}\)</span>。</p><p>这两目标是需要trade-off的，吞吐量越大，意味着需要减小操作的时间，往往就不能花费时间去处理碎片；内存利用率越大，意味着要精心处理分配和回收的块，自然需要更多的时间。</p><p>具体来说，有以下几点： <img src="https://img-blog.csdnimg.cn/20201023215211206.png" alt="在这里插入图片描述" /> 这些关键细节的设计非常重要，再BB一次：程序架构、数据结构和接口设计是一门艺术！</p><ul><li><code>free</code>只给一个指针，怎么知道要释放多少空间：记录每一块的大小；</li><li>空闲块的组织管理：隐式链表、显式链表（双向链表）（存储指针域开销太大）、Segregated Free Lists、将空闲块始终按大小排序；</li><li>Placement: 有多个满足要求的空闲块，如何选择以放置新的申请：First Fit, Next Fit, Best Fit</li><li>Splitting: 在一个空闲块放置申请后如何处理剩余的空闲空间。可以直接将整个空闲块分配出去，也可以将剩余的空闲空间重新利用；</li><li>无法找到合适的满足请求的块：做空闲块合并后再次检查是否可以满足；用<code>sbrk</code>向内核申请更多的内存，插入空闲链表；</li><li><strong>空闲块合并</strong>：需要考虑何时合并：立即合并（可能引发抖动）、延迟合并（申请失败时合并整个堆里所有的空闲块）；合并后面的块很容易，但是要高效合并前面的空闲块，需要用双向的Boundary Tag(可以优化以减少空间开销)；</li></ul><p>不仅需要记录每块的大小，还需要区分已分配块和空闲块，所以block的格式可以设计如下： <img src="https://img-blog.csdnimg.cn/20201011195117307.png" alt="在这里插入图片描述" /> 如果要求double-word(8B)对齐，那么Block size总是8的倍数，所以低3位都是0，可以利用其存储分配状态。</p><p>这样整个堆就可以组织为连续的分配和空闲块，由于已经存储了每块的大小，所以隐式空闲链表就应运而生： <img src="https://img-blog.csdnimg.cn/20201014165121101.png" alt="在这里插入图片描述" /> 隐式链表可以在<span class="math inline">\(O(1)\)</span>的时间里合并之后的空闲块，但是要合并之前的空闲块，需要<span class="math inline">\(O(n)\)</span>的时间扫描整个堆，这显然无法接受。Knuth大佬提出了boundary tags，这样实际上相当于隐式双向链表： <img src="https://img-blog.csdnimg.cn/20201011214226551.png" alt="在这里插入图片描述" /> 这样就可以通过Footer在<span class="math inline">\(O(1)\)</span>检查之前的块的状态及其开始位置，缺点在于如果小的内存块比较多的话，内存开销太大。 双向tag带来的内存开销可以优化：只有前面的块是空闲，才需要它footer里的大小，所以可以在每个块用后3位里的某一位来存储前面块的状态，那么已分配块就不需要footer了，可以把footer的空间用来当作payload，但是空闲块仍然需要2个tag。</p><p>那么现在整个堆变成了这样： <img src="https://img-blog.csdnimg.cn/20201016204303577.png" alt="在这里插入图片描述" /> 这里的<code>heap_listp</code>指向Prologue block的中间是做了一些小优化，方便直接定位到下一块的数据位置。</p><p>这里的实现非常tricky和subtle，一开始只申请了4words，unused(1)+Prologue(2)+Epilogue(1)，后续的<code>extend_heap</code>申请一个空闲块后，将原来的Epilogue作为空闲块的header，空闲块的最后一个word变为新的Epilogue。</p><p>由于对齐要求（Headers在非对齐位置，Payloads对齐），分配器应该有一个minimum block size，即使只请求了1B，也要分配minimum block size，这里是16B。</p><p>写代码时先实现并测试<code>malloc</code>和<code>free</code>，如果能正确并且高效执行，再去实现<code>realloc</code>。</p><h2 id="evaluation">Evaluation</h2><p>性能主要考虑2方面因素：</p><ul><li>空间利用率<span class="math inline">\(U\)</span>：peak ratio即评测程序申请的总内存（<code>mm_malloc/mm_realloc</code>但是还没有<code>mm_free</code>）与分配器使用的堆容量的比值，需要用好的策略减小碎片，使得该值接近1；</li><li>吞吐量<span class="math inline">\(T\)</span>：每秒完成的操作数量</li></ul><p>评测程序会综合考虑2个方面，计算一个performance index <span class="math display">\[P=wU+(1-w)min(1,\frac{T}{T_{libc}})\]</span> <span class="math inline">\(T_{libc}\)</span>是<code>libc</code>中的<code>malloc</code>的吞吐量，大概在600Kops/s左右，<span class="math inline">\(w=0.6\)</span>。 这个<span class="math inline">\(P\)</span>既考虑了内存资源，又考虑了CPU资源，两个矛盾的指标需要适当权衡。</p><p>第一个版本<code>mm1.c</code>基本就是抄书，Implicit Free Lists+First Fit+Bi Boundary Tag，抄书也就将将及格。。 <img src="https://img-blog.csdnimg.cn/20201115143013580.png" alt="在这里插入图片描述" /> 将First-Fit改成Next-Fit，还不错： <img src="https://img-blog.csdnimg.cn/20201115202312126.png" alt="在这里插入图片描述" /> 可以看到：Next-Fit在速度上有很大提升，主要是因为它是从上次终止的块开始搜索，避免了前面很多块的无效搜索。</p><p>最后对于Implicit Lists的性能做个总结： 分配：<span class="math inline">\(O(n)\)</span> 释放：<span class="math inline">\(O(1)\)</span> Memory Overhead：取决于First Fit等策略</p><p>感觉这个性能已经不错了，但是一些无聊的计算机科学家还是不满意分配时的效率。接着我们看下更加🐂🍺的方法Segregated Free Lists： <img src="https://img-blog.csdnimg.cn/20201024204031234.png" alt="在这里插入图片描述" /> 每个size级别的块都有自己的free list，分配大小为n的块时：</p><ul><li>搜索合适的free list使得size&gt;n</li><li>找到：split并将remainder放入应该去的list</li><li>未找到：向操作系统申请更大的内存，分出去n，将剩下的放入相应的list</li></ul><p>释放时合并空闲块并且放入相应的free list即可。</p><p>这实际上近似模拟了Best Fit，而且不用搜索整个free list，Best Fit一般有着最优的内存利用率，但是运行时间<span class="math inline">\(O(n)\)</span>，又是吞吐量和内存利用率的trade-off，终于明白了为什么官方的<code>malloc</code>要用这个方式了：吞吐量更大<span class="math inline">\(O(lgn)\)</span>、更优的内存利用率Best Fit。</p><p>Segregated Free Lists中的空闲块包含Header+prev+next+padding+Footer，已分配块没有前后指针。 写代码要注意：整个堆中的块位置是不变的，只是状态（分配、释放）在改变，整个堆中的空闲块是用seg list的方式串起来的。</p><p>Debug可以自己写一下<code>mm_check</code>，还是很有用的。 <code>realloc</code>快de疯了，整整一个晚上。。。其实就4种情况：</p><ol type="1"><li>如果当前已分配块后面是结尾块，直接申请新的堆空间，与原块组合返回；</li><li>如果当前已分配块后面是一个空闲块，且两者之和&gt;=size，组合返回；</li><li>如果当前已分配块后是一个空闲块，但两者之和&lt;size，但是空闲块后是结束块，申请新的堆空间，三者组合返回；</li><li>malloc新块，将原块复制，释放原块。</li></ol><p>第一次写完，只有85，内存利用率太差了： <img src="https://img-blog.csdnimg.cn/20201117220719669.png" alt="在这里插入图片描述" /> <code>place</code>的时候，如果申请块比较大，我们将其分配到后半部分，将前半部分切割为空闲： <img src="https://img-blog.csdnimg.cn/2020111909030584.png" alt="在这里插入图片描述" /> 之前class的划分是1，2-3，4-7，8-15... 但是最小块是16B，所以16B以下的用不到，所以改为16-31，32-63，64-127，128-255...</p><p>这样优化后直接96： <img src="https://img-blog.csdnimg.cn/20201119092357832.png" alt="在这里插入图片描述" /> 后面还可以继续优化榨干性能，比如去掉已分配块的Footer，<code>realloc</code>组合块以后对remainder进行split... 以后有时间再说......</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stacking</title>
      <link href="/2020/11/17/Stacking/"/>
      <url>/2020/11/17/Stacking/</url>
      
        <content type="html"><![CDATA[<p>Ensemble Learning的基本思想就是将多个基学习器组合在一起，产生泛化能力更强的模型。 组合策略有许多种，包括Voting、平均法和Stacking等，Stacking就是选择某种学习器作为组合基学习器的方式。 <img src="https://img-blog.csdnimg.cn/20200926193430376.png" alt="在这里插入图片描述" /> 既然要结合多个基学习器的优点，那么基学习器的选择最好是“准而不同”，元学习器一般选择比较简单的模型（如逻辑回归），防止过拟合。 比较简单的想法就是将全部训练集用于训练基学习器，将基学习器的预测结果作为元学习器的训练集，从而得到整个模型。 这样做的问题在于：基学习器最终在训练集上的表现非常好，再用基学习器在该训练集上的预测结果作为次级训练集，同样元学习器在该训练集上表现也会非常好，但是模型的泛化能力不一定很好，有过拟合的风险。 因此，采用K折交叉验证的方式，用训练基学习器未使用的样本来产生次级训练集。 <img src="https://img-blog.csdnimg.cn/20201109191045436.jpg" alt="在这里插入图片描述" /> 具体来讲： 在训练阶段（假设训练集<span class="math inline">\(400*10\)</span>），对于每个基学习器（假设有3个基学习器），进行5次训练与验证，得到<span class="math inline">\(400*1\)</span>的验证结果，那么最终次级训练集是<span class="math inline">\(400*3\)</span>（类标签还是原始类标签），用这些数据训练次级学习器，完成后再用全部的训练集训练所有的基学习器（可选，提高基学习器性能）； 在测试阶段，如果训练阶段选了最后一步，那么每个基学习器直接得到一个结果，就会得到3个测试结果，送入次级学习器，得到最终的预测结果；如果训练时没有选最后一步，那么每个基学习器都有5个小模型，将测试样本用5个小模型分别测试，将5个结果平均得到某个基学习器的预测结果，也会得到3个测试结果。 <img src="https://img-blog.csdnimg.cn/20201109192340496.png" alt="在这里插入图片描述" /> Weka里的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Buildclassifier selects a classifier from the set of classifiers</span></span><br><span class="line"><span class="comment">   * by minimising error on the training data.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data the training data to be used for generating the</span></span><br><span class="line"><span class="comment">   * boosted classifier.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception if the classifier could not be built successfully</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 建立整个模型</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildClassifier</span><span class="params">(Instances data)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_MetaClassifier == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No meta classifier has been set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断分类器是否有能力处理该数据集</span></span><br><span class="line">    getCapabilities().testWithFail(data);</span><br><span class="line">    <span class="comment">// 删除类标签缺失数据</span></span><br><span class="line">    Instances newData = <span class="keyword">new</span> Instances(data);</span><br><span class="line">    m_BaseFormat = <span class="keyword">new</span> Instances(data, <span class="number">0</span>);</span><br><span class="line">    newData.deleteWithMissingClass();</span><br><span class="line">    </span><br><span class="line">    Random random = <span class="keyword">new</span> Random(m_Seed);</span><br><span class="line">    newData.randomize(random); <span class="comment">// 打乱整个数据集</span></span><br><span class="line">    <span class="comment">// 如果是分类问题，分层抽样</span></span><br><span class="line">    <span class="comment">// 原始数据按照类标签集中在一起，按m_NumFolds为步长重新抽取数据，保持训练集/验证集数据分布一致性, 避免因数据划分引入额外的偏差</span></span><br><span class="line">    <span class="keyword">if</span> (newData.classAttribute().isNominal()) &#123;</span><br><span class="line">      newData.stratify(m_NumFolds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理原始数据得到新的数据，建立meta classifier</span></span><br><span class="line">    generateMetaLevel(newData, random);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// restart the executor pool because at the end of processing</span></span><br><span class="line">    <span class="comment">// a set of classifiers it gets shutdown to prevent the program</span></span><br><span class="line">    <span class="comment">// executing as a server</span></span><br><span class="line">    <span class="comment">// 创建线程池，为下面的基学习器训练做准备</span></span><br><span class="line">    <span class="keyword">super</span>.buildClassifier(newData);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提高基础模型的准确度，使其在测试数据表现更好，用所有的训练集进行基学习器的训练</span></span><br><span class="line">    <span class="comment">// 这里为了节省时间，测试时，可以直接在多个基学习器预测后取平均</span></span><br><span class="line">    <span class="comment">// Rebuild all the base classifiers on the full training data</span></span><br><span class="line">    buildClassifiers(newData);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Generates the meta data</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> newData the data to work on</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> random the random number generator to use for cross-validation</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception if generation fails</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">generateMetaLevel</span><span class="params">(Instances newData, Random random)</span> </span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 先用newData得到metaData的格式m_MetaFormat</span></span><br><span class="line">    <span class="comment">// 确定元分类器需要的属性</span></span><br><span class="line">    Instances metaData = metaFormat(newData);</span><br><span class="line">    m_MetaFormat = <span class="keyword">new</span> Instances(metaData, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_NumFolds; j++) &#123;</span><br><span class="line">      <span class="comment">// 得到训练集</span></span><br><span class="line">      Instances train = newData.trainCV(m_NumFolds, j, random);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// start the executor pool (if necessary)</span></span><br><span class="line">      <span class="comment">// has to be done after each set of classifiers as the</span></span><br><span class="line">      <span class="comment">// executor pool gets shut down in order to prevent the</span></span><br><span class="line">      <span class="comment">// program executing as a server (and not returning to</span></span><br><span class="line">      <span class="comment">// the command prompt when run from the command line</span></span><br><span class="line">      <span class="comment">// 线程池，多线程并行构建基学习器</span></span><br><span class="line">      <span class="keyword">super</span>.buildClassifier(train);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 构建基学习器</span></span><br><span class="line">      buildClassifiers(train);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// Classify test instances and add to meta data</span></span><br><span class="line">      <span class="comment">// 将未使用过的原始训练数据通过基学习器预测后加入metadata作为新的训练集</span></span><br><span class="line">      Instances test = newData.testCV(m_NumFolds, j);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; test.numInstances(); i++) &#123;</span><br><span class="line">        metaData.add(metaInstance(test.instance(i)));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 利用元数据建立元分类器</span></span><br><span class="line">    m_MetaClassifier.buildClassifier(metaData);    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因为基学习器之间的训练是独立的，所以每次交叉验证划分好数据后，都是利用线程池并行训练。 如果是在分层抽样的基础上划分训练集和验证集，<code>trainCV()</code>抽取数据后，需要将新的训练集Shuffle，保证独立同分布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Makes the format for the level-1 data.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> instances the level-0 format</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the format for the meta data</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception if the format generation fails</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 生成元数据格式</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Instances <span class="title">metaFormat</span><span class="params">(Instances instances)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 如果m_BaseFormat属性连续，就加入m_Classifiers.length个属性</span></span><br><span class="line">    <span class="comment">// 如果是离散的，每次要加入level 0类别属性取值个数个属性</span></span><br><span class="line">    ArrayList&lt;attribute&gt; attributes = <span class="keyword">new</span> ArrayList&lt;attribute&gt;();</span><br><span class="line">    Instances metaFormat;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历基学习器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m_Classifiers.length; k++) &#123;</span><br><span class="line">      Classifier classifier = (Classifier) getClassifier(k);</span><br><span class="line">      String name = classifier.getClass().getName() + <span class="string">&quot;-&quot;</span> + (k+<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (m_BaseFormat.classAttribute().isNumeric()) &#123;</span><br><span class="line">        attributes.add(<span class="keyword">new</span> Attribute(name));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果离散，后续会通过每个取值的概率来判断，比如杂色、圆花，这2种特性不能用一个属性表示，所以每个取值都要独立成单独的属性</span></span><br><span class="line">          <span class="comment">// 来保存概率值</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m_BaseFormat.classAttribute().numValues(); j++) &#123;</span><br><span class="line">            attributes.add(</span><br><span class="line">              <span class="keyword">new</span> Attribute(</span><br><span class="line">              name + <span class="string">&quot;:&quot;</span> + m_BaseFormat.classAttribute().value(j)));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加上原始类标签</span></span><br><span class="line">    attributes.add((Attribute) m_BaseFormat.classAttribute().copy());</span><br><span class="line">    <span class="comment">// 形成元数据格式</span></span><br><span class="line">    metaFormat = <span class="keyword">new</span> Instances(<span class="string">&quot;Meta format&quot;</span>, attributes, <span class="number">0</span>);</span><br><span class="line">    metaFormat.setClassIndex(metaFormat.numAttributes() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> metaFormat;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>生成元数据格式时，如果是分类问题，类标签的每个属性都被作为一个新的属性： <img src="https://img-blog.csdnimg.cn/20201109195503863.png" alt="在这里插入图片描述" /> 这里我个人这样理解：有的基分类器可以输出属于某个类的概率（如逻辑回归），将概率作为元属性而不是直接将基学习器的分类结果作为元属性，这样做能够减小基学习器的分类误差带给元学习器的影响，模型整体更加精确： <img src="https://img-blog.csdnimg.cn/20201109195918632.png#pic_center" alt="在这里插入图片描述" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Makes a level-1 instance from the given instance.</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> instance the instance to be transformed</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the level-1 instance</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> Exception if the instance generation fails</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 产生元数据</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> Instance <span class="title">metaInstance</span><span class="params">(Instance instance)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// values保存分类结果，连续属性直接保存，离散属性则先求得分布，将每种取值的分布加入values，设置为m_MetaFormat格式返回</span></span><br><span class="line">    <span class="keyword">double</span>[] values = <span class="keyword">new</span> <span class="keyword">double</span>[m_MetaFormat.numAttributes()];</span><br><span class="line">    Instance metaInstance;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; m_Classifiers.length; k++) &#123;</span><br><span class="line">      Classifier classifier = getClassifier(k);</span><br><span class="line">      <span class="keyword">if</span> (m_BaseFormat.classAttribute().isNumeric()) &#123;</span><br><span class="line">        values[i++] = classifier.classifyInstance(instance);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 基学习器对该实例的分类的概率分布, sum(dist)=1</span></span><br><span class="line">        <span class="keyword">double</span>[] dist = classifier.distributionForInstance(instance);</span><br><span class="line">        <span class="comment">// 将该基学习器对该实例的预测概率输出到对应的元属性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; dist.length; j++) &#123;</span><br><span class="line">          values[i++] = dist[j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标签值对应最后一个元属性</span></span><br><span class="line">    values[i] = instance.classValue();</span><br><span class="line">    metaInstance = <span class="keyword">new</span> DenseInstance(<span class="number">1</span>, values);</span><br><span class="line">    metaInstance.setDataset(m_MetaFormat);</span><br><span class="line">    <span class="keyword">return</span> metaInstance;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在实际数据集上的结果其实不一定比其他模型效果好，可能是我参数调的不好吧（雾）~ </attribute></attribute></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bear Maps</title>
      <link href="/2020/11/07/Bear%20Maps/"/>
      <url>/2020/11/07/Bear%20Maps/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">Intro</h2><p>这是CS 61B的Project 3，也是最后一个Proj。刚好上完这门课出去旅个游，放松下心情开始15213。 完成基本的要求花了5天时间，当然现在的版本还十分简陋，这个工程我是想做得比较大，后面还得抽时间消化理解、完善优化。</p><p>SP18用了<a href="https://maven.apache.org/">Apache Maven</a>做项目建构工具，<a href="https://blog.csdn.net/qq_41431457/article/details/102999439">折腾</a>了一天也没有配好，<del>不知道这么垃圾的工具有啥用</del> ，最后实在没辙就把该项目所有需要的jar包导进来，后来发现SP19就抛弃了maven。 <img src="https://img-blog.csdnimg.cn/20200623161825813.png" alt="在这里插入图片描述" /> 项目需要的地图集以及地图上的点/路信息都是Google采集好的，可在<a href="https://github.com/Berkeley-CS61B">这里</a>下载，当然这个地图只是一小部分，后面想要扩展可以去下载需要的<a href="https://www.openstreetmap.org/">数据集</a>，包括tile images和map feature data。</p><p>整体需求是实现一个网页端地图，用户通过浏览器输入URL，Java程序接收，然后生成相应的地图结果并返回，在浏览器中显示。服务器框架用的是<a href="http://sparkjava.com/documentation.html#getting-started">Spark</a>，前端以及前后端交互的部分已经写好了（TA真的太强了），其实我有时候觉得这些dirty的工作比较考验码力，这些代码写得漂亮说明System的能力是挺强的。</p><p>后端至少需要实现3个类：</p><ul><li><code>Rasterer</code> 输入upper left latitude and longitude, lower right latitude and longitude, a window width, and a window height. 输出2D array of filenames corresponding to the files to be rendered.</li><li><code>GraphDB</code> 输入Open Street Map数据集，将其转为图存储起来：每个结点是a single intersection，每条边是一条路。</li><li><code>Router</code> 输入GraphDB, a starting latitude and longitude, and a destination latitude and longitude. 输出从起点到终点的一系列结点，以及路径导航信息。 ## Map Rastering 首先要将用户查询的真实世界的经纬度信息转为实际地图，<code>Rasterer.java</code>会接收用户请求的矩形参数<code>Map&lt;String, Double&gt; params</code>，生成对应的图像名称<code>String[][]</code>： 主要工作在<code>getMapRaster()</code>方法中完成，用户输入的查询请求共有6个参数：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;lrlon=-<span class="number">122.2104604264636</span>, ullon=-<span class="number">122.30410170759153</span>, w=<span class="number">1085.0</span>, h=<span class="number">566.0</span>, ullat=<span class="number">37.870213571328854</span>, lrlat=<span class="number">37.8318576119893</span>&#125;</span><br></pre></td></tr></table></figure><p>表示用户希望显示经度范围<code>lrlon</code>~<code>ullon</code>，纬度范围<code>ullat</code>~<code>lrlat</code>的区域，并且分辨率大概是<code>w*h</code>。</p><p>街景图采用<strong>冗余存储</strong>，所有图片都是<code>256*256</code>：<code>d0_x0_y0.png</code>是整个区域的街景，但是分辨率最低，<code>d1_x0_y0.png/d1_x0_y1.png/d1_x1_y0.png/d1_x1_y1.png</code>分别代表西北/东北/西南/东南四个角的街景，但是分辨率加倍。</p><p>更加规范的说：在第D个缩放级别，共有<span class="math inline">\(4^D\)</span>张图片，<code>dD_x0_y0.png</code>到<code>dD_xk_yk.png</code>，<span class="math inline">\(k=2^D-1\)</span>，随<code>x</code>增大向东移动，随<code>y</code>增大向南移动，我们需要返回<code>String[][]</code>代表用户请求区域的图片文件名矩阵，当然还有一些其他参数（查询是否成功等）：由于Java只能返回一个值，所以结果组装成<code>Map&lt;String, Object&gt;</code>返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[d2_x0_y1.png, d2_x1_y1.png, d2_x2_y1.png, d2_x3_y1.png],</span><br><span class="line">[d2_x0_y2.png, d2_x1_y2.png, d2_x2_y2.png, d2_x3_y2.png],</span><br><span class="line">[d2_x0_y3.png, d2_x1_y3.png, d2_x2_y3.png, d2_x3_y3.png]]</span><br></pre></td></tr></table></figure><p>上述返回结果的分辨率为<code>1024*768</code>，几乎满足用户分辨率要求<code>1085*556</code>。</p><p>这样对于同一个区域，可以有很多选择：可以用更多张高分辨率图片的组合，也可以用较少几张低分辨率的图片组合，只要满足用户要求，比如对于上述例子，<code>d2_x0_y1.png</code>可以采用<code>d3_x0_y2.png/d3_x1_y2.png/d3_x0_y3.png/d3_x1_y3.png</code>代替，这样返回的图片是<code>6*8</code>共48张，分辨率可达<code>2048*1536</code>。</p><p>但这样做很可能overflow，远远超过用户要求，浪费时间和资源，因为分辨率高就意味着展示的空间小，并且前端是不会做缩放的，如果用很多高分辨率图片，浏览器会有太多太多照片加载显示，因为大家都是<code>256*256</code>的。</p><p>所以定义单位像素的经度距离：<span class="math inline">\(\text{LonDPP} = \frac{\text{lower right longitude} - \text{upper left longitude}}{\text{width of the image (or box) in pixels}}\)</span>，我们要展示的是小于用户要求的LonDPP的最大值，比方说用户要求每个像素2度，如果我们大于2，那么分辨率低到不能满足要求，只有小于2才能满足要求。又不能太小，分辨率太高展示范围变小。当然如果用户要求的LonDPP很低，只能用现有的最低的LonDPP图片，即<code>d7</code>系列。 可以将LonDPP理解为模糊程度，LonDPP越大，显示的图片越模糊，比如<code>d0</code>系列就有最大的LonDPP。 纬度也要做类似处理。</p><p>举例来看：<code>d2</code>系列共有16张图片，用户请求Query Box应该返回9张图片： <img src="https://img-blog.csdnimg.cn/20200624205748557.png" alt="在这里插入图片描述" /> 具体实现只有1个方法<code>public Map&lt;String, Object&gt; getMapRaster(Map&lt;String, Double&gt; params)</code>，分2步：</p><ul><li>需要的图片的<code>depth</code> 全图即<code>d0</code>的经纬度范围是：<code>-122.29980, 37.89220/-122.21191, 37.82280</code> 因为地球不是规则的，但是在确定Depth时，经度方向的LonDPP满足要求即可，不需考虑纬度方向的影响。</li><li>确定四个角的下标</li><li>corner case 判断输入是否合法时，边界判断一定要加EPS，不然一点小误差会崩掉程序。 输入不合法（用户拖动至全图外等），将<code>query_success</code>置为<code>false</code>返回即可。</li></ul><p>Bug：读取图片文件时，总是<code>javax.imageio.IOException: Can't read input file!</code>。一般都是路径问题。 ## Routing &amp; Location Data 明确了前端需要显示哪些图片后，接下来就是要建一个图，因为最后要路径规划嘛。 路由和位置数据是通过<code>berkeley-2018.osm.xml</code>文件给的，是整个<a href="https://download.bbbike.org/osm/">地球数据</a>的一部分，文件格式是<a href="https://wiki.openstreetmap.org/wiki/OSM_XML">OSM XML</a>。</p><p>解析XML数据用的是SAX Parser，遍历每个element，在每个元素的开始和结束位置，调用<code>startElement</code>和<code>endElement</code>回调函数。</p><p>先来熟悉下OSM XML文档： <img src="https://img-blog.csdnimg.cn/20200625122049178.png" alt="在这里插入图片描述" /> <code>node</code>元素是组成地图的主干，有id/lat/lon等属性。如果结点是一个位置，那么<code>tag</code>标签就会有<code>name</code>，如果是其他的，比如路上的一个点，那么就没有<code>tag</code>。 <img src="https://img-blog.csdnimg.cn/20200625122412890.png" alt="在这里插入图片描述" /> <code>way</code>元素表示一条路，路上可能有很多<code>node</code>，用<code>id</code>表示。<code>tag</code>会包含额外信息，如果<code>name</code>是highway，那么<code>v</code>就是道路类型。假设所有道路都是双向的。</p><p>在类<code>GraphDB</code>中存储图，要求允许插入和删除结点，最后要用<code>clean()</code>清理掉没有连接的结点。 <code>GraphBuildingHandler</code>会解析XML文件并调用<code>GraphDB</code>的一些接口函数构建整个图。</p><p>如果选择邻接矩阵存储，由于这是一个动态的图，可能要增加或者删除结点，所以一开始顶点个数是不确定的，也就不能用<code>int[][]</code>表示。所以选择邻接表，因为有<code>clean()</code>操作，需要判断结点是否与其他结点相邻，邻接表速度更快。</p><p><code>GraphBuildingHandler</code>每次只处理XML的一行，也就是一个标签，<code>GraphBuildingHandler</code>这个类可以被其它方法多次调用去处理完所有的XML，我发现这种拆分很有用，系统会变得简单，只需要考虑当前状态就很好写。清楚需求后，需要设计类的接口，数据结构和算法，这才是最难的部分。</p><p>由于parser的解析是从上到下的，所以处理<code>way</code>时最好不要直接把边和边上的结点直接加进图里，因为后面的<code>highway</code>的值可能不在合法范围内，这种边是不算的。所以在碰到边上的点，先存到一个数组里，最后<code>endElement()</code>时候如果路合法，再加进图里。处理<code>node</code>也同理，在<code>endElement()</code>时加入图。记得每次做完一个<code>node</code>或<code>way</code>要<code>clear()</code>上一个的状态信息。</p><p>每个<code>node</code>有一些属性（id/lat/lon），每条边也有一些属性（fromID/toID/name），所以首先要有<code>Node</code>类和<code>Edge</code>类。 邻接表的顶点表<code>Map&lt;Long, Node&gt; vertex</code>，边表<code>Map&lt;Long, Set&lt;Edge&gt;&gt; adj</code>。</p><p>Bug：对<code>ArrayList</code>等在迭代时同时进行修改就会引发异常<code>ConcurrentModificationException</code>。</p><p><code>long closest(double lon, double lat)</code>方法会被用来找最短路，需要返回最近的<strong>有邻居</strong>的<code>node</code>，一个点可能没有邻居，因为他是饭店啥的，不能用来找最短路。另外，这个方法复杂度要求<span class="math inline">\(O(lgn)\)</span>，先实现一个<span class="math inline">\(O(n)\)</span>的做法，后续有时间再去优化吧。 ## Route Search 建好地图后，就要做路由工作：给定起点和终点的经纬度，选一条距离最短的路径，需要在类<code>Router</code>中实现<code>shortestPath</code>方法。 应该从距起点最近的<code>node</code>开始导航到距终点最近的<code>node</code>结束，当然这些<code>node</code>必须是connected的。</p><p>两个<code>node</code>间的距离采用<a href="https://en.wikipedia.org/wiki/Great-circle_distance">great-circle distance</a>，即当作球模型来计算弧长距离。整体距离就是计算1/2之间、2/3之间...的距离之和，还要考虑经度和纬度有不同的尺度，并且随着纬度变化，每度代表的实际距离也是不同的，还好计算距离的函数已经由🐂🍺的TA写好了。</p><p>最好用A*而不是Dijkstra，启发函数h(n)用结点n到终点的great-circle distance就行，要注意目标不可达的情况。</p><p>开始只能在<code>berkeley-2018-small-osm.xml</code>上跑起来，我以为是笔记本配置太烂，跑大的数据集跑不动，只能用小的来测试，后来发现<code>GraphDB</code>里一行写错了。。。debug真痛苦啊！！</p><p>找到最优路线后，这里有一个optional feature，就是显示方向导航信息Turn-by-turn Navigation，需要在类<code>Router</code>中实现<code>routeDirections</code>方法。导航方向的表示是在<code>Router</code>类中写了一个新类<code>NavigationDirection</code>，具体的导航信息格式如下： DIRECTION on WAY for DISTANCE miles 其中，DIRECTION有8种选择： - “Start” - “Continue straight” - “Slight left/right” - “Turn left/right” - “Sharp left/right”</p><p>所以我们需要确定正确的DIRECTION/WAY/DISTANCE，方向取决于当前结点和上一个节点间的<a href="https://en.wikipedia.org/wiki/Bearing_(navigation)">relative bearing</a>：</p><ul><li>Between -15 and 15 degrees the direction should be “Continue straight”.</li><li>Beyond -15 and 15 degrees but between -30 and 30 degrees the direction should be “Slight left/right”.</li><li>Beyond -30 and 30 degrees but between -100 and 100 degrees the direction should be “Turn left/right”.</li><li>Beyond -100 and 100 degrees the direction should be “Sharp left/right”.</li></ul><p>难点在于：一条<code>way</code>上可能包含了若干<code>node</code>，如何在遍历<code>node</code>的过程中判断<code>way</code>是否发生了改变，只有<code>way</code>变化后才能产生一条新的导航信息。如果恰好来到了一条没有<code>name</code>的路，就将WAY设为“unknown road”。</p><p>举例来说： 假设出发的<code>node</code>在“Shattuck Avenue”这条路上，那么DIRECTION应该设为“Start”，遍历接下来的<code>node</code>时，需要累加在这条路上走过的距离，最终到达一个不在“Shattuck Avenue”的<code>node</code>时，设置WAY为“Shattuck Avenue”，DISTANCE为之前的累加值。接着，下一条导航信息的DIRECTION应该根据相对方位计算，WAY是当前<code>node</code>所在的路，DISTANCE重新累加。</p><p>最终的效果：蓝色线表示最优路线： <img src="https://img-blog.csdnimg.cn/20201126192103548.png" alt="在这里插入图片描述" /> 单元测试还是非常重要的，只有确保每一个函数都是正确的，最终组合的功能才可能正确。 ## Autocomplete and Search 作为一个很有用的Feature，自动补全还是很酷的：搜索地名时只输入一部分，就返回以它开头的所有地名。需要在<code>MapServer</code>类中实现<code>List&lt;String&gt; getLocationsByPrefix(String prefix)</code>方法。</p><p>输入的参数<code>prefix</code>是clean后的字符串：除了大小写字母以及空格外，其它字符全部被移除，全部由小写字母组成。 需要返回所有locations（有<code>name</code>的<code>node</code>）的全名，前提是clean后的全名与<code>prefix</code>匹配。 复杂度要求<span class="math inline">\(O(k)\)</span>，k是共享同一前缀的所有地名。</p><p>比如这样： <img src="https://img-blog.csdnimg.cn/20200902160016738.png" alt="在这里插入图片描述" /> 除了自动补全，还需要完成Search功能：clean后的用户输入与clean后的<code>locationName</code>完全匹配，同名的<code>location</code>都需要加入<code>List</code>。 复杂度要求<span class="math inline">\(O(k)\)</span>，k是匹配的地名个数。 需要在<code>MapServer</code>类中实现<code>List&lt;Map&lt;String, Object&gt;&gt; getLocations(String locationName)</code>方法，返回同名的所有地方的信息，如果正确实现，那么就会有一个mark标记在那个地方： <img src="https://img-blog.csdnimg.cn/20200906101859262.png" alt="在这里插入图片描述" /> 具体实现一般用Trie，这里的难点在于输入是clean后的字符串，需要输出clean前的全名，所以我们的Trie结点除了有<code>children</code>和<code>isWord</code>外，还需要保存一些额外的信息（clean前的<code>name</code>/<code>id</code>/<code>lat</code>/<code>lon</code>），当然这些信息只有叶子结点才需要保存，用<code>List&lt;Map&lt;String, Object&gt;&gt; extraInfo</code>来存储。这样重名的地点虽然占用了相同的叶子，但是所有地点的信息都存在了该叶子的<code>extraInfo</code>当中，可以直接展示出来。</p><p>Debug好痛苦啊！！有一次怎么样在浏览器都渲染不出来，折腾了一天，最后发现是因为html文件里一个js文件要FQ才可以访问，醉了。 ## Extensions - Front-end Integration 现在是每调用一次，就在后台raster the entire image，然后传到前端显示。实际中前端可以缓存用过的tiles以及路线，下次调用无需后台计算。 - Vectored Tiles 现在的数据是一张张图片，实际上这些图片是可以从roads, lines, filled areas, buildings等基础矢量几何图形提取，可以用OpenGL/WebGL将其全部绘制为三角形，这样非常同一的工作就可以用GPU去做，速度比CPU要快很多，这些矢量图形可以在<a href="https://wiki.openstreetmap.org/wiki/Vector_tiles">这里</a>下载。 - <a href="https://sp19.datastructur.es/materials/proj/proj2c/heroku">Deploy on Heroku</a> 目前为止，我们的地图还只能在本地运行，下来就将它部署到服务器~ 具体的部署过程可以参考上述链接，完成后APP就会部署到<a href="http://bearmaps-fun.herokuapp.com/map.html">这里</a>。 后续的代码更改需要rebuild jar包，然后redeploy。 ## TODO 做工程真是长期的活，遇到bug每天能写50行就不错了。</p><p>所有<a href="https://github.com/EIMadrigal/CS61B/tree/master/proj3">代码</a>均已通过AG的测试： Part I： <img src="https://img-blog.csdnimg.cn/20200917210047412.png" alt="在这里插入图片描述" /> PART II &amp; III： <img src="https://img-blog.csdnimg.cn/20200917210119434.png" alt="在这里插入图片描述" /> 附加Feature： <img src="https://img-blog.csdnimg.cn/20201127214331958.png" alt="在这里插入图片描述" /> 单元测试除了<code>TestDirections</code>外全部通过。 <img src="https://img-blog.csdnimg.cn/20201129193519713.png" alt="在这里插入图片描述" /> 这个Bug真的有些诡异，不过： <img src="https://img-blog.csdnimg.cn/20201201103328818.png" alt="在这里插入图片描述" /> 尽量少用<code>protected</code>修饰成员变量，写一个函数接口去访问。 ## Reference <a href="https://sp18.datastructur.es/materials/proj/proj3/proj3">Project 3: Bear Maps, version 3.0</a> <a href="https://sp19.datastructur.es/materials/proj/proj2c/proj2c">Project 2C: Bear Maps, version 4.0</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Support Vector Machine</title>
      <link href="/2020/11/02/Support%20Vector%20Machine/"/>
      <url>/2020/11/02/Support%20Vector%20Machine/</url>
      
        <content type="html"><![CDATA[<p>SVM是入门机器学习绕不开的一个话题，但愿这篇文章我能把它讲清楚。 ## 线性可分 SVM的核心思想是：对于<span class="math inline">\(p\)</span>维输入数据集，找一个有着maximum margin的<span class="math inline">\(p-1\)</span>维的超平面去做decision boundary，这与直觉是相符的： <img src="https://img-blog.csdnimg.cn/20200903193214259.png" alt="在这里插入图片描述" /> 回忆下小学数学讲过的几何知识：空间中一个超平面由法向量<span class="math inline">\(\vec w\)</span>和截距<span class="math inline">\(b\)</span>唯一确定： <span class="math display">\[a(x-x_1)+b(y-y_1)+c(z-z_1)+...=0, \\w^Tx+b=0\]</span> 那么如何求解最优超平面的<span class="math inline">\(w\)</span>和<span class="math inline">\(b\)</span>呢？</p><p>假设<span class="math inline">\(\vec w\)</span>指向的一侧为正类（设为负类也没关系，后面会统一表示的），还<strong>假设</strong>在正类的支持向量上有<span class="math inline">\(w^Tx+b=1\)</span>，在负类的支持向量上有<span class="math inline">\(w^Tx+b=-1\)</span>，这里之所以将间隔假设为1主要是为了方便表示和求解，并不影响最终求得的最优超平面和决策函数，证明如下：</p><p>假设正类支持向量距最优超平面距离为<span class="math inline">\(c(c&gt;0)\)</span>，即<span class="math inline">\(w^Tx+b=c\)</span>，此时对应的最优超平面为<span class="math inline">\(w^Tx+b=0\)</span>；又<span class="math inline">\(\frac{w^T}{c}x+\frac{b}{c}=1\)</span>，即<span class="math inline">\(w\)</span>和<span class="math inline">\(b\)</span>同时缩小<span class="math inline">\(c\)</span>倍，那么这时超平面方程同除以<span class="math inline">\(c\)</span>并不改变其形式。</p><p>因此对于正负样本有： <span class="math display">\[w\cdot x_++b\geq 1 \\w\cdot x_-+b\leq -1\]</span> 为了统一表示上面2种情况，引入<span class="math inline">\(y_i=\begin{cases} 1,&amp;\text{+sample}\\ -1,&amp;\text{-sample} \end{cases}\)</span>，所有样本统一表示为： <span class="math display">\[y_i(w\cdot x_i+b)-1\geq 0\]</span> 如果能确定<span class="math inline">\(b\)</span>和<span class="math inline">\(w\)</span>，那么分类超平面和决策函数也就随即确定。</p><p>根据小学数学，间隔即为2个平行超平面的距离： <span class="math display">\[width=\frac{(b+1)-(b-1)}{||w||}=\frac{2}{||w||}\tag{1}\]</span></p><p>综上，<strong>原优化问题</strong>为： <span class="math display">\[\begin{array}{ll}\min _{w, b} &amp; \frac{1}{2}\|w\|^{2} \\\text { s.t. } &amp; y_{i}\left(w \cdot x_{i}+b\right)-1 \geqslant 0, \quad i=1,2, \cdots, N\end{array}\tag{2}\]</span> 这里之所以构造为<span class="math inline">\(\frac{1}{2}\|w\|^{2}\)</span>而不是<span class="math inline">\(||w||\)</span>是为了后面构造的Lagrangian求导的便利。</p><p>明眼人都看得出来：优化目标是一个Convex Quadratic Optimization Problem，并且只有线性约束条件，意味着不会卡在局部极大，一定可以找到全局最优解。此时上述问题已经完全可以用一些QP软件求解了。之所以还要继续讨论下去得到其对偶形式，一是为了在高维空间应用kernel，二是对偶形式的求解有着更加高效的算法。</p><p>回忆下学过的高等数学：有约束优化问题可以通过拉格朗日乘子法求解。首先构造Lagrangian： <span class="math display">\[L(w,b,\alpha)=\frac{||w||^2}{2}-\sum_{i=1}^{N}\alpha_i[y_i(w\cdot x_i+b)-1],\alpha_i\geq0\tag{3}\]</span> 如果<span class="math inline">\(w\)</span>和<span class="math inline">\(b\)</span>满足<span class="math inline">\((2)\)</span>中的约束，那么<span class="math inline">\(\max_{\alpha}L(w,b,\alpha)=\frac{||w||^2}{2}\)</span>； 如果<span class="math inline">\(w\)</span>和<span class="math inline">\(b\)</span>不满足<span class="math inline">\((2)\)</span>中的约束，那么<span class="math inline">\(\max_{\alpha}L(w,b,\alpha)=+\infin\)</span>。 因此下式的优化问题与<span class="math inline">\((2)\)</span>完全等价： <span class="math display">\[\min_{w, b}\max_{\alpha} L(w, b, \alpha)\tag{4}\]</span> 根据拉格朗日对偶性（不懂就暂时当作成立吧嘻嘻），<span class="math inline">\((4)\)</span>的对偶问题为： <span class="math display">\[\max_{\alpha} \min_{w, b} L(w, b, \alpha)\tag{5}\]</span> 为了求解对偶问题<span class="math inline">\((4)\)</span>，先求<span class="math inline">\(L\)</span>对<span class="math inline">\(w,b\)</span>的极小，再求对<span class="math inline">\(\alpha\)</span>的极大：</p><ol type="1"><li>固定<span class="math inline">\(\alpha\)</span>，求<span class="math inline">\(\min_{w, b} L(w, b, \alpha)\)</span> 分别求<span class="math inline">\(L\)</span>对<span class="math inline">\(\vec{w}\)</span>和<span class="math inline">\(b\)</span>的偏导并令其为0： <span class="math display">\[\frac{\partial L}{\partial\vec{w}}=\vec{w}-\Sigma\alpha_iy_ix_i=0, \vec{w}=\Sigma\alpha_iy_ix_i \\\frac{\partial L}{\partial b}=\Sigma\alpha_iy_i=0, \Sigma\alpha_iy_i=0\tag{6}\]</span> 决策向量<span class="math inline">\(\vec{w}\)</span>是样本的线性和，将<span class="math inline">\(\vec{w}\)</span>代入<span class="math inline">\((3)\)</span>： <span class="math display">\[\min_{w, b}L=\Sigma\alpha_i-\frac{1}{2}\Sigma_i\Sigma_j\alpha_i\alpha_jy_iy_jx_i\cdot x_j\tag{7}\]</span></li><li>求<span class="math inline">\(\min_{w, b} L(w, b, \alpha)\)</span>对<span class="math inline">\(\alpha\)</span>的极大 即求<span class="math inline">\((7)\)</span>对<span class="math inline">\(\alpha\)</span>的极大，等价于取负号求对<span class="math inline">\(\alpha\)</span>的极小，于是终于得到了<strong>原优化问题</strong><span class="math inline">\((2)\)</span>的<strong>对偶优化问题</strong>： <span class="math display">\[\begin{array}{ll}\min _{\alpha} &amp; \frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} \alpha_{i} \alpha_{j} y_{i} y_{j}\left(x_{i} \cdot x_{j}\right)-\sum_{i=1}^{N} \alpha_{i} \\\text { s.t. } &amp; \sum_{i=1}^{N} \alpha_{i} y_{i}=0 \\&amp; \alpha_{i} \geqslant 0, \quad i=1,2, \cdots, N\end{array}\tag{8}\]</span></li></ol><p>利用SMO等算法可以比普通的二次规划算法更高效求得最优的<span class="math inline">\(\alpha^*\)</span>，进而根据<span class="math inline">\((6)\)</span>求得： <span class="math display">\[w^{*}=\sum_{i=1}^{N} \alpha_{i}^{*} y_{i} x_{i}\tag{9}\]</span> 再利用KKT条件（不懂就装懂吧嘻嘻）求得： <span class="math display">\[b^{*}=y_{j}-(w^*)^Tx_j=y_{j}-\sum_{i=1}^{N} \alpha_{i}^{*} y_{i}\left(x_{i} \cdot x_{j}\right)\tag{10}\]</span> 其中，<span class="math inline">\(y_{j}\)</span>为任意一个支持向量。</p><p>最终的分类超平面为： <span class="math display">\[w^{*}\cdot x+b^{*}=0,\sum_{i=1}^{N} \alpha_{i}^{*} y_{i}(x_{i}\cdot x)+b^{*}=0\tag{11}\]</span> 分类决策函数为： <span class="math display">\[f(x)=sign(w^{*}\cdot x+b^{*})=\sum_{i=1}^{N} \alpha_{i}^{*} y_{i}(x_{i}\cdot x)+b^{*}\tag{12}\]</span> 最后要bb的是关于支持向量，根据KKT条件里的互补条件<span class="math inline">\(\alpha_{i}^{*}[y_{i}(x_{i}\cdot w^*+b^{*})-1]=0\)</span>：非支持向量必然有<span class="math inline">\(\alpha_{i}^{*}=0\)</span>，只有支持向量才可能出现<span class="math inline">\(\alpha_{i}^{*}&gt;0\)</span>。</p><p>如果回头看<span class="math inline">\((9)(10)(11)(12)\)</span>，所有的非支持向量对SVM没有任何影响，最优超平面以及决策函数都只由少量的支持向量决定，这大概就是支持向量机名称的由来吧~ ## 近似线性可分 上面讨论了完全线性可分的情况，然而在现实情况中，训练数据会有一些outliers，除去这些点后数据是线性可分的。为了处理这种情况，允许SVM分错一些样本。对每个样本点引入松弛因子<span class="math inline">\(\xi_{i} \geqslant 0\)</span>，即样本点的函数间隔只需要大于<span class="math inline">\(1-\xi_{i}\)</span>，放松了限制条件，<strong>原优化问题</strong>变为： <span class="math display">\[\begin{array}{ll}\min _{w, b, \xi} &amp; \frac{1}{2}\|w\|^{2}+C \sum_{i=1}^{N} \xi_{i} \\\text { s.t. } &amp; y_{i}\left(w \cdot x_{i}+b\right) \geqslant 1-\xi_{i}, \quad i=1,2, \cdots, N \\&amp; \xi_{i} \geqslant 0, \quad i=1,2, \cdots, N\end{array}\tag{13}\]</span> 如果样本点严格满足约束，对于损失函数没有贡献；如果不严格满足即<span class="math inline">\(\xi_{i}&gt;0\)</span>，损失函数就会有相应的惩罚。惩罚参数<span class="math inline">\(C\)</span>控制了一种权衡：既要间隔最大（即<span class="math inline">\(min\ ||w||\)</span>），又要分对尽可能多的样本点。</p><p>类似地，<span class="math inline">\((13)\)</span>可以通过拉格朗日乘子法转换为对偶问题后再去求解，建议吃饱的同学自己尝试一下。<span class="math inline">\((13)\)</span>的<strong>对偶优化问题</strong>是： <span class="math display">\[\begin{array}{ll}\min _{\alpha} &amp; \frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} \alpha_{i} \alpha_{j} y_{i} y_{j}\left(x_{i} \cdot x_{j}\right)-\sum_{i=1}^{N} \alpha_{i} \\\text { s.t. } &amp; \sum_{i=1}^{N} \alpha_{i} y_{i}=0 \\&amp; 0 \leqslant \alpha_{i} \leqslant C, \quad i=1,2, \cdots, N\end{array}\tag{14}\]</span> 此时此刻恰如彼时彼刻，使用普通的二次规划算法或者更高效的SMO求解<span class="math inline">\((14)\)</span>得到最优的<span class="math inline">\(\alpha_{i}^{*}\)</span>，进而得到软间隔SVM的解： <span class="math display">\[w^{*}=\sum_{i=1}^{N} \alpha_{i}^{*} y_{i} x_{i} \\b^{*}=y_{j}-\sum_{i=1}^{N} \alpha_{i}^{*} y_{i}\left(x_{i} \cdot x_{j}\right)\tag{15}\]</span> 其中，<span class="math inline">\(y_{j}\)</span>要满足<span class="math inline">\(0&lt;\alpha_j&lt;C\)</span>。 ## 非线性可分 上面讨论了线性分类问题，对于非线性可分问题，SVM的思想是做一个变换<span class="math inline">\(\phi(\vec{x})\)</span>，将样本映射到另外一个空间，也许就线性可分了。 由于目标函数和决策函数<strong>只依赖于样本对之间的点积</strong>，所以无需显式定义变换<span class="math inline">\(\phi(\vec{x})\)</span>，只要定义一个函数<span class="math inline">\(K(\vec{x_i},\vec{x_j})=\phi(\vec{x_i})\cdot\phi(\vec{x_j})\)</span>提供新空间的样本点的点积即可，<span class="math inline">\(K\)</span>叫做<strong>Kernel Function</strong>。 此时原优化问题为： <span class="math display">\[\begin{array}{ll}\min _{w, b, \xi} &amp; \frac{1}{2}\|w\|^{2}+C \sum_{i=1}^{N} \xi_{i} \\\text { s.t. } &amp; y_{i}\left(w^T \phi(x_{i})+b\right) \geqslant 1-\xi_{i}, \quad i=1,2, \cdots, N \\&amp; \xi_{i} \geqslant 0, \quad i=1,2, \cdots, N\end{array}\]</span> 对偶问题为： <span class="math display">\[\begin{array}{ll}\min _{\alpha} &amp; \frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} \alpha_{i} \alpha_{j} y_{i} y_{j}\left(K(x_{i},x_{j})\right)-\sum_{i=1}^{N} \alpha_{i} \\\text { s.t. } &amp; \sum_{i=1}^{N} \alpha_{i} y_{i}=0 \\&amp; 0 \leqslant \alpha_{i} \leqslant C, \quad i=1,2, \cdots, N\end{array}\]</span> 一种常用的kernel是线性的：<span class="math inline">\((\vec{u}\cdot\vec{v}+1)^n\)</span>，当前空间的<span class="math inline">\(u\)</span>和<span class="math inline">\(v\)</span>通过简单的点积映射到了另一个空间； 另一种kernel是高斯核：<span class="math inline">\(e^{-\frac{||x_i-x_j||^2}{\sigma}}=e^{-\gamma{||x_i-x_j||}^2}\)</span>。 高斯核对应高斯径向基函数分类器，这里有2个参数<span class="math inline">\(C\)</span>和<span class="math inline">\(\gamma\)</span>需要调节：惩罚系数<span class="math inline">\(C\)</span>表示分类器对于误差的宽容度，<span class="math inline">\(C\)</span>越大表示越不能容忍误差，容易过拟合，按照经验可以在<span class="math inline">\([10^{-4},10^4]\)</span>间调节；<span class="math inline">\(\gamma\)</span>控制径向作用范围，<span class="math inline">\(\gamma\)</span>越大，径向作用范围越小，有可能将每个样本点单独形成一个分类，容易过拟合，<span class="math inline">\(\gamma\)</span>过小，径向范围过大，容易将2个样本映射为同一个点，无法区分，一般<span class="math inline">\(\gamma=\frac{1}{样本特征数}\)</span>。另外，这2个参数可以通过交叉验证和grid-search来调整。 ## 扩展 SVM处理多分类问题的方式主要有2种：</p><ul><li>one-against-one 在每2个类之间都构造一个binary SVM，共有<span class="math inline">\(C_m^2\)</span>个SVM，对新数据采用Voting的方式进行分类。</li><li>one-against-the-rest 对每个类，将其作为正类，其余<span class="math inline">\(m-1\)</span>个类作为负类，共<span class="math inline">\(m\)</span>个SVM，对新数据采用winner-takes-all策略。</li></ul><p>如果样本不均衡，目标函数中的惩罚项主要由多数类构成，超平面偏向少数类，甚至将所有样本都分在同一侧。 此时目标变为了在不严重损失多数类精度的情况下，在少数类上获得尽可能高的分类正确率。一般来讲有2种做法：</p><ul><li>数据合成 对少数类样本进行分析并根据其特点人工插值合成新样本添加到数据集中，构成均衡数据集。比较常用的方法是SMOTE(Synthetic Minority Oversampling Technique)。</li><li>加权SVM 将少数类分错的代价很大，所以在惩罚项中对两个类设置不同的惩罚系数，少数类的系数设置更大，甚至可以对每个样本都设置不同的惩罚系数，此时原优化问题变为： <span class="math display">\[\begin{array}{ll}\min _{w, b, \xi} &amp; \frac{1}{2}\|w\|^{2}+C^+ \sum_{y_i=1} \xi_{i}+C^-\sum_{y_i=-1} \xi_{i} \\\text { s.t. } &amp; y_{i}\left(w^T \phi(x_{i})+b\right) \geqslant 1-\xi_{i}, \quad i=1,2, \cdots, N \\&amp; \xi_{i} \geqslant 0, \quad i=1,2, \cdots, N\end{array}\]</span> 对偶问题： <span class="math display">\[\begin{array}{ll}\min _{\alpha} &amp; \frac{1}{2} \sum_{i=1}^{N} \sum_{j=1}^{N} \alpha_{i} \alpha_{j} y_{i} y_{j}\left(K(x_{i},x_{j})\right)-\sum_{i=1}^{N} \alpha_{i} \\\text { s.t. } &amp; \sum_{i=1}^{N} \alpha_{i} y_{i}=0 \\&amp; 0 \leqslant \alpha_{i} \leqslant C^+, y_i=+1 \\&amp; 0 \leqslant \alpha_{i} \leqslant C^-, y_i=-1\end{array}\]</span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IO Multiplexing</title>
      <link href="/2020/10/23/IO%20Multiplexing/"/>
      <url>/2020/10/23/IO%20Multiplexing/</url>
      
        <content type="html"><![CDATA[<p>当多个独立的I/O事件同时发生时，I/O多路复用是一种解决方式。 为了提高服务器的吞吐量，<strong>单个线程</strong>通过记录跟踪每个I/O流的状态同时管理多个I/O流，非常类似时分复用技术。 <img src="https://img-blog.csdnimg.cn/20200825092905568.gif#pic_center" alt="在这里插入图片描述" /> I/O多路复用的具体实现方式有3种：<code>select()</code>、<code>poll()</code>和<code>epoll()</code>。 ## select <code>select()</code>系统调用：<code>int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);</code> <code>select()</code>会一直阻塞直到至少一个文件描述符就绪，可以读写，或者出现异常。 中间3个参数会被修改，表示哪个FD准备好了，最后一个表示等待时间，NULL表示无限等待。 返回就绪的FD数目，有错-1。只知道有就绪，不知道哪个FD就绪了。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s = socket();</span><br><span class="line">bind();</span><br><span class="line">listen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fd[];  <span class="comment">// 需要监听的socket集合</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = select();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fd.size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (FD_ISSET()) &#123;  <span class="comment">// 判断哪个socket接收到数据</span></span><br><span class="line">            <span class="comment">// 处理数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <code>select()</code>是阻塞方法，只有某个socket接收到数据才会继续执行，唤醒进程。 直接的方式缺点就比较多：</p><ul><li>时间开销大，所以规定最多监听1024个socket；</li><li>每次调用都要把fd集合从用户态拷贝到内核态。</li><li>线程不安全：</li></ul><blockquote><p>If a file descriptor being monitored by select() is closed in another thread, the result is unspecified. ## poll 去掉了1024的限制，线程不安全。 ## epoll 线程安全，知道哪个FD就绪，只有Linux支持。 相比于<code>select()</code>，<code>epoll()</code>不会无差别轮询，只处理接收到数据的socket，这样复杂度就降低为<span class="math inline">\(O(k)\)</span>。 ## Reference <a href="https://www.zhihu.com/question/32163005/answer/55772739">I/O多路复用是什么意思</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>魏晋风度浅探</title>
      <link href="/2020/10/18/%E9%AD%8F%E6%99%8B%E9%A3%8E%E5%BA%A6%E6%B5%85%E6%8E%A2/"/>
      <url>/2020/10/18/%E9%AD%8F%E6%99%8B%E9%A3%8E%E5%BA%A6%E6%B5%85%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<p>从小学作文开始，就喜欢写一些辞藻华丽的诗歌文章。 竹林七贤我当时只听说过山涛、阮籍和嵇康，引用之意是觉这几位遗世独立、傲然风骨，没有世俗羁绊，整日琴棋书画、饮酒作乐、不问世事，潇洒写意的生活，正是吾向往之。《广陵散》和《与山巨源绝交书》更是勾起了我对于嵇康无限的崇拜。 我极喜欢嵇康和纳兰性德，即使一些毫无关联的题目，也要用他们的事例强行去阐述论点。但由于只喜欢钻研近现代的战争史（可以原谅，男孩一般都喜欢枪支、火炮等近现代武器），一直对古代史不感兴趣，觉得几千年前的文化故事不过是落后、腐朽的代名词而已，所以其实对一些人物只是略知一二，最近花了些时间重新捋了一下魏晋那段历史，故分享于此。 ## 历史背景 我一直觉得想要真正了解一段文化、一个人物，就首先要了解他们所处的历史时代。 曹操在东汉末年的群雄逐鹿中“挟天子以令诸侯”，在三国末期势力最强。曹操去世后，其子曹丕于公元220年建立曹魏政权。公元265年，司马炎建立西晋，史称晋武帝。竹林七贤就是生活在这样一段历史时期： 山涛：205<sub>283 阮籍：210</sub>263 嵇康：224<sub>263 刘伶：221</sub>300 向秀：227<sub>272 阮咸：不详 王戎：234</sub>305 曹丕去世后，曹叡即位，公元239年隆冬时节，曹叡驾崩之际，将皇位传给仅仅8岁的曹芳，并将其同时托孤给司马懿和曹爽，于是在接下来漫长的几十年中，曹氏集团和司马氏集团开始了你死我活的政治斗争，史称“曹马之争”。 ## 竹林七贤 在那个极其黑暗动荡的乱世之中，文学和艺术却得到了出乎意料的大发展，人们对自由解放的追求达到了极致，鲁迅先生称之为魏晋风度。当时盛行清谈和隐逸，古人的心灵更加丰富和缠绵，规则的约束压抑了个性与自我，却在频频交流中迎来了文化的繁荣。不要用成王败寇的观点去评价历史人物，参差百态，实乃幸福本源。</p><p>而对魏晋风度影响最大的自然就是竹林七贤，虽然百年之后后人将其称之为七贤，但这个文人沙龙的规模其实大于7人，之所以定为七贤，据刘强老师的说法是为了攀附《论语》：</p><blockquote><p>贤者辟世，其次辟地，其次辟色，其次辟言。作者七人矣。</p></blockquote><p>另外，关于竹林七贤是否因为经常在竹林活动而得名也存疑。陈寅恪先生认为有可能是借佛经之中的“竹林精舍”的故事来表达出世的理想。据考证，他们的活动地点在都城洛阳以及山阳（今云台山）附近，后来当地可能为了借竹林七贤的名声促进旅游业的发展，所以人工栽种了一些竹林。</p><p>当时流行修身齐家治国平天下，但是这些才华横溢的文人开始却不愿做官，这是为什么呢？</p><p>“曹马之争”愈演愈烈，再加上这些名士的名气和影响力，他们被逼站队才能得以生存。那么问题来了，是站在司马家族一边，还是支持曹氏集团呢？曹爽此时被封为大将军，司马懿则是太尉，选择稍有不慎，很可能会被秋后算账。</p><p>作为老大哥，山涛最先受到“曹马之争”的冲击。</p><p>山涛早年丧父，出身庶族，隐居不仕，刘老师说可能是因为时机不成熟，2个政治集团的形势不明朗。山涛本人是有政治抱负的，但为了自保只能暂时推脱出仕邀请。</p><p>公元244年，他觉得形势明朗，自己的机会来了，终于在40岁时开始了官宦生涯，并且选择站到曹爽队伍里。</p><p>为了彻底击败曹氏集团，司马懿称病不朝，以退为进。极富政治头脑的山涛嗅出了不同的味道，突然醒悟，夜半弃官。</p><p>山涛弃官以后，司马懿在称病迷惑曹爽的同时，积累军事力量、联络曹魏老臣取得道义支持、散播舆论蛊惑人心，家族势力日渐强大。而就在此时，山涛结交了阮籍、嵇康等名士，整日醉饮玩乐。</p><p>公元249年，司马懿发动政变，一举粉碎了政敌曹爽集团，史称“高平陵之变”，以谋反罪处死了曹氏整个家族，数千人惨死，竹林七贤也受到了惊吓。接着为了缓解白色恐怖的气氛，司马家族开始招贤纳士、笼络人心，竹林七贤自然也在招贤之列：</p><p>山涛由于和司马氏的姻亲关系，第二次做官便凭借亲戚的身份主动投靠司马师，从此以后官运亨通，步入了仕途的快车道。</p><p>相比之下，在音乐、诗赋方面才华横溢的阮籍就显得异常凄惨。</p><p>阮籍的背景十分复杂，他的父亲阮瑀是建安七子之一，和曹魏关系密切；同时他又是司马氏的亲戚。 被招纳时，由于害怕司马懿的屠刀，于是阮籍答应为官，做了一个闲职。但他尸位素餐，整日划水摸鱼，几乎没有作为。并且他和司马氏倡导的封建礼教格格不入（司马氏当时号召“以孝治天下”，公元258年左右，阮籍丧母，他公然违背礼法，在葬礼期间喝酒吃肉），生活得极其痛苦但又不想过早结束生命，所以只能寄托于司马懿的死亡。</p><p>司马懿死后，其子司马师又把阮籍召去做官。司马昭上台后，为了拉拢阮籍，想要将阮籍的女儿嫁给司马昭的儿子司马炎，阮籍只能用烂醉如泥来应付。天天这样也不是办法，他就主动求官，调往外地，金蝉脱壳之计，但很不幸，十天后又被司马昭看穿并召回幕府。从此慎言慎行、明哲保身、郁郁寡欢。</p><p>嵇康死后，阮籍抑郁而终，晚年被迫为司马昭写了一篇歌功颂德的《劝进文》，成为了人生的污点。</p><p>向秀跟嵇康关系最好，嵇康的死给他带去了巨大的阴影，后来为了自保也踏上了仕途。</p><p>王戎后来做了大官，却变得非常吝啬，跟年轻时候判若两人，但是他依然很重情谊。 阮咸后来被山涛举荐，但没有被任用。</p><p>刘伶据说是7人里最丑的，但是他的精神自我十分强大，整日烂醉如泥，在酒中放飞自我，晚景凄凉。代表作《酒德颂》，刘强老师说他是真正的行为艺术家hh。 ## 嵇康 嵇康出身普通，自幼颠沛流离。和曹操同乡，其妻子是曹操的曾孙女长乐亭主，嵇康最后被司马昭所杀可能与这个因素也有关系。诗歌、文章、书法、乐理造诣很高，据传还是个大帅哥，史书记载：</p><blockquote><p>嵇康为人，肃肃如松下风，酒醉时倾倒，若玉山之将崩。</p></blockquote><p>他提出越名教任自然，反对礼教，追求自然和本我，厌恶政治斗争，据传嵇康在打铁时，司马氏的走狗钟会前来探访，所谓道不同不相与谋，故意把钟会晾在一边不说，走前还冷嘲热讽了一通。</p><p>当时司马师废掉了曹芳，引起淮南兵变，嵇康也想起兵响应，被山涛劝阻。</p><p>公元255年，司马师在平定叛乱时，由于得病死掉了。随后司马昭上台，希望招纳嵇康，嵇康借口避地河东。</p><p>嵇康以宽厚待人，虽然他的哥哥嵇喜还有几个朋友做了司马氏的官，但仍然没有影响他们的友谊。对待朋友友好，但是对待敌人却像严冬一样冷峻无情，也导致了后来悲剧的发生。</p><p>后来他又多次拒绝司马昭的邀请，但很不幸，嵇康最终还是卷进了政治斗争： 皇帝曹髦一直被司马昭操控，被迫封其为相国，眼看分分钟就要被取代的节奏。后来也由此诞生一个成语：司马昭之心——路人皆知。公元260年，曹髦很快就被司马昭干掉了，又找了一个傀儡。</p><p>公元261年，山涛升迁，找到嵇康希望他代替自己之前的官职。两人虽然“契若金兰”，但嵇康依然愤怒地写下《与山巨源绝交书》，极尽讽刺羞辱山涛，他觉得山涛拉拢他是为了缓解自己的尴尬，一起下水就不觉得那么罪过了。嵇康在书里自明心志：自己生性疏懒，阐述了自己做官的七不堪、二不可： 没法睡懒觉；喜欢休闲弹琴，出去玩不自由；需要正襟危坐；不喜欢写公务信；不喜欢吊丧；不喜欢和俗人共事；性情不耐烦，不喜欢做繁琐的事情。 菲薄古代的圣贤，被发现就挂了；性格刚烈、嫉恶如仇，沉不住气，不适合做官。</p><p>历史上关于两人是否真的绝交有争论：尤其是后来还发生了托孤事件。</p><p>屋漏偏逢连夜雨，接下来又发生了吕安事件，直接将嵇康送入了火坑之中：</p><p>吕巽是吕安的哥哥，对吕安的妻子有非分之想并且给他带了绿帽子，吕安告诉了嵇康，嵇康严词谴责了吕巽，但为了声誉，劝吕安隐忍不发，事情就这样被捂了下来。</p><p>吕巽和钟会关系很好，为了报复吕安，他向钟会进献谗言，钟会很可能为了牵出嵇康，以报一箭之仇，不久后就抓了吕安。嵇康听到消息后十分愤怒，写了一封《与吕长悌绝交书》，之后只身前往洛阳，去为吕安辩护。</p><p>吕安在流放途中，给嵇康写了一封言辞激烈的信。大意是说天下大乱，自己承受冤屈，他要改天换地。这封信很快落到了钟会手上，钟会终于等到了机会。</p><p>吕安事件由此升级为谋反罪，嵇康被当作同犯抓了。司马昭本来就忌惮嵇康，对他的不合作态度怀恨在心，但对于是否要杀嵇康也犹豫不决，此时钟会又站了出来上纲上线，说嵇康上不臣天子，下不事王侯，私下又罗织了几个理由：他说嵇康是人中龙凤，并且当年有起兵谋反之意。</p><p>欲加之罪，何患无辞？于是吕安和嵇康被关入死囚牢房，等待秋后问斩。</p><p>命犯小人，嵇康入狱后，有几千太学生为他抱打不平。他也在狱中反思自己，写下了《幽愤诗》，觉得自己虽然心地善良，但却没有识别坏人的能力。</p><p>临死前将其儿子嵇绍托付给山涛，有人说这是为了缓解山涛的愧疚之意，山涛接受了嵇康的托孤，把嵇绍培养的很好：</p><blockquote><p>巨源在，汝不孤矣！</p></blockquote><p>就在行刑前，太学生又请愿释放嵇康当太学老师。司马昭看到嵇康如此的影响力，杀心更重： 公元263年，嵇康与吕安一起在都城洛阳被处死。</p><p>据记载，行刑那天人山人海，嵇康顾看日影、神色坦然。</p><p>嵇康找哥哥嵇喜要了一把琴，嵇喜果然随身携带，而且嵇康的弹奏要求竟然被同意： 在刑场上，他平静呼吸，调整琴弦，弹完了最后的哀歌《广陵散》后说到：当年有一个朋友袁孝尼求学此散，自己由于吝惜，没有教给他：</p><blockquote><p>广陵散于今绝矣！ ## Reference 同济大学的刘强老师是魏晋史的专家，百家讲坛和上海图书馆系列讲座中都收录了他的精彩分享： <a href="http://tv.cctv.com/lm/bjjt/index.shtml#&amp;Type=0&amp;Y=2010&amp;M=10">百家讲坛之竹林七贤</a> <a href="https://www.bilibili.com/video/BV1Zt411d7Fr">竹林七贤与魏晋风度</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bomb Lab</title>
      <link href="/2020/10/04/Bomb%20Lab/"/>
      <url>/2020/10/04/Bomb%20Lab/</url>
      
        <content type="html"><![CDATA[<p>给了<code>bomb.c</code>和<code>bomb</code>二进制可执行目标程序，<code>bomb.c</code>不能直接编译和运行，只是有一些提示，但是程序大致结构是：有6个关卡，每个都需要输入（stdin/文件）一个字符串，运行后判断是否输入了正确的字符串。我们需要反汇编<code>bomb</code>，找到这6个正确的字符串。 我是在Amazon的云服务器上完成的，64位Red Hat。</p><p>第一步把汇编代码扔到一个文件中，方便调试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.asm</span><br></pre></td></tr></table></figure><h2 id="phase-1">phase 1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">0000000000400ee0 &lt;phase_1&gt;:</span><br><span class="line">  400ee0:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400ee4:be 00 24 40 00       mov    $0x402400,%esi</span><br><span class="line">  400ee9:e8 4a 04 00 00       callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  400eee:85 c0                test   %eax,%eax</span><br><span class="line">  400ef0:74 05                je     400ef7 &lt;phase_1+0x17&gt;</span><br><span class="line">  400ef2:e8 43 05 00 00       callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400ef7:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  400efb:c3                   retq</span><br></pre></td></tr></table></figure><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9。 我们的input作为第一个参数存入rdi，第二个参数0x402400存入rsi，传入函数处理， 调用了<code>401338</code>处的函数<code>strings_not_equal</code>：</p><p>在400ee4设个断点，看看402400里是啥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gdb</span><br><span class="line">file bomb</span><br><span class="line">b *0x400ee4</span><br><span class="line">run</span><br><span class="line">x/s Addr// 显示内存值为字符串</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200703101513705.png" alt="在这里插入图片描述" /> 为了确认这就是我们要的答案，再去看看调用的函数： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">0000000000401338 &lt;strings_not_equal&gt;:</span><br><span class="line">  401338:41 54                push   %r12</span><br><span class="line">  40133a:55                   push   %rbp</span><br><span class="line">  40133b:53                   push   %rbx</span><br><span class="line">  40133c:48 89 fb             mov    %rdi,%rbx # 第一个参数(地址)存入rbx</span><br><span class="line">  40133f:48 89 f5             mov    %rsi,%rbp # 第二个参数(地址)存入rbp</span><br><span class="line">  401342:e8 d4 ff ff ff       callq  40131b &lt;string_length&gt; # 用rdi的值调用string_length</span><br><span class="line">  401347:41 89 c4             mov    %eax,%r12d # 返回值存入r12d</span><br><span class="line">  40134a:48 89 ef             mov    %rbp,%rdi # 第二个参数作为入参调用string_length</span><br><span class="line">  40134d:e8 c9 ff ff ff       callq  40131b &lt;string_length&gt;</span><br><span class="line">  401352:ba 01 00 00 00       mov    $0x1,%edx</span><br><span class="line">  401357:41 39 c4             cmp    %eax,%r12d # 比较两个字符串的长度</span><br><span class="line">  40135a:75 3f                jne    40139b &lt;strings_not_equal+0x63&gt; # 不相等跳转</span><br><span class="line">  40135c:0f b6 03             movzbl (%rbx),%eax # 将rbx地址中的值(input的第一个字母)存入eax</span><br><span class="line">  40135f:84 c0                test   %al,%al</span><br><span class="line">  401361:74 25                je     401388 &lt;strings_not_equal+0x50&gt;</span><br><span class="line">  401363:3a 45 00             cmp    0x0(%rbp),%al # 比较rbp地址中的值(待比较的第一个字母)</span><br><span class="line">  401366:74 0a                je     401372 &lt;strings_not_equal+0x3a&gt; # 相等跳转</span><br><span class="line">  401368:eb 25                jmp    40138f &lt;strings_not_equal+0x57&gt; # 不相等跳转</span><br><span class="line">  40136a:3a 45 00             cmp    0x0(%rbp),%al</span><br><span class="line">  40136d:0f 1f 00             nopl   (%rax)</span><br><span class="line">  401370:75 24                jne    401396 &lt;strings_not_equal+0x5e&gt;</span><br><span class="line">  401372:48 83 c3 01          add    $0x1,%rbx # 指针+1</span><br><span class="line">  401376:48 83 c5 01          add    $0x1,%rbp # 指针+1</span><br><span class="line">  40137a:0f b6 03             movzbl (%rbx),%eax</span><br><span class="line">  40137d:84 c0                test   %al,%al</span><br><span class="line">  40137f:75 e9                jne    40136a &lt;strings_not_equal+0x32&gt; # 跳回循环</span><br><span class="line">  401381:ba 00 00 00 00       mov    $0x0,%edx</span><br><span class="line">  401386:eb 13                jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  401388:ba 00 00 00 00       mov    $0x0,%edx</span><br><span class="line">  40138d:eb 0c                jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  40138f:ba 01 00 00 00       mov    $0x1,%edx</span><br><span class="line">  401394:eb 05                jmp    40139b &lt;strings_not_equal+0x63&gt;</span><br><span class="line">  401396:ba 01 00 00 00       mov    $0x1,%edx</span><br><span class="line">  40139b:89 d0                mov    %edx,%eax</span><br><span class="line">  40139d:5b                   pop    %rbx</span><br><span class="line">  40139e:5d                   pop    %rbp</span><br><span class="line">  40139f:41 5c                pop    %r12</span><br><span class="line">  4013a1:c3                   retq</span><br></pre></td></tr></table></figure> 所以这个函数就是比较两个字符串是否相同，先比较长度，再比较每个字符。故我们的第一个key就是Border relations with Canada have never been better. ## phase 2 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">0000000000400efc &lt;phase_2&gt;:</span><br><span class="line">  400efc:55                   push   %rbp</span><br><span class="line">  400efd:53                   push   %rbx</span><br><span class="line">  400efe:48 83 ec 28          sub    $0x28,%rsp # 栈指针-40</span><br><span class="line">  400f02:48 89 e6             mov    %rsp,%rsi # 栈指针作为第二个参数</span><br><span class="line">  400f05:e8 52 05 00 00       callq  40145c &lt;read_six_numbers&gt;</span><br><span class="line">  400f0a:83 3c 24 01          cmpl   $0x1,(%rsp) # 检查是否相等</span><br><span class="line">  400f0e:74 20                je     400f30 &lt;phase_2+0x34&gt; # 相等跳转</span><br><span class="line">  400f10:e8 25 05 00 00       callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f15:eb 19                jmp    400f30 &lt;phase_2+0x34&gt;</span><br><span class="line">  400f17:8b 43 fc             mov    -0x4(%rbx),%eax # (rbx-4)赋给eax</span><br><span class="line">  400f1a:01 c0                add    %eax,%eax</span><br><span class="line">  400f1c:39 03                cmp    %eax,(%rbx) # 比较当前数与下一个数</span><br><span class="line">  400f1e:74 05                je     400f25 &lt;phase_2+0x29&gt; # 相等跳转</span><br><span class="line">  400f20:e8 15 05 00 00       callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400f25:48 83 c3 04          add    $0x4,%rbx</span><br><span class="line">  400f29:48 39 eb             cmp    %rbp,%rbx # 是否比完了6个数</span><br><span class="line">  400f2c:75 e9                jne    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f2e:eb 0c                jmp    400f3c &lt;phase_2+0x40&gt;</span><br><span class="line">  400f30:48 8d 5c 24 04       lea    0x4(%rsp),%rbx # 栈指针+4赋给rbx</span><br><span class="line">  400f35:48 8d 6c 24 18       lea    0x18(%rsp),%rbp # 栈指针+24赋给rbp</span><br><span class="line">  400f3a:eb db                jmp    400f17 &lt;phase_2+0x1b&gt;</span><br><span class="line">  400f3c:48 83 c4 28          add    $0x28,%rsp</span><br><span class="line">  400f40:5b                   pop    %rbx</span><br><span class="line">  400f41:5d                   pop    %rbp</span><br><span class="line">  400f42:c3                   retq</span><br></pre></td></tr></table></figure> 第一次是1，第二次是2，4，8，16，32 ## phase 3 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:48 83 ec 18          sub    $0x18,%rsp # 栈指针-24</span><br><span class="line">  400f47:48 8d 4c 24 0c       lea    0xc(%rsp),%rcx # 栈指针+12赋给rcx</span><br><span class="line">  400f4c:48 8d 54 24 08       lea    0x8(%rsp),%rdx # 栈指针+8赋给rdx</span><br><span class="line">  400f51:be cf 25 40 00       mov    $0x4025cf,%esi</span><br><span class="line">  400f56:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  400f5b:e8 90 fc ff ff       callq  400bf0 &lt;__isoc99_sscanf@plt&gt; # 返回值存入eax</span><br><span class="line">  400f60:83 f8 01             cmp    $0x1,%eax</span><br><span class="line">  400f63:7f 05                jg     400f6a &lt;phase_3+0x27&gt; # 大于跳转</span><br><span class="line">  400f65:e8 d0 04 00 00       callq  40143a &lt;explode_bomb&gt; # 否则爆炸</span><br><span class="line">  400f6a:83 7c 24 08 07       cmpl   $0x7,0x8(%rsp) #(rsp+8)即输入的第一个整数与7比较</span><br><span class="line">  400f6f:77 3c                ja     400fad &lt;phase_3+0x6a&gt; # 大于爆炸</span><br><span class="line">  400f71:8b 44 24 08          mov    0x8(%rsp),%eax # 输入的第一个整数赋给eax</span><br><span class="line">  400f75:ff 24 c5 70 24 40 00 jmpq   *0x402470(,%rax,8) # 跳转8*rax+0x402470</span><br><span class="line">  400f7c:b8 cf 00 00 00       mov    $0xcf,%eax</span><br><span class="line">  400f81:eb 3b                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f83:b8 c3 02 00 00       mov    $0x2c3,%eax</span><br><span class="line">  400f88:eb 34                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f8a:b8 00 01 00 00       mov    $0x100,%eax</span><br><span class="line">  400f8f:eb 2d                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f91:b8 85 01 00 00       mov    $0x185,%eax</span><br><span class="line">  400f96:eb 26                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f98:b8 ce 00 00 00       mov    $0xce,%eax</span><br><span class="line">  400f9d:eb 1f                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400f9f:b8 aa 02 00 00       mov    $0x2aa,%eax</span><br><span class="line">  400fa4:eb 18                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fa6:b8 47 01 00 00       mov    $0x147,%eax</span><br><span class="line">  400fab:eb 11                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fad:e8 88 04 00 00       callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fb2:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  400fb7:eb 05                jmp    400fbe &lt;phase_3+0x7b&gt;</span><br><span class="line">  400fb9:b8 37 01 00 00       mov    $0x137,%eax</span><br><span class="line">  400fbe:3b 44 24 0c          cmp    0xc(%rsp),%eax</span><br><span class="line">  400fc2:74 05                je     400fc9 &lt;phase_3+0x86&gt;</span><br><span class="line">  400fc4:e8 71 04 00 00       callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fc9:48 83 c4 18          add    $0x18,%rsp</span><br><span class="line">  400fcd:c3                   retq</span><br></pre></td></tr></table></figure> 400f51将地址0x4025cf赋给esi，作为第二个参数，看下这个地址有啥：为了方便，我们把前面问题的答案仍在一个文件ans.txt中， <img src="https://img-blog.csdnimg.cn/20200703164446264.png" alt="在这里插入图片描述" /> 输入是2个整数，第一个不能大于7，基于第一个整数（0-7）跳转...... </explode_bomb>&lt;/phase_3+0x86&gt;&lt;/phase_3+0x7b&gt;</explode_bomb>&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x7b&gt;&lt;/phase_3+0x6a&gt;</explode_bomb>&lt;/phase_3+0x27&gt;</phase_3>&lt;/phase_2+0x1b&gt;&lt;/phase_2+0x40&gt;&lt;/phase_2+0x1b&gt;</explode_bomb>&lt;/phase_2+0x29&gt;&lt;/phase_2+0x34&gt;</explode_bomb>&lt;/phase_2+0x34&gt;</read_six_numbers></phase_2>&lt;/strings_not_equal+0x63&gt;&lt;/strings_not_equal+0x63&gt;&lt;/strings_not_equal+0x63&gt;&lt;/strings_not_equal+0x32&gt;&lt;/strings_not_equal+0x5e&gt;&lt;/strings_not_equal+0x57&gt;&lt;/strings_not_equal+0x3a&gt;&lt;/strings_not_equal+0x50&gt;&lt;/strings_not_equal+0x63&gt;</string_length></string_length></strings_not_equal></explode_bomb>&lt;/phase_1+0x17&gt;</strings_not_equal></phase_1></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我的理想</title>
      <link href="/2020/09/26/%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%90%86%E6%83%B3/"/>
      <url>/2020/09/26/%E8%B0%88%E8%B0%88%E6%88%91%E7%9A%84%E7%90%86%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4db390eba6998ec025db8f5ec65939a18d4643ae7d136af480bc766d0e6ad27b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT Operating System Engineering#0 Booting a PC</title>
      <link href="/2020/09/16/MIT%20Operating%20System%20Engineering#0%20Booting%20a%20PC/"/>
      <url>/2020/09/16/MIT%20Operating%20System%20Engineering#0%20Booting%20a%20PC/</url>
      
        <content type="html"><![CDATA[<p><em>最近在学MIT的OS课程，lab绝对业界良心。 XJTU的操作系统课就是写一个系统调用，改下进程软中断通信的代码，代码量不足500。。。 MIT上课用xv6来教学，lab是做一个完整的小型操作系统JOS。</em></p><hr /><h2 id="配置环境">配置环境</h2><p>虽然没什么技术含量，但是这真的是令人头疼的事。附：<a href="https://blog.csdn.net/eye_water/article/details/80638463">图文教程</a> 需要一台x86机器，一般的Linux发行版应该都可以，可以使用<code>unabenlme -a</code>查看，如果显示<code>xxx GNU/Linux</code>就行，MIT的学生可以使用配置好的远程Server。 本来打算白嫖下Harvard的服务器，但是没有<code>root</code>权限，只能可怜巴巴地在Win环境用虚拟机。 平台：Vmware Player15，<a href="http://old-releases.ubuntu.com/releases/14.04.5/">Ubuntu-14.04.5-desktop-i386.iso</a></p><ul><li>检验编译链 <code>objdump -i</code>：第二行显示elf32-i386； <code>gcc -m32 -print-libgcc-file-name</code>：打印出/usr/lib/gcc/i686-linux-gnu/4.8/libgcc.a</li><li>安装git：<code>sudo apt-get install git</code></li><li>下载qemu 建议不要作死，安装MIT Patch过的版本：<code>git clone https://github.com/mit-pdos/6.828-qemu.git qemu</code></li><li>安装依赖库 官方说要装5个库，但其实libtool-bin好像找不到，不过不影响后续： <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install libsdl1.<span class="number">2</span><span class="literal">-dev</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install libglib2.<span class="number">0</span><span class="literal">-dev</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install libz<span class="literal">-dev</span></span><br><span class="line">sudo apt<span class="literal">-get</span> install libpixman<span class="literal">-1</span><span class="literal">-dev</span></span><br></pre></td></tr></table></figure></li><li>配置qemu 切到qemu目录，<code>./configure --disable-kvm --disable-werror --target-list=&quot;i386-softmmu x86_64-softmmu&quot;</code> <code>[--prefix=PFX]</code>可选参数是选择安装路径，这里就默认在<code>/usr/local</code></li><li>安装qemu：<code>sudo make &amp;&amp; sudo make install</code></li><li>下载实验代码 根目录下新建6.828目录，切到该目录，<code>git clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab</code>，切到<code>lab</code>目录，<code>make</code>就可以了。 ## PC Bootstrap 物理地址空间： <img src="https://img-blog.csdnimg.cn/20200523082913317.png" alt="在这里插入图片描述" /> 以前的PC内存只有1MB，Low Memory是PC唯一能用的RAM。VGA Display是VGA缓冲区和固件，BIOS以前都在ROM中，不过现今都在闪存中，做完系统初始化（PCI总线等重要设备），寻找bootable设备(硬盘)，读取boot loader加载OS，将控制权转OS。后来内存远远超过1MB，可用的也就有Extended Memory，不过为了后向兼容，还是保留了Low Memory，这样可用的RAM就被分为了两部分。如果64位系统，那么内存更大，这样为了兼容，32-bit memory mapped devices还是要保留，就又被割裂了。 ## The Boot Loader 硬盘的第一个分区存放启动程序，包括一个汇编文件<code>boot/boot.S</code>和一个C文件<code>boot/main.c</code>，启动程序将CPU从实模式转为32位保护模式，通过特殊的I/O指令读取内核。 ## The Kernel</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web Proxy</title>
      <link href="/2020/09/04/Web%20Proxy/"/>
      <url>/2020/09/04/Web%20Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">Intro</h2><p>Web Proxy是浏览器和服务器的中间人：浏览器访问网页时，将请求发给代理，由代理将该请求发给服务器；服务器返回结果时，先发送给代理，由代理发给浏览器。之所以这么做，是因为可以在Proxy这做一些事情：</p><ul><li>防火墙：<del>有些不能直接访问的网站可以通过代理去访问</del> ；</li><li>匿名器：代理可以隐藏浏览器的信息，使其对服务器匿名；</li><li>缓存：暂存服务器返回结果，加快访问速度。</li></ul><p>本项目要实现一个简单的Web Proxy，支持以下Features：</p><ul><li>中间人功能</li><li>并发</li><li>缓存</li></ul><h2 id="background-knowledge">Background Knowledge</h2><ul><li>HTTP/1.0 GET<br />当用户在浏览器输入URL<code>http://www.cnblogs.com/EIMadrigal</code>并按下回车后，浏览器会向代理发送HTTP请求，请求行可能如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://www.cnblogs.com:8080/EIMadrigal HTTP/1.1</span><br></pre></td></tr></table></figure> 代理要将这个请求解析为主机名<code>www.cnblogs.com</code>、端口<code>8080</code>和路径<code>/EIMadrigal</code>，之后代理可以尝试连接<code>www.cnblogs.com</code>并且向服务器发送新的HTTP请求，请求行如下： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /EIMadrigal HTTP/1.0</span><br></pre></td></tr></table></figure></li><li>Request Header <img src="https://img-blog.csdnimg.cn/20200726153711559.png" alt="在这里插入图片描述" /><br />请求头可能有多行，每行的基本组成就是头部字段名和值，需要注意的是：HTTP请求的每一行都以<code>\r\n</code>结束，并且整个请求是以空行<code>\r\n</code>结束。<br />项目要求：<strong>对于浏览器自带的request header，代理应该原封不动地转发</strong>。但必须将以下4项补齐，即如果自带的请求头包含以下4项之一，就按照自带请求头转发；否则按照下面的默认值转发。对于自带的其它请求头，直接转发即可：</li></ul><p>Host：服务器主机名，如果浏览器自带，直接转发；否则使用请求行里解析出的hostname。<br />User-Agent：用户的操作系统/浏览器等信息。<br />Connection：第一次请求/响应完成后，当前连接是否keep alive。<br />Proxy-Connection：同上。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host: www.cnblogs.com</span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (X11; Linux x86_64; rv:<span class="number">10.0</span><span class="number">.3</span>) Gecko/<span class="number">20120305</span> Firefox/<span class="number">10.0</span><span class="number">.3</span></span><br><span class="line">Connection: close</span><br><span class="line">Proxy-Connection: close</span><br></pre></td></tr></table></figure></p><ul><li>端口<br />请求端口：URL中的可选字段，如果用户输入时指定，代理应该连接指定端口，否则使用默认端口80。<br />监听端口：代理应该在该端口监听用户的连接请求，由命令行参数给出。可以是1024~65536之间的未被其他进程占用的任意值。</li></ul><h2 id="implementation">Implementation</h2><ul><li>Sequential Web Proxy<br />代理首先要接收浏览器HTTP请求，将浏览器的标准请求解析，转换为自己的请求发送。<br />这里的实现不难，只要模仿Tiny Server在一个死循环中监听来自浏览器的请求，接收之后在<code>void doit(int fd)</code>里完成解析请求行、请求头、将处理后的请求发送给server、接收server的响应并写回浏览器。<br />一些比较方便的函数：<br /><code>int accept(int listenfd, struct sockaddr *addr, int *addrlen)</code>：在<code>listenfd</code>等待连接请求，将client的socket信息和长度存入<code>addr</code>和<code>addrlen</code>；<br /><code>int Open_clientfd(char *hostname, char *port)</code>：Open connection to server at &lt;hostname, port&gt;, return a socket descriptor ready for reading and writing.<br />读写时可以使用提供的RIO包。</li></ul><p>这里需要注意的是请求的解析：思路是在proxy这里整合所有的请求行和请求头信息，对于所有浏览器发来的请求头的内容，原封不动保存到<code>reqHeader</code>里；对于默认的4个请求头，缺少几个，就按照规定内容增加进去。<br />还要注意：因为规定<code>Connection</code>和<code>Proxy-Connection</code>都有Connection这个单词，所以用<code>strstr</code>查找的时候：如果浏览器自带的请求头没有<code>Connection</code>但是有<code>Proxy-Connection</code>，这时程序就可能误判为有<code>Connection</code>，所以最好用函数<code>strncmp</code>或者<code>memcmp</code>。</p><p>要写一个非常robust的URI解析器还是挺繁琐的，由于C没有正则表达式（也许可以用其他语言写好编译成库，然后C程序调用？），需要考虑的情况很多。<br />首先明确URI的格式：一般由4部分组成：protocol://hostname:[port]/path/[parameters][?query][#fragment]<br />协议目前只支持HTTP和HTTPS，其它一律不合法。<br />因为一旦和服务器建立连接后，protocol和hostname就没用了，只需要path以及后面的query和fragment，为了方便起见，将/也放入path字段，因为其表示根目录，但是对于query和fragment，没有放?和#，因为找到请求内容的位置后，一些具体的搜索/片段直接用关键字即可，与?和#没关系，只有/特殊一些。</p><ul><li>Multiple Concurrent Requests<br />对于Iterative Server，同时只能处理一个连接请求：<img src="https://img-blog.csdnimg.cn/20200821122702755.png" alt="在这里插入图片描述" /><br />当第二个客户试图去连接：调用<code>connect</code>会正常返回，但Server不会<code>Accept</code>该请求，会用TCP Listen Backlog技术将该请求入队；调用<code>rio_writen</code>也会正常返回，Server会把写入的数据存入缓存；调用<code>rio_readlineb</code>会阻塞，因为Server没有发送任何的response。</li></ul><p>解决方法就是并发处理，我们的代理要能同时处理多个请求，具体的方法很多：多进程、I/O多路复用、预线程化（类似生产者-消费者问题，先创建n个线程，相当于n个缓冲区），最直接的方式就是专门有一个线程负责监听，每收到一个连接请求，就开一个新线程去进行读写。这里要采用<strong>可分离</strong>的线程模型：当其终止时，内存资源会被系统自动回收。</p><p>这部分本来很简单，但是写完后测试发现挂了： <img src="https://img-blog.csdnimg.cn/20200811181713826.png" alt="在这里插入图片描述" /><br />这很可能是NOP Server出了问题，这个Server是用Python写的，我去启动了一下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nop-server.py <span class="number">15000</span></span><br></pre></td></tr></table></figure> 发现： <img src="https://img-blog.csdnimg.cn/20200811182155577.png" alt="在这里插入图片描述" /><br />这个问题是Python的版本不匹配，把<code>nop-server.py</code>第一行的<code>#!/usr/bin/python</code>改为<code>#!/usr/bin/python3</code>即可，指定用python3的解释器执行脚本。</p><p>并发这块也妥了： <img src="https://img-blog.csdnimg.cn/20200811182851976.png" alt="在这里插入图片描述" /><br />这里的测试逻辑是这样的：Client1通过proxy连接到nop-server，这个服务器永远不会发送response，也就是这条连接一直保持；Client2通过proxy连接到Tiny，看看能不能从Tiny取个文件回来，如果能，说明并发是ok的，如果不能，说明不支持并发。之所以要用nop-server，是因为这东西可以一直连接，比较方便。如果Client1也是通过proxy连Tiny，那么可能很快就执行完了，这时Client2再去连接，很可能就不是并发的访问了，失去了测试的意义。</p><p>做第三部分之前，先实际测试下proxy的健壮性。用FireFox浏览器试试，先升级到最新版本，然后设置浏览器的代理方式： <img src="https://img-blog.csdnimg.cn/20200811194820393.png" alt="在这里插入图片描述" /><br />在8080端口运行proxy，然后找个HTTP网站<code>http://csrankings.org/</code>试一下，现在网站基本都是HTTPS，看来后续的Features要支持HTTPS了（先挖个坑）。</p><p>运行proxy之前，画风是这样的： <img src="https://img-blog.csdnimg.cn/20200811200533477.png" alt="在这里插入图片描述" /> 运行proxy之后： <img src="https://img-blog.csdnimg.cn/20200821133459152.png" alt="在这里插入图片描述" /><br />通过代理访问该网页时，页面只能加载一部分，收到59420B数据后，会<code>segmentation fault</code> ，最后发现 主要原因是<code>init_cache()</code>时空间分配写错了，但是修改后又出现了如下错误： <img src="https://img-blog.csdnimg.cn/20200824160910224.png" alt="在这里插入图片描述" /><br />是<code>memcpy</code>时候数组越界，处理buffer时候要千万小心。</p><p>这里要改下<code>csapp.c</code>中的错误处理，里面都是直接<code>exit(0)</code>，但是作为一个服务器，不能随便终止，所以我们注释掉所有Error-handling functions里的<code>exit()</code>，如果在读数据或者什么时候遇到错误，<code>return</code>即可：<code>exit()</code>是系统调用级别的，结束整个进程；<code>return</code>是函数级别的，返回给调用者，当然在<code>main()</code>里<code>return</code>也就是<code>exit(0)</code>。</p><ul><li>Caching Web Objects 缓存可以说是整个项目的难点，需要考虑的问题比较多。为了模块化，将这一部分单独写作<code>cache.c/cache.h</code>，并修改<code>Makefile</code>。<br />主要问题有2个：<br />1、多线程同步：对于cache的访问应当是线程安全的，多个线程可以同时读，但只有一个线程可以写，这就是典型的读者-写者问题（又用到操作系统的知识了）；<br />2、替换策略：cache块的数量是有限的，没有空间时就需要换出换入。一般来讲都是采用LRU方式，一个单线程的严格的LRU Cache可以参考<a href="https://leetcode.com/problems/lru-cache/">leetcode146题</a>。</li></ul><p>我们首先来解决问题一：<br />读者写者问题可以分为读优先、写优先2种：<br />读优先：来了一个读进程，除非有一个写进程正在访问，否则读者直接去读，可能导致写进程饥饿；<br />写优先：有进程读时，如果来了写进程，那么禁止后续读进程请求，现有进程读完后，写进程立即去写，可能导致读进程饥饿。<br />写优先实现起来稍微麻烦一些，所以这里采用读优先。这里就不自己实现读者写者了，使用读写锁<code>pthread_rwlock_t</code>，确保不会死锁。</p><p>接着来解决问题二：<br />要实现多线程并发LRU Cache，由于C实现双向链表和Hashtable有点繁琐，所以项目要求<strong>近似LRU</strong>即可：我们可以为每一个cache块附加一个时间戳，每当该块被访问时，就更新时间戳。需要替换时，换出时间戳最小的块即可。这样带来的问题就是：读的时候也需要更新时间戳，但更新时间需要加写锁，如果其他线程占用写锁，那么读进程就无法更新时间戳，也就不是严格的LRU了。</p><p>Cache的实现既可以像malloc lab一样采用分级的思想，也可以直接均分所有空间，整体流程如下：</p><ul><li>初始化</li><li>查Cache</li><li>如果miss，寻找可用位置</li><li>找到可用块，缓存满足大小条件的Object</li><li>更新时间戳</li></ul><p>最大的缓存对象是100KB，一共的空间1MB，平均可以缓存10个Object，这样会浪费24KB空间。所以采用分级的方法：<br />100KB * 5块 = 500KB<br />50KB * 6块 = 300KB<br />20KB * 5块 = 100KB<br />10KB * 10块 = 100KB<br />1KB * 24块 = 24KB<br />接着来构思下存储结构，<strong>设计数据结构</strong>和<strong>类（函数）接口</strong>是我认为做一个工程最难的部分，当然还有最后的效率优化问题：<br />一个cache line最基本的构成需要存储URI和OBJ，因为下次用户请求时代理需要知道请求的是哪个网站的什么内容（通过URI确定），进而如果查找到，将内容OBJ直接返回给用户。同时还需要一个时间戳以及用于同步的读写锁： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *uri;</span><br><span class="line">    <span class="keyword">char</span> *obj;</span><br><span class="line">    <span class="keyword">int</span> objSize;</span><br><span class="line">    <span class="keyword">int64_t</span> time;</span><br><span class="line">    <span class="keyword">pthread_rwlock_t</span> rwlock; </span><br><span class="line">&#125; cache_line;</span><br></pre></td></tr></table></figure> 一共有5种类型的cache，每种类型有一个number，还有一个指向该种cache第一块的指针p，p指向该种的第一小块，p+1指向该种的第二小块，以此类推： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> numOfLine;</span><br><span class="line">    cache_line *cachep;</span><br><span class="line">&#125; cache_type;</span><br></pre></td></tr></table></figure> 数据结构设计完后，需要设计函数接口，cache的操作有初始化、查找、写入（替换）和释放：<br />初始化需要为cache block分配空间，将每一块的时间戳置0，表示该块没有存储内容；<br />查找时需要遍历所有的type，再在该type中遍历所有的block，如果时间戳不为0，比对浏览器需要访问的URI与当前块的URI是否相等，相等则表示cache hit，直接写回给相应的fd；更新时间戳时，粒度越细越好，这里用<code>gettimeofday</code>精确到微秒级别；读取时如果能申请到写锁，就更新时间，否则就不更新；<br />写入时需要先计算object大小，寻找空闲的cache block，没有需要替换，满足要求后存入cache，并且将结果返给浏览器。这里要注意寻找空闲块时要<strong>从小往大</strong>，否则很可能一个很小的object占用了一块很大的block，造成严重浪费，类似于操作系统内存管理动态分配中的最佳适应算法。<br />那么这种分级的方式的缺点是：每种类型的cache块<strong>大小固定</strong>，很可能50KB的块只存了10KB内容，造成浪费，类似于固定分区分配。<br />关于替换，我们采取<strong>局部置换</strong>策略：即需要换入的object大小如果是30KB，我们只用50KB这种类型去存储，如果50KB的块用完了，就需要换出一块50KB，即使此时100KB的块有空闲，也仍然完成置换过程。</p><p>写完cache后，需要修改<code>Makefile</code>，在<code>proxy.c</code>中增加cache的部分。运行完以后，可以用<code>make clean</code>清除目录下多余的垃圾文件，比如<code>.o</code>文件等。</p><h2 id="test">Test</h2><p>测试的方式一共有3种：</p><ul><li>自动化测试 利用课程提供的脚本<code>driver.sh</code>自动进行，执行之前，需要安装一些工具： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install net-tools</span><br></pre></td></tr></table></figure> 做完所有内容后，先用<code>driver.sh</code>进行测试，发现cache部分没分。。。得，开始debug吧！我觉得GDB好难用啊，所以都是通过<code>printf</code>de的。</li></ul><p>用curl先通过proxy发个请求，然后看看proxy有没有缓存服务器返回的内容。<br />最后发现在<code>write_cache</code>时需要用到URI，但是之前解析时候把URI改了，一定注意URI最好不要改，设置为<code>const</code>比较保险。</p><p>完了以后，cache满分了，basic又错了一个，fetch可执行对象文件tiny时： <img src="https://img-blog.csdnimg.cn/20200819212506210.png" alt="在这里插入图片描述" /><br />一开始怀疑是tiny太大了，某个数组爆掉了。看了下tiny有36000+B，缓存空间足够，但是可能写入时候有些bug。tiny是二进制文件，可能比较特殊？很奇怪的是：明明<code>objSize</code>是36000+，但是<code>strlen(obj)</code>只有100，怀疑文件中可能有<code>\0</code>，提前终止了<code>strlen</code>的计数。</p><p>解决方案是<code>write_cache</code>参数不仅要有<code>uri</code>和<code>obj</code>，还要有<code>obj</code>的长度<code>len</code>，否则直接用<code>strlen</code>获取长度可能就挂了。后来修改以后就满分了，一定要注意，如果用<code>char*</code>传参，一定要附带参数<code>len</code>，因为不一定读取的是字符串，还有可能是二进制文件，<code>\0</code>也就是<code>0</code>很容易出现，用<code>strlen</code>大概率会爆掉。</p><p>最终测试结果如下： <img src="https://img-blog.csdnimg.cn/20200819221810760.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20200819221846500.png" alt="在这里插入图片描述" /> - 利用<code>curl</code>工具<br /><code>curl</code>可以用来生成HTTP请求：假设Sever在端口15213监听，代理在端口15214监听，那么可以通过下面命令经由代理发送请求： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v --proxy http:<span class="comment">//localhost:15214 http://localhost:15213/home.html</span></span><br></pre></td></tr></table></figure> 我们用该工具测试下Sequential Web Proxy：<br />首先启动Tiny Web Server和Proxy： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./tiny 15213</span><br><span class="line">./proxy 15214</span><br></pre></td></tr></table></figure> 然后执行<code>curl</code>命令： <img src="https://img-blog.csdnimg.cn/20200730162654329.png" alt="在这里插入图片描述" /><br />说明基本功能是OK的！！ - 实际浏览器测试<br />满分之后，万里长征走了一半吧，因为要在实际浏览器测试，不断增强程序的<strong>鲁棒性</strong>。 测试之前，先禁用浏览器自带的cache，清空之前的缓存。 测下内存泄漏：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind --leak-check=full --show-leak-kinds=all ./proxy 8080</span><br></pre></td></tr></table></figure><h2 id="codereference">Code&amp;Reference</h2><p><a href="https://github.com/EIMadrigal/15-213/tree/master/Web%20Proxy">code here</a><br /><a href="http://csapp.cs.cmu.edu/3e/labs.html">reference here</a></p><h2 id="todo">TODO</h2><p>接下来的工作可拓展的还有很多，包括但不限于：</p><ul><li>增加对HTTPS的支持（看起来并不简单）</li><li>Cache这里还有很多可优化的地方（分配策略、置换策略...）</li><li>目前只支持GET方式，还可以拓展到POST方式</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Projects </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给我未来的孩子</title>
      <link href="/2020/08/31/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/"/>
      <url>/2020/08/31/%E7%BB%99%E6%88%91%E6%9C%AA%E6%9D%A5%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>读诗之前，先澄清一点：这首诗原作者是作家张梅女士，收录于20世纪90年代出版的个人散文集《木屐声声》。至于流传甚广的余光中先生的《写给未来的你》，完全是某些出版物杜撰的，17年余先生去世时，大家读着这篇别人的文章以为纪念，不知道算不算一种悲哀。</p><p>如果读过余光中的作品，他的文风绝对不会像这首诗这么直白，当然也不会如此鸡汤。</p><p>说回这首诗，有一次搜索<理想主义者>时偶然读到，虽然有些道理比较宏大，但是整体来看都是作者阅历的总结，如果结合自身经验去读相信一定收获颇丰，当然作为育儿经也是不错的~</p><hr /><p>孩子，我希望你自始至终都是一个理想主义者。</p><p>你可以是农民，可以是工程师，可以是演员，可以是流浪汉，但你必须是个理想主义者。</p><p>童年，我们讲英雄故事给你听，并不是一定要你成为英雄，而是希望你具有纯正的品格。</p><p>少年，我们让你接触诗歌、绘画、音乐，是为了让你的心灵填满高尚的情趣。 这些高尚的情趣会支撑你的一生，使你在最严酷的冬天也不会忘记玫瑰的芳香。</p><p>理想会使人出众。</p><p>孩子，不要为自己的外形担忧。</p><p>理想纯洁你的气质，而最美貌的女人也会因为庸俗而令人生厌。</p><p>通向理想的途径往往不尽如人意，而你亦会为此受尽磨难。</p><p>但是，孩子，你尽管去争取，理想主义者的结局悲壮而绝不可怜。</p><p>在貌似坎坷的人生里，你会结识许多智者和君子，你会见到许多旁人无法遇到的风景和奇迹。</p><p>选择平庸虽然稳妥，但绝无色彩。</p><p>不要为蝇头小利放弃自己的理想，不要为某种潮流而改换自己的信念。</p><p>物质世界的外表太过复杂，你要懂得如何去拒绝虚荣的诱惑。</p><p>理想不是实惠的东西，它往往不能带给你尘世的享受。</p><p>因此你必须习惯无人欣赏，学会精神享受，学会与他人不同。</p><p>其次，孩子，我希望你是个踏实的人。</p><p>人生太过短促，而虚的东西又太多，你很容易眼花缭乱，最终一事无成。</p><p>如果你是个美貌的女孩，年轻的时候会有许多男性宠你，你得到的东西太过容易，这会使你流于浅薄和虚浮；如果你是个极聪明的男孩，又会以为自己能够成就许多大事而流于轻佻。</p><p>记住，每个人的能力有限，我们活在世上能做好一件事足矣。</p><p>写好一本书，做好一个主妇。</p><p>不要轻视平凡的人，不要投机取巧，不要攻击自己做不到的事。</p><p>你长大后会知道，做好一件事太难，但绝不要放弃。</p><p>你要懂得和珍惜感情。</p><p>不管男人女人，不管墙内墙外，相交一场实在不易。</p><p>交友的过程会有误会和摩擦，但想一想，诺大世界，有缘结伴而行的能有几人？</p><p>你要明白朋友终会离去，生活中能有人伴在身边，听你倾谈，倾谈给你听，就应该感激。</p><p>要爱自己和爱他人，要懂自己和懂他人。</p><p>你的心要如溪水般柔软，你的眼波要像春天般明媚。</p><p>你要会流泪，会孤身一人坐在黑暗中听伤感的音乐。</p><p>你要懂得欣赏悲剧，悲剧能丰富你的心灵。</p><p>希望你不要媚俗。</p><p>你是个独立的人，无人能抹杀你的独立性，除非你向世俗妥协。</p><p>要学会欣赏真，要在重重面具下看到真。</p><p>世上圆滑标准的人很多，但出类拔萃的人极少。而往往出类拔萃又隐藏在卑琐狂荡之下。</p><p>在形式上我们无法与既定的世俗争斗，而在内心我们都是自己的国王。</p><p>如果你的脸上出现谄媚的笑容，我将会羞愧地掩面而去。</p><p>世俗的许多东西虽耀眼却无价值，不要把自己置于大众的天平上，不然你会因此无所适从，人云亦云。</p><p>在具体的做人上，我希望你不要打断别人的谈话，不要娇气十足。</p><p>你每天至少要拿出两小时来读书，要回信写信给你的朋友。</p><p>不要老是想着别人应该为你做些什么，而要想着怎么去帮助他人。</p><p>借他人的东西要还，不要随便接受别人的恩惠。</p><p>要记住，别人的东西，再好也是别人的；自己的东西，再差也是自己的。</p><p>孩子，还有一件事，虽然做起来很难，但相当重要，这就是要有勇气正视自己的缺点。</p><p>你会一年年地长大，会渐渐遇到比你强、比你优秀的人，会发现自己身上有许多你所厌恶的缺点。 这会使你沮丧和自卑。</p><p>但你一定要正视它，不要躲避，要一点点地加以改正。</p><p>战胜自己比征服他人还要艰巨和有意义。</p><p>不管世界潮流如何变化，但人的优秀品质却是永恒的：正直、勇敢、独立。</p><p>我希望你是一个优秀的人。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bit Manipulation</title>
      <link href="/2020/08/26/Bit%20Manipulation/"/>
      <url>/2020/08/26/Bit%20Manipulation/</url>
      
        <content type="html"><![CDATA[<p>位操作可以使得我们细粒度地控制数据，但是很多技巧显得非常tricky，需要做一些总结。 ## Basics 常见的操作有：与、或、非、异或和移位。</p><ul><li><code>n &amp; (n - 1)</code>：将n的二进制表示中最低位的<code>1</code>改为<code>0</code></li><li><code>a ^ b = b ^ a</code>，<code>(a ^ b) ^ c = a ^ (b ^ c)</code>，<code>a ^ 0 = a</code>，<code>a ^ a = 0</code></li><li><code>n &amp; (-n)</code>：lowbit操作，将最低位的1及后面的0代表的数字转为十进制</li><li><code>&amp;</code>只会递减/不变</li><li><code>a = a | (1 &lt;&lt; i)</code> 将a的第i位设为1</li></ul><h2 id="examples">Examples</h2><ol type="1"><li>计算二进制中<code>1</code>的个数</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOne</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">        ++cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>判断整数是否为2的幂</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// we want to see if v is a power of 2</span></span><br><span class="line"><span class="keyword">bool</span> f;         <span class="comment">// the result goes here </span></span><br><span class="line"></span><br><span class="line">f = (v &amp; (v - <span class="number">1</span>)) == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">f = v &amp;&amp; !(v &amp; (v - <span class="number">1</span>));  <span class="comment">// v=0特判</span></span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>整数相加</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// a^b: a+b without carry</span></span><br><span class="line">        <span class="comment">// a&amp;b: the carry</span></span><br><span class="line">        <span class="keyword">return</span> b == <span class="number">0</span> ? a : getSum(a ^ b, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(a &amp; b) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>将n中第i~j位置0</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt;= j; ++k) &#123;</span><br><span class="line">    mask |= (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">&#125;</span><br><span class="line">mask = ~mask;</span><br><span class="line">n = n &amp; mask;</span><br></pre></td></tr></table></figure><h2 id="reference">Reference</h2><p><a href="https://leetcode.com/problems/sum-of-two-integers/discuss/84278/A-summary:-how-to-use-bit-manipulation-to-solve-problems-easily-and-efficiently">A summary: how to use bit manipulation to solve problems easily and efficiently</a> <a href="http://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Library Functions Implementation</title>
      <link href="/2020/08/16/Library%20Functions%20Implementation/"/>
      <url>/2020/08/16/Library%20Functions%20Implementation/</url>
      
        <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">memcpy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">void</span>* des, <span class="keyword">unsigned</span> <span class="keyword">int</span> cnt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!src || !des)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">if</span> (des &gt; src &amp;&amp; (<span class="keyword">const</span> <span class="keyword">char</span>*)src + cnt &lt; (<span class="keyword">char</span>*)des) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* srcB = (<span class="keyword">const</span> <span class="keyword">char</span>*)src + cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>* desB = (<span class="keyword">char</span>*)des + cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt--) &#123;</span><br><span class="line">            *desB = *srcB;</span><br><span class="line">            --desB;</span><br><span class="line">            --srcB;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* srcF = (<span class="keyword">const</span> <span class="keyword">char</span>*)src + cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span>* desF = (<span class="keyword">char</span>*)des + cnt - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (cnt--) &#123;</span><br><span class="line">            *desF = *srcF;</span><br><span class="line">            ++desF;</span><br><span class="line">            ++srcF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> des;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将original中的子串substr替换为replace</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">strReplace</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* original, <span class="keyword">const</span> <span class="keyword">char</span>* substr, <span class="keyword">const</span> <span class="keyword">char</span>* replace)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!original || !substr || !replace) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(original);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* newStr = <span class="built_in">malloc</span>((len + <span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(newStr, original, (len + <span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* p = <span class="built_in">strstr</span>(newStr, substr);</span><br><span class="line">    <span class="built_in">memcpy</span>(p, replace, <span class="built_in">strlen</span>(replace));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vector">vector</h2><p>比较高频的问题：为什么<code>push_back()</code>的平均时间复杂度是<span class="math inline">\(O(1)\)</span>？ 假设倍增因子是<span class="math inline">\(m\)</span>，vector当前有<span class="math inline">\(n\)</span>个元素，那么扩容过程大致为：<span class="math inline">\(0,1,m,m^2,...,m^{log_mn}\)</span>，每次扩容的复杂度等于当时的元素个数，无需扩容时插入的时间复杂度为<span class="math inline">\(O(1)\)</span>，所以总的复杂度为： <span class="math display">\[1+m+m^2+...+m^{log_mn}=\frac{mn-1}{m-1}\]</span> 如果<span class="math inline">\(m=2\)</span>，那么均摊到<span class="math inline">\(n\)</span>个元素，插入每个元素的操作复杂度就是<span class="math inline">\(O(1)\)</span> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> t=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">class myvector &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">push_back</span>(T&amp; x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            <span class="built_in">broad</span>(<span class="number">2</span> * capacity + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        obj[size++] = x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">broad</span><span class="params">(<span class="keyword">int</span> newCap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newCap &lt; size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        T* tmp = obj;</span><br><span class="line">        obj = <span class="keyword">new</span> T[newCap];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            obj[i] = tmp[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span>[] tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> capacity;</span><br><span class="line">    T* obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Invalid input!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (*str == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">        ++str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (*str == <span class="string">&#x27;+&#x27;</span> || *str == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (*str == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (*str &lt; <span class="string">&#x27;0&#x27;</span> || *str &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Invalid input!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*str != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; *str &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *str &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        value = value * <span class="number">10</span> + *str - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        ++str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sign * value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// O(mn)，可以用KMP优化为O(m+n)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">strStr</span><span class="params">(string haystack, string needle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needle.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; haystack.<span class="built_in">size</span>() &amp;&amp; j &lt; needle.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (haystack[i] == needle[j]) &#123;</span><br><span class="line">                ++i;</span><br><span class="line">                ++j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = i - j + <span class="number">1</span>;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (j == needle.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - needle.<span class="built_in">size</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></typename></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tiny Shell</title>
      <link href="/2020/08/02/Tiny%20Shell/"/>
      <url>/2020/08/02/Tiny%20Shell/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">Intro</h2><p>本项目要实现一个简易版Shell，支持以下Features：</p><ul><li>命令提示符<code>tsh&gt;</code></li><li>若用户输入的命令第一个单词是内置命令，在当前进程tsh(Tiny Shell)执行命令： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span>   列出运行/挂起的后台job</span><br><span class="line"><span class="built_in">bg</span> &lt;job&gt;   通过发送SIGCONT信号重启进程，将后台挂起的job设为在后台运行，&lt;job&gt;可以是PID或%JID</span><br><span class="line"><span class="built_in">fg</span> &lt;job&gt;   通过发送SIGCONT信号重启进程，将后台运行/挂起的job设为在前台运行，&lt;job&gt;可以是PID或%JID</span><br><span class="line"><span class="built_in">kill</span> &lt;job&gt;   结束&lt;job&gt;</span><br><span class="line">quit   退出tsh</span><br></pre></td></tr></table></figure></li><li>若用户输入的命令第一个单词是可执行文件路径，后续单词是命令行参数，tsh会fork一个子进程，在子进程运行</li><li>支持job control（前后台切换），改变进程状态（running/stopped/terminated）</li><li>支持管道<code>|</code>和I/O重定向<code>&lt;</code> <code>&gt;</code>(TODO)</li></ul><h2 id="background-knowledge">Background Knowledge</h2><ul><li>Shell<br />shell是一个交互式的命令行解释器，可以执行用户输入的指令，显示计算结果。<br />用户输入既可以是内置命令，也可以是可执行文件路径。用户既可以在前台运行，也可以在后台运行。后台job可以在命令最后加一个<code>&amp;</code>，否则视为前台。比如<code>/bin/ls -l -d &amp;</code>表示在后台执行<code>ls</code>程序。前台job只能有1个，后台job则可以有多个。</li><li>Signals<br />信号机制的作用就是允许进程/内核打断其他进程运行，是进行进程间通信的一种方式。<br />Linux的常用信号有： <img src="https://img-blog.csdnimg.cn/20200719145450179.png" alt="在这里插入图片描述" /></li></ul><h2 id="implementation">Implementation</h2><ul><li>useful functions<br /><code>int fork(void)</code>：父进程创建一个子进程，在子进程中返回0，父进程中返回子进程的PID。<br /><code>int kill(pid_t pid, int sig)</code>：进程向其它进程（包括自己）发送信号，成功返回0，错误返回-1。可以通过改变参数<code>pid</code>调整发送目标：<code>pid&gt;0</code>，给该进程发信号；<code>pid==0</code>，给包括自己在内的当前进程组发信号；<code>pid&lt;0</code>，给pgid=|pid|的进程组的每个进程发信号。<br /><code>int execve(char *filename, char *argv[], char *envp[])</code>：在当前进程的上下文环境中装载并运行新的程序，成功不返回，失败返回-1。<code>filename</code>可以是可执行目标文件或脚本文件，会覆盖原进程的data/code/stack，会保留原进程的PID/open files/signal context。<br /><code>pid_t waitpid(pid_t pid, int *status, int options)</code>：指定进程终止父进程会进行回收，否则等待。内核会将子进程的退出状态传给父进程，之后清除子进程。<code>options=WNOHANG | WUNTRACED</code>时，如果wait set中没有终止/暂停的子进程，立即返回0；否则返回任意一个子进程的PID。<br /><code>int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)</code>：<code>how=SIG_BLOCK</code>将<code>set</code>中的信号加入阻塞向量；<code>how=SIG_UNBLOCK</code>将<code>set</code>中的信号从阻塞向量中移除；<code>how=SIG_SETMASK</code>将阻塞向量设置为<code>set</code>。如果<code>oldset!=NULL</code>之前的阻塞向量就存储在<code>oldset</code>中。<br /><code>handler_t *signal(int signum, handler_t *handler)</code>：改变信号的默认行为。</li><li>step by step<br />-- 整体结构：除了测试文件和Makefile外，全部实现都在<code>tsh.c</code>中，<code>main</code>函数有一个死循环，不停调用<code>eval()</code>实现命令的解析、执行。<br />-- <code>eval(char* cmdline)</code><br />接收到用户输入后，第一件事就是解析。解析是通过<code>int parseline(const char* cmdline, char** argv)</code>完成，将<code>cmdline</code>解析到<code>argv</code>中，如果用户要求后台运行就返回1，否则返回0。<br />解析后，我们需要通过<code>int builtin_cmd(char** argv)</code>判断是否为内置命令。如果是内置命令，就在<code>builtin_cmd</code>里立刻执行；否则需要创建子进程执行，这里需要区分前后台进程：如果是前台，需要等待terminate才能返回并接受新的输入；如果是后台，则可以立即接收新输入。</li><li>key point 1<br />父进程在<code>fork</code>子进程之前，要用<code>sigprocmask</code>阻塞<code>SIGCHLD</code>信号。否则由于父子进程执行顺序不确定，可能导致：<br />子进程首先执行完毕，内核向父进程发送<code>SIGCHLD</code>信号；<br />从内核态切换到用户态时，检测到<code>SIGCHLD</code>信号并且执行<code>sigchld_handler</code>，删除该job；<br />父进程执行<code>addjob</code>操作，显然删除和添加顺序反了。<br />如果我们正确阻塞了<code>SIGCHLD</code>信号，还是按照上面的顺序：<br />子进程首先执行完毕，内核向父进程发送<code>SIGCHLD</code>信号；<br />从内核态切换到用户态时，由于父进程阻塞了<code>SIGCHLD</code>信号，所以不会执行<code>sigchld_handler</code>；<br />父进程添加该job，解除<code>SIGCHLD</code>信号的阻塞，下一次context switch时删除job。</li><li>key point 2<br />用户从键盘输入ctrl-c时，内核给shell发<code>SIGINT</code>信号（默认终止shell进程），在<code>main</code>里面安装handler，在<code>sigint_handler</code>中处理：终止所有的前台进程及其子进程；<br />用户从键盘输入ctrl-z时，内核给shell发<code>SIGTSTP</code>信号（默认暂停当前进程直到收到<code>SIGCONT</code>），在<code>main</code>里面安装handler，在<code>sigtstp_handler</code>中处理：暂停所有的前台进程及其子进程。</li><li>key point 3<br />默认情况下，<code>fork</code>出来的子进程和他爹属于同一个进程组。当我们在机器上运行Tiny Shell时，程序运行在前台进程组中，这时如果Tiny Shell创建一些子进程，这些子进程也会同属于这个前台进程组，用户输入ctrl-c会终止所有前台进程，包括Tiny Shell，这显然不是我们想要的。<br />解决方案是：<code>fork</code>之后，子进程调用<code>setpgid(0,0)</code>将其放到一个新的进程组里，这个组的group id和PID相同。这样就可以确保前台进程组里只有Tiny Shell一个进程，用户输入ctrl-c时，就可以在<code>sigint_handler</code>中调用<code>kill()</code>终止特定的前台job。</li><li>key point 4<br />当子进程终止或者暂停，内核会给父进程发送<code>SIGCHLD</code>信号，我们在<code>sigchld_handler</code>中根据子进程的状态做相应的处理：<br /><code>WIFEXITED(status)</code>：子进程通过<code>exit</code>或<code>return</code>正常终止；<br /><code>WIFSIGNALED(status)</code>：子进程通过信号终止；<br /><code>WIFSTOPPED(status)</code>：子进程暂停；<br /><code>WTERMSIG(status)</code>：当<code>WIFSIGNALED()</code>为真，返回造成子进程终止的信号ID；<br /><code>WSTOPSIG(status)</code>：当<code>WIFSTOPPED()</code>为真，返回造成子进程暂停的信号ID。</li><li>key point 5<br />对于前台进程，需要一直等待其执行完毕，然后回收，可以在<code>waitfg()</code>中调用<code>sigsuspend</code>完成；但对于后台进程，由于不用等待其完成，所以为了避免其成为zombie，需要在其执行完毕或者暂停时通知父进程，这个机制就是signal，具体的就是我们的<code>sigchld_handler</code>做的事情。</li></ul><h2 id="test">Test</h2><p>一方面通过提供的脚本测试，共有16个脚本测试文件，测试通过<code>make test01</code>~<code>make test16</code>进行；<br />另一方面通过实际执行去测试各项功能。</p><h2 id="codereference">Code&amp;Reference</h2><p><a href="https://github.com/EIMadrigal/15-213/tree/master/Tiny%20Shell">code here</a><br /><a href="http://csapp.cs.cmu.edu/3e/labs.html">reference here</a></p><h2 id="todo">TODO</h2><p>管道<br />重定向<br /><a href="https://github.com/mit-pdos/xv6-riscv/blob/riscv//user/sh.c#L1">xv6-riscv/sh.c</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Seam Carving</title>
      <link href="/2020/07/24/Seam%20Carving/"/>
      <url>/2020/07/24/Seam%20Carving/</url>
      
        <content type="html"><![CDATA[<p>这是CS 61B的HW5，具体实现<a href="https://github.com/EIMadrigal/CS61B/tree/master/hw5">在这里</a>。 ## Intro 这个项目是要实现一种基于内容的图像缩放算法Seam Carving。Seam分为垂直（自上而下每行取一个像素点）和水平（自左向右每列取一个像素点）。 下图是一张505*287的图像： <img src="https://img-blog.csdnimg.cn/20200707090755919.png" alt="在这里插入图片描述" /> 移除150条垂直seam，得到一张比原图窄30%的新图： <img src="https://img-blog.csdnimg.cn/2020070709085251.png" alt="在这里插入图片描述" /> 与传统的内容不可知的方法（裁剪、缩放）相比，seam curving可以保留原图的大多数重要特征。 图像处理中的坐标表示与常见的笛卡尔坐标系不同： <img src="https://img-blog.csdnimg.cn/20200707094310172.png" alt="在这里插入图片描述" /> 每个像素的颜色采用RGB空间，与<code>java.awt.Color</code>一致。算法的过程分为3步：</p><ul><li>Energy calculation 因为是内容感知算法，所以需要一个指标衡量每个像素的<strong>重要程度</strong>，这个指标我们叫做该像素点的能量：能量越高越重要，就不太会被当做seam的一部分剔除。 我们选择双梯度能量函数来计算能量。对于上面的冲浪图，计算后的灰度图如下： <img src="https://img-blog.csdnimg.cn/20200707095021383.png" alt="在这里插入图片描述" /> 可以看到：高能量像素对应颜色发生巨变的地方，比如冲浪者和大海的边界、天际线等，并且颜色更白。处理过程中就是要避免移除这些关键信息。</li><li>Seam identification 计算出每个像素点的能量值后，就要找出一条能量值总和最小的seam，垂直seam从顶行的某像素点开始到最后一行某点结束。但是如果(x,y)位于seam，下一行只能选(x-1,y+1), (x,y+1), (x+1,y+1)之一，可能是为了保证图像的连贯。</li><li>Seam Removal 移除找到的seam。 ## Implement 三个步骤的实现都在<code>SeamCarver</code>中，我们逐个来看：</li><li>单像素能量计算 采用对偶梯度能量函数<span class="math inline">\(\Delta_x^2(x, y) + \Delta_y^2(x, y)\)</span>，x梯度的平方<span class="math inline">\(\Delta_x^2(x, y) = R_x(x, y)^2 + G_x(x, y)^2 + B_x(x, y)^2\)</span>，<span class="math inline">\(R_x(x, y), G_x(x, y), B_x(x, y)\)</span>是左右两个像素点(x+1, y)和(x-1, y)的红、绿、蓝之差的绝对值；类似地，对于y的梯度，就是要求上下两个像素点的差。对于边界的处理，采取循环方式，即如果某侧不存在，就取反方向的点。 举例来看： <img src="https://img-blog.csdnimg.cn/20200707155708977.png" alt="在这里插入图片描述" /> 要计算(1, 0)位置即(255, 101, 153)的能量： <span class="math display">\[R_x(1, 0) = 255 − 255 = 0, G_x(1, 0) = 101 − 101 = 0, B_x(1, 0) = 255 − 51 = 204\]</span> 故<span class="math inline">\(\Delta_x^2(1, 0) = 204^2 = 41616\)</span>；对于y方向，由于没有(x, y-1)，就用(x, height-1)代替： <span class="math display">\[R_y(1, 0) = 255 − 255 = 0, G_y(1, 0) = 255 − 153 = 102, B_y(1, 0) = 153 − 153 = 0\]</span> 故<span class="math inline">\(\Delta_y^2(1, 0) = 102^2 = 10404\)</span>，所以(1, 0)位置的能量就是<span class="math inline">\(41616 + 10404 = 52020\)</span>。 接口也很简单<code>public  double energy(int x, int y)</code>。</li><li>Find Vertical Seam 这个接口设计为<code>public int[] findVerticalSeam()</code>，返回的数组有H个值，第i个值对应要移除的第i行的列号。 要找这样一条最短路径，我们考虑用动态规划求解： 首先定义子问题<span class="math inline">\(M(i,j)\)</span>表示以<span class="math inline">\((i,j)\)</span>结尾的最短路径的成本，用<span class="math inline">\(e(i,j)\)</span>表示位置<span class="math inline">\((i,j)\)</span>的能量； 接着寻找状态转移方程：由于路径的左右位置绝对值不大于1，所以<span class="math inline">\(M(i,j)=e(i,j)+min\{M(i-1,j-1),M(i,j-1),M(i+1,j-1)\}\)</span>； 最后确定base case：每行的值都由上一行确定，所以base case就是<span class="math inline">\(M(i,0)=e(i,0)\)</span>。 最终结果就是在最后一行找到<span class="math inline">\(M\)</span>最小的像素点，逐行向上寻找三个相邻格子中<span class="math inline">\(M\)</span>较小的那个。</li><li>Find Horizontal Seam 对于水平方向的seam，当然也可以用动态规划求解。但是为了避免代码冗余，我们考虑利用<code>findVerticalSeam()</code>：先将图像转置，然后调用<code>findVerticalSeam()</code>，最后再将其转置即可。 具体的：考虑如下3*2图像： <img src="https://img-blog.csdnimg.cn/20200708090038977.png" alt="在这里插入图片描述" /> 将其转置： <img src="https://img-blog.csdnimg.cn/2020070809031641.png" alt="在这里插入图片描述" /> 利用<code>findVerticalSeam()</code>得到(0,1,0)即为水平的seam，最后将图像再次转置即可。 ## 待改进</li><li>能量计算 每次移除一条seam，都要调用<code>findVerticalSeam()</code>，<code>findVerticalSeam()</code>中会计算所有格子的能量，这样如果我们移除20条seam，就要计算20次所有格子的能量，显然这是可以避免的。 最直观的方法就是空间换时间，创建能量矩阵<code>double[][]</code>存储每个格子的能量。</li><li>水平seam 转置矩阵耗时<span class="math inline">\(O(WH)\)</span>，更快一些的做法是利用一个flag记录当前是在寻找垂直还是水平seam，在计算能量时判断分类。 ## Reference <a href="https://sp18.datastructur.es/materials/hw/hw5/hw5">HW 5: Seam Carving</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>漫谈三毛</title>
      <link href="/2020/07/17/%E6%BC%AB%E8%B0%88%E4%B8%89%E6%AF%9B/"/>
      <url>/2020/07/17/%E6%BC%AB%E8%B0%88%E4%B8%89%E6%AF%9B/</url>
      
        <content type="html"><![CDATA[<p>三毛的书我读的不多，大概只有《撒哈拉的故事》、《梦里花落知多少》和《谈心》。 初识三毛，是在《谈心》中她给一个读者的回信：</p><blockquote><p>三毛女士：   我今年廿九岁，未婚，是一家报关行最低层的办事员，常常在我下班以后，回到租来的斗室里，面对物质和精神都相当贫乏的人生，觉得活着的价值，十分...对不起，我黯淡的心情，无法用文字来表达。我很自卑，请你告诉我，生命最终的目的何在？   以我如此卑微的人（我的容貌太平凡了），工作能力也有限，说不出有什么特别的兴趣，也从来没有异性对我感兴趣。   我真羡慕你，恨不得能够活得像你，可惜我不能，请你多写书给我看，丰富我的生命，不然，真不知活着还有什么快乐？   敬祝 春安！ 一个不快乐的女孩上</p></blockquote><p>谈及生命的意义，这或许是大多数人都会思考的问题，然而它却不像数学题那样有什么所谓的标准答案，这是一道拥有无数种解法的题目。丝毫不需要掩饰，直至今日我仍然没有完全明晰。 是的，人终有一死，一切都会湮灭。生活中的很多事情从人生这一宏观角度来看根本不值一提，广而泛之，其实所有的事情都不值一提。那么生命的意义到底在哪里？不妨先了解下三毛的想法：</p><blockquote><p>不快乐的女孩：   从你短短的自我介绍中，看来十分惊心，二十九岁正当年轻，居然一连串的用了——最低层、贫乏、黯淡、自卑、平凡、卑微、能力有限这许多不正确的定义来形容自己。   以我个人的经验来说，我也反复思索过许多次，生命的意义和最终目的到底是什么，目前我的答案却只有一个，很简单的一个，那便是“<strong>寻求真正的自由</strong>”，然后<strong>享受生命</strong>。   不快乐的女孩，你的心灵并不自由，对不对？当然，我也没有做到绝对的超越，可是如你信中所写的那些字句，我已不再用在自己身上了，虽然我们比较起来是差不多的。   如果我是你，第一步要做的事是加重对自我的期许与看重，将信中那一串又一串自卑的字句从生命中一把扫除，再也不轻看自己。   你有一个正当的职业，租得起一间房间，容貌不差，懂得在上下班之余更进一步探索生命的意义，这都是很优美的事情，为何觉得自己卑微呢？你觉得卑微是因为没有用自己的主观眼光观看自己，而用了社会一般的功利主义的眼光，这是十分遗憾的。   一个不欣赏自己的人，是难以快乐的。   当然，由你的来信中，很容易想见你部分的心情，你表达的能力并不弱，由你的文字中，明明白白可以看见一个都市单身女子对于生命的无可奈何与悲哀，这种无可奈何，并不浮浅，是值得看重的。   很实际的来说，不谈空幻的方法，如果我住在你所谓的“斗室”里，如果是我，第一件会做的事情，就是布置我的房间。我会将房间粉刷成明朗的白色，给自己在窗上做上一幅美丽的窗帘，我在床头放一个普通的小收音机，在墙角做一个书架，给灯泡换一个温暖而温馨的灯罩，然后，我要去花市，仔细的挑几盆看了悦目的盆景，放在我的窗口。如果仍有余钱，我会去买几张名画的复制品——海报似的那种，将它挂在墙上……这么弄一下，以我的估价，是不会超过四千台币的，当然除了那架收音机之外，一切自己动手做，就省去了工匠费用，而且生活会有趣得多。   房间布置得美丽，是享受生命改变心情的第一步，在我来说，它不再是斗室了。然后，当我发薪水的时候——如果我是你，我要给自己用极少的钱，去买一件美丽又实用的衣服。如果我觉得心情不够开朗，我很可能去一家美发店，花一百台币修剪一下终年不变的发型，换一个样子，给自己耳目一新的快乐。我会在又发薪水的下一个月，为自己挑几样淡色的化妆品，或者再买一双新鞋。当然，薪水仍然是每个月会领的，下班后也有四五小时的空闲，那时候，我可能去青年会报名学学语文、插花或者其他感兴趣的课程，不要有压力的每周夜间上两次课，是改换环境又充实自己的另一个方式。   你看，如果我是你，我慢慢的在变了。   我去上上课，也许可能交到一些朋友，我的小房间既然那么美丽，那么也许偶尔可以请朋友来坐坐，谈谈各自的生活和梦想。   慢慢的，我不再那么自卑了，我勇于接触善良而有品德的人群（这种人在社会上仍有许多许多），我会发觉，原来大家都很平凡——可是优美，正如自己一样。我更会发觉，原来一个美丽的生活，并不需要太多的金钱便可以达到。我也不再计较异性对我感不感兴趣，因为我自己的生活一点一点的丰富起来，自得其乐都来不及，还想那么多吗？   如果我是你，我会不再等三毛出新书，我自己写札记，写给自己欣赏，我慢慢的会发觉，我自己写的东西也有风格和趣味，我真是一个可爱的女人。   不快乐的女孩子，请你要行动呀！不要依赖他人给你快乐。你先去将房间布置起来，勉强自己去做，会发觉事情没有你想象的那么难，而且，兴趣是可以寻求的，东试试西试试，只要心中认定喜欢的，便去培养它，成为下班之后的消遣。   可是，我仍觉得，<strong>在这个世界上，最深的快乐，是帮助他人，而不只是在自我的世界里享受</strong>——当然，享受自我的生命也是很重要的。你先将自己假想为他人，帮助自己建立起信心，下决心改变一下目前的生活方式，把自己弄得活泼起来，不要任凭生命再做赔本的流逝和伤感，起码你得试一下，尽力的去试一下，好不好？   享受生命的方法很多很多，问题是你一定要有行动，空想是不行的。下次给我写信的时候，署名快乐的女孩，将那个“不”字删掉了好吗？　 你的朋友三毛上</p></blockquote><p>这篇回信给我最深印象的，就是<strong>在这个世界上，最深的快乐，是帮助他人，而不只是在自我的世界里享受</strong>。实话实说，我并没有那么高尚的境界，甚至以前很少想到这一层。不过非常幸运的是：关于寻求自由与享受生命，我与三毛达成了一致。有了思想的指导，方法自然不会成为障碍，信中提到的做法会带来改变。 好久前看过李健的一个访谈，他说在任何时代，自我价值的实现都是很重要的，过好自己的生活，成为生活的艺术家是最难的事情，但他一直在尝试。经常性地关注村上等人的生活状态，极度追求个人自由与价值的实现，但是忽视了the big picture。当然村上自从《地下》以后，改变了很多。 这些对我个人价值观的塑造都有很大的影响（大概就是读书的好处吧），所以我一度认为生命没有意义，你做的一切，或者说人类做的一切，都没有意义。那么为什么还要去做事呢？是因为总得有事情去填充我们的时间。做好当下的事或者虚度时光，结果是迥然不同的，将来回忆起来很多事没有体验，岂不肠子都悔青了？ 真理总是很早就学过，却很晚才明白：</p><blockquote><p>人最宝贵的是生命，生命对于每个人只有一次，这仅有的一次应当怎样度过？ 每当回忆往事的时候，不因虚度年华而悔恨，不因碌碌无为而羞耻。</p></blockquote><p>前面说过，这是一道有着无数种解法的题目。每个个体想做的事很多，不过共同之处在于：do it，千万不要因为畏惧而放弃、拖延，当下只有一次，永不会再来。在认真体验、洒脱生活、享受酸甜苦辣的同时，记得帮助别人。 戏剧之处在于：如果读者只看过《撒哈拉的故事》，没人会接受三毛最终的选择。物质生活那样贫瘠的非洲，再加上常年患病的身体，都没有击垮她。相反，她将平凡的日子过得如诗一般，幸福早已溢出了文字，哪怕结婚用香菜代替鲜花她也津津乐道。就是这样一个善良自由、追求自我实现的人，荷西的死却成为她生命中无可挽回的拐点，也许浪漫的人很难有好的生活。再去看《梦里花落知多少》，你可能无法相信这出自同一个作家之手。 痛失挚爱，无异于晴天霹雳，但我想大多数人都会渐渐走出这份悲伤，只是时间长短不同罢了。感性的人很难自拔，会沉醉过去，也会幻想梦境：</p><blockquote><p>记得当时年纪小 你爱谈天 我爱笑 有一回并肩坐在桃树下 风在林梢鸟儿在叫 我们不知怎样睡着了 梦里花落知多少</p></blockquote><p>那种语调，并不是刻意地悲痛，好似一切都变淡了，当然也包括生死，三毛不断提醒自己要有责任心，还要照顾父母，如此目的很难维持得下去。 我们慨叹命运弄人，每一丝幸福，都可能是若干年后的一场悲剧，因为开始就会有结束。而且快乐往往是短暂的，就像它的字面意思一样，平淡和普通才是人生的主旋律。</p><hr /><ul><li>[ ] 不知怎么搞的，可能读书越来越少、手机越玩越多的缘故，也可能书单过于单一，总是看些小说滥竽充数，写一些人文类blog总是力不从心：不论是行文思路，还是写作手法，直到最后的自我表达都十分混乱，而且遣词造句多有贫瘠累赘之感，甚至还不如小时候来得自然和丰富。别无他法，只有大量阅读思考才可能改观，希望每天都能静下来读会书吧，先看看中国现代文学@-@</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Garbage Collection</title>
      <link href="/2020/07/10/Garbage%20Collection/"/>
      <url>/2020/07/10/Garbage%20Collection/</url>
      
        <content type="html"><![CDATA[<p>垃圾回收：为了防止内存泄漏，对<strong>堆</strong>中死亡的对象进行清除，并回收相应空间的机制。 某些有GC机制的语言(Java, Python...)，平时不会特别在意内存的分配和释放。但是对于C/C++等语言来说，稍有不慎就会造成Memory Leak/Double Frees/Use-after-frees等问题。 ## Garbage 垃圾顾名思义就是以后不再使用的对象。但是要确定一个对象是垃圾通常很难，所以我们认为不可达（没有被引用）对象就是垃圾，但是需要明确的是：许多可达对象也不再会使用，也是垃圾，但是这种垃圾我们无法回收，所以即使拥有GC机制的语言也很容易造成内存泄漏。</p><h2 id="reference-counting">Reference Counting</h2><p>C++的<code>shared_ptr</code>主要采用引用计数法，实现简单： 每个对象都与一个引用计数器<code>cnt</code>相关联，每当有一个引用指向该对象，<code>++cnt</code>；一个引用失效时，<code>--cnt</code>。当<code>cnt==0</code>时：Remove all outgoing references from that object，并且清理该对象。</p><p>由于每个<code>cnt</code>记录的是引用数，而不是可达的引用数，只关注自己的对象而没有全局的信息，<strong>循环引用</strong>的情况就无法被回收： <img src="https://img-blog.csdnimg.cn/20200705104719124.png" alt="在这里插入图片描述" /></p><h2 id="mark-sweep">Mark-Sweep</h2><p>Lua/Ruby等主要采用Mark-Sweep算法： 有一些位置是明确知道可达的：全局变量、栈中的变量以及寄存器中的变量等，这些区域作为root set，从root set出发可达的对象视为存活对象，不可达对象视为待回收对象。 - mark阶段目标是找到可达对象。 -- 将root set中的对象放入worklist； -- 当worklist不空： 从worklist中移除一个对象； 如果该对象没有标记，标记它并且把从它出发的所有可达对象加入worklist。 - sweep阶段目标是回收死亡对象。 -- 对于<strong>所有已经分配的对象</strong>： 如果未标记，释放； 如果已经标记，为了下一次的GC，unmark。</p><p>有时候确实很难想象如此简洁的设计竟然是Lua 5.0之前采用的机制，不过工程上一条重要的原则就是：<strong>先完成、再完善</strong>。这个比较简单的GC实现过程可以参考<a href="http://it.deepinmind.com/gc/2014/03/26/babys-first-garbage-collector.html">自己动手写GC</a>。 这种Naive的方式虽然简洁，但是却有很大的缺点：即mark和sweep阶段必须一口气执行完毕，不能分步骤进行，结果就是在进行GC时其他线程都必须挂起，也就是通常说的Stop The World。 原因在于：假如在mark完成后，新创建了若干对象，这些对象显然没有被标记，在本次的sweep阶段就会被清除，造成无法挽回的后果。</p><p>为了改进上述算法的时间和空间性能，Baker's algorithm应运而生： 每个分配的内存块只能属于四种状态之一：Marked(可达)/Enqueued(in the worklist)/Unknown(未处理)/Deallocated(已释放)，维护4个双向链表保存4个状态的对象。</p><ul><li>将root set中的所有对象移入enqueued链表；</li><li>当enqueued链表不空： -- 将enqueued链表的对象移入marked链表； -- 对于unknown链表中的被引用对象，移入enqueued链表。</li><li>合并unknown链表和Deallocated链表并释放，耗时<span class="math inline">\(O(1)\)</span>；</li><li>将marked链表中的所有对象移入unknown链表，耗时<span class="math inline">\(O(1)\)</span>。</li></ul><p>这样时间复杂度优化为runs in time proportional to the number of reachable objects.</p><h2 id="generational-gc">Generational GC</h2><p>分代收集的核心思想是将内存划分为若干代，每次新的对象总是被分在新生代，新生代没有空间时，做一次迅速的GC，之后将新生代中剩余的对象移入next generation，实在没有空间可用时，对整个内存进行一次GC。 Java的GC就是基于这种算法，新生代分为Eden和Survivor： <img src="https://img-blog.csdnimg.cn/20200705145530733.png" alt="在这里插入图片描述" /> 开始的分配都在eden中，满了之后做一次GC，将留下的对象移入survivor浅色区，具体过程可以参考文献中的200页。</p><h2 id="具体应用">具体应用</h2><ol type="1"><li>Python的GC主要结合了引用计数和分代回收2种策略，当对象的引用计数为0时立即回收该对象，如果出现循环引用，则等待分代回收算法清理该对象。</li></ol><h2 id="reference">Reference</h2><p><a href="http://web.stanford.edu/class/archive/cs/cs143/cs143.1128/lectures/18/Slides18.pdf">Garbage Collection</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>The Annotated STL Sources</title>
      <link href="/2020/07/03/The%20Annotated%20STL%20Sources/"/>
      <url>/2020/07/03/The%20Annotated%20STL%20Sources/</url>
      
        <content type="html"><![CDATA[<h2 id="intro">Intro</h2><p>《STL源码剖析》用来了解原理性的设计没什么问题，但是这本书实在太老，所有源码基于GNU2.9；现在语言的发展飞快，而且很多地方都是考虑兼容性等因素，设计非常复杂，也并不高效，我没有时间去搞明白所有实现，更没有时间实现标准库，所以只学了一小半就停了。 ## 六大组件 容器、算法、分配器、迭代器、适配器、仿函数。 <img src="https://img-blog.csdnimg.cn/20200423140448163.png" alt="在这里插入图片描述" /> ## Allocator 分配器用来为容器分配内存，分配器是class，有成员函数<code>allocate</code> <code>deallocate</code>，调用<code>operator new()</code>会调用<code>malloc</code>，<code>operator delete()</code>调用<code>free</code>。 不同编译器的分配器实现稍有区别，不建议直接使用allocators，<code>int* p = allocator&lt;int&gt;().allocate(512)</code> 会创建临时对象，归还还要指定大小：<code>allocator&lt;int&gt;().deallocate(p, 512)</code>。 但<code>malloc</code>归还时不需要指定大小，因为<code>malloc</code>时候会有<strong>cookie</strong>保存分配的内存块大小，如果每次申请内存都包含cookie的话，开销太大，并且频繁申请内存十分耗时。 GNU2.9觉得allocators太傻逼，自己用的是alloc的分配器，有16个单链表，每个链表负责某个特定大小的内存块分配，比如8B（该链表串了很多8B的小内存块），16B，...，容器需要内存会被调整到8的倍数，去相应的链表找，如果链表没有小块内存，就会调用<code>malloc</code>向OS申请一块大的，切成很多小的，串起来去分配，这样<code>malloc</code>次数会变小很多，而且cookie会少很多，时间和空间开销都会变小，碎片也少了。 GNU4.9没有使用alloc，使用<code>std::allocator</code>，allocator继承了new_allocator，有成员函数<code>allocate</code> <code>deallocate</code>，调用<code>operator new()</code>会调用<code>malloc</code>，<code>operator delete()</code>调用<code>free</code>，一夜回到解放前。。。 4.9有很多扩展的分配器，2.9里的alloc变为了_pool_alloc，要改变默认的分配器，可以写<code>vector&lt;string, __gnu_cxx::_pool_alloc&lt;string&gt;&gt; vec</code>。 ## list 双向环状链表，end指向一个dummy node。 因为非连续，所以<code>++iterator</code>要重新设计，使得指向下一个元素，而不是错误的地址。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_node</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span>* void_pointer;</span><br><span class="line">    void_pointer prev; <span class="comment">// 4.9 struct __list_node* prev</span></span><br><span class="line">    void_pointer next; <span class="comment">// 4.9 struct __list_node* next</span></span><br><span class="line">    T data;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">list_iterator</span> &#123;</span></span><br><span class="line">    <span class="comment">// 5种associated types</span></span><br><span class="line">    <span class="keyword">typedef</span> __list_iterator&lt;T, Ref, Ptr&gt; self;</span><br><span class="line">    <span class="keyword">typedef</span> bidirectional_iterator_tag iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> Ptr pointer; <span class="comment">// 4.9 typedef T* pointer</span></span><br><span class="line">    <span class="keyword">typedef</span> Ref reference; <span class="comment">// 4.9 typedef T&amp; reference</span></span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt;* link_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line"></span><br><span class="line">    link_type node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 操作符重载 */</span></span><br><span class="line">    reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*node).data; &#125;</span><br><span class="line">    pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line">    <span class="comment">// 前置++</span></span><br><span class="line">    self&amp; <span class="keyword">operator</span>++() &#123;</span><br><span class="line">        node = (link_type)((*node).next); <span class="comment">// 指向下一个结点</span></span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后置++</span></span><br><span class="line">    self <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;</span><br><span class="line">        self tmp = *<span class="keyword">this</span>; <span class="comment">// 记录原值，拷贝构造</span></span><br><span class="line">        ++* <span class="keyword">this</span>; <span class="comment">// 操作</span></span><br><span class="line">        <span class="keyword">return</span> tmp; <span class="comment">// 返回原值</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> __list_node&lt;T&gt; list_node;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> list_node* link_type;</span><br><span class="line">    <span class="keyword">typedef</span> __list_iterator&lt;T, T&amp;, T*&gt; iterator;</span><br><span class="line">    <span class="comment">// typedef __List_iterator&lt;_Tp&gt; iterator; 4.9模板参数只有一个</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    link_type node;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> ## vector 1.5/2倍增长。 迭代器只是一个指针，而不是class iterator，通过萃取机（Iterator Traits）中对类型的偏特化处理，可以回答算法提出的问题（iterator_category,value_type,difference_type,pointer,reference） <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> vector&lt;T, Alloc&gt;::<span class="built_in">insert_aux</span>(iterator position, <span class="keyword">const</span> T&amp; x) &#123;</span><br><span class="line">    <span class="keyword">if</span> (finish != end_of_storage) &#123;</span><br><span class="line">        <span class="built_in">construct</span>(finish, *(finish - <span class="number">1</span>)); <span class="comment">// 建立一个元素，并以最后一个元素作为初值</span></span><br><span class="line">        ++finish;</span><br><span class="line">        T x_copy = x;</span><br><span class="line">        <span class="built_in">copy_backward</span>(position, finish - <span class="number">2</span>, finish - <span class="number">1</span>);</span><br><span class="line">        *position = x_copy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> size_type old_size = <span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">const</span> size_type len = old_size != <span class="number">0</span> ? <span class="number">2</span> * old_size : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        iterator new_start = data_alloctor::<span class="built_in">allocate</span>(len);</span><br><span class="line">        iterator new_finish = new_start;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将原vector内容拷贝到新vector</span></span><br><span class="line">            new_finish = <span class="built_in">uninitialized_copy</span>(start, position, new_start);</span><br><span class="line">            <span class="built_in">construct</span>(new_finish, x); <span class="comment">// 新元素设为x</span></span><br><span class="line">            ++new_finish;</span><br><span class="line">            <span class="comment">// 拷贝插入点后的元素，可能被insert调用</span></span><br><span class="line">            new_finish = <span class="built_in">uninitialized_copy</span>(position, finish, new_finish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">            <span class="comment">// commit or rollback</span></span><br><span class="line">            <span class="built_in">destroy</span>(new_start, new_finish);</span><br><span class="line">            data_allocator::<span class="built_in">deallocate</span>(new_start, len);</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">destroy</span>(<span class="built_in">begin</span>(), <span class="built_in">end</span>()); <span class="comment">// 析构释放原vector</span></span><br><span class="line">        <span class="built_in">deallocate</span>();</span><br><span class="line">        <span class="comment">// 调整迭代器指向新的vector</span></span><br><span class="line">        start = new_start;</span><br><span class="line">        finish = new_finish;</span><br><span class="line">        end_of_storage = new_start + len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vector</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> value_type* iterator; <span class="comment">// T*, just a pointer, not a class iterator</span></span><br><span class="line">    <span class="keyword">typedef</span> value_type&amp; reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    iterator start;</span><br><span class="line">    iterator finish;</span><br><span class="line">    iterator end_of_storage;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start; &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> finish; &#125;</span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(<span class="built_in">end</span>() - <span class="built_in">begin</span>()); &#125;</span><br><span class="line">    <span class="function">size_type <span class="title">capacity</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">size_type</span>(end_of_storage - <span class="built_in">begin</span>()); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">begin</span>() == <span class="built_in">end</span>(); &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>[](size_type n) &#123;</span><br><span class="line">        <span class="keyword">return</span> *(<span class="built_in">begin</span>() + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *<span class="built_in">begin</span>(); &#125;</span><br><span class="line">    <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *(<span class="built_in">end</span>() - <span class="number">1</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (finish != end_of_storage) &#123;</span><br><span class="line">            <span class="built_in">construct</span>(finish, x);</span><br><span class="line">            ++finish;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">insert_aux</span>(<span class="built_in">end</span>(), x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> ## deque <img src="https://img-blog.csdnimg.cn/20200424213635414.png" alt="在这里插入图片描述" /> The data is stored by chunks of fixed size vector, which are pointered by a <code>map</code>.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Ref</span>, <span class="keyword">class</span> <span class="title">Ptr</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">deque_iterator</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> random_access_iterator_tag iterator_category;</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="keyword">typedef</span> Ptr pointer;</span><br><span class="line">    <span class="keyword">typedef</span> Ref reference;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">size_t</span> size_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> difference_type;</span><br><span class="line">    <span class="keyword">typedef</span> T** map_pointer;</span><br><span class="line">    <span class="keyword">typedef</span> __deque_iterator self;</span><br><span class="line"></span><br><span class="line">    T* cur;</span><br><span class="line">    T* first;</span><br><span class="line">    T* last;</span><br><span class="line">    map_pointer node;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span>, <span class="title">size_t</span> <span class="title">BufSiz</span>&gt;</span></span><br><span class="line"><span class="keyword">typename</span> deque&lt;T, Alloc, BufSize&gt;::iterator</span><br><span class="line">deque&lt;T, Alloc, BufSize&gt;::<span class="built_in">insert_aux</span>(iterator pos, <span class="keyword">const</span> value_type&amp; x) &#123;</span><br><span class="line">    difference_type index = pos - start;</span><br><span class="line">    value_type x_copy = x;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="built_in">size</span>() / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">push_front</span>(<span class="built_in">front</span>());</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">copy</span>(front2, pos1, front1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">push_back</span>(<span class="built_in">back</span>());</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">copy_backward</span>(pos, back2, back1);</span><br><span class="line">    &#125;</span><br><span class="line">    *pos = x_copy;</span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">size_t</span> __deque_buf_size(<span class="keyword">size_t</span> n, <span class="keyword">size_t</span> sz) &#123;</span><br><span class="line">    <span class="comment">// BufSiz == 0表示使用默认值</span></span><br><span class="line">    <span class="keyword">return</span> n != <span class="number">0</span> ? n : (sz &lt; <span class="number">512</span> ? <span class="built_in">size_t</span>(<span class="number">512</span> / sz) : <span class="built_in">size_t</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="keyword">class</span> <span class="title">Alloc</span> =</span> alloc, <span class="keyword">size_t</span> BufSiz = <span class="number">0</span>&gt;</span><br><span class="line">class deque &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">typedef</span> T value_type;</span><br><span class="line">    <span class="comment">// BufSiz指每个buffer大小</span></span><br><span class="line">    <span class="keyword">typedef</span> __deque_iterator&lt;T, T&amp;, T*, BufSiz&gt; iterator;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">typedef</span> pointer* map_pointer; <span class="comment">// T**</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    iterator start;</span><br><span class="line">    iterator finish;</span><br><span class="line">    map_pointer map;</span><br><span class="line">    size_type map_size;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">iterator <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> start; &#125;</span><br><span class="line">    <span class="function">iterator <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> finish; &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>[](size_type n) &#123;</span><br><span class="line">        <span class="keyword">return</span> start[<span class="built_in">difference_type</span>(n)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">reference <span class="title">front</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> *start; &#125;</span><br><span class="line">    <span class="function">reference <span class="title">back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        iterator tmp = finish;</span><br><span class="line">        --tmp;</span><br><span class="line">        <span class="keyword">return</span> *tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    reference <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *cur; &#125;</span><br><span class="line">    pointer <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> &amp;(<span class="keyword">operator</span>*()); &#125;</span><br><span class="line">    difference_type <span class="keyword">operator</span>-(<span class="keyword">const</span> self&amp; x) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">difference_type</span>(<span class="built_in">buffer_size</span>()) * (node - x.node - <span class="number">1</span>) + (cur - first) + (x.last - x.cur);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">size_type <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish - start; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> finish == start; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">iterator <span class="title">insert</span><span class="params">(iterator position, <span class="keyword">const</span> value_type&amp; x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position.cur == start.cur) &#123;</span><br><span class="line">            <span class="built_in">push_front</span>(x);</span><br><span class="line">            <span class="keyword">return</span> start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (position.cur == finish.cur) &#123;</span><br><span class="line">            <span class="built_in">push_back</span>(x);</span><br><span class="line">            iterator tmp = finish;</span><br><span class="line">            --tmp;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">insert_aux</span>(position, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Cycling Summary</title>
      <link href="/2020/07/01/Cycling%20Summary/"/>
      <url>/2020/07/01/Cycling%20Summary/</url>
      
        <content type="html"><![CDATA[<p>大学时候骑过几次，我算不上严格意义上的爱好者，所以每次也都只有几十公里。在车窗边看过无数次的景色，总觉得没有骑车看得仔细和真实。对过去的几次短程聊作记录，也希望未来有机会来一次长途骑行（先挖坑。。），领略下未曾相识的远方。</p><ul><li>2016年1月13日/XJTU兴庆~咸阳市渭滨公园/往返共计64km 大一上期末刚考完，和几个朋友一起。 最感动的就是冬天的早上，没有带手套，快冻哭了，太冷了，最后真的骑不动了。 <img src="https://img-blog.csdnimg.cn/20200701231747283.png" alt="在这里插入图片描述" /> emmm...没错，我就是拖后腿的那个。。。 中午吃饭真的超级香，毕竟饿了一早上，分分钟解决战斗。 湖边的环境还是蛮好的，干净整洁，休息了一个多小时，下午一两点飞速撤退，结果还是晚上八点多才回校。</li><li>2016年6月4日/XJTU兴庆~西安工业大学未央校区/往返共计31km 去找同学，那天感觉还好，不是特别累，可能距离比较短。 主要是去时艳阳高照，回来时风比较大，还伴有小雨。 <img src="https://img-blog.csdnimg.cn/20200701232424575.png" alt="在这里插入图片描述" /></li><li>2016年10月6日/XJTU兴庆<sub>蓝田县史家寨乡/共计60km 国庆节回去看看我的学生们。 <img src="https://img-blog.csdnimg.cn/20200701232726598.png" alt="在这里插入图片描述" /> 去的时候比较顺利，可惜回来比较尴尬了。 回去时雨下得特别大，而且上坡路很多，比较耗费体力。 我记得有一个路口骑错了，又折了回来。 还有找到一个小的棚户避雨，当时心里其实有点小害怕，感觉路有点陌生（和去的时候不是一条），导航屏幕上全是水，心想着千万要回去啊，别把哥扔这个地方了，就冒着雨拼命骑，上坡真的巨累，衣服湿透了，但是回去却并没有感冒</sub>~~</li><li>2018年4月4日/XJTU兴庆<sub>家/共计40.2km 这次是最坑的。 下午1点40走的时候，微风轻抚着面庞，春天怡人的气息遍布空气。不过车子有点问题，修了之后感觉还是不太给力。 结果一上路，全是沙尘，而且我又是一路逆风，风超级大，就是下坡也要使劲去踩，否则车子不动啊！！！ <img src="https://img-blog.csdnimg.cn/20200701233048537.png" alt="在这里插入图片描述" /> 那天吃了一嘴的土，衣服也都是灰尘，蓬头垢面。中途还走到了一个死胡同，又做了无用功。路上偶遇三次洒水车，两次不幸被“洗澡”。 <img src="https://img-blog.csdnimg.cn/20200701233137365.png" alt="在这里插入图片描述" /> 最后小腿有点抽筋，碰到上坡还是下车推着走比较轻快。 推啊推啊我的骄傲放纵，吹啊吹啊我的骄傲放纵……</sub>~ 不过感觉突破了个人的那段极限之后，反而没有知觉了，就是一直骑啊骑。到达后大腿的酸痛感才会很刺激啊！ <img src="https://img-blog.csdnimg.cn/20200701233240785.png" alt="在这里插入图片描述" /></li><li>2019年4月27日/XJTU兴庆<sub>创新港/共计65km 大早上起床后就一直在下雨，于是乎吃完一波久违的早饭后，回宿舍睡觉。 <img src="https://img-blog.csdnimg.cn/20200701233512406.png" alt="在这里插入图片描述" /> 直到12点，雨变小了才出发。路上全身都被淋透了，坑比队友的车总是掉链子，耽误了不少时间。 后来雨就停啦</sub> 唱了一路歌，玩了一路成语接龙，骑过很泥的地，扛着车越过小山包。 建筑很不错，骑行很酸爽： <img src="https://img-blog.csdnimg.cn/20200701233823919.png" alt="在这里插入图片描述" /></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Percolation</title>
      <link href="/2020/06/15/Percolation/"/>
      <url>/2020/06/15/Percolation/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2><p>这是CS 61B的HW2，具体实现<a href="https://github.com/EIMadrigal/CS61B/tree/master/hw2">在这里</a>。这个项目是要模拟一个渗滤系统，最终目标是要通过蒙特卡洛方法计算出渗滤系统的阈值，主要会考察对并查集的使用而非实现。 渗滤有很多应用，比较重要的就是复合导电材料：刚开始是绝缘体，将金属作为导电材料逐渐掺入，填充到某临界值后，金属会形成一条导电网格组成的路径，完成从绝缘体到半导体、导体的转变，该临界值就是所谓的<strong>渗滤阈值</strong>。 模型是一个<span class="math inline">\(N*N\)</span>的网格图，每个格子有打开和关闭两种状态。如果一个格子是打开的，并且可以通过相邻的某些打开的格子连接到第一行的打开格子，那么该格子的状态就是full。如果最后一行有格子是full，那么系统就会发生渗滤。对于前面的例子，如果金属材料能形成一条从上到下的导电路径，那么就发生渗滤： <img src="https://img-blog.csdnimg.cn/2020061309400433.png" /> 我们感兴趣的是：如果<span class="math inline">\(N\)</span>足够大，每个格子独立，并且打开的概率是<span class="math inline">\(p\)</span>，那么会存在一个阈值<span class="math inline">\(p^*\)</span>，当<span class="math inline">\(p&lt;p^*\)</span>时，系统几乎不可能发生渗滤；当<span class="math inline">\(p&gt;p^*\)</span>时，系统几乎一定发生渗滤： <img src="https://img-blog.csdnimg.cn/20200613094728545.png" alt="在这里插入图片描述" /><img src="https://img-blog.csdnimg.cn/20200613094740884.png" alt="在这里插入图片描述" /> 我们的任务就是估算这个<span class="math inline">\(p^*\)</span>。 ## 渗滤系统建模 模型并不复杂，写一个类<code>Percolation.java</code>专门模拟该系统：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Percolation</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Percolation</span><span class="params">(<span class="keyword">int</span> N)</span>  <span class="comment">// create N-by-N grid, with all sites initially blocked</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span>  <span class="comment">// open the site (row, col) if it is not open already</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span>  <span class="comment">// is the site (row, col) open?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col)</span>  <span class="comment">// is the site (row, col) full?</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numberOfOpenSites</span><span class="params">()</span>  <span class="comment">// number of open sites</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">percolates</span><span class="params">()</span>  <span class="comment">// does the system percolate?</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>难点在于要满足规定的时间复杂度：除了构造函数是<span class="math inline">\(O(N^2)\)</span>，其余方法都必须是<span class="math inline">\(O(1)\)</span>。 如果采用常规方法判断是否渗滤，那么至少也要遍历最后一行看看有没有full的格子，这样时间<span class="math inline">\(O(N)\)</span>无法满足要求。 问题就在于第一行和最后一行的格子数太多，减慢了我们的判断效率。那么如果我们在最上面和最下面设置两个虚拟节点，事情就会变得OK： <img src="https://img-blog.csdnimg.cn/20200613110636913.png" alt="在这里插入图片描述" /> virtualTop负责连接第一行所有打开的结点，virtualBottom负责连接最后一行所有打开的结点，这样我们就把<span class="math inline">\(N\)</span>个点浓缩成了一个点：</p><ul><li>判断某点是否full时，只需要判断该点是否和virtualTop连接；</li><li>判断是否渗滤时，只要判断virtualTop和virtualBottom是否连接。</li></ul><p>这种解决方案看似很完美，但是有一个问题Backwash： <img src="https://img-blog.csdnimg.cn/20200613111558820.png" alt="在这里插入图片描述" /> 如果已经有一条从上到下的路，那么水流可以通过virtualBottom回流到最后一行已经打开的格子，而这些格子本不应该full。 这个问题的解决有点tricky，开始我是想通过周围格子的状态来判断是否full，即只有周围四个格子之一是full，当前格子才是full。但是如果要在<code>isFull()</code>里递归调用去判断周围格子，那么一定会爆栈；所以要判断周围格子只能通过是否和virtualTop连接，但是只要这个打开的格子在最后一行，就一定要和virtualBottom连接，如此一来只要有其他通路，那么该格子必然还是backwash，进而就会导致其它和该格子相连的也backwash。 举例来说：假如右边3个蓝色格子从上至下编号123，先打开3号，3号周围四个格子都没有和virtualTop连接，因此我们认为3号没有full，这没问题；但是接着打开2号，2号下面的格子（3号在最后一行且打开，必然和virtualBottom连接，即也和virtualTop连接）是和virtualTop连接的，因此我们判断2号是full，这显然错误。</p><p>没法用逻辑优化的时候，就应该转向用空间去优化。我们可以在开一个并查集，这个集合最多只包含virtualTop和地图中的所有格子，而将virtualBottom排除在外。判断full时，只要当前格子在新并查集中与virtualTop连接，那么必然full。</p><h2 id="monte-carlo-simulation">Monte Carlo Simulation</h2><p>为了估算阈值，需要做<span class="math inline">\(T\)</span>次独立重复实验：</p><ul><li>所有格子都设置为关闭；</li><li>随机选取一个关闭的格子，打开它，重复直至系统渗滤。 那么这次试验的<span class="math inline">\(p^*\)</span>就是打开格子数/总数。</li></ul><p>取<span class="math inline">\(T\)</span>次实验的平均值，可以得到更加精确的阈值；标准差<span class="math inline">\(\sigma\)</span>展示了结果的波动程度： <span class="math display">\[\mu = \frac{x_1 + x_2 + … + x_T}{T},\sigma^2 = \frac{(x_1 - \mu)^2 + (x_2 - \mu)^2 + … + (x_T - \mu)^2}{T-1}\]</span> 当<span class="math inline">\(T\)</span>足够大，<span class="math inline">\([\mu - \frac{1.96\sigma}{\sqrt{T}}, \mu + \frac{1.96\sigma}{\sqrt{T}}]\)</span>提供了95%的置信度。</p><p>这部分的实现很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PercolationStats</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">PercolationStats</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> T, PercolationFactory pf)</span>  <span class="comment">// perform T independent experiments on an N-by-N grid</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">mean</span><span class="params">()</span>  <span class="comment">// sample mean of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">stddev</span><span class="params">()</span>  <span class="comment">// sample standard deviation of percolation threshold</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceLow</span><span class="params">()</span>  <span class="comment">// low endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function">   <span class="keyword">public</span> <span class="keyword">double</span> <span class="title">confidenceHigh</span><span class="params">()</span>  <span class="comment">// high endpoint of 95% confidence interval</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>痛撞南墙才回头---高考五年记</title>
      <link href="/2020/06/08/%E7%97%9B%E6%92%9E%E5%8D%97%E5%A2%99%E6%89%8D%E5%9B%9E%E5%A4%B4---%E9%AB%98%E8%80%83%E4%BA%94%E5%B9%B4%E8%AE%B0/"/>
      <url>/2020/06/08/%E7%97%9B%E6%92%9E%E5%8D%97%E5%A2%99%E6%89%8D%E5%9B%9E%E5%A4%B4---%E9%AB%98%E8%80%83%E4%BA%94%E5%B9%B4%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">0 前言</h2><p>距离2015年高考已经过去了整整5年，这段日子埋藏着太多不堪。尽管现如今我已经开始了全新的生活，但仍想把自己曾经的问题和思考展示出来，一来当作对过去的告别，二来也希望这些教训能给境遇类似的人一些启发。</p><p>这篇文章字字血泪、句句属实，我不想熬制鸡汤或者贩卖焦虑。文中的一些想法都是通过亲身经历、思考、与前辈同学交流得到的，可能不太成熟，欢迎大家批评指正。</p><hr />认真去划决定命运的小船，却不知道未来会漂向哪里。<p align="right">——题记</p><h2 id="高中故事">1 高中故事</h2><p>文章题目虽然是高考五年记，但其实主题与高考并没有多大关系，而且上大学以后，我很少主动提起高考这档子事，只是为了故事完整，就从高中时代讲起。</p><p>高中三年是在一所县城高中，高考压力很小，学习也是波澜不惊。我并没有像传说中那么拼命学习，努力程度连初中都不如。相反，我的高中自在安逸，回想起来让人有些后怕。作为典型的“小县城学霸”，由于比较轻松就能考到前几名，所以我将大把大把的课余时间拿去运动，以至于已经主次不分。</p><p>做题总是很无聊，而我不知道是因为骄傲，还是因为懒散，遇到难题总是放弃思考、看看答案了事，看不懂就去睡觉，每天做些简单题（毫无必要）保持自信。事实上，我隐约知道外面有更大的世界，但却不知道那个世界是什么样子。那时我几乎没有可以追赶的目标（不像初中），这也许是高考失败的一个原因吧。自负、虚荣以及平日的偷懒终于在高三时酿成了苦果，那几次大型模考理综难度激增，跟平时训练完全不是一个套路。理综彻底被完爆的我后来再也没得过第一，化学甚至长期徘徊在及格边缘。看到这，你也许以为我会发奋努力上演逆袭神话，但现实永远是残酷的。实际上我并没有多少改变：该踢球踢球，该偷懒偷懒，甚至在四五月份时我都打算放弃物理，想着随便混几分算了。高考的目标也变得无所谓起来，反正那一直都是挂在墙上终将被戳破的泡沫罢了。到最后我干脆抱着爱考哪考哪的弃疗心态，只希望尽快毕业。</p><p>我之前对于“小县城学霸”这个词一直嗤之以鼻，即使高中物理老师曾经不止一次强调过我们只是一个县城中学。不过当时我觉得学霸就是学霸（现在显然我自己并不是），厉害的人到哪都那么厉害，哪有什么小县城不小县城。不过后来当这类人的思维方式深深影响我的时候，才发现原来老一辈人的说法未必都是错的，“不听老人言，吃亏在眼前”这句古语也并非空穴来风。</p><p>2015年的高考和往年一样平淡无奇，出分后我异常平静（要是没上600该多好，那我就坚持复读了）。我想学物流管理或者工商管理，前者是因为我喜欢看到井井有条的交通运输网，最终将东西错落有致地归位，后者则纯粹是因为高大上。不过很不幸，这些想法并没有得到亲戚父母的支持，他们说那些专业虚无缥缈，毕业后不好找工作。</p><p>信息的闭塞使得我（包括那些已经工作的亲朋）并不了解各个专业的细节以及未来可能的职业轨迹，我甚至搞不清电子信息与计算机之间的关系。<strong>18岁前的我们只知道读书，习以为常的主流价值观就是“努力学习，考高分，上好大学”，在这样主流价值观的裹挟下，很多人相信 “一分耕耘，一分收获”，彷佛只要足够拼命学习，一切都会迎刃而解。然而这种简单的线性的思维方式完全是对真实生活的一种片面归纳，强行被灌输的这些价值观念是否契合当代社会真实的发展轨迹，甚至是否正确，都有待商榷。也许当某一天我们突然发现自己的世界观无法解释见识到的种种现象时，才会在深夜里辗转反侧痛哭流涕的同时，试图去打破曾经的桎梏，而人生信条的崩塌和重塑无疑会是极具撕裂感的、漫长的过程。</strong></p><p>此时的我们对社会的认知极度匮乏，高中也完全没有相关的职业指导教育，盲目地填报志愿，这是当时很多人的通病，我也不例外。在西工大三航学院、厦大经济学和西安交大的来回纠结中，最后一天将交大的专业大致按照历年录取分的高低依次填进志愿表，这在现在看来是多么不可思议的一件事，而我，最后就是这么干的。就这样，稀里糊涂地来到了交大电子信息类。</p><h2 id="懵懂时光">2 懵懂时光</h2><p>到大学后，集体住宿搞得我很不适应，晚上总是很晚才睡着，早上起个大早去跑操，结果就是几乎所有早上的课我都一睡而过。那些课程我也着实提不起兴趣，考试总是随缘突击，结果就是期末挂了一门工程制图，那种空间想象能力我差到不可救药。我个人对新环境的适应一直都很慢，所以进入一个崭新的阶段，开始时总是做得十分差劲。</p><p>不过好在我并非一个一成不变的人，于是开始尝试去改变。由于迟迟找不到方向所在，试错的过程持续了将近两年半的时间。选修了一门职业规划的课程，想借此明确未来的打算，弥补这本该是很早前就完成的人生必修课，不过这门课与大学物理一样无趣；参加了数模比赛，虽然得了奖，但除了提升软件安装和论文写作技能以外，并没有什么新奇之处；参加了社团的支教，这是我当时唯一觉得价值非凡的事情，这段经历也对我后来的想法产生了重大影响，可是这并没有从本质上解决我的问题：<strong>我未来到底想干嘛</strong>？辅修了金融学，也不过帮助我提早排除了一个未来可能从事的行业而已；去奶茶店进行所谓的“创业”，半年后店铺出租，我“失业”了；甚至于无聊到搞了一个公众号，想看看自己有没有自媒体运营方面的喜好，最后也是无功而返。</p><p>说来倒也有些矛盾，除了少数大神一直都有明确的方向或者可以兼顾方方面面以外，我们大多普通人，大学里如果一直不停尝试各种方向去试图寻找兴趣，那必然会分散精力，成绩不够好带来的代价就是后期通过更多时间和精力去弥补。可是如果很少尝试，一条道走到黑，那后果也是可想而知。两种决定都会付出代价，只是时间早晚而已。</p><p>我想既然这些都无济于事，就先提高绩点吧。于是从大二下学期直到毕业，我都在认真学习。即使信号与系统、模电数电那些专业课依然没有学懂，但我发现考试与学没学懂关系并没有那么密切，我居然拿到了在大学的第一个100分。欣喜之余，我隐约觉得这里面有什么问题，但是也懒得思考。</p><p><strong>生活就是这么奇妙，收获的成果有时并不与你的付出成正比</strong>。很快我就发现即使我再努力学习，平均分最高也不过89，全系排名好的时候30多，差的时候50多，那时我才初步意识到<strong>人与人的差距有时候不是通过努力就可以弥补的</strong>。</p><p>成绩上不去，我就想试着去开发一下自己的科研禀赋。于是大三寒假我报了ML方向的一个组，不过我压根没有见过报名的那个教授本人，而是被直接分在了一个副教授手下，并进而被分给了他的一个博士。见不到leader本人我完全不觉得惊讶，毕竟IEEE Fellow怎么可能去带一个本科生？但令我不能理解的是我明明报的是ML，但平时的工作却完全是网络通信方向，又是讨厌的信号和从未搞懂的相位。看了一个寒假的论文，帮助他们测试实验数据，在组会上讲论文，尽管我还不知道自己想做什么，但却知道自己厌恶什么。随着时间推移，我愈发觉得自己正在南辕北辙，加之实验室不在一个校区，后来也就主动退出了，科研初探随即宣告失败。</p><p>到此为止，能想到的方式我都一一尝试，可是收效甚微。那段时间我时常在球场散步，一圈又一圈，脑子里就想着两个问题：<strong>我到底喜欢做什么？我未来到底要干嘛？</strong></p><p>人生总有想不明白的问题，苦苦思索不得其解，只能先搁置起来。事情在大三下学期出现了转机，我们系开放了两门CS的课：OS和微机原理，加上ACM大佬们的影响，我开始发现计算机课程的乐趣，那是我第一次认认真真、彻彻底底搞懂了一门课，甚至于我竟然乐意废寝忘食去完成课程的Project。正反馈也来得恰到好处，两门课我都拿到了90+的成绩，那时我隐约有了转CS的想法。顺便要纠正一下，很多人误以为通信转CS很容易，事实上除了三四门相同的专业课以外，通信与CS本科期间学习的东西就像是两条平行线，通信转CS和转金融没什么差别。可能是听到太多科班CS大佬的故事，我始终觉得自己与科班出身的差距无异于一条鸿沟，以至于敬畏到忘记自己该学些什么，尽管后来发现事实并非如此，<strong>人有时候总是自己吓唬自己</strong>。</p><p>说到这就难免谈到劝退的话题，生/化/环/材被黑的体无完肤，大家都要去金融/CS，有时候我也会想：作为所谓的名校学生，我们享受了比较优质的教育资源，然而却少有人愿意投身基础科学研究，这才是科技兴盛的基石，过去不久的华为中兴就是典型的正反例。也难怪有人戏谑“中国只有互联网，没有计算机科学”，我们的互联网公司都在模仿美帝，腾讯学习ICQ，百度学习Google，阿里学习eBay，可是我们却没有看到美帝不仅有这些应用层的公司，还有Intel，Apple，Qualcomm等一大批芯片硬件厂商作为基石，而我们的BAT又有谁做基石呢？一股脑转去高薪行业，这会不会有些太过自私了呢？曾经的理想主义色彩淡薄了许多，我是否也变成了所谓的“精致的利己主义者”，而忽略了对社会的那份责任？但转念又一想，如果一个社会逼得许多人转去金融/CS，那是不是这个社会本身出现了问题呢？遇到一些不顺心的事，千万不要想不开，很多时候不是你的问题，而是整个社会的运行机制出现了偏差。</p><p>由此也可以看出：<strong>世俗意义上的成功更重要的决定因素是历史的进程，选择远远比努力重要得多，而信息和自我定位则会很大程度上左右你的选择。某些情况下努力可能只占1分，而成长环境、家境状况、历史进程、个人选择、贵人相助甚至运气则可能占9分，甚至99分。</strong></p><h2 id="曲折岁月">3 曲折岁月</h2><p>时间飞逝，一转眼三年已如白驹过隙。大一的成绩太差，总成绩大概只落在了全系40多名，掐指一算就知道在保研边缘，如果出国的大佬比较多，我也许会有机会。所以我不敢怠慢，两手准备，保研自然最好，若是失败也不能耽误考研。</p><p>大概是8月份回校的，那阵就看数学，没什么状态，大概心里还是侥幸着能够保送，也不知道专业课该看计算机还是通信的。9月大家人心惶惶，有出国考T考G的，有各种保外保内的，还有穿着西装到处参加面试的，大家也都比较焦虑，放弃考研的也大有人在。浑浑噩噩就到了9月中旬，保研名额给到了第42名，而我是第45名。颇具戏剧性的是，之前坊间传言会有20多个专硕名额，搞得人心惶惶，我还幻想着保专硕算了，后来也不了了之。</p><p>这下本以为彻底死心，考虑到自己当时备考效率极低，根本看不进去书，加上周围的同学纷纷拿到了offer，我下定决心找工作。于是就完善简历，练练编程的题目，投了华为、中兴、网易等几个公司的研发岗，差不多耗了一个礼拜，也收到了陆陆续续的笔面试通知。没想到生活总是会有<del>意外的惊喜</del> ，系里通知有一个国防科大的普通生定向保送名额，在我前面的2个人都放弃了，再加上军校的缘故，我竟然没怎么思考就选择了放弃，这该是第一波坑操作。</p><p>后来不知怎么滴，也许是和老师朋友聊了很多，也许觉得自己还是太菜，莫名其妙又想读研了，稀里糊涂就推掉了所有的面试，一是不够自信，二来不想分心。又把书重新拿了起来，滚去复习。奇怪的是：这次竟然可以静下心来，仔仔细细做题了。这该死的第二波坑操作，事实证明：<strong>秋招远比春招重要并且容易得多</strong>，这一点我会在后面解释。</p><p>时间来到了9月底，这下终于可以安心复习了。出于对通信专业课的阴影，我还是选了CS，还有是因为大三时几门计算机的课学的还不错，倒也饶有兴趣。</p><p>那，选哪个学校好呢？我心想，既然要考研了，本科比不过他们，研究生的学校可不能输给他们。殊不知这就是典型的“高中生心态”，<strong>没有根据自己的定位和当前的规划去做出恰当的选择，而是冲着高大上的标签去做决定，这样的决定显然是冲动并且幼稚的</strong>。清北太难了，比XJTU好的就ZJU、SJTU、FDU、NJU，最想去的是SJTU，查了之后才知道2018年SJTU CS就招了两个学硕、10几个专硕，我想难度太大了，遂杀掉（题外，2019SJTU CS难度蛮低的）。之后查了这几所之后，发现NJU分数又低、招人又多，就开始复习NJU的专业课。</p><p>专业课一共有5门，很难，每天看的头昏眼花。屋漏偏逢连夜雨，10月招生简章出来后，NJU的名额还是和往年一样多，结果过了差不多一个礼拜，官网突然把名额杀了一半，剩20几个了。我想，这也变难了，再加上群里大家信誓旦旦的样子，和朋友商量后，我在来回纠结和迷之自信中又换了学校（题外，我的分去年上NJU没啥问题）。就剩ZJU和FDU了，FDU虽然好考，但专硕却不提供住宿，还恰是从这一年开始，ZJU就这样成了唯一的选择。结果表明，复习时间真的太过紧张，尤其是专业课。408的难度相信都有所耳闻，时而做对，时而连着错很多，心情也像过山车似的起起伏伏，无数次都有撕掉卷子的冲动。我只能死马当作活马医，其实直到最后，我甚至连习题集都没有做完，很多知识点也是一知半解。这该死的第三波骚操作。</p><p>当时和几个出国狗一起自习，看过他们托福考出来的欣喜，也见过GRE 310的落寞，当然还有那一起吃饭时互吐的苦水。我说考完的日子就舒服了，说我已经列好了长长的TODO List。他们说，其实你有没有想过，这本身就是人生啊！</p><p>12月的日子很难熬，临近考试，觉得自己不是在查漏补缺，而是在女娲补天。心情总是飘忽不定，仿若过山车一般，题目全对了会喜上眉梢，英语阅读5错4时又觉人生无望，揉过的专业课卷子冷静下来还是只能乖乖去看。</p><p>说来我算是一个乐观主义者，或许是<strong>人总是愿意相信对自己有利的事情</strong>。寒假可能有一丝落榜的焦虑，但大部分时间我还是在准备机试，每天都在做算法题（题外，这大概是唯一正确的事了，春招用上了）。</p><h2 id="折戟沉沙">4 折戟沉沙</h2><p>出成绩后就得知没有过线，我顿觉失望与惶恐。稍一比较，才发现别人的生活多姿多彩，自己反而是一直学习却连考试都考不好的傻逼。当天的我十分慌张，立刻去查找调剂信息。得知中科大软院收校外调剂，心情才稍稍舒缓了些。虽然学费贵点，但去中科大读个硕士还是不错的。</p><p>看着94分的专业课，我一时语塞。有些不甘心的我一遍又一遍回忆着这大半年发生的事情: 本科通信、三跨浙大、备考也算不上充分，落榜也实属正常。我一直尝试重新认识自己，可现在愈发地不认识，像是一个完完全全的陌生人。刚开学后的那两天我处于弃疗状态，觉得什么都无所谓了，爱咋咋滴吧，调去差点的也行，随便找份工作也行。</p><p>冷静了几天，又觉得这些挫折并非坏事，现在受挫总比将来走向社会好。况且成年人应当为自己的错误付出代价，不论是选择出了问题，还是不够努力。挫折对于我而言绝对谈不上财富，只是希望让我这个转变缓慢的人长点教训。我不是一个一蹶不振的人，也不是度量狭小，只是受了打击，犯了错，总得学点什么，不是吗？积极的心态很重要，凡事总要向前看，过去的就过去吧。工作要好好找，调剂也要努力争取，解决好当下，求一份心安。</p><p>鸡蛋不能放在同一个篮子里，我又迅速确定了其它几个调剂的学校，排除了调剂本校和浙大相关专业的可能。后来也在老师和同学的推荐下了解了一些研究所，但大多是军工性质，我并不想去。很无聊的名校情节以及差强人意的总分使我把比本科差的学校都直接排除，最后就确定了3个：科软、山东大学、中科院成都所。</p><p>我想着这3个再差也能去一个吧，但是<strong>现实远比想象的更加要命</strong>。直到3月10几号才知道科软从今年开始不收校外生；接着是山大，学硕调剂有3个名额，专硕有11个，我想着报个人多的，却不知再次选择出错：专硕的分数高的吓人，没有拿到复试资格，而学硕反而分数低的多。拖了最长时间的就是中科院，预调剂很早就填了，我甚至都填完了政审表，傻傻地把这个当成最后的救命稻草，直到3月底没看到名单，我还是相信会来的，这大概因为我实在想要这个硕士吧。到了4月10日，我对比了去年的招生人数和今年一志愿人数，发现可能不会再有调剂了（之前发邮件问了但没有回信）。</p><p>期间也不敢落下春招，当时想得太简单：不能既没学上，又没工作。一口气投了十几份简历，所幸除了冲突和放弃的之外，都拿到了笔面试通知。因为我是半路CS，再加上春招已经没有大公司的职位，所以也投了一些非技术岗。</p><p>说个题外话，找工作一定要在秋招，因为春招只是秋招的补录，名额少、难度大。拿我作为反例，春招想要投递大公司（BAT），都已经没了HC，错过这一次你就再也不是应届生了，自然也就没了校招的待遇。我后来才了解到：阿里巴巴光是实习生转正和提前批就已经占掉了绝大部分HC，甚至于秋招都已经没什么机会了。</p><p>那段时间我几乎没怎么休息，也没心思去休息，只希望3月底可以确定去处，未来的不确定对人真是煎熬。认真去准备的有五家：TP、OPPO、浦发总行、华为和字节跳动。前三家都给了offer，华为没有了消息，字节跳动则是笔试挂掉了。后来突然发现自己跪在了哪里，华为这种公司，或者说几乎所有公司，都需要你来好好干活。但我的致命错误就在于太老实，而没有学会伪装。我甚至在主管面说自己还是想继续深造，如此愚蠢的错误我接连犯了很多次，这是学会的第一课。</p><p>我其实很讨厌面试时看重忠心的公司，现代企业本来就该是我付出劳动力、你付给我报酬，我当然会把份内的事做好，你也不要占用我其他时间。情怀不能当饭吃，这种忽悠我觉得非常小儿科，甚至不是现代企业所需要的管理方式。</p><p>找工作的心态一直在“卧槽，我还挺牛B的”/“唉，我真傻B”之间来回切换：某司HR主动打电话问我要不要去；那么简单的题目竟然不会做；某司竟然直接免掉了高管面；我怎么问了那么傻X的问题……唯一的共同点在于N轮面试真的会把人榨干。</p><p>后来拒了TP，其实OPPO也没签，一直在等菊厂的结果，直到打听到别人已经拿到了offer，才确认自己凉了。这时OPPO已经快要截止，唯一庆幸的就是自己联系了一起去面试的同学，这才没有傻等下去。虽然我知道不能以偏概全，但OPPO的HR在招聘过程中展现出来的专业素养比某为不知道高到哪里去了，“店大欺客”的道理是明摆着的。</p><p>一步一步把一手好牌打成了今天这个样子，我终于体会到其实<strong>人生的道路是由很多因素共同决定的，并且很多机会都是转瞬即逝</strong>。另外，自己也就是中人之资、半吊子水平而已。</p><p>尽管如此，起初拿到offer后，看着协议上的薪资，我有些兴奋：虽然package不大，但就我了解的情况，也算是比较好的待遇了。我庆幸自己搭上了CS的末班车，还被邀请给下一届分享找工作的经验，甚至开始早早谋划起在另一个城市的生活......</p><h2 id="痛定思痛">5 痛定思痛</h2><p>草草签约以后，我总觉得哪里不对劲，却说不上来。<strong>我发现自己比之前进步一点的是遇到不明白的问题，会去思考、去交流、去尝试得到一个答案，尽管这个答案不甚完美，甚至在上帝视角下都不一定正确，但这也比敷衍了事强上一万倍。</strong></p><p>考研失败就像压垮骆驼的最后一根稻草，让我开始跳出虚荣的怪圈，真正重新认识、评估自己。是不是一切从开始就错了呢？为什么在给予别人建议时头头是道，到了自己就非得撞得头破血流呢？万千世界，大家虽然所处位置不同，但每个人都在寻找自己的局部最优，而且结果好像都不错。唯独我，好像学习率太大，损失函数竟有些发散，距离最优点也越来越远。<strong>那种疼痛感，就像从崖边跌落，远比在平地上摔倒更令人刻骨铭心。</strong></p><p>我像过电影般一遍遍回忆这几年的事情，也时常和各种背景的人聊天（徐老师的<a href="https://www.cnblogs.com/EIMadrigal/p/11973810.html">文章</a>给了我很大启发，我也和徐老师交流过，人很nice）。我逐渐开始发现自己的问题：周围都是IT的同学，大多都想着高薪买房，目前看来的确不错，但或许正是在这种<strong>单线程思维</strong>的浸染以及<strong>同质化的比较</strong>下，我也在不知不觉中迷失了自我，这种象牙塔带来的禁锢总有一天要被打破。更加本质的原因在于我自己<strong>本身没有一个清晰的定位并且没有明确的职业规划，哪怕只是五年、十年的规划</strong>。兜兜转转又回到了那个熟悉而又陌生的问题：我未来到底想做什么？媒体软文总是告诉我们要不忘初心、坚持梦想，却从来不告诉我们怎样寻找初心？怎样选择梦想？</p><p>与在国内互联网公司实习的同学交流后，我看到了高薪背后的挣扎：长时间的加班使得很多人到一定年龄后只能主动退出。以前我从来没有想明白：为什么某为每年从各大高校招聘那么多人，企业利润总是有限的，招那么多人怎么能消化呢？某为又不像国企，政府有命令必须帮助国家解决就业，国家养活完全可以理解。后来当我某一天突然看到了某为的离职率，才明白其实不过是数量巨大的新人换旧人而已。很多年轻人几乎没有自己的生活，疲惫而又无奈。这才是普通大众的真实情况，我们不该只看到某某大佬创业成功去纳斯达克敲钟，某某大佬又融到了C轮，这种“<strong>幸存者偏差</strong>”掩盖了“<strong>一将功成万骨枯</strong>”的现实，也让我重新审视自己：你愿意一直从事这样的职业吗？显然，答案是否定的，因为我始终觉得工作不该成为生活的主旋律，还有很多更有意义的事情等着我去完成。</p><p>顺便插一句：如果你不确定自己要干嘛，<strong>趁早去实习</strong>，接触真实的工作环境远比在象牙塔里意淫要实在得多，提早打破学校里单一价值评价体系带来的桎梏。此外，实习的好处也自不必多说，牛逼公司的实习永远都是简历上最耀眼的闪光点，甚至于在互联网，实习经历大于其它GPA、获奖、社团所带来的价值之和。</p><p>被碾压的感觉与证明自己的情绪混在一起，使得我对自己没有明确的定位。而选择上的失误更多的不是来自于信息的匮乏，而是选择的依据出现了问题：<strong>没有基于未来的职业规划来做出决定，反倒是冲着高大上的标签或者亲朋好友的期待，这样的选择能有多少理智的成分呢</strong>？扪心自问，之前那一连串的操作都是基于一个错误而又功利的方向进行，真正想要的和你实际做的完全是两码事，两者间的夹角至少也有80度，甚至可能是钝角，量出这个角度我花了整整一年，而有的人则花了五年、十年甚至一辈子，这样无头苍蝇乱撞般的努力毫无意义，甚至可能起到反作用。</p><p>是的，之前的选择出了很大的问题，现在的锅确实也得背着。可是这并不是彻底击倒我的理由，换句话说，我应该去纠正之前的错误，而不是一蹶不振。之前说过：选择比努力重要，但<strong>通过交流、经历、思考不断纠正方向的能力则比选择还要重要</strong>，这样才会带来螺旋式的上升而不是断崖式下降。</p><p>明白了错误的主要原因和以后的职业规划后，再一次重新做出的选择看起来那么自然和水到渠成。再强调一遍：<strong>你对自己的定位评估会影响你的选择，而选择却远比努力更重要。你的定位应该取决于你对自己未来的规划，而不是那些高大上的标签或者亲戚朋友的看法，这会让你失去对自己的准确判断，德不配位，必然撞墙。</strong></p><p>不撞南墙不回头，这一年撞得头破血流，跟自己的无知、幼稚、局限斗争了一年。同样，也成长了一年，甚至比以往任何时候都成长地更快。有时候回过头去想，如果这一路很顺利的话，现在又会是怎样一番景象？如果当初选择了保送，如果选择了秋招工作，如果没有选择ZJU计算机，如果调剂到地球科学系，如果去工作了，如果……可惜没如果，所以从过去汲取教训后，最好向前看。盗用一句台词：</p><blockquote><p>You have got to put the past behind you before you can move on.</p></blockquote><h2 id="自食其果">6 自食其果</h2><p>放弃这个比较有诱惑力的工作而去赌一个未知的将来，要说没有压力肯定没人相信，但我当时的决定却相当清晰，即使违约的事情还没有谈妥，即使二战期间的食宿还没有着落。因为我在用未来的职业规划当作决策目标，不再过多考虑暂时的收益，因此决定不再是冲动的。我一直以为自己是悲惨的，大四的最后才确定初步的生涯规划，但实际上我又是幸运的，因为还有一大批人甚至中年以前都没有明白。</p><p>真的要感谢我有一对开明的父母，当我不停地自我怀疑和否定之前的观点与行为，他们总会给予无限的鼓励与支持。</p><p>度过了煽情的毕业季，处理完违约的事情，考完驾照后，我便开始逐渐矫正自己的生活，为过去的错误买单。又是8月回校，心境却大有不同，坚定目标后，事情也不是一帆风顺。记得李健有一句歌词：等待和耕耘，谁更辛苦？我的答案是等待，那段时间我偶有焦虑，填补焦虑最好的方式就是找些事情做，可是闲下来之后，<strong>等待的日子却最是难熬</strong>。</p><p>每段崭新的日子一开始总是来不及悲伤。尽管我十分讨厌把相同的事情做两次以上，但或许是因为新鲜感，刚去的几周学习状态感觉还不错。逐渐理顺了生活之后，最难熬的一段日子在9月底10月初到来。接下来的几周我严重失眠：经常是晚上8/9点睡觉，躺床上思考很多事情，凌晨2/3点才入睡，然后就一直睡到大中午才起床，接着去吃饭学习，生物钟彻底陷入混乱。虽然我不止一次告诉自己：几个月很快就会过去，也明白路该怎么走，但是<strong>心病难医</strong>，还是会经常抱怨Why always me/Why always the wrong answer。我希望时光过得快一些，每天复习都数着日子。虽然看起来还算正常，但我有些担心会不会在哪一瞬间突然崩溃。我尝试了很多种方法试图让自己平静，回归正常的作息。</p><p>由于学校很傻逼的支付系统，扫码吃饭可供选择的窗口少得可怜，不过比物质上的单一更加要命的是心理上的波动。那段日子我真真切切感受到了人生的艰难：每天和活人说话不超过10句，我擅长独处，但还是一度怀疑自己能否忍受这样的孤独？能否坚持下去？接下来的日子又该如何度过？</p><p>幸好我有自己的日常爱好和排遣方式。除了正常的复习时间，我尝试用音乐、文学和足球去填补漫长的空闲：去看各种人物的访谈，从李健到村上春树；去听各种风格的音乐，从钢琴曲到摇滚乐，后来我惊讶地发现自己一年里竟然听了8000多首歌；去了解各种军事话题，从二战到伊拉克战争；去看各式各样的人生轨迹，从职业选择到人生理想。那段时间最开心的事情就是写博客、听音乐和刷评论，那就像是我自己的避风港。每隔一段时间我就会迷上一个大师：从Richard Clayderman到Beethoven, 从石进到周杰伦，从Joe Hisaishi到Maksim，从李健到Akina，甚至无聊到去扒一些<a href="https://www.cnblogs.com/EIMadrigal/p/11421473.html">抄袭的作品</a>、在足球APP上和人撕逼。</p><p align="center"></p><center class="half"><img src="https://img-blog.csdnimg.cn/2021050914403540.jpg" height="25%" width="25%"/>图片更新于2021.5.9</center><p>为了调整生物钟，我决定用早起对抗失眠，学了很多<a href="https://zhuanlan.zhihu.com/p/34952593">快速入睡</a>的技巧。深夜自我怀疑的时候，就去回想毕设导师对我能力的认可，她告诉我不能因为一次失误就这样自暴自弃，甚至在毕设答辩时，其他老师问我将来什么打算，我回答工作，老师仍然在表达惋惜。为了避免枯燥，我试图在每天晚上为第二天制定计划，并在完成小小的目标后奖励自己一顿美食（每隔一段时间都会去某个固定的小店吃饭）。后来不知是因为生活的惯性还是出于对第二人生的追求，我的效率渐渐提高，并养成了程序化的一天：早餐、学习、午饭、午休、学习、晚饭、学习、跑步、洗澡、沙雕视频（美食/老剧）、维护博客、睡觉。不可否认的是，尽管有时候仍然觉得自己像个可笑的小丑，但情况一直在好转。这种井井有条的生活给予了我长期的专注，使我得以脱离苦海。 <img src="https://img-blog.csdnimg.cn/20200528111916687.png" alt="在这里插入图片" /> 于是从10月下旬直到考前，我都变得异常平静。<strong>在那段低谷的日子里，收到了许多老师、前辈、同学以及食堂大叔的照顾和鼓励，也包括那些远在网络彼岸的未曾谋面的陌生人，在此一并感谢~</strong></p><p>我原本坚定地以为，高考考成那个鬼样子是因为没有认真去学，去复读一年肯定会有巨大的提高。不过经历了那几个月，现在我觉得结果真的未可知：心态、压力等等因素共同作用下导致的结果可能会谬之千里。</p><p>在这一年里，我听到过太多的诉苦：工作后的同学又想回来读研，而且固执地认为研究生的待遇好、升职快；还遇到了许多正在读研的学长学姐后悔自己没有早早去工作挣钱，积累社会经验。两种想法没有对错，还是那句老掉牙的话：因人而异。不置可否的是，<strong>人都是有损失厌恶的，比较必然带来不快，乃至伤害</strong>。以前我总是转不过这个弯来，或者更确切地说，潜意识里不想让自己转过这个弯。如果放眼整个社会，你会发现，<strong>人生从来就不是什么公平的游戏</strong>，别人比你少读几年书、多挣一些钱根本就是没什么大不了的事。有一大堆人压根不需要读书、打工挣钱，就可以家财万贯，你奋斗一辈子可能都无法到达别人的起点，难道我们就放弃生活了吗？大家都是普通人，甚至夸张一些，都是社会最底层的人，没有谁比谁高贵或卑微，为什么要比来比去互相伤害呢？</p><p>将读研作为缓冲的人无非两种情况：不知道自己要做啥；知道了要做什么但时间已经不足以得到理想的结果，别无选择。对我个人而言，如果去工作，可能以后选择的权利会少一些。三年的缓冲一是为了弥补之前犯下的错误，二是为了让自己将来有一些小小的选择权，不用一直996。基于职业规划的前提下，我想该怎么做也已经非常明确了。当然这只是我自己的情况，其他人，比如本科时已经积攒够了资本，那大可以直接工作；对于立志进入学术界的同学，那继续出国深造才是最好的选择，所以才说因人而异。</p><p>初试后我压根没有对答案，只是小小放松了一下，庆祝这段岁月的结束，也是迎接下一段更加艰难的旅程。终于松了口气，不为别的，只为有时间做自己的事情了，<strong>自由的感觉真好</strong>。</p><p>回家后，一边等待成绩，一边准备实习。找实习的过程并没有比这半年的生活轻松多少，本来打算3月份复试后立即找实习，拿到录取资格就可以算是在校生。结果人算不如天算，没想到疫情居然持续了这么久，2/3月的时候遥遥无期，也不知道什么时候复试，如果复试拖到4/5月，结束后就只剩6/7/8这3个月，很多公司都是至少实习3个月，这样找实习的时间几乎没有。所以从2月份开始，通过各位前辈和同学的内推，大大小小投了国内外几十家互联网企业：网易、字节、华为、深信服、微软、依图、百度、腾讯、小米、Amazon、IBM、Intel、广联达......起初我觉得非常奇怪，除了2家公司打电话了解情况后，其他的都杳无音讯，唯一的机会来自于网易，不过我的面试实在糟糕。后来特意查了一下，发现非在读生签实习协议违反劳动合同法。知道这事以后，我也就基本放弃，不再强求，如意算盘再一次落空。</p><h2 id="重新起跑">7 重新起跑</h2><p>2月中旬看到初试成绩后，我觉得应该没什么问题，复试准备得很放松，把更多时间用来思考问题、夯实基础以及整理散落的片段。</p><p>复试虽然延期了2个月，但一切顺利。感谢我交的老师，面试时仍然在鼓励我，问的最多的就是去年的经历，告诉我不要以为没去ZJU就亏了，告诉我XJTU也不差，结束时说欢迎我来交大的确有些感动。在打趣的过程中，我能感觉到老师们那种不服气的精神，但同时我也明白品质和实力几无关系，就像托尔斯泰说的：<strong>只有伟大的作品，没有伟大的作家</strong>。我十分清醒，自己的水平目前确实很low，只有按照计划踏踏实实去做。</p><p>初试成绩公布后，我就联系了一堆老师，除了直接拒绝的，剩下某老师告诉我复试后才能确定名额，拟录取名单公布后，该老师问我是否读博，在得到否定的回答后，告诉我2天后跟他确认。但实际上，学硕名额非常紧张，有几个老师主动联系，我也意识到再等下去无济于事，赶快联系想跟的其他老师，很不幸的是：学硕名额几乎全都告罄。剩下一些不太想做的方向，出于无奈，只能群发了5个老师碰一碰运气。只要能实习、人品不至于太难以言表，是否push我都没什么问题，因为我只是要个学位证而已，即使这样也还是从下午3点找到晚上10点。</p><p>一年多的时间，我个人也变得更加平静，所以早早联系的老师一直吊着我，最后放我鸽子，我也无所谓。甚至看到自己出现在拟录取名单的第一行时，我也少有欣喜，脑子里想的只是烟酒生期间去哪实习，经济独立要怎么做，能不能早点拿到毕业证。</p><p>实习无望，只有做些其它事来消耗日子：拿到王道的助教资格，可能是这几个月为数不多的好消息。</p><p>人在回顾前一阶段的自己时，大多会觉得幼稚，正如现在翻看几年前的朋友圈，尴尬癌就会复发，所谓的成长究竟是好事还是坏事呢？<strong>随机漫步的人生又有谁说的清楚</strong>？甚至一年前我都从来没想过会是今天这个局面，顺便推荐一本有点虚无主义色彩的书《随机漫步的傻瓜》，看完后你可能会发现运气和概率竟然在人生中扮演了如此重要的角色。</p><p><strong>喜欢什么，就放手去做吧。人生的许多问题，只有自己亲身经历过，才能够给出回答</strong>。如雷军在<a href="https://v.qq.com/x/page/m0857uh1apx.html">采访</a>中所说：</p><blockquote><p>雷布斯：人生不要太多的勉强，不要强迫自己做什么。我觉得做自己喜欢的事情，可能是最佳的选择。因为你喜欢这个方向，喜欢做这件事情，我觉得爱好比什么强迫都管用。</p><p>主持人：如果不知道自己喜欢什么呢？</p><p>雷布斯：那就看直觉。</p><p>主持人：也没有直觉？</p><p>雷布斯：那就撞上什么干什么，这些冥冥之中姻缘注定的，反正撞到什么是什么。人生就是这样的一场经历嘛。你撞到这个事情，你不知道自己喜不喜欢，你先干了再说，你不喜欢还可以改。不要怕选择，你不喜欢可以改。</p><p>主持人：可能大家总是怕选错吧，走弯路吧？</p><p>雷布斯：这个选错是必然的事，每个人都会做很多很多的选择，我觉得选择一定会出错。关键是提高选对的成功率，而不是说怕选错。每个人一辈子，可能做了一千个选择、一万个选择，怎么让你重要的选择不出错，或者少出错，这是关键，那些小的选择，无所谓对与错。</p></blockquote><p>人啊，总是逃不过真香定律：本科时黑的最起劲的一个地方，迟到了一年，几个月后又将重新去往。不过这次与五年前不同的是：我知道了<strong>Who am I</strong>，也弄清了<strong>Where am I going</strong>，以及大致明白了<strong>How to get there</strong>。</p><h2 id="小结">8 小结</h2><p>折腾了这么多，成长的阵痛依然历历在目。有些时候道理就在那里，可是不痛撞南墙就是明白不了。撞得头破血流才体会到了下面这些道理（不保证正确，只是我现在的看法，每个人都会有局限，仅供参考）：</p><ol type="1"><li><strong>选择比努力更重要，你的当前状态就是由之前的每一步决定和行为导致的。获取足够的信息是做出正确决定的前提，多和不同背景的人交流（多约饭）是获取信息的一种方式；</strong></li><li><strong>做决定时多考虑未来的职业规划，少考虑沉没成本，更不要冲着高大上的标签或者亲朋好友的期待；</strong></li><li><strong>独立思考和自我纠错会是极其重要并且稀缺的品性，这种能力的提高都需要亲身实践（跳几次坑就明白了）；</strong></li><li><strong>世俗意义下的成功评价标准与你在哪所学校读书、成绩有多好、科研多牛逼并不是强相关，所以非名校的同学完全没有必要自暴自弃，主动获取信息并做出明智的决定，最后比名校学生优秀的大有人在，我已经亲身见识过很多这类人了；</strong></li><li><strong>对于名校同学，千万不要沉迷于学校牌子、竞赛获奖这些光环带来的麻醉中，个人差异远比学校和专业的差异大得多，趁早找到自己的生涯规划：多去申请实习或者通过其他方式进而提前排除错误选项，越早付出的代价越小；</strong></li><li><strong>不要用战术上的勤奋掩盖战略上的失败，做事前先想明白Why，再去考虑How；</strong></li><li><strong>一尘不染的事情是没有的，完美只存在于梦境中，认清过去的错误，面对当下的现实，未来重新做人；</strong></li><li><strong>综上，想要避免痛苦，就要尽早认清自己曾经、现在、将来一直都是loser的事实，每天做个乐呵呵的傻逼，也挺好。</strong></li></ol><p>伏案涕零，不知所言！</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#7 Applications</title>
      <link href="/2020/06/02/MIT%20Linear%20Algebra#7%20Applications/"/>
      <url>/2020/06/02/MIT%20Linear%20Algebra#7%20Applications/</url>
      
        <content type="html"><![CDATA[<h2 id="图和网络">图和网络</h2><p>图是一些工程问题的抽象，比如电路网络： <img src="https://img-blog.csdnimg.cn/20200525210820863.png" alt="在这里插入图片描述" /> 我们可以用<span class="math inline">\(A_{54}\)</span>表示图中的信息，每行代表一条边，每列代表一个结点，1表示电流流入，-1表示流出： <span class="math display">\[A=\begin{bmatrix}   -1 &amp; 1 &amp; 0 &amp; 0 \\   0 &amp; -1 &amp; 1 &amp; 0 \\   -1 &amp; 0 &amp; 1 &amp; 0 \\   -1 &amp; 0 &amp; 0 &amp; 1 \\   0 &amp; 0 &amp; -1 &amp; 1 \\  \end{bmatrix}\]</span> <span class="math inline">\(edge3=edge1+edge2\)</span>，前三行线性相关，在图中表现为形成环路。 我们比较关注<span class="math inline">\(A\)</span>的零空间，也即如何组合各列以得到零列<span class="math inline">\(Ax=0\)</span>，即： <span class="math display">\[Ax=\begin{bmatrix}   x_2-x_1\\   x_3-x_2\\   x_3-x_1\\   x_4-x_1\\   x_4-x_3\\  \end{bmatrix}=\begin{bmatrix}   0\\ 0\\  0\\  0\\   0\\  \end{bmatrix}\]</span> 根据前面的学习，<span class="math inline">\(dim(N(A))=n-r(A)=4-3=1\)</span>，并且可以求出零空间：<span class="math inline">\(x=c\begin{bmatrix}  1\\  1\\  1\\  1\\  \end{bmatrix}\)</span>，如果<span class="math inline">\(x_i\)</span>表示<strong>结点<span class="math inline">\(i\)</span>的电势</strong>，那么从结果可以看出来四个点等电势，一旦确定某个点的电势(接地为0)，即可确定其余各点。</p><p>再研究一下<span class="math inline">\(A\)</span>的左零空间，即<span class="math inline">\(A^Ty=0\)</span>，<span class="math inline">\(dim(N(A^T))=m-r(A)=5-3=2\)</span>，不妨看看转置后的鬼样子： <span class="math display">\[\begin{bmatrix}   -1 &amp; 0 &amp; -1 &amp; -1 &amp; 0 \\  1 &amp; -1 &amp; 0 &amp; 0 &amp; 0 \\  0 &amp; 1 &amp; 1 &amp; 0 &amp; -1 \\  0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\  \end{bmatrix}\begin{bmatrix}   y_1\\   y_2\\  y_3\\ y_4\\ y_5\\  \end{bmatrix}=\begin{bmatrix}   0 \\ 0 \\ 0 \\  0 \\  \end{bmatrix}\]</span> 变为简化行阶梯<span class="math inline">\(R\)</span>就会发现：pivot col是第一列、第二列和第四列，对应到图中的三条边，可以看到是没有环路的，实际上是一棵<strong>最小生成树</strong>。如果用<span class="math inline">\(y_i\)</span>表示<strong>边<span class="math inline">\(i\)</span>的电流值</strong>，不妨写出这个方程组： <span class="math display">\[\begin{cases}-y_1-y_3-y_4=0&amp; \text{结点1流出之和为0}\\y_1-y_2=0&amp; \text{结点2流入流出相等}\\y_2+y_3-y_5=0&amp; \text{...}\\y_4+y_5=0&amp; \text{...}\end{cases}\]</span> 类似地，可以求出这个左零空间的一组基： <span class="math display">\[\begin{bmatrix}   1\\ 1\\  -1\\  0\\   0\\  \end{bmatrix}、\begin{bmatrix}   0\\ 0\\  1\\  -1\\   1\\  \end{bmatrix}\]</span> 这组基对应到图中也是很明确的：第一个向量对应回路1(边1/2/3)的电流，第二个向量对应回路2(边3/4/5)的电流，当然也可以选择大的回路作为基的一个组成。 由此也可以看出：<span class="math inline">\(dim(N(A^T))=m-r=\#loops=\#edges-(\#nodes-1)\)</span>，这也就是著名的欧拉公式：<span class="math inline">\(\#nodes-\#edges+\#loops=1\)</span>。</p><p>回顾整个过程：</p><ul><li>通过电势求得电势差：<span class="math inline">\(Ax=e\)</span>；</li><li>通过欧姆定律<span class="math inline">\(y=Ce\)</span>可以求得结点间的电流值<span class="math inline">\(y_i\)</span>；</li><li>通过<span class="math inline">\(A^Ty=0\)</span>验证了Kirchhoff's current law。 如果有外接电流源，那么整个过程可以描述为<span class="math inline">\(A^TCAx=f\)</span>。 ## 马尔可夫矩阵 马尔可夫模型最初是研究人口迁徙的模型，马尔可夫矩阵有2个特点：</li><li><span class="math inline">\(a_{ij}&gt;0\)</span></li><li>每一列和为1</li></ul><p>我们要研究随着时间变化，人口最终的分布情况，即稳态。 根据一阶差分<span class="math inline">\(u_k=A^ku_0=c_1\lambda_1^kx_1+c_2\lambda_2^kx_2+...\)</span>，<strong>马尔可夫矩阵有一个特征值为1</strong>，其余的绝对值都小于1，那么最终的稳态就是<span class="math inline">\(c_1x_1\)</span>。 举例来看： <span class="math display">\[\begin{bmatrix}   u_{cal}\\   u_{mass}\\  \end{bmatrix}_{t=k+1}=\begin{bmatrix}   0.9 &amp; 0.2\\  0.1 &amp; 0.8\\  \end{bmatrix}\begin{bmatrix}   u_{cal}\\   u_{mass}\\  \end{bmatrix}_{t=k},u_0=\begin{bmatrix}   0\\   1000\\  \end{bmatrix}\]</span> 矩阵表示加州的人有0.9留在加州，0.1迁徙到麻省。求得<span class="math inline">\(A\)</span>的特征值和特征向量，再用<span class="math inline">\(u_0\)</span>求得系数<span class="math inline">\(c\)</span>，就可以得到<span class="math inline">\(u_k\)</span>。 ## 傅里叶级数 我们知道，向量空间内任意向量都可以表示为一组标准正交基的线性组合： <span class="math display">\[v=x_1q_1+x_2q_2+...+x_nq_n=Qx,x=Q^{-1}v=Q^Tv\]</span> 那么对于任意的函数<span class="math inline">\(f(x)\)</span>，也可以表示为一组正交基的线性组合： <span class="math display">\[f(x)=a_0*1+a_1cosx+b_1sinx+a_2cos(2x)+b_2sin(2x)+...\]</span> 这组基<span class="math inline">\(1,cosx,sinx,cos(2x),sin(2x),...\)</span>是正交的，即： <span class="math display">\[f^Tg=\int_0^{2\pi} f(x)g(x) dx=0\]</span> 要求得级数得系数，比如<span class="math inline">\(a_1\)</span>，只要等式两边同乘<span class="math inline">\(cosx\)</span>并积分即可： <span class="math display">\[\int_0^{2\pi} f(x)cosx dx=\int_0^{2\pi} a_1cos^2(x) dx\]</span> ## 复矩阵 复向量<span class="math inline">\(Z=\begin{bmatrix}  z_1\\  ...\\  z_n\\  \end{bmatrix}\)</span>的模<span class="math inline">\(||Z||^2=\bar Z^TZ=||z_1||^2+...+||z_n||^2\)</span>，内积也变为共轭转置<span class="math inline">\(\bar y^Tx\)</span>。 复数意义下的对称是<span class="math inline">\(\bar A^T=A\)</span>，也叫Hermitian矩阵； 复数意义下的正交是<span class="math inline">\(\bar q_i^Tq_j=\begin{cases} 0,i\neq j\\ 1,i=j\\ \end{cases}\)</span>，这样组成的正交阵<span class="math inline">\(\bar Q^TQ=I\)</span>，<span class="math inline">\(Q\)</span>也叫unitary矩阵。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#6 Linear Transformations</title>
      <link href="/2020/06/01/MIT%20Linear%20Algebra#6%20Linear%20Transformations/"/>
      <url>/2020/06/01/MIT%20Linear%20Algebra#6%20Linear%20Transformations/</url>
      
        <content type="html"><![CDATA[<h2 id="线性变换">线性变换</h2><p>顾名思义，所谓线性变换即某种变换满足线性性质： <span class="math display">\[\begin{cases}T(v+w)=T(v)+T(w)&amp; \text{}\\T(cv)=cT(v)&amp; \text{}\\\end{cases}\]</span> 投影变换、旋转变换满足线性，这种映射可以通过左乘矩阵完成。 如果要知道对整个空间的线性变换，只需要知道对基的变换结果即可，因为任意向量都可表示为基的线性组合：<span class="math inline">\(v=c_1v_1+c_2v_2+...+c_nv_n\)</span>，<span class="math inline">\((c_1,c_2,...,c_n)\)</span>是该向量在这组基下的<strong>坐标</strong>，那么<span class="math inline">\(T(v)=c_1T(v_1)+...+c_nT(v_n)\)</span>。</p><p>线性变换可以用矩阵表示，不同基下对应的矩阵是不同的，如果要求该矩阵： 假设输入基是<span class="math inline">\(v_1,...v_n\)</span>，输出空间的基是<span class="math inline">\(w_1,...w_m\)</span>，<strong><span class="math inline">\(A\)</span>的第一列就是<span class="math inline">\(T(v_1)\)</span>在<span class="math inline">\(w\)</span>下的坐标</strong>，因为输入<span class="math inline">\(v_1\)</span>，其在<span class="math inline">\(v\)</span>下的坐标就是<span class="math inline">\(\begin{bmatrix}  1\\  0\\  ...\\  0  \end{bmatrix}\)</span>，<span class="math inline">\(A\)</span>乘以该坐标就是取<span class="math inline">\(A\)</span>的第一列，同理可得其他列。 容易验证<span class="math inline">\(T=\frac{d}{dx}\)</span>也是线性变换，输入基如果选择<span class="math inline">\(1,x,x^2\)</span>，输入是<span class="math inline">\(c_1+c_2x+c_3x^2\)</span>，那么输出是<span class="math inline">\(c_2+2c_3x\)</span>，输出基是<span class="math inline">\(1,x\)</span>，那么用矩阵表示就是： <span class="math display">\[A\begin{bmatrix}   c_1\\   c_2\\   c_3\\  \end{bmatrix}=\begin{bmatrix}   c_2\\   2c_3\\  \end{bmatrix}\]</span> 当然可以用上面的方法求矩阵，这里比较简单<span class="math inline">\(A=\begin{bmatrix}  0 &amp; 1 &amp; 0\\  0 &amp; 0 &amp; 2\\  \end{bmatrix}\)</span>。 ## 基变换 选择合适的基，可以对图像进行压缩： 对于原始信号<span class="math inline">\(x\)</span>，可以通过基变换得到另一组基下的坐标<span class="math inline">\(c\)</span>，这一步是无损的，这些系数里可能含有大量的0，通过去掉这些项可以压缩大小，这一步是有损的，即<span class="math inline">\(\hat x=\Sigma \hat c_iv_i\)</span>。 目前比较好的有Fourier基和小波基，都是将原始图片分割为若干小块处理。 8<em>8Fourier基： <span class="math display">\[\begin{bmatrix}   1 &amp; 1 &amp;... &amp; 1 \\   1 &amp; w&amp;... &amp; w^{n-1} \\   ... &amp; ... &amp; ...\\    1 &amp; w^{n-1}&amp;... &amp; w^{(n-1)^2} \\  \end{bmatrix}\]</span> 8</em>8小波基： <span class="math display">\[W=\begin{bmatrix}   1 &amp; 1 &amp;1 &amp; 0 &amp; 1&amp;0&amp;0&amp;0\\   1 &amp; 1 &amp;1 &amp; 0  &amp; -1&amp;0&amp;0&amp;0\\   1 &amp; 1 &amp;-1 &amp; 0 &amp;0&amp;1&amp;0&amp;0\\  1 &amp; 1 &amp;-1 &amp; 0 &amp;0&amp;-1&amp;0&amp;0\\  1 &amp; -1 &amp;0&amp; 1 &amp;0&amp;0&amp;1&amp;0\\  1 &amp; -1 &amp;0 &amp; 1 &amp;0&amp;0&amp;-1&amp;0\\  1 &amp; -1 &amp;0 &amp; 1 &amp;0&amp;0&amp;0&amp;1\\  1 &amp; -1 &amp;0 &amp; 1 &amp;0&amp;0&amp;0&amp;-1\\  \end{bmatrix}\]</span> 标准基下的像素值在基变换后： <span class="math display">\[p=\begin{bmatrix}   p_1\\   ...\\   p_8\\  \end{bmatrix}=W\begin{bmatrix}   c_1\\   ...\\   c_8\\  \end{bmatrix}=Wc\]</span> 所以在新的基下的坐标是<span class="math inline">\(c=W^{-1}p\)</span>。 就性能而言：我们需要<span class="math inline">\(W^{-1}\)</span>可以快速求得，这一点<span class="math inline">\(W^{-1}=W^T\)</span>；另外还要求只需要少量基向量就可以逼近原始信号。 ## 左右逆/伪逆 对于满秩的情况<span class="math inline">\(r=m=n\)</span>，左逆和右逆都存在，即<span class="math inline">\(AA^{-1}=I=A^{-1}A\)</span>； 对于列满秩<span class="math inline">\(r=n&lt;m\)</span>，比如<span class="math inline">\(\begin{bmatrix}  1 &amp; 2\\  1 &amp; 3\\  2 &amp; 4\\  \end{bmatrix}\)</span>，<span class="math inline">\(A_{left}^{-1}=(A^TA)^{-1}A^T\)</span>； 对于行满秩<span class="math inline">\(r=m&lt;n\)</span>，<span class="math inline">\(A_{right}^{-1}=A^T(AA^T)^{-1}\)</span>； 对于不满秩的情况<span class="math inline">\(r&lt;m,r&lt;n\)</span>，这样<strong>不论<span class="math inline">\(A^TA\)</span>还是<span class="math inline">\(AA^T\)</span>都是奇异的</strong>，所以不可能有左逆或者右逆。这种情况在统计学上多次出现，就提出了伪逆的概念，记作<span class="math inline">\(A^+\)</span>。 找伪逆可以通过SVD，<span class="math inline">\(A=U\Sigma V^T\)</span>，这里我们的特征值是不完整的，即<span class="math inline">\(\Sigma_{mn}=\begin{bmatrix}  \sigma_1 &amp; ... &amp; 0&amp;0 \\  ... &amp; ... &amp; ...&amp;0\\  0 &amp; ... &amp; \sigma_r &amp;0\\  ...\\  0 &amp; ... &amp; 0&amp;0 \\  \end{bmatrix}\)</span>，那么<span class="math inline">\(\Sigma_{nm}^+=\begin{bmatrix}  1/\sigma_1 &amp; ... &amp; 0&amp;0 \\  ... &amp; ... &amp; ...&amp;0\\  0 &amp; ... &amp; 1/\sigma_r &amp;0\\  ...\\  0 &amp; ... &amp; 0&amp;0 \\  \end{bmatrix}\)</span>，这样<span class="math inline">\(A^+=V\Sigma^+U^T\)</span>。 ## 作业</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#5 Eigenvalues and Eigenvectors</title>
      <link href="/2020/05/31/MIT%20Linear%20Algebra#5%20Eigenvalues%20and%20Eigenvectors/"/>
      <url>/2020/05/31/MIT%20Linear%20Algebra#5%20Eigenvalues%20and%20Eigenvectors/</url>
      
        <content type="html"><![CDATA[<h2 id="特征值特征向量">特征值/特征向量</h2><p>矩阵作用于列向量<span class="math inline">\(x\)</span>得到列向量<span class="math inline">\(Ax\)</span>，矩阵的作用相当于函数，对于大部分列向量<span class="math inline">\(Ax\)</span>，其方向是不同于<span class="math inline">\(x\)</span>的，我们感兴趣的是其中<strong>平行于</strong><span class="math inline">\(x\)</span>的：<span class="math inline">\(Ax=\lambda x,x\neq0\)</span>。即：向量<span class="math inline">\(x\)</span>在矩阵<span class="math inline">\(A\)</span>的作用下，方向不变，只进行比例系数为<span class="math inline">\(\lambda\)</span>的伸缩。 特征向量所在直线上的向量都是特征向量，并且包含了所有特征向量，组成了特征空间。如果我们不断左乘矩阵<span class="math inline">\(A\)</span>，得到的列向量会越来越贴合最大特征值对应的特征空间（只对实数而言）。 对于二阶投影矩阵<span class="math inline">\(P\)</span>而言：如果<span class="math inline">\(x\)</span>已经在列空间的平面上，那么<span class="math inline">\(Px=x,\lambda=1\)</span>；如果<span class="math inline">\(x\)</span>垂直于列空间的平面，则<span class="math inline">\(Px=0,\lambda=0\)</span>，除此之外， 没有任何<span class="math inline">\(x\)</span>可以在投影后与原<span class="math inline">\(x\)</span>平行。 若<span class="math inline">\(A\)</span>是奇异阵，那么<span class="math inline">\(Ax=0\)</span>必有非零解，所以<span class="math inline">\(\lambda=0\)</span>必是一个特征值。 特征值还有两条简单的性质： <span class="math display">\[\Sigma_{i=1}^{n}\lambda_i=trace(A),\lambda_1...\lambda_n=det(A)\]</span> 有了理解后，求解<span class="math inline">\(\lambda,x\)</span>也很自然： <span class="math display">\[(A-\lambda I)x=0有非零解，A-\lambda I必奇异\]</span> <span class="math display">\[特征方程det(A-\lambda I)=0\]</span> 解出<span class="math inline">\(\lambda\)</span>，进而求出<span class="math inline">\((A-\lambda I)x=0\)</span>的零空间即可。 举个交换阵的例子：<span class="math inline">\(A=\begin{bmatrix}  0 &amp; 1 \\  1 &amp; 0\\  \end{bmatrix}\)</span>，从物理意义上，交换<span class="math inline">\(x_1=\begin{bmatrix}  1\\  1\\  \end{bmatrix}\)</span>的两行仍然与原向量平行，此时<span class="math inline">\(\lambda=1\)</span>；类似地，交换<span class="math inline">\(x_2=\begin{bmatrix}  1\\  -1\\  \end{bmatrix}\)</span>的两行仍然与原向量平行，只是变成了相反向量，此时<span class="math inline">\(\lambda=-1\)</span>。 如果再看<span class="math inline">\(A+3I=\begin{bmatrix}  3 &amp; 1 \\  1 &amp; 3\\  \end{bmatrix}\)</span>，特征值变为了<span class="math inline">\(\lambda+3=2,4\)</span>，特征向量没有改变。 接着可以看看特征值不为实数的例子：对于<strong>反对称</strong>矩阵<span class="math inline">\(\begin{bmatrix}  0 &amp; -1 \\  1 &amp; 0\\  \end{bmatrix}\)</span>，<span class="math inline">\(\lambda=i,-i\)</span>，从几何上看：该矩阵的作用是将向量旋转90度，旋转之后的向量不可能与之前的平行，所以也就没有实数特征值。 ## 对角化 这一节的前提是<span class="math inline">\(A\)</span><strong>有<span class="math inline">\(n\)</span>个线性无关的特征向量</strong>，这样后面由<strong>特征向量组成的矩阵</strong><span class="math inline">\(S\)</span>才可逆。 对于满足前提的矩阵： <span class="math display">\[AS=A\begin{bmatrix}x_1&amp;...&amp; x_n \\\end{bmatrix}=\begin{bmatrix}\lambda_1x_1&amp;...&amp; \lambda_nx_n \\\end{bmatrix}=\begin{bmatrix}x_1&amp;...&amp; x_n \\\end{bmatrix}\begin{bmatrix}   \lambda_1 &amp; ... &amp; 0 \\   ... &amp; ... &amp; ...\\    0 &amp; ... &amp; \lambda_n \\  \end{bmatrix}=S\Lambda\]</span> 这样<span class="math inline">\(S^{-1}AS=\Lambda\)</span>。 如果<span class="math inline">\(A\)</span>的所有特征值互异，必可对角化；如果有重复特征值，那么<strong>不一定</strong>有<span class="math inline">\(n\)</span>个线性无关的特征向量，也不一定可以对角化。</p><p><span class="math inline">\(A\)</span>可以被分解为<span class="math inline">\(A=S\Lambda S^{-1}\)</span>。由此不难得到<span class="math inline">\(A\)</span>的幂：<span class="math inline">\(A^K=S\Lambda^K S^{-1}\)</span>，特征值加倍，但特征向量不变。 当<span class="math inline">\(K\rightarrow+\infin\)</span>，如果所有<span class="math inline">\(|\lambda_i|&lt;1\)</span>，那么<span class="math inline">\(A^K\rightarrow0\)</span>。 <span class="math inline">\(A\)</span>的幂有一个应用：一阶差分方程<span class="math inline">\(u_{k+1}=Au_k\)</span>，通过递推不难发现<span class="math inline">\(u_k=A^ku_0\)</span>，如果直接用<span class="math inline">\(A^K=S\Lambda^K S^{-1}\)</span>求解，求逆开销是不可忽视的，所以我们换一种方式： 我们知道，线性无关的特征向量可以作为基表示其它向量： <span class="math display">\[u_0=c_1x_1+...+c_nx_n=Sc,Au_0=S\Lambda S^{-1}u_0=S\Lambda S^{-1}Sc=S\Lambda c\]</span> <span class="math display">\[A^ku_o=c_1\lambda_1^{k}x_1+...+c_n\lambda_n^{k}x_n=S\Lambda^{k}c\]</span> 很清楚地看到：<span class="math inline">\(u_k\)</span>的增长速度由<span class="math inline">\(\Lambda\)</span>决定，并且越大的特征值起的作用越大。 因此求解差分方程需要三步：</p><ol type="1"><li>求解矩阵<span class="math inline">\(A\)</span>的特征值和特征向量；</li><li>将<span class="math inline">\(u_0\)</span>在特征向量上展开，求出向量<span class="math inline">\(c\)</span>；</li><li>按照<span class="math inline">\(u_k=S\Lambda^{k}c\)</span>计算即可。</li></ol><p>这里非常经典的例子就是<a href="https://www.cnblogs.com/EIMadrigal/p/11478906.html">斐波那契数列</a>。 ## 微分方程 我们知道：对于常系数线性微分方程<span class="math inline">\(\frac{dy}{dt}=\lambda y\)</span>，其解为<span class="math inline">\(y(t)=Ce^{\lambda t}\)</span>。现在要研究的是未知函数是向量的情况：<span class="math inline">\(\frac{du}{dt}=Au\)</span>，不难验证<span class="math inline">\(u(t)=e^{\lambda t}x\)</span>是特解，并且微分方程组满足线性性质。 举例来看： <span class="math display">\[\begin{cases}\frac{du_1}{dt}=-u_1+2u_2&amp; \text{}\\\frac{du_2}{dt}=u_1-2u_2&amp; \text{}\\\end{cases},u(0)=\begin{bmatrix}   1\\   0\\  \end{bmatrix}\]</span> <span class="math inline">\(A=\begin{bmatrix}  -1 &amp; 2 \\  1 &amp; -2\\  \end{bmatrix}\)</span>，求解出<span class="math inline">\(\lambda=0,-3\)</span>，从特征值可以看出：<span class="math inline">\(\lambda=-3\)</span>的项会随着<span class="math inline">\(t\)</span>的增加而消失，<span class="math inline">\(\lambda=0\)</span>的项最终会是稳态。 特征向量<span class="math inline">\(x_1=\begin{bmatrix}  2\\  1\\  \end{bmatrix},x_2=\begin{bmatrix}  1\\  -1\\  \end{bmatrix}\)</span>，这样可以写出通解： <span class="math display">\[u(t)=c_1e^{\lambda_1 t}x_1+c_2e^{\lambda_2 t}x_2=\frac{1}{3}\begin{bmatrix}   2\\   1\\  \end{bmatrix}+\frac{1}{3}e^{-3t}\begin{bmatrix}   1\\   -1\\  \end{bmatrix}\]</span> 当<span class="math inline">\(t\rightarrow+\infin\)</span>，<span class="math inline">\(\frac{1}{3}\begin{bmatrix}  2\\  1\\  \end{bmatrix}\)</span>这一项将是稳态。 因此从特征值的角度，<span class="math inline">\(||e^{(-3+6i)t}||=e^{-3t}\)</span>，<span class="math inline">\(||e^{6it}||=1\)</span>，在单位圆上运动，所以最终的状态取决于特征值的实部：</p><ul><li><span class="math inline">\(Re(\lambda)&lt;0,e^{\lambda t}\rightarrow0,u(t)\rightarrow0\)</span></li><li>某个特征值为0，其余实部小于0，最终收敛于常量</li><li><span class="math inline">\(Re(\lambda)&gt;0\)</span>，无法收敛</li></ul><p>回头去看上述的微分方程，<span class="math inline">\(u_1\)</span>和<span class="math inline">\(u_2\)</span>耦合在一起，下面我们尝试用特征向量<strong>解耦</strong>： 令<span class="math inline">\(u=Sv\)</span>，则微分方程变为<span class="math inline">\(S\frac{dv}{dt}=ASv,\frac{dv}{dt}=S^{-1}ASv=\Lambda v\)</span>，那么： <span class="math display">\[\begin{cases}\frac{dv_1}{dt}=\lambda_1v_1&amp; \text{}\\\frac{dv_2}{dt}=\lambda_2v_2&amp; \text{}\\...\end{cases}\]</span> 换种思路，如果直接求解<span class="math inline">\(\frac{dv}{dt}=\Lambda v\)</span>，那么类似于标量的答案<span class="math inline">\(v(t)=v(0)e^{\Lambda t},u(t)=Sv(t)=Se^{\Lambda t}S^{-1}u(0)=e^{At}u(0)\)</span>，这里就得到了一个新的概念：<strong>矩阵指数</strong><span class="math inline">\(e^{At}\)</span>。 如果你还记得高数里的泰勒展开： <span class="math display">\[\frac{1}{1-x}=\sum\limits_{n=0}^{\infin}x^n,e^x=\sum\limits_{n=0}^{\infin}\frac{x^n}{n!}\]</span> 那么矩阵指数同样可以展开： <span class="math display">\[(I-At)^{-1}=I+At+(At)^2+...,e^{At}=I+At+\frac{1}{2}(At)^2+...+\frac{(At)^n}{n!}+...\]</span> <span class="math inline">\(e^{At}\)</span>一定是收敛的，因为阶乘的增长速度远远大于其它运算，接着将它写成矩阵形式： <span class="math display">\[e^{At}=I+S\Lambda S^{-1}t+\frac{1}{2}S\Lambda^2S^{-1}t^2+...=Se^{\Lambda t}S^{-1}\]</span> <span class="math inline">\(e^{\Lambda t}\)</span>也是一个矩阵指数，可以写作<span class="math inline">\(\begin{bmatrix}  e^{\lambda_1t} &amp; ... &amp; 0 \\  ... &amp; ... &amp; ...\\  0 &amp; ... &amp; e^{\lambda_nt} \\  \end{bmatrix}\)</span>，这里也可以有相似的收敛性：</p><ul><li>对于矩阵指数<span class="math inline">\(e^{\Lambda t}\)</span>，若<span class="math inline">\(Re(\lambda)&lt;0\)</span>，则收敛；</li><li>对于矩阵幂<span class="math inline">\(A^K=S\Lambda^K S^{-1}\)</span>，若<span class="math inline">\(||\lambda||&lt;1\)</span>，则收敛。</li></ul><p>微分方程也可以像上一节一样，将二阶<span class="math inline">\(y&#39;&#39;+by&#39;+ky=0\)</span>转为一阶，构造： <span class="math display">\[\begin{cases}y&#39;&#39;+by&#39;+ky=0&amp; \text{}\\y&#39;=y&#39;&amp; \text{}\\\end{cases}\]</span> 令<span class="math inline">\(u=\begin{bmatrix}  y&#39;\\  y\\  \end{bmatrix}\)</span>，则<span class="math inline">\(u&#39;=\begin{bmatrix}  y&#39;&#39;\\  y&#39;\\  \end{bmatrix}=\begin{bmatrix}  -b &amp; -k \\  1 &amp; 0\\  \end{bmatrix}\begin{bmatrix}  y&#39;\\  y\\  \end{bmatrix}=Au\)</span>。 ## 实对称阵/正定阵 <strong>实对称矩阵的特征值必为实数，特征向量正交</strong>。证明略。对于复矩阵，只有<span class="math inline">\(A=\bar A^T(共轭转置)\)</span>，性质才成立。 上一节我们知道：如果<span class="math inline">\(A\)</span>有<span class="math inline">\(n\)</span>个线性无关的特征向量，那么可以被分解成<span class="math inline">\(A=S\Lambda S^{-1}\)</span>。对于正交阵而言<span class="math inline">\(Q^T=Q^{-1}\)</span>，故<span class="math inline">\(A=Q\Lambda Q^{-1}=Q\Lambda Q^{T}\)</span>，如果进一步计算： <span class="math display">\[A=\begin{bmatrix}q_1&amp;...&amp; q_n \\\end{bmatrix}\begin{bmatrix}   \lambda_1 &amp; ... &amp; 0 \\   ... &amp; ... &amp; ...\\    0 &amp; ... &amp; \lambda_n \\  \end{bmatrix}\begin{bmatrix}   q_1^T\\   ...\\   q_n^T\\  \end{bmatrix}=\lambda_1q_1q_1^T+...+\lambda_nq_nq_n^T\]</span> <span class="math inline">\(q_iq_i^T\)</span>是投影矩阵，实对称矩阵可以由投影矩阵线性组合而来，这些投影矩阵我个人感觉非常像矩阵的基，也就是说实对称阵可以完全由其特征值和特征向量确定。</p><p>接着我们来看正定阵，<strong>正定阵的前提是对称阵</strong>，有3个充要条件：</p><ul><li><span class="math inline">\(\lambda_i&gt;0\)</span></li><li><span class="math inline">\(pivot_i&gt;0\)</span></li><li>所有子行列式为正</li></ul><p>实际上，<span class="math inline">\(\#正主元=\#正特征值\)</span>，并且<span class="math inline">\(\Pi pivot=\Pi\lambda_i=det(A)\)</span>。 利用正定阵可以研究二次型的最小值： <span class="math display">\[f(x,y)=x^TAx=ax^2+2bxy+cy^2\]</span> 如果<span class="math inline">\(A\)</span>正定，那么<span class="math inline">\(除(0,0)外,f(x,y)&gt;0\)</span>。 取<span class="math inline">\(A=\begin{bmatrix}  2 &amp; 6 \\  6 &amp; 20\\  \end{bmatrix}\)</span>，那么<span class="math inline">\(f(x,y)=2x^2+12xy+20y^2\)</span>，配方<span class="math inline">\(f(x,y)=2(x+3y)^2+2y^2&gt;0\)</span>，注意各项的系数：两个平方项前的系数是<span class="math inline">\(A\)</span>的两个<strong>主元</strong>，括号中的3是矩阵消元时所用的<strong>乘数</strong>。如果把<span class="math inline">\(A\)</span>做LU分解会看得更清楚：<span class="math inline">\(A=LU=\begin{bmatrix}  1 &amp; 0 \\  3 &amp; 1\\  \end{bmatrix}\begin{bmatrix}  2 &amp; 6 \\  0 &amp; 2\\  \end{bmatrix}\)</span>。 从几何上看，<span class="math inline">\(f(x,y)\)</span>就像是一个<strong>碗</strong>的形状，在<span class="math inline">\((0,0)\)</span>处取极小值0，<span class="math inline">\(f(x,y)=1\)</span>则是椭圆截面。 对于三阶的情况：<span class="math inline">\(A=\begin{bmatrix}  2 &amp; -1 &amp; 0 \\  -1 &amp; 2 &amp; -1 \\  0 &amp; -1 &amp; 2 \\  \end{bmatrix}\)</span>，可以求得<span class="math inline">\(\lambda=2-\sqrt2,2,2+\sqrt2\)</span>，那么此时 <span class="math display">\[f=x^TAx&gt;0\]</span> 这在几何上已经上升到四维，必然有3个轴，并且轴的方向由相应的特征向量决定，轴的长度由特征值决定，<span class="math inline">\(f=1\)</span>是一个椭球。</p><p>最后，如果<span class="math inline">\(A_{mn}\)</span>的各列线性无关，那么<span class="math inline">\(A^TA\)</span>必然正定，证明可以从<span class="math inline">\(x^TAx&gt;0\)</span>入手。 ## 相似阵 前面我们见过<span class="math inline">\(S^{-1}AS=\Lambda\)</span>，那么<span class="math inline">\(A\sim\Lambda\)</span>。比较正式的说法是：存在可逆阵M，使得<span class="math inline">\(B=M^{-1}AM\)</span>，则称<span class="math inline">\(A\sim B\)</span>。相似阵可以看作一个家族，这个家族的共同点就是<strong>特征值相同</strong>。 之前我们知道：如果<span class="math inline">\(A\)</span>有<span class="math inline">\(n\)</span>个不同的特征值，那么必可相似对角化。如果有重复的特征值，未必可以对角化： 现在考虑<span class="math inline">\(\lambda_1=\lambda_2=4\)</span>的情况，满足条件的矩阵有很多，比如<span class="math inline">\(A=\begin{bmatrix}  4 &amp; 0 \\  0 &amp; 4\\  \end{bmatrix}\)</span>，但如果我们去找<span class="math inline">\(A\)</span>的相似阵，我们尝试用<span class="math inline">\(M^{-1}AM=A\)</span>，无论任何<span class="math inline">\(M\)</span>，最终的结果都是<span class="math inline">\(A\)</span>自己，不会增加任何新的矩阵，矩阵<span class="math inline">\(A\)</span>单独组成了一个家族。 如果去看其余满足条件的矩阵，比如<span class="math inline">\(B=\begin{bmatrix}  4 &amp; 1 \\  0 &amp; 4\\  \end{bmatrix},C=\begin{bmatrix}  4 &amp; 0 \\  17 &amp; 4\\  \end{bmatrix}...\)</span>，这些只有1个特征向量的矩阵虽然不能对角化，但是我们可以找一个<strong>最接近对角阵</strong>的，也就是<span class="math inline">\(B\)</span>，称为Jordan Form。 对于<span class="math inline">\(\begin{bmatrix}  0 &amp; 1 &amp; 0 &amp; 0 \\  0 &amp; 0 &amp; 1 &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 0 \\  \end{bmatrix}和\begin{bmatrix}  0 &amp; 1 &amp; 0 &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 0 \\  0 &amp; 0 &amp; 0 &amp; 1 \\  0 &amp; 0 &amp; 0 &amp; 0 \\  \end{bmatrix}\)</span>，尽管特征值全为0，但并不相似。只有2个线性无关的特征向量，所以就有2个Jordan Block，每个Jordan Block长这样： <span class="math display">\[J_i=\begin{bmatrix}   \lambda_i &amp; 1 &amp;...&amp; 0 \\  0 &amp; \lambda_i  &amp; 1 &amp; ...\\  ...&amp;...&amp;...&amp;...\\  0 &amp; 0 &amp; \lambda_i  &amp; 1 \\   0 &amp; 0 &amp; 0 &amp; \lambda_i  \\  \end{bmatrix}\]</span> 每个块只能有1个特征向量，这样做的意义在于任意的矩阵<span class="math inline">\(A\)</span>，即使不能相似对角化，但是都有<span class="math inline">\(A\sim J=\begin{bmatrix}  J_1 &amp; ... &amp; 0 \\  ... &amp; ... &amp; ...\\  0 &amp; ... &amp; J_d \\  \end{bmatrix}\)</span>。 ## SVD分解 假设我们在行空间有一组标准正交基<span class="math inline">\(v_1,v_2,...,v_r\)</span>，左乘矩阵<span class="math inline">\(A\)</span>进入列空间，将结果表示为列空间中的一组标准正交基<span class="math inline">\(u_1,u_2,...,u_r\)</span>： <span class="math display">\[AV=A\begin{bmatrix}v_1&amp;...&amp; v_r \\\end{bmatrix}=\begin{bmatrix}u_1&amp;...&amp; u_r \\\end{bmatrix}\begin{bmatrix}   \sigma_1 &amp; ... &amp; 0 \\   ... &amp; ... &amp; ...\\    0 &amp; ... &amp; \sigma_r \\  \end{bmatrix}=U\Sigma\]</span> 故<span class="math inline">\(A\)</span>可以分解为<span class="math inline">\(A=U\Sigma V^T\)</span>。 如果<span class="math inline">\(A=\begin{bmatrix}  4 &amp; 4 \\  -3 &amp; 3\\  \end{bmatrix}\)</span>，试着分解下，关键问题就是如何求得等式右边的3个矩阵。 先来搞定<span class="math inline">\(V\)</span>，最好能去掉<span class="math inline">\(U\)</span>，我们的技巧是用<span class="math inline">\(A^TA\)</span>： <span class="math display">\[A^TA=V\Sigma^TU^TU\Sigma V^T=V\begin{bmatrix}   \sigma_1^2 &amp; ... &amp; 0 \\   ... &amp; ... &amp; ...\\    0 &amp; ... &amp; \sigma_r^2 \\  \end{bmatrix}V^T\]</span> 由于<span class="math inline">\(A^TA\)</span>实对称，所以我们得到了<span class="math inline">\(Q\Lambda Q^{T}\)</span>的形式，接下来只要搞定<span class="math inline">\(A^TA\)</span>的特征值和特征向量即可得到<span class="math inline">\(V\)</span>和<span class="math inline">\(\Sigma\)</span>； 同样地，为了求<span class="math inline">\(U\)</span>，最好先搞掉<span class="math inline">\(V\)</span>： <span class="math display">\[AA^T=U\Sigma V^TV\Sigma^TU^T=U\begin{bmatrix}   \sigma_1^2 &amp; ... &amp; 0 \\   ... &amp; ... &amp; ...\\    0 &amp; ... &amp; \sigma_r^2 \\  \end{bmatrix}U^T\]</span> 只要求得<span class="math inline">\(AA^T\)</span>的特征值和特征向量即可得<span class="math inline">\(U\)</span>。 ## 作业 Suppose we have the rank-r svd of a rank 1 matrix <span class="math inline">\(A = U\Sigma V^T\)</span>. Describe the nullspace of <span class="math inline">\(A\)</span> in terms of possibly <span class="math inline">\(U\)</span>, <span class="math inline">\(Σ\)</span>, and <span class="math inline">\(V\)</span>. Answer: The nullspace of <span class="math inline">\(A\)</span> is the same as the nullspace of <span class="math inline">\(V^T\)</span>. Since <span class="math inline">\(A\)</span> is rank 1, <span class="math inline">\(V\)</span> is a vector. So the nullspace of <span class="math inline">\(V^T\)</span> is a hyperplane given by <span class="math inline">\(V^Tx=0\)</span>, i.e., the space of all the vectors that are perpendicular to <span class="math inline">\(V\)</span>.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#4 Determinants</title>
      <link href="/2020/05/29/MIT%20Linear%20Algebra#4%20Determinants/"/>
      <url>/2020/05/29/MIT%20Linear%20Algebra#4%20Determinants/</url>
      
        <content type="html"><![CDATA[<p>行列式本质上是要通过一个数字反应矩阵的某些信息，目前看来不是很重要，快速过一遍。 ## 性质 引入是通过3个基本性质：</p><ol type="1"><li><span class="math inline">\(det(I)=1\)</span></li><li>交换两行，行列式的值变号：置换矩阵<span class="math inline">\(det(P)=\begin{cases} 1&amp; \text{交换偶数次}\\ -1&amp; \text{交换奇数次}\\ \end{cases}\)</span></li><li><span class="math inline">\(\left|\begin{array}{cccc} ta &amp; tb\\ c &amp; d\\ \end{array}\right|=t\left|\begin{array}{cccc} a &amp; b\\ c &amp; d\\ \end{array}\right|,\left|\begin{array}{cccc} a+a&#39; &amp; b+b&#39;\\ c &amp; d\\ \end{array}\right|=\left|\begin{array}{cccc} a &amp; b\\ c &amp; d\\ \end{array}\right|+\left|\begin{array}{cccc} a&#39; &amp; b&#39;\\ c &amp; d\\ \end{array}\right|\)</span></li></ol><p>由3个基本性质可以推出若干：</p><ol type="1"><li>若两行相等，则<span class="math inline">\(det(A)=0\)</span> 交换相等的2行，矩阵不变，行列式的值不变，根据性质2：<span class="math inline">\(det(A)=-det(A)\)</span>，得证。</li><li>初等行变换不改变行列式的值 <span class="math display">\[\left|\begin{array}{cccc}a &amp; b\\ c-la &amp; d-lb\\\end{array}\right|=\left|\begin{array}{cccc}a &amp; b\\ c &amp; d\\\end{array}\right|+\left|\begin{array}{cccc}a &amp; b\\ -la &amp; -lb\\\end{array}\right|=\left|\begin{array}{cccc}a &amp; b\\ c &amp; d\\\end{array}\right|\]</span></li><li>有一行全为0，行列式为0</li><li><strong>上三角矩阵的行列式等于主对角线元素之积</strong>：<span class="math inline">\(det(U)=d_1d_2...d_n\)</span> 对于任意矩阵，通过初等行变换可以得到<span class="math inline">\(U\)</span>，接着向上消元并提出对角线的因子，可以得到<span class="math inline">\(I\)</span>。 这也是Matlab求行列式的方法。</li><li><span class="math inline">\(det(A)=0\Leftrightarrow A是奇异矩阵(消元后有全0行)\)</span> <span class="math inline">\(det(A)\neq0\Leftrightarrow A可逆\Rightarrow U\Rightarrow d_1d_2...d_n\neq0\)</span></li><li><span class="math inline">\(det(AB)=det(A)*det(B) \Rightarrow det(A^{-1})=\frac{1}{det(A)}\)</span></li><li><span class="math inline">\(det(A^T)=det(A)\)</span>，可以通过LU分解去证，这也意味着对行成立的性质对列也成立。 ## 计算方法 上一节中介绍了消元化上三角求行列式的方法，本节介绍2种不常用的方法，所有计算都可以通过上一节的3个基本性质获得： 对于二阶，拆解后有2个非零项： <span class="math display">\[\left|\begin{array}{cccc}a &amp; b\\ c &amp; d\\\end{array}\right|=\left|\begin{array}{cccc}a &amp; 0\\ c &amp; d\\\end{array}\right|+\left|\begin{array}{cccc}0 &amp; b\\ c &amp; d\\\end{array}\right|=\left|\begin{array}{cccc}a &amp; 0\\ c &amp; 0\\\end{array}\right|+\left|\begin{array}{cccc}a &amp; 0\\ 0 &amp; d\\\end{array}\right|+\left|\begin{array}{cccc}0 &amp; b\\ 0 &amp; d\\\end{array}\right|+\left|\begin{array}{cccc}0 &amp; b\\ c &amp; 0\\\end{array}\right|=ad-bc\]</span> 对于三阶，拆解后有6个非零项： <span class="math display">\[\left|\begin{array}{cccc} a_{11} &amp; a_{12} &amp; a_{13}\\ a_{21} &amp; a_{22} &amp; a_{23}\\ a_{31} &amp; a_{32} &amp; a_{33}\\ \end{array}\right|=\left|\begin{array}{cccc} a_{11} &amp;  &amp; \\  &amp; a_{22} &amp; \\  &amp;  &amp; a_{33}\\ \end{array}\right|+\left|\begin{array}{cccc} a_{11} &amp;  &amp; \\  &amp;  &amp; a_{23}\\  &amp;  a_{32}&amp; \\ \end{array}\right|+\left|\begin{array}{cccc}  &amp;a_{12}  &amp; \\  a_{21}&amp;  &amp; \\  &amp;  &amp;a_{33}\\ \end{array}\right|+\left|\begin{array}{cccc}  &amp;a_{12}  &amp; \\  &amp;  &amp;a_{23} \\  a_{31}&amp;  &amp;\\ \end{array}\right|+\left|\begin{array}{cccc}  &amp;  &amp;a_{13} \\  a_{21}&amp;  &amp; \\  &amp;a_{32}  &amp;\\ \end{array}\right|+\left|\begin{array}{cccc}  &amp;  &amp;a_{13} \\  &amp;a_{22}  &amp; \\  a_{31}&amp;  &amp;\\ \end{array}\right|\]</span> 接着可以通过交换行得到对角阵并求得结果。 如果我们观察每一项：从第一行到最后一行，<strong>列下标</strong>是<span class="math inline">\((1,2,3)\)</span>的某个全排列，因此可以知道展开以后非零项一共有<span class="math inline">\(n!\)</span>项(第一行有<span class="math inline">\(n\)</span>种选择，第二行有<span class="math inline">\(n-1\)</span>种选择...)，于是可以得到第二种计算行列式的方法： <span class="math display">\[det(A)=\Sigma_{n!项}\pm a_{1x}a_{1y}...a_{1w},(x,y,...w)是(1,n)的某个全排列\]</span> 正负号取决于交换了几次得到<span class="math inline">\((1,2,3...)\)</span>这种朴素的排列。 举例来看： <span class="math display">\[\left|\begin{array}{cccc} 0 &amp; 0 &amp; 1 &amp; 1\\ 0 &amp; 1 &amp; 1 &amp; 0\\ 1 &amp; 1 &amp; 0 &amp; 0\\ 1 &amp; 0 &amp; 0 &amp; 1\\ \end{array}\right|\]</span> 可以先取<span class="math inline">\((1,3)\)</span>位置，接着只能取<span class="math inline">\((2,2)\)</span>，接着<span class="math inline">\((3,1)\)</span>，最后<span class="math inline">\((4,4)\)</span>，所以列的排列是<span class="math inline">\((3,2,1,4)\)</span>，交换一次可得<span class="math inline">\((1,2,3,4)\)</span>，故有一非零项-1； 还可以先取<span class="math inline">\((1,4)\)</span>，接着<span class="math inline">\((2,3)\)</span>，<span class="math inline">\((3,2)\)</span>，最后<span class="math inline">\((4,1)\)</span>，列的排列是<span class="math inline">\((4,3,2,1)\)</span>，交换2次可得<span class="math inline">\((1,2,3,4)\)</span>，故有一非零项1，除此以外，没有别的选择，所以行列式的值是0。</li></ol><p>如果我们对上述拆解三阶行列式的结果提取公因子： <span class="math display">\[det(A)=a_{11}(a_{22}a_{33}-a_{23}a_{32})+a_{12}(-a_{21}a_{33}+a_{23}a_{31})+a_{13}(a_{21}a_{32}-a_{22}a_{31})\]</span> 我们穷举了第一行的3种可能的选择<span class="math inline">\(a_{11},a_{12},a_{13}\)</span>，对于每种选择，当前行与当前列都不能再用，括号中的式子叫做<strong>代数余子式</strong><span class="math inline">\(C_{ij}\)</span>：去掉<span class="math inline">\(a_{ij}\)</span>所在行列的<span class="math inline">\(n-1\)</span>阶行列式，并且正负号取决于<span class="math inline">\(i+j\)</span>的奇(-)偶(+)。 这样我们得到了求行列式的第三种方法： <span class="math display">\[det(A)=a_{11}C_{11}+a_{12}C_{12}+...+a_{1n}C_{1n}\]</span> 举例来看，对于三对角行列式： <span class="math display">\[\left|\begin{array}{cccc} 1 &amp; 1 &amp; 0 &amp; 0\\ 1 &amp; 1 &amp; 1 &amp; 0\\ 0 &amp; 1 &amp; 1 &amp; 1\\ 0 &amp; 0 &amp; 1 &amp; 1\\ \end{array}\right|\]</span> 容易知：<span class="math inline">\(det(A_1)=1,det(A_2)=\left|\begin{array}{cccc} 1 &amp; 1\\ 1 &amp; 1\\ \end{array}\right|=0,det(A_3)=\left|\begin{array}{cccc} 1 &amp; 1 &amp; 0\\ 1 &amp; 1 &amp; 1\\ 0 &amp; 1 &amp; 1\\ \end{array}\right|=-1\)</span>。 对于四阶，我们<strong>按第一列展开</strong>：<span class="math inline">\(det(A_4)=1*det(A_3)-1*det(A_2)=-1\)</span>，此式可以推广：<span class="math inline">\(det(A_n)=det(A_{n-1})-det(A_{n-2})\)</span>，可以发现上述三对角行列式是以6为周期的。 ## 应用</p><ul><li>求逆矩阵 记得当年矩阵求逆教了一种伴随矩阵的方法：<span class="math inline">\(A^{-1}=\frac{1}{det(A)}C^T\)</span>，不知为何物？ 只要证明<span class="math inline">\(AC^T=det(A)I\)</span>即可： <span class="math display">\[\left[\begin{array}{cccc} a_{11} &amp; ... &amp; a_{1n}\\ ... &amp;  &amp; ...\\ a_{n1} &amp; ... &amp; a_{nn}\\ \end{array}\right]\left[\begin{array}{cccc} C_{11} &amp; ... &amp; C_{n1}\\ ... &amp;  &amp; ...\\ C_{1n} &amp; ... &amp; C_{nn}\\ \end{array}\right]=\left[\begin{array}{cccc} det(A) &amp; ... &amp;0\\ ... &amp;  &amp; ...\\ 0 &amp; ... &amp; det(A)\\ \end{array}\right]\]</span> 对于主对角线上的元素：<span class="math inline">\(a_{11}C_{11}+...+a_{1n}C_{1n}=det(A)\)</span>； 对于其它元素：<span class="math inline">\(a_{11}C_{n1}+...+a_{1n}C_{nn}=\left|\begin{array}{cccc} a_{11} &amp; ... &amp; a_{1n}\\ ... &amp; &amp; ...\\ a_{11} &amp; ... &amp; a_{1n}\\ \end{array}\right|=0\)</span>。</li><li>求解<span class="math inline">\(Ax=b\)</span> 求解：<span class="math inline">\(x=A^{-1}b=\frac{1}{det(A)}C^Tb\)</span>，那么考虑<span class="math inline">\(x_1=\frac{1}{det(A)}(b_1c_{11}+..+b_nc_{n1})\)</span>，<span class="math inline">\(b_1c_{11}+..+b_nc_{n1}\)</span>其实是将矩阵<span class="math inline">\(A\)</span>的第一列换为<span class="math inline">\(b\)</span>，按照第一列展开求行列式的值即可，同理可以求得其它<span class="math inline">\(x_i\)</span>，这种差到没人用的方法竟然被国内教材奉为圭臬。</li><li>求体积 <span class="math inline">\(det(A)\)</span>的绝对值可以定义为一个平行六面体的体积，正负表示左手系还是右手系。 将三阶矩阵<span class="math inline">\(A\)</span>的每行(列)当作平行六面体的一条边，如果<span class="math inline">\(A=I\)</span>，我们得到一个标准的单位立方体；如果<span class="math inline">\(A=Q\)</span>，我们得到一个旋转过的单位立方体，体积仍然为1，可以通过<span class="math inline">\(Q^TQ=I\)</span>验证。 如果是二维情况，那么<span class="math inline">\(det(A)\)</span>的绝对值就是平行四边形的面积： <span class="math display">\[S=\left|\begin{array}{cccc}a &amp; b\\ c &amp; d\\\end{array}\right|=ad-bc\]</span> 那么三角形的面积就是<span class="math inline">\(\frac{1}{2}S\)</span>，推广到向量的起始位置不在<span class="math inline">\((0,0)\)</span>的情况： <span class="math display">\[S_{三角形}=\frac{1}{2}\left|\begin{array}{cccc}x_1 &amp; y_1 &amp; 1\\ x_2 &amp; y_2 &amp; 1\\ x_3 &amp; y_3 &amp; 1\\ \end{array}\right|\]</span> 可以通过平移到原点去证明。 ## 作业 A Hadamard matrix H is a matrix with entries ±1 and orthogonal columns. What is the determinant of H as a function of n? (Hadamard matrices are conjectured to exist for every n that is a multiple of 4, but nobody knows if there is such a matrix even for n=668). 由于<span class="math inline">\(H\)</span>各列正交，故<span class="math inline">\(H^TH=cI\)</span>；又<span class="math inline">\(H\)</span>的元素只有±1，故<span class="math inline">\(c=n\)</span>。所以<span class="math inline">\(det(H)^2=n^n,det(H) = \pm\sqrt{n^n}\)</span>，即<span class="math inline">\(n\)</span>阶Hadamard矩阵的行列式既可以为正，也可以为负。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#3 Orthogonality</title>
      <link href="/2020/05/27/MIT%20Linear%20Algebra#3%20Orthogonality/"/>
      <url>/2020/05/27/MIT%20Linear%20Algebra#3%20Orthogonality/</url>
      
        <content type="html"><![CDATA[<h2 id="正交向量">正交向量</h2><p>初中时候我们学过勾股定理，现在用<strong>向量</strong>的形式表示： <span class="math display">\[|x|^2+|y|^2=|x+y|^2\]</span> 模长的平方也可以表示为<span class="math inline">\(x^Tx\)</span>，做一些计算，就有两个向量正交的判断条件<span class="math inline">\(x^Ty=0\)</span>。</p><p>向量正交有些简单，让我们上升到子空间正交。一个比较直观的<strong>错误</strong>的例子就是地板和墙壁的关系，两者并<strong>不正交</strong>，因为子空间正交要求子空间<span class="math inline">\(S\)</span>中的每个向量都和子空间<span class="math inline">\(T\)</span>中每个向量正交。根据定义，任意两个子空间若相交于某非0向量，那么两者必然不正交。 将正交的概念应用于前面学过的四个基本子空间： 对于零空间<span class="math inline">\(Ax=0\)</span>，我们有<span class="math inline">\(\begin{bmatrix}  row1\\  ...\\  rowm  \end{bmatrix}x=\begin{bmatrix}  0\\  ...\\  0  \end{bmatrix}\)</span>，<span class="math inline">\(x\)</span>和每一行都是正交的，那么<span class="math inline">\(x\)</span>和各行的线性组合也正交，由此可见<strong>零空间和行空间是正交的</strong>。 我们还知道：在<span class="math inline">\(R^n\)</span>中，需要<span class="math inline">\(n\)</span>个基向量张成整个空间，<span class="math inline">\(dim(C(A^T))=r,dim(N(A))=n-r\)</span>，这两个正交的子空间将<span class="math inline">\(R^n\)</span>一分为二，有个专门的术语<strong>正交补</strong>就描述了这种关系，意即零空间包含了所有垂直于行空间的向量。 类似地，可以证明<span class="math inline">\(C(A)\)</span>和<span class="math inline">\(N(A^T)\)</span>也是正交补的关系，将<span class="math inline">\(R^m\)</span>一分为二。 最后，我们为下一节留一个引子：考虑<span class="math inline">\(Ax=b\)</span>，当方程个数<span class="math inline">\(m\)</span>大于未知数个数<span class="math inline">\(n\)</span>，方程组很可能无解，那么怎么找到一个最为近似的解呢？听起来可能有些难理解，举个例子来看： <span class="math display">\[\begin{bmatrix}   1 &amp; 1\\   1 &amp; 2\\   1 &amp; 5\\  \end{bmatrix}\begin{bmatrix}   x_1\\   x_2\\  \end{bmatrix}=\begin{bmatrix}   b_1\\   b_2\\     b_3\\  \end{bmatrix}  \]</span> <span class="math inline">\(A\)</span>的列空间是<span class="math inline">\(R^3\)</span>中的一个平面，但是向量<span class="math inline">\(b\)</span>极有可能不在列空间中，此时方程组无解。但是我们想找到<span class="math inline">\(b\)</span>在列空间的<strong>投影</strong>，进而求出最为近似的解。 做法是在<span class="math inline">\(Ax=b\)</span>两边同乘<span class="math inline">\(A^T\)</span>，求解<span class="math inline">\(A^TA\hat x=A^Tb\)</span>，<span class="math inline">\(\hat x\)</span>即是要求的近似解。这里牵涉到一个非常重要的矩阵<span class="math inline">\(A^TA\)</span>，它是对称阵，并且<span class="math inline">\(N(A^TA)=N(A),r(A^TA)=r(A)\)</span>，如果<span class="math inline">\(A\)</span>的各列线性无关，那么<span class="math inline">\(A^TA\)</span>就是可逆的。这样做的原因后面会逐渐揭晓。 ## 子空间投影 这一节非常重要。上一节的最后我们说到：在<span class="math inline">\(Ax=b\)</span>无解的情况下，我们要将<span class="math inline">\(b\)</span>微调成最靠近<span class="math inline">\(C(A)\)</span>的某个向量<span class="math inline">\(p\)</span>，从而求解<span class="math inline">\(A\hat x=p\)</span>，<span class="math inline">\(p\)</span>就是<span class="math inline">\(b\)</span>在列空间的<strong>投影</strong>。</p><p>我们首先看看<span class="math inline">\(R^2\)</span>的情况： <img src="https://img-blog.csdnimg.cn/20200526204930131.png" alt="平面上有向量a,b，" /> 从图中可以看到：<span class="math inline">\(e=b-p=b-xa\)</span>，再由正交关系：<span class="math inline">\(a^Te=a^T(b-xa)=0\)</span>，可以计算出乘数<span class="math inline">\(x=\frac{a^Tb}{a^Ta}\)</span>，进而可以将投影<span class="math inline">\(p\)</span>表示为<span class="math inline">\(p=xa=\frac{aa^T}{a^Ta}b=Pb\)</span>，这里的<span class="math inline">\(P=\frac{aa^T}{a^Ta}\)</span>即投影矩阵。 <span class="math inline">\(r(P)=1\)</span>，<span class="math inline">\(P\)</span>的列空间即为过<span class="math inline">\(a\)</span>的直线。此外，投影矩阵还有两条性质：<span class="math inline">\(P^T=P,P^2=P\)</span>，从几何上解释即投影2次和投影1次效果完全一样。</p><p>接着看看<span class="math inline">\(R^3\)</span>的情况： 两个<strong>线性无关</strong>的列向量<span class="math inline">\(a_1,a_2\)</span>生成的列空间是一个平面，令<span class="math inline">\(A=\begin{bmatrix}  a_1 &amp; a_2\\  \end{bmatrix}\)</span>。类似地，<span class="math inline">\(p\)</span>是向量<span class="math inline">\(b\)</span>在平面上的投影，<span class="math inline">\(e=b-p\)</span>垂直于平面。<strong>因为<span class="math inline">\(p\)</span>在<span class="math inline">\(A\)</span>的列空间中</strong>，所以可以表示为<span class="math inline">\(p=A\hat x=\hat x_1a_1+\hat x_2a_2\)</span>，我们就是要找到<span class="math inline">\(\hat x\)</span>。</p><p>根据<span class="math inline">\(e\)</span>和平面的垂直关系，可以得到： <span class="math display">\[\begin{cases}a_1^T(b-A\hat x)=0&amp; \text{}\\a_2^T(b-A\hat x)=0&amp; \text{}\end{cases}\]</span> 写出矩阵形式： <span class="math display">\[\begin{bmatrix}   a_1^T\\   a_2^T\\  \end{bmatrix}\begin{bmatrix}  b-A\hat x \\  \end{bmatrix}=\begin{bmatrix}   0\\   0\\  \end{bmatrix}  \]</span> 即<span class="math inline">\(A^T(b-A\hat x)=0\)</span>，<strong>这里<span class="math inline">\(b-A\hat x=e\)</span>在<span class="math inline">\(N(A^T)\)</span>中</strong>，故<span class="math inline">\(e\)</span>垂直于<span class="math inline">\(C(A)\)</span>。 接着化简，我们<strong>得到了上一节中同乘<span class="math inline">\(A^T\)</span>的原因</strong>：<span class="math inline">\(A^TA\hat x=A^Tb\)</span>，继续：<span class="math inline">\(\hat x=(A^TA)^{-1}A^Tb\)</span>。这里注意不能继续化简，因为<span class="math inline">\(A\)</span>不是方阵，<span class="math inline">\(A^{-1}\)</span>不存在。 得到组合系数<span class="math inline">\(\hat x\)</span>后，就可以写出投影<span class="math inline">\(p=A\hat x=A(A^TA)^{-1}A^Tb\)</span>，同样地，投影矩阵<span class="math inline">\(P=A(A^TA)^{-1}A^T\)</span>，可以验证，<span class="math inline">\(P^T=P,P^2=P\)</span>仍然成立。</p><p>最后我们考虑极端一些的情况：</p><ul><li>若<span class="math inline">\(b\)</span>在<span class="math inline">\(A\)</span>的列空间中，投影后仍然是<span class="math inline">\(b\)</span>自己：<span class="math inline">\(b=Ax-&gt;Pb=PAx=Ax=b\)</span>；</li><li>若<span class="math inline">\(b\)</span>垂直于<span class="math inline">\(A\)</span>的列空间，投影后是<span class="math inline">\(0\)</span>：<span class="math inline">\(b\)</span>在<span class="math inline">\(N(A^T)\)</span>中，<span class="math inline">\(A^Tb=0-&gt;Pb=0\)</span>。</li></ul><p>换句话说，<span class="math inline">\(b\)</span>被分解为<span class="math inline">\(p\)</span>和<span class="math inline">\(e\)</span>，<span class="math inline">\(p\)</span>在<span class="math inline">\(C(A)\)</span>中，<span class="math inline">\(e\)</span>在<span class="math inline">\(N(A^T)\)</span>中，并且<span class="math inline">\(b=p+e=Pb+(I-P)b\)</span>。 ## 最小二乘法 这是投影的一个应用，主要用来拟合直线，举例来看： <img src="https://img-blog.csdnimg.cn/20200526221325518.png" alt="在这里插入图片描述" /> 有三个点，需要找到一条最佳拟合直线，方程组形式： <span class="math display">\[\begin{cases}C+D=1&amp; \text{}\\C+2D=2&amp; \text{}\\C+3D=2&amp; \text{}\\\end{cases}\]</span> 矩阵形式： <span class="math display">\[Ax=\begin{bmatrix}   1 &amp; 1\\   1 &amp; 2\\   1 &amp; 3\\  \end{bmatrix}\begin{bmatrix}   C\\  D\\  \end{bmatrix}=\begin{bmatrix}   1\\   2\\     2\\  \end{bmatrix}=b  \]</span> 显然是无解的，要找到最优拟合系数<span class="math inline">\(CD\)</span>，就要用到投影： 清除outlier(离群值)后，定义每个点的误差：<span class="math inline">\(|e|^2=|Ax-b|^2\)</span>，那么优化目标变为最小化：<span class="math inline">\(e_1^2+e_2^2+e_3^2=(C+D-1)^2+(C+2D-2)^2+(C+3D-2)^2\)</span>，如何找到<span class="math inline">\(\hat x=\begin{bmatrix}  C\\  D\\  \end{bmatrix}\)</span>? 求偏导当然是一种方法，从线性代数的角度，回顾下上节中<span class="math inline">\(A^TA\hat x=A^Tb\)</span>，我们已经证明，<strong>这样解得的<span class="math inline">\(\hat x\)</span>可以微调<span class="math inline">\(b\)</span>使其最靠近<span class="math inline">\(C(A)\)</span></strong>，也就是我们要的最优估计。 所以我们有： <span class="math display">\[A^TA\hat x=\begin{bmatrix}   3 &amp; 6\\   6 &amp; 14\\  \end{bmatrix}\begin{bmatrix}   C\\  D\\  \end{bmatrix}=\begin{bmatrix}   5\\   11\\  \end{bmatrix}=A^Tb  \]</span> 这样就得到了所谓的Normal Equation： <span class="math display">\[\begin{cases}3C+6D=5&amp; \text{}\\6C+14D=11&amp; \text{}\\\end{cases}\]</span> 解得<span class="math inline">\(C=\frac{2}{3},D=\frac{1}{2}\)</span>，我们的最佳拟合直线即为<span class="math inline">\(b=\frac{2}{3}+\frac{1}{2}t\)</span>。</p><p>最后要注意的一点：<span class="math inline">\(\hat x\)</span>可解的前提是<span class="math inline">\(A^TA\)</span>可逆，只要<span class="math inline">\(A\)</span>的各列线性无关，这点即可满足。 不妨做一些证明： 要证明<span class="math inline">\(A^TA\)</span>可逆即证明<span class="math inline">\(A^TAx=0\)</span>只有零解； <span class="math inline">\(x^TA^TAx=0,(Ax)^TAx=0,Ax=0\)</span>，<span class="math inline">\(A\)</span>的各列线性无关意即<span class="math inline">\(Ax=0\)</span>只有零解，得证。 ## 正交化 我们都知道，对于<strong>标准正交向量</strong>，有： <span class="math display">\[q_i^Tq_j=\begin{cases}0&amp; \text{$i\neq j$}\\1&amp; \text{$i=j$}\\\end{cases}\]</span> 正交矩阵写作<span class="math inline">\(Q=\begin{bmatrix}  q_1 &amp; q_2 ... &amp; q_n\\  \end{bmatrix}\)</span>，很容易验证： <span class="math display">\[Q^TQ=\begin{bmatrix}   q_1^T\\   ...\\     q_n^T\\  \end{bmatrix}\begin{bmatrix}   q_1 &amp; ... &amp; q_n\\  \end{bmatrix}=I\]</span> 如果<span class="math inline">\(Q\)</span>是方阵，那么<span class="math inline">\(Q^T=Q^{-1}\)</span>。正交矩阵的例子有很多：以前学习过的置换矩阵、<span class="math inline">\(\begin{bmatrix}  cos\theta &amp; -sin\theta\\  sin\theta &amp; cos\theta\\  \end{bmatrix}\)</span>，还有一种叫做Adhemar的系列矩阵也是正交阵：<span class="math inline">\(\frac{1}{\sqrt{2}}\begin{bmatrix}  1 &amp; 1\\  1 &amp; -1\\  \end{bmatrix}\)</span>、<span class="math inline">\(\frac{1}{2}\begin{bmatrix}  1 &amp; 1 &amp; 1 &amp; 1\\  1 &amp; -1 &amp; 1 &amp; -1\\  1 &amp; 1 &amp; -1 &amp; -1\\  1 &amp; -1 &amp; -1 &amp; 1\\  \end{bmatrix}\)</span>... 有了这些了解后，就可以解答为什么需要正交矩阵： 还记得上一节中的投影矩阵<span class="math inline">\(P\)</span>吗？将矩阵<span class="math inline">\(A\)</span>变为正交阵<span class="math inline">\(Q\)</span>后，这时再把<span class="math inline">\(b\)</span>投影到<span class="math inline">\(C(Q)\)</span>中，投影矩阵就变为了<span class="math inline">\(P=Q(Q^TQ)^{-1}Q^T=QQ^T\)</span>，如果<span class="math inline">\(Q\)</span>是方阵，那么<span class="math inline">\(P=QQ^T=I\)</span>，这也非常好解释：<span class="math inline">\(Q\)</span>是方阵必然可逆，<span class="math inline">\(C(Q)\)</span>就是整个空间，<span class="math inline">\(P=I\)</span>相当于没有进行投影。 还有我们在求最优估计时用到的<span class="math inline">\(A^TA\hat x=A^Tb\)</span>变为了<span class="math inline">\(Q^TQ\hat x=Q^Tb\)</span>，即<span class="math inline">\(\hat x=Q^Tb\)</span>，求解<span class="math inline">\(\hat x_i\)</span>就简化为了<span class="math inline">\(\hat x_i=q_i^Tb\)</span>。</p><p>所以接下来的问题就是如何将各列线性无关的<span class="math inline">\(A\)</span>变为正交阵<span class="math inline">\(Q\)</span>，这项工作就是Gram-Schmidt正交化，先从两个向量的情况开始： <img src="https://img-blog.csdnimg.cn/20200527120631653.png" alt="在这里插入图片描述" /> 工作分2步进行：</p><ul><li>由线性无关的2个向量<span class="math inline">\(a,b\)</span>得到2个正交的向量<span class="math inline">\(A,B\)</span>： 这一步主要是改变方向，<span class="math inline">\(A=a\)</span>即可，<span class="math inline">\(B=e=b-p=b-\frac{A^Tb}{A^TA}A\)</span>。</li><li>将<span class="math inline">\(A,B\)</span>变为标准正交向量<span class="math inline">\(q_1,q_2\)</span>： 这一步主要是改变长度，<span class="math inline">\(q_1=\frac{A}{|A|},q_2=\frac{B}{|B|}\)</span>。</li></ul><p>如果是3个线性无关的向量，必然生成整个三维空间，<span class="math inline">\(A,B\)</span>不会变，<span class="math inline">\(C\)</span>其实是垂直于<span class="math inline">\(AB\)</span>子空间的那个<span class="math inline">\(e\)</span>，即减去在<span class="math inline">\(A,B\)</span>两个方向的投影(可以用三支笔模拟)，故<span class="math inline">\(C=c-\frac{A^Tc}{A^TA}A-\frac{B^Tc}{B^TB}B\)</span>。 观察上述工作，可以发现：我们所有的工作都是在<strong>同一个列空间</strong>中进行，只是开始的线性无关的基计算量太大，我们想要一组更加简化计算的互相垂直且长度为1的基。 正因为是在一个空间中进行，所以必然存在<span class="math inline">\(q\)</span>的线性组合可以得到<span class="math inline">\(a\)</span>，即<span class="math inline">\(A=QR\)</span>，并且<span class="math inline">\(a_1\)</span>只与<span class="math inline">\(q_1\)</span>有关、<span class="math inline">\(a_2\)</span>只与<span class="math inline">\(q_1,q_2\)</span>有关、<span class="math inline">\(a_3\)</span>只与<span class="math inline">\(q_1,q_2,q_3\)</span>有关，故<span class="math inline">\(R\)</span>必为<strong>上三角矩阵</strong>，也即： <span class="math display">\[\begin{bmatrix}   a_1 &amp; a_2 &amp; a_3\\  \end{bmatrix}=\begin{bmatrix}   q_1 &amp; q_2 &amp; q_3\\  \end{bmatrix}\begin{bmatrix}   q_1^Ta_1 &amp; q_1^Ta_2 &amp; q_1^Ta_3\\   0 &amp; q_2^Ta_2 &amp; q_2^Ta_3\\   0 &amp; 0 &amp; q_3^Ta_3\\  \end{bmatrix}\]</span> 这里<span class="math inline">\(R=Q^TA\)</span>。 ## 作业 Suppose a square <span class="math inline">\(A\)</span> has an LU factorization <span class="math inline">\(A=LU\)</span> where <span class="math inline">\(L\)</span> and <span class="math inline">\(U\)</span> are invertible. If <span class="math inline">\(A=QR\)</span>, what is <span class="math inline">\(r_{11}\)</span> in terms of possibly elements of <span class="math inline">\(L\)</span> and <span class="math inline">\(U\)</span>? 在QR分解中，<span class="math inline">\(r_{11}=q_1^Ta_1=\frac{a_1}{||a_1||}a_1=||a_1||\)</span>，即<span class="math inline">\(A\)</span>第一列的模；第一列即<span class="math inline">\(L\)</span>各列的线性组合，系数是<span class="math inline">\(U\)</span>的第一列(只有<span class="math inline">\(U_{11}\)</span>一个元素)，所以<span class="math inline">\(r_{11}=U_{11} \sqrt{\sum_i L_{i1}^2}\)</span>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#2 Vector Spaces and Subspaces</title>
      <link href="/2020/05/25/MIT%20Linear%20Algebra#2%20Vector%20Spaces%20and%20Subspaces/"/>
      <url>/2020/05/25/MIT%20Linear%20Algebra#2%20Vector%20Spaces%20and%20Subspaces/</url>
      
        <content type="html"><![CDATA[<h2 id="向量空间">向量空间</h2><p>向量空间对于该空间内任意向量的线性组合(数乘/加法)都是封闭的，并且必然包含零向量(数乘0)。 <span class="math inline">\(R^2\)</span>本身就是一个向量空间，它的子空间有下面几种：</p><ul><li>过原点直线；</li><li>零向量。</li></ul><p><span class="math inline">\(R^3\)</span>本身也是一个向量空间，它的子空间：</p><ul><li>过(0,0,0)的平面；</li><li>过(0,0,0)的直线；</li><li>零向量。</li></ul><p>从矩阵构造的角度来看，假设<span class="math inline">\(A=\begin{bmatrix}  1 &amp; 3\\  2 &amp; 3\\  4 &amp; 1  \end{bmatrix}\)</span>，<span class="math inline">\(A\)</span>的每一列属于<span class="math inline">\(R^3\)</span>，<span class="math inline">\(A\)</span>的col1和col2的所有线性组合构成了一个向量空间，称作<strong>列空间</strong>，记作<span class="math inline">\(C(A)\)</span>。 从列空间的角度重新来看<span class="math inline">\(Ax=b\)</span>： <span class="math display">\[A=\begin{bmatrix}   1 &amp; 1 &amp; 2\\   2 &amp; 1 &amp; 3\\   3 &amp; 1 &amp; 4\\   4 &amp; 1 &amp; 5  \end{bmatrix}\]</span> <span class="math inline">\(A\)</span>的所有列向量的线性组合构成了<span class="math inline">\(R^4\)</span>的一个子空间，<span class="math inline">\(Ax\)</span>恰是<span class="math inline">\(A\)</span>的所有列向量的线性组合，即列空间<span class="math inline">\(C(A)\)</span>，故只有<span class="math inline">\(b\)</span>在<span class="math inline">\(C(A)\)</span>中时方程组才有解。 3列无论怎样线性组合，都无法充满整个4维空间，同时注意到<span class="math inline">\(col1+col2=col3\)</span>，即使去掉第三列，仍然可以生成原来的列空间，<span class="math inline">\(col3\)</span>与<span class="math inline">\(col1\)</span>和<span class="math inline">\(col2\)</span>是<strong>线性相关</strong>的，所以实际上矩阵<span class="math inline">\(A\)</span>的列空间只是<span class="math inline">\(R^4\)</span>中的2维子空间。</p><p>再来看看<span class="math inline">\(Ax=0\)</span>，所有解<span class="math inline">\(x\)</span>构成了<span class="math inline">\(A\)</span>的<strong>零空间</strong>，记作<span class="math inline">\(N(A)\)</span>。 <span class="math display">\[Ax=\begin{bmatrix}   1 &amp; 1 &amp; 2\\   2 &amp; 1 &amp; 3\\   3 &amp; 1 &amp; 4\\   4 &amp; 1 &amp; 5  \end{bmatrix}\begin{bmatrix}  x_1\\  x_2\\  x_3  \end{bmatrix}=\begin{bmatrix}  0\\  0\\  0\\  0  \end{bmatrix}\]</span> 虽然<span class="math inline">\(A\)</span>的每一列都属于<span class="math inline">\(R^4\)</span>，但是零空间研究的是<span class="math inline">\(x\)</span>，<span class="math inline">\(x\)</span>属于<span class="math inline">\(R^3\)</span>。 傻子都看得出来<span class="math inline">\((0,0,0)\)</span>是一组解，此前我们知道<span class="math inline">\(col1+col2=col3\)</span>，所以<span class="math inline">\(c(1,1,-1)\)</span>也是一组解，所有解其实就是<span class="math inline">\(R^3\)</span>中的一个子空间，一条直线而已，也就是<span class="math inline">\(A\)</span>的零空间<span class="math inline">\(N(A)\)</span>。 如果<span class="math inline">\(Ax=b\)</span>中<span class="math inline">\(b\neq0\)</span>，那么<span class="math inline">\(x\)</span>是不能构成子空间的，因为其中没有零向量。</p><p>由此我们可以得到构造子空间的两种方法：</p><ul><li>矩阵各列的所有线性组合；</li><li>方程组满足特定条件，让<span class="math inline">\(x\)</span>生成子空间。</li></ul><h2 id="求解零空间">求解零空间</h2><p>在上一节中我们知道，求解<span class="math inline">\(A\)</span>的零空间其实就是求解<span class="math inline">\(Ax=0\)</span>，还是要用到高斯消元。 <span class="math display">\[A=\begin{bmatrix}   1 &amp; 2 &amp; 2 &amp; 2\\   2 &amp; 4 &amp; 6 &amp; 8\\   3 &amp; 6 &amp; 8 &amp; 10  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 2 &amp; 2 &amp; 2\\   0 &amp; 0 &amp; 2 &amp; 4\\   0 &amp; 0 &amp; 0 &amp; 0  \end{bmatrix}=U\]</span> 很显然，主元(每一行中第一个非零元素)是<span class="math inline">\(U(0,0)=1\)</span>和<span class="math inline">\(U(2,3)=2\)</span>，pivot col是第一列和第三列，第二列和第四列是free col，也可知<span class="math inline">\(rank(A)=\#pivots=2\)</span>，<span class="math inline">\(\#自由变量=n-rank(A)\)</span>，于是写出化简后的方程组： <span class="math display">\[\begin{cases}x_1+2x_2+2x_3+2x_4=0&amp; \text{}\\2x_3+4x_4=0&amp; \text{}\end{cases}\]</span> 对自由变量<span class="math inline">\(x_2\)</span>和<span class="math inline">\(x_4\)</span>，一般取<span class="math inline">\((0,1)\)</span>和<span class="math inline">\((1,0)\)</span>，所以特解(<strong>零空间的一组基</strong>)为： <span class="math display">\[\begin{bmatrix}  -2\\  1\\  0\\  0  \end{bmatrix}、\begin{bmatrix}  2\\  0\\  -2\\  1  \end{bmatrix}\]</span> 两个特解的线性组合即是整个零空间，也即是<span class="math inline">\(Ax=0\)</span>的全部解： <span class="math display">\[x=c\begin{bmatrix}  -2\\  1\\  0\\  0  \end{bmatrix}+d\begin{bmatrix}  2\\  0\\  -2\\  1  \end{bmatrix}\]</span> 其实矩阵<span class="math inline">\(U\)</span>还可以变得更加简单，可以化为简化行阶梯<span class="math inline">\(R=\begin{bmatrix}  1 &amp; 2 &amp; 0 &amp; -2\\  0 &amp; 0 &amp; 1 &amp; 2\\  0 &amp; 0 &amp; 0 &amp; 0  \end{bmatrix}\)</span>，即主元全部为1。 仔细观察矩阵<span class="math inline">\(R\)</span>，如果将pivot col全部移到左边，将free col移到右边，我们可以得到<span class="math inline">\(R\)</span>的一般形式：<span class="math inline">\(R=\begin{bmatrix}  I &amp; F\\  0 &amp; 0\\  \end{bmatrix}\)</span>，由此得出<span class="math inline">\(x\)</span>的一般形式：<span class="math inline">\(x=\begin{bmatrix}  -F\\  I\\  \end{bmatrix}\)</span>。 ## 求解Ax=b 上一节中我们求解了<span class="math inline">\(Ax=0\)</span>，接着看看更加复杂的情况： <span class="math display">\[[A\ b]=\begin{bmatrix}   1 &amp; 2 &amp; 2 &amp; 2 &amp; b_1\\   2 &amp; 4 &amp; 6 &amp; 8 &amp; b_2\\   3 &amp; 6 &amp; 8 &amp; 10 &amp; b_3  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 2 &amp; 2 &amp; 2 &amp; b_1\\   0 &amp; 0 &amp; 2 &amp; 4 &amp; b_2-2b_1\\   0 &amp; 0 &amp; 0 &amp; 0 &amp; b_3-b_2-b_1  \end{bmatrix}\]</span> 我们知道，当<span class="math inline">\(b\)</span>属于<span class="math inline">\(C(A)\)</span>时方程组有解，不妨设<span class="math inline">\(b=(1,5,6)\)</span>，那么化简的矩阵为<span class="math inline">\(\begin{bmatrix}  1 &amp; 2 &amp; 2 &amp; 2 &amp; 1\\  0 &amp; 0 &amp; 2 &amp; 4 &amp; 3\\  0 &amp; 0 &amp; 0 &amp; 0 &amp; 0  \end{bmatrix}\)</span>，求解过程有3步：</p><ul><li>特解：一般令自由变量取0，即<span class="math inline">\(x_2=x_4=0\)</span>，求主变量： <span class="math display">\[\begin{cases}x_1+2x_3=1&amp; \text{}\\2x_3=3&amp; \text{}\end{cases}\]</span> 所以特解<span class="math inline">\(x_p=\begin{bmatrix}  -2\\  0\\  1.5\\  0  \end{bmatrix}\)</span></li><li>求零空间，即<span class="math inline">\(Ax=0\)</span>的解<span class="math inline">\(x_{null}\)</span>；</li><li>所有解<span class="math inline">\(x=x_p+x_{null}\)</span>。 因为<span class="math inline">\(Ax_p=b, Ax_{null}=0\)</span>，故<span class="math inline">\(A(x_p+x_{null})=b\)</span>。</li></ul><p>对于矩阵<span class="math inline">\(A_{mn}\)</span>，我们知道<span class="math inline">\(r(A)=\#pivots\)</span>，所以<span class="math inline">\(r\leq m\)</span>，<span class="math inline">\(r\leq n\)</span>。 先看看<strong>列满秩</strong>的情况：每列都有主元，<span class="math inline">\(r=n&lt;m\)</span>，没有自由变量，零空间只有零向量： 举例来看： <span class="math display">\[\begin{bmatrix}   1 &amp; 3\\   2 &amp; 1\\   6 &amp; 1\\   5 &amp; 1  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 0\\   0 &amp; 1\\   0 &amp; 0\\   0 &amp; 0  \end{bmatrix}=\begin{bmatrix}   I\\   0\\  \end{bmatrix}\]</span> 如果特解恰好存在，有1个解，否则无解。 接着看看<strong>行满秩</strong>的情况：每行都有主元，<span class="math inline">\(r=m&lt;n\)</span>，<strong>自由变量有<span class="math inline">\(n-r=n-m\)</span>个</strong>，零空间有<span class="math inline">\(n-m\)</span>个基，<span class="math inline">\(Ax=b\)</span>有无穷多解： 举例来看： <span class="math display">\[\begin{bmatrix}   1 &amp; 2 &amp; 6 &amp; 5\\   3 &amp; 1 &amp; 1 &amp; 1  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 0 &amp; a &amp; b\\   0 &amp; 1 &amp; c &amp; d  \end{bmatrix}=\begin{bmatrix}   I &amp; F\\  \end{bmatrix}\]</span> 还有<strong>满秩</strong>的情况：<span class="math inline">\(r=m=n\)</span>，没有自由变量，零空间只有零向量，必有唯一的特解： 举例来看： <span class="math display">\[\begin{bmatrix}   1 &amp; 2\\   3 &amp; 1\\  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 0\\   0 &amp; 1\\  \end{bmatrix}=I\]</span> 最后一种情况就是<strong>不满秩</strong>：<span class="math inline">\(r&lt;m\)</span>，<span class="math inline">\(r&lt;n\)</span>，<span class="math inline">\(R=\begin{bmatrix}  I &amp; F\\  0 &amp; 0\\  \end{bmatrix}\)</span>，如果特解存在，就有无穷多解；否则无解。 ## 线性相关/基/维数 我们知道，对于矩阵<span class="math inline">\(A_{mn}(m&lt;n)\)</span>，因为有<span class="math inline">\(n-r\geq n-m\)</span>个自由变量，将这些自由变量赋一些非零值，即可解得主元，所以<span class="math inline">\(Ax=0\)</span>必有非零解。 对于一组向量<span class="math inline">\(x_1, x_2..., x_n\)</span>，除了系数全0以外，没有其他的线性组合可以得到零向量，那么这组向量<strong>线性无关</strong>，即<span class="math inline">\(c_1x_1+c_2x_2+...+c_nx_n\neq0(c_i不全为0)\)</span>。 举例来看：二维空间中的三个向量必然线性相关： <span class="math display">\[A=\begin{bmatrix}   2 &amp; 1 &amp; 3\\   1 &amp; 2 &amp; -1\\  \end{bmatrix}\]</span> 因为<span class="math inline">\(n-r&gt;0\)</span>，故必然有自由变量，所以<span class="math inline">\(Ax=0\)</span>必有非零解，即线性相关。 <strong>基</strong>也是一组向量<span class="math inline">\(v_1, v_2..., v_d\)</span>，不过要满足2个条件：</p><ul><li>线性无关；</li><li>可以生成整个空间。</li></ul><p><strong>空间维度</strong>即可以生成该空间的<strong>基向量的个数</strong>，前面我们知道：<span class="math inline">\(r(A)=\#pivot\ cols\)</span>，所以<span class="math inline">\(dim(C(A))=r(A)\)</span>，因为只需要pivot col就能生成整个列空间，并且列空间属于<span class="math inline">\(R^m\)</span>，因为每个基向量都有<span class="math inline">\(m\)</span>个元素。 对于零空间来说，特解的个数就是自由变量的个数，也就是基向量的个数，即<span class="math inline">\(dim(N(A))=\#自由变量=n-r(A)\)</span>，并且零空间属于<span class="math inline">\(R^n\)</span>，因为每个解向量都有<span class="math inline">\(n\)</span>个元素。 ## 四个基本子空间 前面我们学习了列空间和零空间，很自然地，就会有行空间和<span class="math inline">\(A^T\)</span>的零空间： 行空间，顾名思义，即是矩阵行向量的所有线性组合生成的向量空间，其实就是<span class="math inline">\(C(A^T)\)</span>，<span class="math inline">\(dim(C(A^T))=r(A)\)</span>，属于<span class="math inline">\(R^n\)</span>； <span class="math inline">\(A^T\)</span>的零空间，即<span class="math inline">\(A^Tx=0\)</span>的所有解向量生成的向量空间，即<span class="math inline">\(N(A^T)\)</span>，<span class="math inline">\(dim(N(A^T))=m-r(A)\)</span>，属于<span class="math inline">\(R^m\)</span>。 回忆消元的过程，我们不停地进行初等行变换，这个过程中，行空间没有改变，列空间改变，最终的行空间就是<span class="math inline">\(R\)</span>矩阵的前<span class="math inline">\(r(A)\)</span>行生成的向量空间。 对于<span class="math inline">\(N(A^T)\)</span>，即<span class="math inline">\(A^Ty=0\)</span>，转置即有<span class="math inline">\(y^TA=0\)</span>，所以<span class="math inline">\(N(A^T)\)</span>又叫<strong>左零空间</strong>。 学习消元时我们知道，左乘一系列的初等阵可以将<span class="math inline">\(A\)</span>化为<span class="math inline">\(R\)</span>： <span class="math display">\[E\begin{bmatrix}   A_{mn} &amp; I_{mm}\\  \end{bmatrix}-&gt;\begin{bmatrix}   R_{mn} &amp; E_{mm}\\  \end{bmatrix}\]</span> 矩阵<span class="math inline">\(E\)</span>记录了我们的变换过程，举例来看： <span class="math display">\[EA=\begin{bmatrix}   -1 &amp; 2 &amp; 0\\   1 &amp; -1 &amp; 0\\   -1 &amp; 0 &amp; 1  \end{bmatrix}\begin{bmatrix}   1 &amp; 2 &amp; 3 &amp; 1\\   1 &amp; 1 &amp; 2 &amp; 1\\   1 &amp; 2 &amp; 3 &amp; 1  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 0 &amp; 1 &amp; 1\\   0 &amp; 1 &amp; 1 &amp; 1\\   0 &amp;  0&amp; 0 &amp; 0  \end{bmatrix}=R\]</span> <span class="math inline">\(dim(N(A^T))=m-r(A)=3-2=1\)</span>，左零空间中唯一一个基向量即<span class="math inline">\(E\)</span>的最后一行，因为<span class="math inline">\(\begin{bmatrix}  -1 &amp; 0 &amp; 1  \end{bmatrix}A=0\)</span>。 ## 矩阵空间 前面我们研究了若干向量生成的空间，上升一个高度，若干矩阵也可以构成一种特殊的向量空间，即矩阵空间。 所有的三阶矩阵构成矩阵空间<span class="math inline">\(M\)</span>，也就是<span class="math inline">\(R^{3*3}\)</span>。 <span class="math inline">\(M\)</span>的子空间有上三角矩阵<span class="math inline">\(U\)</span>和对称矩阵<span class="math inline">\(S\)</span>(可以用封闭性验证)。明确了空间后，就要研究该空间的维数和基向量。 <span class="math inline">\(dim(M)=9\)</span>，因为需要9个矩阵构成一组基，而且我们可以写出一组基： <span class="math display">\[\begin{bmatrix}   1 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 0  \end{bmatrix}、\begin{bmatrix}   0 &amp; 1 &amp; 0\\   0 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 0  \end{bmatrix}、\begin{bmatrix}   0 &amp; 0 &amp; 1\\   0 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 0  \end{bmatrix}  ...\begin{bmatrix}   0 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 1  \end{bmatrix}\]</span> <span class="math inline">\(dim(S)=6\)</span>，因为需要对角线的3个元素和对角线下面(上面)3个元素； <span class="math inline">\(dim(U)=6\)</span>，因为需要对角线的3个元素和对角线上面3个元素。 再来看看<span class="math inline">\(S\bigcap U\)</span>，既是上三角矩阵又是对称矩阵，其实就是对角阵，<span class="math inline">\(dim(S\bigcap U)=3\)</span>； 那么<span class="math inline">\(S\bigcup U\)</span>呢？属于上三角或者对称，很显然这无法构成子空间； 那么<span class="math inline">\(S+U\)</span>呢？对应元素求和，实际上这就是<span class="math inline">\(M\)</span>。 由此我们得到一个性质： <span class="math display">\[dim(S)+dim(U)=dim(S\bigcap U)+dim(S+U)\]</span> 对于向量空间和基，不应局限于线性代数中，例如熟悉的微分方程： <span class="math display">\[\frac{d^2y}{dx^2}+y=0\]</span> 它的所有解<span class="math inline">\(y=c_1cosx+c_2sinx\)</span>也构成零空间，那么<span class="math inline">\(cosx\)</span>和<span class="math inline">\(sinx\)</span>就是一组基，并且解空间的维数是2。</p><p>最后看一种很有趣的矩阵，秩为1的矩阵： 对于这种矩阵，有<span class="math inline">\(dim(C(A))=dim(C(A^T))=r=1\)</span>，不妨举个例子： <span class="math display">\[A=\begin{bmatrix}   1 &amp; 4 &amp; 5\\   2 &amp; 8 &amp; 10  \end{bmatrix}=\begin{bmatrix}   1\\   2\\  \end{bmatrix}\begin{bmatrix}   1 &amp; 4 &amp; 5\\  \end{bmatrix}=uv^T\]</span> 用一个例子作为结尾： 在<span class="math inline">\(R^4\)</span>中，<span class="math inline">\(v=\begin{bmatrix}  v_1\\  v_2\\  v_3\\  v_4  \end{bmatrix}\)</span>，<span class="math inline">\(s\)</span>是满足<span class="math inline">\(v_1+v_2+v_3+v_4=0\)</span>的所有<span class="math inline">\(v\)</span>，那么<span class="math inline">\(s\)</span>显然是子空间，并且可以写成矩阵形式<span class="math inline">\(Av=\begin{bmatrix}  1 &amp; 1 &amp; 1 &amp; 1\\  \end{bmatrix}v=0\)</span>，接着看看<span class="math inline">\(A\)</span>的四个基本子空间：</p><ul><li>零空间：<span class="math inline">\(dim(N(A))=n-r=4-1=3\)</span>，给每个自由变量赋值后，得到一组特解(基)： <span class="math display">\[\begin{bmatrix}-1\\1\\0\\0  \end{bmatrix}、\begin{bmatrix}-1\\0\\1\\0  \end{bmatrix}、\begin{bmatrix}-1\\0\\0\\1  \end{bmatrix}\]</span></li><li>列空间：<span class="math inline">\(dim(C(A))=r=1\)</span>，基可以取任意一列；</li><li>行空间：<span class="math inline">\(dim(C(A^T))=r=1\)</span>，基向量即第一行；</li><li>左零空间：<span class="math inline">\(dim(N(A^T))=m-r=0\)</span>，基向量只有零向量。 ## 作业 Under what possible conditions is the matrix <span class="math inline">\(A=uv^T+wz^T\)</span> not of rank 2? 对于<span class="math inline">\(uv^T=\begin{bmatrix} a\\ b\\ c\\  \end{bmatrix}\begin{bmatrix} v_1&amp;v_2&amp;v_3\\  \end{bmatrix}\)</span>，结果就是<span class="math inline">\(u\)</span>的线性组合<span class="math inline">\(\begin{bmatrix} v_1u&amp;v_2u&amp;v_3u\\  \end{bmatrix}\)</span>，所以<span class="math inline">\(C(uv^T)\subset C(u)=xu,x\in R\)</span>；同样地，<span class="math inline">\(C(wz^T)\subset C(w)=yw,y\in R\)</span>，如果<span class="math inline">\(u\)</span>和<span class="math inline">\(w\)</span>共线，那么<span class="math inline">\(C(A)=xu\)</span>，即<span class="math inline">\(r(A)\leq1\)</span>； 从行向量组合的角度：<span class="math inline">\(uv^T=\begin{bmatrix} av^T\\ bv^T\\ cv^T\\  \end{bmatrix}\)</span>，故<span class="math inline">\(uv^T\)</span>的行空间<span class="math inline">\(\subset v^T\)</span>的行空间<span class="math inline">\(=xv^T\)</span>，<span class="math inline">\(wz^T\)</span>的行空间<span class="math inline">\(\subset z^T\)</span>的行空间<span class="math inline">\(=yz^T\)</span>，所以如果<span class="math inline">\(v\)</span>和<span class="math inline">\(z\)</span>共线，那么行空间就可以合并，即<span class="math inline">\(r(A)\leq1\)</span>。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#1 Solving Linear Equations</title>
      <link href="/2020/05/23/MIT%20Linear%20Algebra#1%20Solving%20Linear%20Equations/"/>
      <url>/2020/05/23/MIT%20Linear%20Algebra#1%20Solving%20Linear%20Equations/</url>
      
        <content type="html"><![CDATA[<h2 id="矩阵消元">矩阵消元</h2><p>求解三元一次方程组<span class="math inline">\(Ax=b\)</span>的方法就是<strong>消元</strong>： <span class="math display">\[\begin{cases}x+2y+z=2&amp; \text{E1}\\3x+8y+z=12&amp; \text{E2}\\4y+z=2&amp; \text{E3}\end{cases}\]</span> 用<span class="math inline">\(E2-3*E1\)</span>，再用<span class="math inline">\(E3-2*E2\)</span>，增广矩阵的变化： <span class="math display">\[\begin{bmatrix}   A &amp; b\\  \end{bmatrix}=\begin{bmatrix}   1 &amp; 2 &amp; 1 &amp; 2\\   3 &amp; 8 &amp; 1 &amp; 12\\   0 &amp; 4 &amp; 1 &amp; 2  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 2 &amp; 1 &amp; 2\\   0 &amp; 2 &amp; -2 &amp; 6\\   0 &amp; 4 &amp; 1 &amp; 2  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 2 &amp; 1 &amp; 2\\   0 &amp; 2 &amp; -2 &amp; 6\\   0 &amp; 0 &amp; 5 &amp; -10  \end{bmatrix}=\begin{bmatrix}   U &amp; c \\  \end{bmatrix}\]</span> 注意到变换过程中<span class="math inline">\(A\)</span>的pivots(主对角线元素)均不为0。 接着可以得到消元后的方程组： <span class="math display">\[\begin{cases}x+2y+z=2&amp; \text{}\\2y-2z=6&amp; \text{}\\5z=-10&amp; \text{}\end{cases}\]</span> 从最后一个方程解起，并不断<strong>回代</strong>，就可以求得<span class="math inline">\((x,y,z)\)</span>的值。</p><p>如果回顾刚才的变换过程，并且用矩阵形式去表示： 第一步：将<span class="math inline">\((2,1)\)</span>位置的值变0，即<span class="math inline">\(E2-3*E1\)</span>： <span class="math display">\[E_{21}A=\begin{bmatrix}   1 &amp; 0 &amp; 0\\   -3 &amp; 1 &amp; 0\\   0 &amp; 0 &amp; 1  \end{bmatrix}\begin{bmatrix}   1 &amp; 2 &amp; 1\\   3 &amp; 8 &amp; 1\\   0 &amp; 4 &amp; 1  \end{bmatrix}=\begin{bmatrix}   1 &amp; 2 &amp; 1\\   0 &amp; 2 &amp; -2\\   0 &amp; 4 &amp; 1  \end{bmatrix}  \]</span> 其实这个过程就是对单位阵做相同的行变换得到<span class="math inline">\(E_{21}\)</span>，<span class="math inline">\(E_{21}\)</span>的第一行乘以<span class="math inline">\(A\)</span>本质上就是<span class="math inline">\(A\)</span>的各行的线性组合：<span class="math inline">\(1*row1+0*row2+0*row3=[1\ 2\ 1]\)</span>；同样的，<span class="math inline">\(E_{21}\)</span>的第二行乘以<span class="math inline">\(A\)</span>本质上还是<span class="math inline">\(A\)</span>的各行的线性组合：<span class="math inline">\(-3*row1+1*row2+0*row3=[0\ 2\ -2]\)</span>... 第二步：将<span class="math inline">\((3,2)\)</span>位置的值变0，即<span class="math inline">\(E3-2*E2\)</span>： <span class="math display">\[E_{32}(E_{21}A)=\begin{bmatrix}   1 &amp; 0 &amp; 0\\   0 &amp; 1 &amp; 0\\   0 &amp; -2 &amp; 1   \end{bmatrix}\begin{bmatrix}   1 &amp; 2 &amp; 1\\   0 &amp; 2 &amp; -2\\   0 &amp; 4 &amp; 1  \end{bmatrix}=\begin{bmatrix}   1 &amp; 2 &amp; 1\\   0 &amp; 2 &amp; -2\\   0 &amp; 0 &amp; 5  \end{bmatrix}  \]</span> 这个过程就是对单位阵做相同的行变换得到<span class="math inline">\(E_{32}\)</span>，<span class="math inline">\(E_{32}\)</span>的第三行乘以<span class="math inline">\((E_{21}A)\)</span>本质上就是<span class="math inline">\((E_{21}A)\)</span>的各行的线性组合：<span class="math inline">\(0*row1+(-2*row2)+1*row3=[0\ 0\ 5]\)</span>； 所以整个变换过程用矩阵形式表示： <span class="math display">\[E_{32}(E_{21}A)=U-&gt;(E_{32}E_{21})A=U(矩阵乘法结合律成立，交换律不成立)\]</span> 非常重要的结论就是<strong>左行右列</strong>： <span class="math display">\[\begin{bmatrix}   1 &amp; 2 &amp; 7\\  \end{bmatrix}\begin{bmatrix}  row1\\  row2\\  row3  \end{bmatrix}=1*row1+2*row2+7*row3(矩阵左乘向量即行向量的线性组合)  \]</span> <span class="math display">\[\begin{bmatrix}   col1 &amp; col2 &amp; col3\\  \end{bmatrix}\begin{bmatrix}  3\\  4\\  5  \end{bmatrix}=3*col1+4*col2+5*col3(矩阵右乘向量即列向量的线性组合)  \]</span> <strong>线性组合</strong>的思想也是矩阵乘法的核心，再举一例： <span class="math display">\[\begin{bmatrix}   0 &amp; 1\\   1 &amp; 0\\  \end{bmatrix}\begin{bmatrix}   a &amp; b\\   c &amp; d\\  \end{bmatrix}=\begin{bmatrix}   c &amp; d\\   a &amp; b\\  \end{bmatrix}  \]</span> 结果的第一行即：<span class="math inline">\(0*[a\ b]+1*[c\ d]\)</span>，第二行即：<span class="math inline">\(1*[a\ b]+0*[c\ d]\)</span>，交换行。 类似的，交换列(<strong>列向量的线性组合</strong>)： <span class="math display">\[\begin{bmatrix}   a &amp; b\\   c &amp; d\\  \end{bmatrix}\begin{bmatrix}   0 &amp; 1\\   1 &amp; 0\\  \end{bmatrix}=\begin{bmatrix}   b &amp; a\\   d &amp; c\\  \end{bmatrix}  \]</span> ## 乘法和逆矩阵 回顾上一节的内容，对于<span class="math inline">\(AB=C\)</span>： <span class="math inline">\(C\)</span>的第<span class="math inline">\(i\)</span>列是<span class="math inline">\(A\)</span>的列向量的线性组合，组合系数即是<span class="math inline">\(B\)</span>对应的列<span class="math inline">\(col_i\)</span>，即：<span class="math inline">\(A*col_i\)</span>； <span class="math inline">\(C\)</span>的第<span class="math inline">\(i\)</span>行是<span class="math inline">\(B\)</span>的行向量的线性组合，组合系数即是<span class="math inline">\(A\)</span>对应的行<span class="math inline">\(row_i\)</span>，即：<span class="math inline">\(row_i*B\)</span>。 从这点出发，对于任意的矩阵乘法，都可以有： <span class="math display">\[AB=\Sigma(col_A*row_B)\]</span> 举例来看： <span class="math display">\[\begin{bmatrix}   2 &amp; 7\\   3 &amp; 8\\   4 &amp; 9  \end{bmatrix}\begin{bmatrix}   1 &amp; 6\\   0 &amp; 0\\  \end{bmatrix}=\begin{bmatrix}   2\\   3\\   4  \end{bmatrix}\begin{bmatrix}   1 &amp; 6  \end{bmatrix}+\begin{bmatrix}   7\\   8\\   9  \end{bmatrix}\begin{bmatrix}   0 &amp; 0  \end{bmatrix}  \]</span> 再来看看<span class="math inline">\(A=\begin{bmatrix}  1 &amp; 3\\  2 &amp; 6\\  \end{bmatrix}\)</span>，能否找到一个<strong>非零向量</strong><span class="math inline">\(x\)</span>，使得<span class="math inline">\(Ax=0\)</span>呢？ 答案是肯定的，因为<span class="math inline">\(A\)</span>是不可逆的。 解决不可逆这种特殊情况之前，先搞定足够好(可逆)的矩阵： <span class="math display">\[AA^{-1}=\begin{bmatrix}   1 &amp; 3\\   2 &amp; 7\\  \end{bmatrix}\begin{bmatrix}   a &amp; c\\   b &amp; d\\  \end{bmatrix}=\begin{bmatrix}   1 &amp; 0\\   0 &amp; 1\\  \end{bmatrix}=I  \]</span> 要求出<span class="math inline">\(A^{-1}\)</span>，从列向量线性组合的角度： <span class="math display">\[\begin{bmatrix}   1 &amp; 3\\   2 &amp; 7\\  \end{bmatrix}\begin{bmatrix}   a\\   b\\  \end{bmatrix}=\begin{bmatrix}   1\\   0\\  \end{bmatrix}，\begin{bmatrix}   1 &amp; 3\\   2 &amp; 7\\  \end{bmatrix}\begin{bmatrix}   c\\   d\\  \end{bmatrix}=\begin{bmatrix}   0\\   1\\  \end{bmatrix}  \]</span> 此时又回到了消元法解方程组，不过这里我们可以偷个懒，用Gauss-Jordan一次解出2个方程组： <span class="math display">\[\begin{bmatrix}   A &amp; I\\  \end{bmatrix}=\begin{bmatrix}   1 &amp; 3 &amp; 1 &amp; 0\\   2 &amp; 7 &amp; 0 &amp; 1\\  \end{bmatrix}-&gt;\begin{bmatrix}   1 &amp; 0 &amp; 7 &amp; -3\\   0 &amp; 1 &amp; -2 &amp; 1\\  \end{bmatrix}=\begin{bmatrix}   I &amp; A^{-1}\\  \end{bmatrix}  \]</span> 再次回顾上一节的内容：消元过程中所作的变换都可以通过<strong>左乘初等阵</strong>实现，将变换过程中所有初等阵的乘积记作<span class="math inline">\(E\)</span>，我们得到了一个激动人心的求解逆矩阵的方法： <span class="math display">\[E\begin{bmatrix}   A &amp; I\\  \end{bmatrix}=\begin{bmatrix}   I &amp; A^{-1}\\  \end{bmatrix}  \]</span> 因为经过变换，<span class="math inline">\(EA=I\)</span>，所以<span class="math inline">\(E=A^{-1}\)</span>，比国内的伴随矩阵不知道好到哪里去了。 ## A的LU分解 在了解为什么进行LU分解之前，我们先来看看高斯消元的时间复杂度： 回想整个过程，如果矩阵<span class="math inline">\(A\)</span>有<span class="math inline">\(n\)</span>个元素，不难发现耗费的时间<span class="math inline">\(n^2+(n-1)^2+...+1^2\approx \frac{n^3}{3}\)</span>，即<span class="math inline">\(O(n^3)\)</span>；对于右侧的列向量<span class="math inline">\(b(有m个元素)\)</span>，耗费<span class="math inline">\(O(m^2)\)</span>。 在很多时候，求解<span class="math inline">\(Ax=b\)</span>时矩阵<span class="math inline">\(A\)</span>是不变的，只有<span class="math inline">\(b\)</span>在变化，如果每次都用消元法去解，每次的复杂度都会是<span class="math inline">\(O(n^3)\)</span>，那么如果采用LU分解<span class="math inline">\(A=LU\)</span>，只要预先准备好<strong>下三角矩阵</strong><span class="math inline">\(L\)</span>和<strong>上三角矩阵</strong><span class="math inline">\(U\)</span>，这一步复杂度<span class="math inline">\(O(n^3)\)</span>，以后求解时：<span class="math inline">\(Ax=LUx=b\)</span>，只要求解：</p><ul><li><span class="math inline">\(Ly=b\)</span>，得到<span class="math inline">\(y\)</span>，<span class="math inline">\(O(n^2)\)</span>；</li><li><span class="math inline">\(Ux=y\)</span>，得到<span class="math inline">\(x\)</span>，<span class="math inline">\(O(n^2)\)</span>。 以后每次求解只需要<span class="math inline">\(O(n^2)\)</span>，大大提高了效率。</li></ul><p>明白了原因后，我们看看具体的过程： 我们知道，消元过程中矩阵<span class="math inline">\(A\)</span>可以通过左乘矩阵<span class="math inline">\(E\)</span>变为上三角矩阵<span class="math inline">\(U\)</span>，即<span class="math inline">\(EA=U\)</span>，那么<span class="math inline">\(A=E^{-1}U=LU\)</span>。 举例来看： 如果<span class="math inline">\(E_{32}E_{21}A=U\)</span>，那么<span class="math inline">\(A=E_{21}^{-1}E_{32}^{-1}U=LU\)</span>，假设<span class="math inline">\(E_{32}=\begin{bmatrix}  1 &amp; 0 &amp; 0\\  0 &amp; 1 &amp; 0\\  0 &amp; -5 &amp; 1  \end{bmatrix}\)</span>，<span class="math inline">\(E_{21}=\begin{bmatrix}  1 &amp; 0 &amp; 0\\  -2 &amp; 1 &amp; 0\\  0 &amp; 0 &amp; 1  \end{bmatrix}\)</span>，那么求<span class="math inline">\(L\)</span>即是求<span class="math inline">\(E_{21}^{-1}和E_{32}^{-1}\)</span>，当然可以通过上一节中的拼单位阵来求解，但是对于初等阵，可以不用这么麻烦，以<span class="math inline">\(E_{21}^{-1}\)</span>为例： 这个变换是<span class="math inline">\(row2-2*row1\)</span>，那么<strong>逆矩阵就是要undo这个操作</strong>，即<span class="math inline">\(row2+2*row1\)</span>，所以<span class="math inline">\(E_{21}^{-1}=\begin{bmatrix}  1 &amp; 0 &amp; 0\\  2 &amp; 1 &amp; 0\\  0 &amp; 0 &amp; 1  \end{bmatrix}\)</span>，同理可得<span class="math inline">\(E_{32}^{-1}=\begin{bmatrix}  1 &amp; 0 &amp; 0\\  0 &amp; 1 &amp; 0\\  0 &amp; 5 &amp; 1  \end{bmatrix}\)</span>，按照<strong>列线性组合</strong>的思想，<span class="math inline">\(L=E_{21}^{-1}E_{32}^{-1}=\begin{bmatrix}  1 &amp; 0 &amp; 0\\  2 &amp; 1 &amp; 0\\  0 &amp; 5 &amp; 1  \end{bmatrix}\)</span>。 ## 置换 前面的消元过程中，当主元为0时，可能需要<strong>交换行</strong>来使消元继续下去，交换行的操作可以通过左乘置换矩阵实现，即<span class="math inline">\(PA=LU\)</span>，前提是<span class="math inline">\(A\)</span>可逆，否则再怎么交换，都会有零行。 3阶矩阵的置换可以有<span class="math inline">\(3!=6\)</span>种： <span class="math display">\[\begin{bmatrix}   1 &amp; 0 &amp; 0\\   0 &amp; 1 &amp; 0\\   0 &amp; 0 &amp; 1  \end{bmatrix}、\begin{bmatrix}   0 &amp; 1 &amp; 0\\   1 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 1  \end{bmatrix}、\begin{bmatrix}   0 &amp; 0 &amp; 1\\   0 &amp; 1 &amp; 0\\   1 &amp; 0 &amp; 0  \end{bmatrix}、\begin{bmatrix}   1 &amp; 0 &amp; 0\\   0 &amp; 0 &amp; 1\\   0 &amp; 1 &amp; 0  \end{bmatrix}、\begin{bmatrix}   0 &amp; 1 &amp; 0\\   0 &amp; 0 &amp; 1\\   1 &amp; 0 &amp; 0  \end{bmatrix}、\begin{bmatrix}   0 &amp; 0 &amp; 1\\   1 &amp; 0 &amp; 0\\   0 &amp; 1 &amp; 0  \end{bmatrix}\]</span> 置换矩阵一个重要性质是：<span class="math inline">\(P^T=P^{-1}\)</span>。 ## 作业 Suppose <span class="math inline">\(A = \begin{pmatrix} a &amp; b \\ c &amp; d \end{pmatrix}\)</span> is factored into a 2x2 rotation <span class="math inline">\(Q=\begin{pmatrix} \cos \theta &amp; -\sin \theta \\ \sin \theta &amp;\cos \theta \end{pmatrix}\)</span> times a 2x2 lower triangular matrix <span class="math inline">\(L=\begin{pmatrix} x &amp; 0\\ y &amp; z \end{pmatrix}\)</span>. Write <span class="math inline">\(x,y,z\)</span> and <span class="math inline">\(θ\)</span> in terms of <span class="math inline">\(a,b,c\)</span> and <span class="math inline">\(d\)</span>. 这道题不难，但容易漏解： 容易得到：<span class="math inline">\(\begin{pmatrix} x\cos{\theta}-y\sin{\theta} &amp; -z\sin{\theta} \\ x\sin{\theta}+y\cos{\theta} &amp; z\cos{\theta} \end{pmatrix} = \begin{pmatrix} a &amp; b\\ c &amp; d \end{pmatrix}\)</span>，故<span class="math inline">\(b^2+d^2 = z^2\)</span>。对于旋转矩阵，<span class="math inline">\(0\leq\theta\leq2\pi\)</span>。</p><ul><li><span class="math inline">\(z = \sqrt{b^2+d^2}\)</span>：<span class="math inline">\(\cos{\theta} = \frac{d}{\sqrt{b^2+d^2}},\sin{\theta} = -\frac{b}{\sqrt{b^2+d^2}}\)</span> 因为<span class="math inline">\(L=Q^{-1}A\)</span>： <span class="math display">\[\begin{pmatrix} \cos{\theta} &amp; \sin{\theta} \\ -\sin{\theta} &amp; \cos{\theta}\end{pmatrix}\begin{pmatrix} a &amp; b\\c &amp; d\end{pmatrix} = \begin{pmatrix}a\cos{\theta}+c\sin{\theta} &amp; b\cos{\theta}+d\sin{\theta} \\ -a\sin{\theta}+c\cos{\theta} &amp; -b\sin{\theta}+d\cos{\theta} \end{pmatrix} = \begin{pmatrix} x &amp; 0 \\ y &amp; z\end{pmatrix}\]</span> 所以有： <span class="math display">\[x = \frac{ad - bc}{\sqrt{b^2+d^2}}, y = \frac{ab+cd}{\sqrt{b^2+d^2}}, \theta = \begin{cases}\arccos\frac{d}{\sqrt{b^2+d^2}},b\le0\\\\\arccos{\frac{d}{\sqrt{b^2+d^2}}}+\pi, b&gt;0\end{cases}\]</span> <span class="math inline">\(\arccos\theta\)</span>的值域是<span class="math inline">\([0,\pi]\)</span>。</li><li><span class="math inline">\(z = -\sqrt{b^2+d^2}\)</span>：<span class="math inline">\(\cos{\theta} = -\frac{d}{\sqrt{b^2+d^2}},\sin{\theta} = \frac{b}{\sqrt{b^2+d^2}}\)</span> <span class="math display">\[x = \frac{- ad + bc}{\sqrt{b^2+d^2}}, y = -\frac{ab+cd}{\sqrt{b^2+d^2}}, \theta = \begin{cases}2\pi-\arccos\frac{d}{\sqrt{b^2+d^2}},b\le0\\\pi-\arccos{\frac{d}{\sqrt{b^2+d^2}}}, b&gt;0\end{cases}\]</span></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MIT Linear Algebra#0 Introduction to Vectors</title>
      <link href="/2020/05/22/MIT%20Linear%20Algebra#0%20Introduction%20to%20Vectors/"/>
      <url>/2020/05/22/MIT%20Linear%20Algebra#0%20Introduction%20to%20Vectors/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><em>前言</em></h4><p><em>线性代数应该是大部分工科和商科同学的必修课，然而很不幸的是：国内的线代教学简直一团糟。如同国内大学的其他课一样，一上来就是一堆不知所云的概念、定义和性质，然后是没有什么道理的计算技巧训练，期末考完试一切结束。如果你有时间看看MIT的18.06，相信绝对会刷新你对这个学科的认知，Gilbert Strang完美遵循了现实生活中遇到了什么问题、为什么会有这些问题、该如何解决、更好的方法这一教学链条。循循善诱、环环相扣，你会觉得上课、学习数学是一种享受。</em> #### <em>方式</em> <em>这门课我强烈建议去看Gil老爷子的视频，2020年的Lecture真心觉得不太良心，看完视频可以做做20版的作业加深理解。 我会在Blog中专门记录这门课的笔记和理解，并且覆盖一些有趣的作业题。废话不多说，开始吧~</em></p><hr /><h2 id="笔记">笔记</h2><p>课程的引入是通过初中的二元一次方程组： <span class="math display">\[\begin{cases}2x-y=0&amp; \text{}\\-x+2y=3&amp; \text{}\end{cases}\]</span> 从几何上来看：就是二维平面上两条直线相交于<span class="math inline">\((1,2)\)</span>。 从Row Picture来看：可以很直观地写作： <span class="math display">\[\begin{bmatrix}   2 &amp; -1 \\   -1 &amp; 2  \end{bmatrix}\begin{bmatrix}   x \\   y  \end{bmatrix}=\begin{bmatrix}   0 \\   3  \end{bmatrix}\]</span> 这种思考方式也是国内灌输的，第一行乘以第一列得到0，第二行乘以第一列得到3，但其实更重要的是从<strong>向量(列)的线性组合</strong>角度去考虑： <span class="math display">\[x\begin{bmatrix}   2 \\   -1  \end{bmatrix}+y\begin{bmatrix}   -1 \\   2  \end{bmatrix}=\begin{bmatrix}   0 \\   3  \end{bmatrix}\]</span> 这样从几何上解释就是：有两个向量<span class="math inline">\(\begin{bmatrix}  2 \\  -1  \end{bmatrix}\)</span>、<span class="math inline">\(\begin{bmatrix}  -1 \\  2  \end{bmatrix}\)</span>，要找到某个组合<span class="math inline">\((x,y)\)</span>可以得到向量<span class="math inline">\(\begin{bmatrix}  0 \\  3  \end{bmatrix}\)</span>。 类似地，三元一次方程组也可以从列向量线性组合的角度考虑，几何上扩展到三维空间。 由此推广到更加一般的情形：<span class="math inline">\(Ax=b\)</span>，自然而然地，我们想知道：是否对于任意的<span class="math inline">\(b\)</span>，此方程都有解？或者换句话：对于三元一次方程组，<strong>列向量的线性组合是否能充满整个三维空间？</strong> 如果三个向量共面，那么最多只能生成一个平面，也就是不能保证可以生成任意的<span class="math inline">\(b\)</span>(有解)。后面会知道，有解的条件就是<span class="math inline">\(A\)</span><strong>可逆</strong>。 这节课最重要的一点就是要用<strong>Column Picture去思考<span class="math inline">\(Ax=b\)</span></strong>，为了加深理解，再举例： <span class="math display">\[\begin{bmatrix}   2 &amp; 5 \\   1 &amp; 3  \end{bmatrix}\begin{bmatrix}   1 \\   2  \end{bmatrix}=1*\begin{bmatrix}   2 \\   1  \end{bmatrix}+2*\begin{bmatrix}   5 \\   3  \end{bmatrix}=\begin{bmatrix}   12 \\   7  \end{bmatrix}\]</span> ## 作业</p><ol type="1"><li>Draw two non-colinear vectors v and w, and the region that consists of all combinations cv+dw where 0 ≤ c ≤ 1 and 0 ≤ d ≤ 1. Now consider the linear transformation of the unit square (all points (c,d) with 0 ≤ c ≤ 1 and 0 ≤ d ≤ 1) by the 2x2 matrix with first column v and second column w. Are these two regions the same? 答：两个区域相同。 对<span class="math inline">\((c,d)\)</span>做线性变换，也即 <span class="math display">\[\begin{bmatrix}   v&amp;w \\  \end{bmatrix}\begin{bmatrix}   c \\   d  \end{bmatrix}=cv+dw(矩阵乘以列向量，即矩阵各列的线性组合)\]</span></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变态的高等教育</title>
      <link href="/2020/05/22/%E5%8F%98%E6%80%81%E7%9A%84%E9%AB%98%E7%AD%89%E6%95%99%E8%82%B2/"/>
      <url>/2020/05/22/%E5%8F%98%E6%80%81%E7%9A%84%E9%AB%98%E7%AD%89%E6%95%99%E8%82%B2/</url>
      
        <content type="html"><![CDATA[<p>作为一个局内人，经历了四年的本科教育，后来接触了美帝学校的课程，对比之下越发觉得差距天大。丝毫不夸张地说，随便找一门美帝TOP50学校的公开课，质量都可以吊打国内99%的学校课程。 ## 重蹈覆辙 一届又一届的学生进入高校，被统一的流程加工几年之后扔进市场，工厂会召回次品，但没人会为学生负责，这样的故事仍然在不断上演，以我所在的EE为例：</p><ul><li>四年中要上若干门思政课，并且浪费很多时间去写作业、开会讨论、做pre。XJTU的这些课期末考试都是闭卷，君不见考前的图书馆走廊，到处都是拿着《毛概》笔记认真背书的同学，我曾经也是其中的一员，看似司空见惯的事情现在想来真的非常荒诞。</li><li>每学期动辄10几门课、30几个学分。大三的第一学期堆积了5门硬核专业课，外加电设和FPGA实验，以及不知道为什么存在的金工实习，更遑论还有选修课。这样的培养方案使得学生根本没有时间和精力仔细钻研，能应付完平时作业、大作业和期末考已经不易。</li><li>更为严重的是：专业课上时常可以见到PPT Reader般的老师，往往这类老师对签到这种事情非常在乎，好像在维护自己的权威，除了这些，看不出他/她对课程有什么见解。PPT往往都是10几年前的版本，排版、错别字惨不忍睹，就这样一代代流传下来，还是在EE/CS这样更新极快的学科中。至今记忆犹新的微机原理的某个女老师，上课总是在炫耀自己去THU学习人家的计组课程，要做一台计算机云云...这位老师上课时竟然将汇编程序的后缀写作.acm。。。</li><li>关于实验课，更是无力吐槽，你的成绩基本取决于实验报告的长度，所以内卷之风日益兴起，甚至一个小小的物理实验，有同学写出了20多页的报告。。。试想如果老师仔细评阅每份报告，自然不会按照长度打分，但是老师还要忙着做很多重要的事情呢？</li></ul><p>这样的结果就是本科学的东西考完试就还回去了，下次要用还得重新学，浪费几倍的时间重新学习，这也是我最讨厌的地方。</p><h2 id="追根溯源">追根溯源</h2><p>曾经我觉得：本科教育的失败只是某个学校做的不好，也可能只是西部高校做得不够好，可是随着很多很多不可思议的事情发生，我开始怀疑即使是顶尖大学也会烂到一塌糊涂。如果你有兴趣搜索这些内容，你会看到哪怕THU、SJTU这些国内名校也是如此，只是恶劣的程度有所不同而已。所以我一直觉得交大在我黄金般的4年里没起到什么作用，甚至起的是负面作用，我没有斯德哥尔摩情节，不会感谢学校提供了如此巨大的阻力，是为了锻炼学生。</p><ul><li>本科教育并不会影响职称评定，没有相应的考核要求，不如灌paper、拉项目来的实在。教学评估也是可笑，只会评估课堂出勤率高不高、实验报告写得长不长，压根不会有领导在乎课堂质量。</li><li>钱，还是钱：我上过Harvard的计算机导论课，整个课程有70+ TA，还有Amazon的计算资源免费支持，这样精心设计的课程怎么可能不是翘楚？</li></ul><h2 id="惩前毖后">惩前毖后</h2><p>怪不得在《上海交通大学学生生存手册》中，有学长疾呼： &gt; 国内绝大部分大学的本科教育，不是濒临崩溃，而是早已崩溃。</p><p>我自己意识到这一点实在太晚，穷屌丝也读不起master::&gt;_&lt;:: 我很感谢国家的政策，让我掏很少的钱就能接触到大学教育。但是希望赶路者能意识到：国内的高等教育就是shit，如果按照学校的计划走下来，进社会迟早被安排地明明白白，越努力，越傻逼。</p><p>Sad but true，研究生的教育只会更加差劲，我不想再被继续残害下去，说说自己的打算(在达到毕业要求的前提下)：</p><ul><li>我不否认有大神可以从课堂上学会关键知识，但是对于我们普通人来说，只能把有限的时间用来做出最好的选择。适合自己的方式才是最好的。</li><li>能不去的课就不去了，尽量选水课(不签到/考试水/给分高)。用尽可能多的<strong>自由支配时间</strong>学习更加优质的教学资源。</li><li>和老师交流要看情况，主要还是科研方向问题。</li></ul><h2 id="他山之石">他山之石</h2><p>我只列举一些我看到过的观点，并不代表个人看法。</p><ul><li><a href="http://www.houxiaodi.com/assets/misc/manual.pdf">《上海交通大学学生生存手册》</a></li><li><a href="https://blog.csdn.net/wangkechuang/article/details/8125062">清华梦的粉碎——写给清华大学的退学申请</a></li><li><a href="https://www.zhihu.com/question/60444527/answer/267271327">西安交通大学和其它几所2+7相比有什么优势和不足？</a></li></ul><blockquote><p>本来不想来打扰准备昏睡至死的人。</p><p>如果只是XJTUer来知乎自问自答寻求廉价的满足感，我从来不会浪费自己的时间来反驳他们。毕竟他们抱着发霉的C9头衔和上世纪的择校观念自娱自乐开心就好。</p><p>但是看到题主只是一名高中生，并且已经成功意识到了XJTU既存的缺陷（我当年为什么没有获得这些信息？！），应该是一位相当重视自己未来并且希望它最优的人。实在不希望那些高票回答毁人不倦。</p><p>不错，你确实应该对排名有一个清醒的认识：不要再拿XJTU和清北华五以及华科北航等学校比，它不配。生源/就业质量/出国率这些硬参数XJTU全方面垫底。这时候会有XJTUer跳出来说三大奖排名才是货真价实的比较，那么根据<a href="https://www.sohu.com/a/154387981_111981">近五年各大高校国家“三大奖”</a>中国农大排名11名，中科大排名19落后于苏州大学江南大学等高校，请问这个排名货真价实在哪里？每种排名都有一些对应的“利好高校”，三大奖之于XJTU，类似武书连排名之于WHU。就算前者更客观，也只不过是一方面。更何况WHU都不拿武书连说事儿了，XJTU还在西部一隅拿三大奖自慰呢！</p><p>XJTU的腐朽、低效、没落，就算是孜孜不倦来洗地的各位，想必也是深有体会吧。彩虹楼甲醛、彭康楼甲醛、女生宿舍和主楼女厕偷窥偷拍事件、xx书院房顶掉落，还有很多我暂时没回忆起来的，以上这些，XJTU官方有过任何一个让人满意的答复吗？可笑的是，很多XJTUer作为受害者身边的人甚至受害者自身，还在试图说服自己去对XJTU“培养一种满足和自豪感”。就我个人来说，很多小事都折射着XJTU的低效和颓败。</p><p>1）上学期办英文成绩单，学校教务处的人告知要先在哪里开原始成绩单，然后找谁和谁签字，等费劲周折终于完成，回来盖章的时候，又说按规定今天不行，下周一下午来吧。结果又浪费了好几天（后来才知道，给教务处那个负责盖章的求求情就能立刻完成，呵呵）。</p><p>2）大三的暑期实习答辩，基本水出天际，只要你的实习盖章签字没问题。同期去XJTU钦定的陕西鼓风机动力集团和渭河电厂打扑克玩手机的同学，答辩就算千篇一律漏洞百出，照样稳过。当时本人没有去学校“偏好”的公司实习，答辩被刁难了近一个月。据我所知还有机械那边的学长大三暑假在DJI实习，结果回来学院死活不认可，被迫大四暑假补上XJTU认证的不知道在干嘛的实习。那些响应XJTU号召去签约的野鸡公司划水的乖乖同学们，能不能通过DJI面试都是问题。以及有大神翘课去MSRA科研，期末考的也很好，但是XJTU不给登成绩的事就不细说了。</p><p>3）老师们绝大部分都是重科研轻本科教学，时不时会遇到PPT朗读员般的极品老师。不过这个貌似是中国高校通病，XJTU具有也是理所当然？？XJTUer，你们是这么认为的吗？另外，科研也不是你想象的那样，50%以上是论文灌水+项目拉钱，极少数是高质量研究。</p><p>4）本学期老师给的一门CS相关课程的PPT，拿到一看，最后修改时间2007年，十年过去了，连页脚的日期，正文的错别字都没有变，就这样年复一年的给陕西省一流大学的学生们使用着，而且还是CS这种更新极快的课程方向，让人忍俊不禁...</p><p>5）XJTU大部分老师都是本校本硕博一条龙的教育。一个开放的、优秀的、吸引人才的大学，这种情况不会这么严重。不信可以去美国的大学任何一个系的faculty list看一看，以及去中国东部的排名靠前的学校官网看看。另外，XJTU很多老师根本就不更新自己的主页，publications停留在几年前，甚至一些英文论文标题都有错词，总之不知道他们每天都在做些什么。</p><p>关于“XJTU这些年已经止颓了，正在稳步上升，你看创新港建的多好”这类说法，我只想说我们都是普通人，只能力争用有限的时间做出最优的选择。你不能把自己四年最宝贵的时间赌在一个未知数上。建了一堆大楼就改善了对本科生个体的关怀，也不现实。走出家乡去发达地区拥抱更多的机会和更广阔的视野，就算上了一个看起来不如XJTU的学校（也只是看起来不如而已），比起在知乎上埋头洗地的XJTUer来，你已经优秀太多了。</p><p>如果非要客观地介绍一下XJTU屈指可数的优势：</p><p>1.机械能动材料等传统工科科研实力强势（与本科生关系并不大，本科发顶会paper的是极少数）。如果确实热爱这方面的科研并且愿意忍受相对较低的工资，同类高校请选择XJTU。CS EE相关工科，选择北航北邮华科这些学校，不要选择XJTU。</p><p>2.目前还算在市中心，生活和交通便利。</p><p>最后的最后，你的选择权由你的高考成绩/自招成绩决定。</p></blockquote><ul><li><a href="https://www.zhihu.com/answer/437601713">如何评价西安交大计算机系？</a></li></ul><blockquote><p>看到很多人的批评，还是想多说两句，表达我的想法：</p><p>我从来都很感激西安交大，学校的补贴让我不用花钱出国交流，好心的老师给我写推荐信，学校的名声让我的简历能进入全国的大公司，2W元四年的学费让我收获了自认为超过100万的好处。</p><p>但是这都是我对学校本身的感激和爱戴，是学校或者是国家的好政策培养了我。而不是那些搞小山头的老师，僵化的管理人员，不尊重学生的制度。这些人现在越来越多，我认为并不配代表西安交大。我对这些毒瘤的批评也并不能代表对交大的否定。</p><p>交大计算机的培养计划确实存在着很大的问题，说交大计算机本科毕业不会写代码，我觉得完全没毛病，95%的学生四年下来写过的代码不会超过1000行，一半是for循环。剩下一半是在纸上写的。</p><p>其次我不同意也不想反驳如下的论点：“你来了交大就别BB，BB不如去复读”，“母校只允许自己黑，不能让别人说半句不是“，这基本等同于“你对政府不满就出国，不然老老实实受着”。</p><p>很多人都只是挑了西交计算机的缺点，这是十分有偏见的，本着为校争光的原则，在此列举一些西交计算机的优点：</p><p>1。西交计算机系的编程作业很少，给了学生们充分的自学时间。众所周知，计算机是一门自学的专业，很多三本的大神都是自学成才。而学校领导和老师们充分认识到了这一点，作业能出原题就出原题，能用笔写绝不用电脑，能让助教改绝不机考。比如一个下午就能写完一学期的C++作业，看了一学期mooc的数据结构，上机不到10个学时的操作系统。这对学生的自学能力提出了很高的要求，极大地提升了同学们的自学能力。</p><p>2。重视经典和原创。上课的教材能用本校就用本校的，能自己编就自己编，充分地体现了很多老师本人的风格和只可意会的专业水平。甚至体育都有自己本校的教材，印象中有太极拳等等，为了防止学生练武走火入魔，学校可谓用心良苦。PPT也都极其经典，有10年前的，5年前的，表现了尊重经典，坚持传统的精神。</p><p>3。必修很多看似与计算机无关的课，比如工程制图和生物实验等等。虽然国内很多知名高校，比如清华计算机是不修的，但是世界一流大学MIT，Caltech都是有生物必修课。这充分表现了西交与国际接轨，争做世界一流大学的决心。要知道生物作为21世纪的专业，可谓前途无量。虽然西交除了生化实验班之外的生物系学生大多转行了，但未来需要的是计算机和生物的交叉人才，正需要计算机系的学生去开拓和发展。</p><p>4。计算机系经常受到自动化某所的强烈关怀和支持。前任校长郑南宁深刻地意识到，集中力量才能办大事。于是常年把电信学院的经费奋力拨到自动化系，通过自动化系的发展反过来带动计算机系，正契合了天朝早年“先富带动后富”的理念。可以预料，通过院系之间的互帮互助，计算机系必将获得长足的发展和进步。</p><p>5。上课严格考勤。除了某些特殊关照班级之外基本不能出去实习／科研，这充分体现了学校领导关心同学的心。要知道西交计算机教学水平一流，出去实习能学到什么？对于拿到了某些实习offer的同学，学校就会百般刁难，参见<a href="https://www.zhihu.com/question/281289820">如何看待西安交通大学不断地被黑?</a>某回答，这充分锻炼了同学们艰苦奋斗，逆境求生的品质，而这种精神在同学毕业之后几十年的人生都是非常重要的，凸显了领导眼光的长远。</p><p>6。在编程作业很少的同时，实验和考试则是非常硬核的。楼上有人提到计算机课程电类太多，其实有点狭隘，不才在清华计算机系学习过一年，模电下半学期的电路分析和数电的“数字点亮人生”实验也都十分繁重，而信号与系统是计算机一小半研究方向的必须基础之一，不学就开玩笑了，所以说并没有黑到点子上。而西交的考试要求则更高，动辄成吨的概念题，对记忆力的要求极高，这不仅体现了学校希望将计算机这门学科文科化的创新精神，更是锻炼了同学们的背诵能力。试想别的学校同学还在对着C++官方文档写代码的时候，西交的同学们已经背完了文档，这必将极大地提升同学们写代码的速度和水平。</p><p>7。新任教师基本是本校博士，充分体现了学校的团结。参考<a href="http://jfzx.xjtu.edu.cn/info/1006/3210.htm">最近三年的新入职教师</a>，之前三年的计算机系，软院的老师多为本校土博，在现在很多二本都要求海归博士的大背景下，西交还能有如此魄力，团结一心，不崇洋媚外，这是何等难能可贵的精神！</p><p>8。在以上这些令人振奋的进步之余，西交的创新港也在如火如荼地建设着。2个月前据某前去规划建设的老师称，一共近5000亩地租出去了3200亩，剩下1800亩尚在建设之中。不得不说学校领导眼光之长远，懂得把经济利益放在第一位，先赚钱再建设，这样才有长远的发展。可想而知，假以时日创新港必将成为下一个曲江校区，为西交之崛起增光添彩。</p><p>以上只列举了西交计算机众多优点中的几个，还有太多可圈可点之处，在计算机学科蓬勃发展的今天，西交计算机必将成为国内一流，享誉世界！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Inflation</title>
      <link href="/2020/05/20/Inflation/"/>
      <url>/2020/05/20/Inflation/</url>
      
        <content type="html"><![CDATA[<p>虽然以前辅修过金融学，但是对于许多内容还是一知半解，也很难形成体系。最近又看了一些资料，就作为笔记记录在此。 ## 定义 Wikipedia对于通货膨胀的定义是：</p><blockquote><p>In economics, inflation is a sustained increase in the general price level of goods and services in an economy over a period of time. When the general price level rises, each unit of currency buys fewer goods and services; consequently, inflation reflects a reduction in the purchasing power per unit of money - a loss of real value in the medium of exchange and unit of account within the economy.</p></blockquote><p>直观来看，就是因为货币发行量大于实际流通中所需的货币量，单位货币购买力下降，<strong>物价持续上升</strong>。 那么印多少钱合适呢？有这样一个式子：<span class="math display">\[流通中所需的货币量=\frac{商品价格总额}{流通次数}\]</span> 举例来看：A用1元买了B的面包，B用这一元买了C的牛奶，C用这一元买了A的水果。面包、牛奶、水果的价格总额是3元，流通了3次，所以实际只需要1元就够了。 ## 作用 适当的通胀率(可以用CPI衡量)是可以促进经济发展的，比如适当的物价上涨，你当然希望立即就去购买商品，而不是等它涨价之后再去购买，这样就刺激了经济发展。 相反，如果通胀很严重(一般认为大于2%)，尤其是想要通过货币超发刺激经济(货币型通胀)，控制不好就可能成为下一个津巴布韦。 再来看看国内的一些例子：2008年全球经济危机，中国为了保持经济高速增长，向市场投放4万亿，货币供给大量增加，所以我总感觉08年之后物价就涨得有点快~地方政府为了拉动GDP，房价一路飙升。大家买不起？没关系，首付少一些，银行多放些贷款，过量放贷导致物价上升。 ## 例子 我们都知道：商品买的人越多，越火，价格也就越高。投机商就会借机涌入市场，因为即使不是刚需，我也可以买一些，等以后涨了再卖出去，这样就可以赚取差价套利。 随着刚需和投机商的大量涌入，需求持续增加，远远大于供给，价格继续增长。 涨到很多人凭个人收入都买不起，不论刚需还是投机者钱都不够了，怎么办？ 贷款。 银行钱也不够了，怎么办？ 开印钞机，大家需求这么旺盛，拉动经济的大好机会。 大家都有了钱，泡沫持续繁荣，价格越来越高，自己腰包里的钱没有涨，怎么办？只能自己少出一点，多向银行借点，这样等到超出个人的偿还能力，就是<strong>次贷</strong>。 地方政府、开发商和投机者赚得盆满钵满，大家一看，卧槽这么赚钱，都把钱扔进了房地产，制造业被挤压的没有生存空间。 当房价到顶，大家都绝望的时候，投机商就开始抛售，供给增加，需求减少，价格下跌，这很可能引发经济断崖式下跌，GDP没有了，银行的贷款无法收回，完蛋。 那么所谓的软着陆是什么？ 银行不准借给投机者，刚需的如果不还钱，加入黑名单。还要多把钱借给刚需，如果价格下跌，刚需的钱一定可以收回来。限购令、交税都是为了限制投机商进入。 但是房价还不能跌得太快，怎么办？刺激刚需：买房有补贴，首付继续降低。什么？这样还不买，好，不买房的不给上户口，子女不能上学，于是就只能为国接盘，谁的利益受到了损害，这是很明显的事情。这部分需求填补了投机者退出去的那部分，需求还在，就不会暴跌。渐渐地，泡沫消失，一切回归正常。但是这损害了未来的消费能力，再加上老龄化社会到来，前景不容乐观。 <a href="https://www.zhihu.com/question/19894997/answer/123847049">参考链接</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Image Filter and Recover</title>
      <link href="/2020/05/03/Image%20Filter%20and%20Recover/"/>
      <url>/2020/05/03/Image%20Filter%20and%20Recover/</url>
      
        <content type="html"><![CDATA[<p>这是CS50的第四次大作业，顺便学习了图像的入门知识。 ## 基础 黑白图(bitmap)的每个像素点只能取值0/1，1代表白色，0代表黑色。 常见的图片格式有JPEG/PNG/BMP，这些格式都支持RGB，每个像素点可以用多个bit表示，常见的是24-bit，红、绿、蓝分别由8bit表示，范围0~255。 BMP图的开始位置有两个header，第一个叫<code>BITMAPFILEHEADER</code>，14B；第二个叫<code>BITMAPINFOHEADER</code>，40B。接下来的每个像素点是按照BGR的顺序存储的。 ## 过滤器 Image Filter就是对原图的像素点的像素进行操作，得到一幅新图。主要有下面几种：</p><ul><li>Grayscale 将RGB图变为灰度图。将每个像素点的R/G/B的值改为相同，值越大，亮度越大。一般取三色的平均值。</li><li>Sepia 比较像怀旧滤镜，有很多算法可以做，主要就是对3种颜色乘一些系数，做一些加减运算。</li><li>Reflection 左右翻转。</li><li>Blur 图像模糊，对每个像素点的每种颜色，取其周围3*3格子的平均值。</li><li>Edges 边缘检测，可以用Sobel Operator去做： Blur是对周围的格子取平均，Sobel是求一个加权和，对于x和y方向，有两个kernel： <img src="https://img-blog.csdnimg.cn/20200502165239931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 对每个像素点的每种颜色，用周围3*3格子的对应颜色分别去乘Gx/Gy，得到加权和sumx/sumy。 以x为例，如果左右两边差不多，那么加权和接近0，否则得到一个大正数/负数，说明很有可能是<strong>两个物体的分界</strong>。 综合考虑x和y方向，取<span class="math inline">\(\sqrt{sumx^2+sumy^2}\)</span>，再四舍五入到0~255之间。 对于边缘的格子，可以做padding，围一圈全黑(0)的格子，相当于不用计算。 ## 图片恢复 JPEG的前三个字节分别是<code>0xff, 0xd8, 0xff</code>，第四个字节的前四位是<code>1110</code>，这些可以唯一标识JPEG文件。 记忆卡上所有图片是连续存储的，最小单位每块512B，不到一块的后面补0，不影响显示，每张图片可能占若干块。 可以每次读512B扔到buffer里，如果是jpeg，就将其写入新文件、继续读512B，直到遇到下一个jpeg。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Computational Geometry</title>
      <link href="/2020/04/20/Computational%20Geometry/"/>
      <url>/2020/04/20/Computational%20Geometry/</url>
      
        <content type="html"><![CDATA[<h2 id="矩形重叠">矩形重叠</h2><p>看过某司一道笔试题：给<span class="math inline">\(n\)</span>个矩形左下和右上坐标（不能斜放），求重叠最多处矩形个数。 这道题本身不难：可以遍历所有矩形边界组成的点，计算<strong>该点被多少矩形包围</strong>，从而选出最大值。 由此引申出一个问题：<strong>判断两个矩形重叠</strong>。</p><ul><li>如果正向思考，会有很多种情况：包含、重叠某个角、交叉... 那么如果逆向思考：什么情况两个矩形不重叠？无非就是<span class="math inline">\(A(p_1, p_2)\)</span>在<span class="math inline">\(B(p_3, p_4)\)</span>的上下左右： <span class="math display">\[(p_2.y&gt;=p_3.y)\vee(p_4.y&gt;=p_1.y)\vee(p_3.x&gt;=p_2.x)\vee(p_1.x&gt;=p_4.x)\]</span> 取反后用De Morgan's law化简就是重叠的情况： <span class="math display">\[(p_2.y&lt;p_3.y)\wedge(p_4.y&lt;p_1.y)\wedge(p_3.x&lt;p_2.x)\wedge(p_1.x&lt;p_4.x)\]</span> ## 线段交点 联立方程组求解当然没问题，也可以用几何的方法解： <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTI2MDU4MS8yMDIwMDQvMTI2MDU4MS0yMDIwMDQyMDA5Mjk1NTI0OS05MzA1Nzg4NjkucG5n?x-oss-process=image/format,png" /> 易知，<span class="math inline">\(\frac{AO}{BO}=\frac{AE}{BF}=\frac{S_{ACD}}{S_{BCD}}\)</span>，两个三角形面积可以用叉积求得，又<span class="math inline">\(\vec{AO}=\frac{AO}{AB}\vec{AB}=\frac{AO}{AO+BO}\vec{AB}\)</span>，所以<span class="math inline">\(\vec{O&#39;O}=\vec{O&#39;A}+\vec{AO}\)</span>，即可求得<span class="math inline">\(O\)</span>点坐标。 ## 线段覆盖 有若干线段<span class="math inline">\([l_i,r_i]\)</span>以及目标线段<span class="math inline">\([a,b]\)</span>，需要用尽可能多的线段去覆盖目标线段，且线段之间不相交，线段长度之和最小。 直观上看：我们的策略首先以长度为准则：显然不妥，选了黑的就不是最优 <img src="https://img-blog.csdnimg.cn/20200729213724839.png" alt="在这里插入图片描述" /> 按照起始点： <img src="https://img-blog.csdnimg.cn/20200729213754372.png" alt="在这里插入图片描述" /> 按照结束点：最优 <img src="https://img-blog.csdnimg.cn/20200729213857178.png" alt="在这里插入图片描述" /> 从前向后取区间，最小化对后面的影响，选择最早结束的区间。 ## 向量旋转 <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTI2MDU4MS8yMDIwMDQvMTI2MDU4MS0yMDIwMDQyMDA5NDU1Mzg4My0xOTgxNzI0NjU3LnBuZw?x-oss-process=image/format,png" /> 三角变换可得： <span class="math display">\[\vec b=(xcos\alpha-ysin\alpha,ycos\alpha+xsin\alpha)\]</span> ## 多边形面积 <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTI2MDU4MS8yMDIwMDQvMTI2MDU4MS0yMDIwMDQyMDEwMTQxNjU5NC0xMjc1OTkyNDExLnBuZw?x-oss-process=image/format,png" /> 三角剖分： <span class="math display">\[S_{ABCDEF}=\frac{\vec{OA}\times\vec{OB}+\vec{OB}\times\vec{OC}+...+\vec{OF}\times\vec{OA}}{2}\]</span> 即： <span class="math display">\[S=A_n\times A_1+\sum_{i=1}^{n-1}A_i\times A_{i+1}=x_ny_1-y_nx_1+\sum_{i=1}^{n-1}x_iy_{i+1}-y_ix_{i+1}\]</span> ## 凸包 包围所有给定点并且周长最小的多边形。</li></ul><p><img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229164832081-268323827.jpg" alt="image" /> 直接求不好算，需要旋转坐标轴： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229164921157-1565408775.png" alt="image" /> <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229164931460-670765424.png" alt="image" /> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cloest</span>(<span class="params">self, x, y, l, w, yaw</span>):</span></span><br><span class="line">        <span class="comment"># 原始坐标系逆时针旋转theta = yaw - 90得到坐标系(xx,yy)</span></span><br><span class="line">        theta = math.radians(yaw - <span class="number">90</span>)</span><br><span class="line">        xx = x * math.cos(theta) + y * math.sin(theta)</span><br><span class="line">        yy = -x * math.sin(theta) + y * math.cos(theta)</span><br><span class="line"></span><br><span class="line">        points = [(xx + w / <span class="number">2</span>, yy + l / <span class="number">2</span>), (xx - w / <span class="number">2</span>, yy - l / <span class="number">2</span>), (xx + w / <span class="number">2</span>, yy - l / <span class="number">2</span>), (xx - w / <span class="number">2</span>, yy + l / <span class="number">2</span>)]</span><br><span class="line">        dis = [a ** <span class="number">2</span> + b ** <span class="number">2</span> <span class="keyword">for</span> a, b <span class="keyword">in</span> points]</span><br><span class="line">        ans = points[dis.index(<span class="built_in">min</span>(dis))]</span><br><span class="line">        ans_x = ans[<span class="number">0</span>] * math.cos(theta) - ans[<span class="number">1</span>] * math.sin(theta)</span><br><span class="line">        ans_y = ans[<span class="number">0</span>] * math.sin(theta) + ans[<span class="number">1</span>] * math.cos(theta)</span><br><span class="line">        <span class="keyword">return</span> ans_x, ans_y</span><br></pre></td></tr></table></figure></p><hr /><p><em>reference</em> <em><a href="https://zhuanlan.zhihu.com/p/68617952">洛谷日报#142 计算几何初步</a></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 5</title>
      <link href="/2020/04/13/INTERVIEW%205/"/>
      <url>/2020/04/13/INTERVIEW%205/</url>
      
        <content type="html"><![CDATA[<h2 id="笔试">笔试</h2><p>150min，3题，每题100分，自己果然还是个蒟蒻呢~<br />最近状态好差，虽然做了一些题，但还是考得稀烂，大概有几点需要加强：</p><ul><li><strong>独立</strong>做题，不要一边看板子一边写代码，更不要一开始就看题解；</li><li>对之前研究过的一些<strong>专项模板</strong>，要非常熟练敲出来；</li><li>“题海”战术要继续，薄弱算法要<strong>专项练习</strong>：即使内推，也免不了笔试，保持手感很重要。</li></ul><p>先补下题：</p><h2 id="no.-1">No. 1</h2><p><img src="https://img-blog.csdnimg.cn/20200413151415498.png" alt="在这里插入图片描述" /> Pass 90% 开始觉得BFS可以做，但不知道怎么写，于是转去从<code>(x-l,y-l)</code>遍历到<code>(x+l,y+l)</code>，写了一下发现<code>l</code>会变，下一轮循环遍历范围可能增大，不知道怎么写下去，又转去DFS，因为DFS每一次递归都可以自动更改<code>l</code>的值，不知道为毛没有AC。 其实只要每一次都搜索整个图，去吃满足条件的补给品，直到<strong>剑的长度不变</strong>。<br />我TM竟然没想到用长度作为终止条件，而且暴力时候太谨慎，不敢把整个图过一遍(只有500*500的数据范围啊，蠢哭了)，自己给自己增加难度~</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> m, l;</span><br><span class="line">        cin &gt;&gt; m &gt;&gt; l;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">g</span>(m, vector&lt;<span class="keyword">int</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                cin &gt;&gt; g[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l != ans) &#123;</span><br><span class="line">            ans = l;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (g[i][j] &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">dist</span>(x, y, i, j) &lt;= l) &#123;</span><br><span class="line">                        l += g[i][j];</span><br><span class="line">                        g[i][j] = <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="no.-2">No. 2</h2><p><img src="https://img-blog.csdnimg.cn/20200413151429730.png" alt="在这里插入图片描述" /> Pass 10%<br />并查集都能写挂，真无语了。。。唉，菜是原罪<br />后来发现是自己模板有问题，结果一直T：<strong>大多数情况下T的原因不在于输入输出，而在于算法</strong>，血的教训。。。<br />回头看以为是个裸题，但是涉及到并查集的删除操作，索性直接用<code>vector&lt;int&gt;</code>存每个元素到其集合的映射关系，这样看来更是简单(一看到题就陷入树结构的并查集。。。)：<br />做题要看<strong>数据范围</strong>！！！<span class="math inline">\(10^7\)</span>普通并查集<span class="math inline">\(O(n)\)</span>可以过！！！而且题目很明显涉及到<strong>删除</strong>和<strong>求集合中元素个数</strong>的操作，在树结构的并查集中实现复杂！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UF</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UF</span>(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            setNum.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unio</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (setNum[x] != setNum[y]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; setNum.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (setNum[i] == setNum[y]) &#123;</span><br><span class="line">                    setNum[i] = setNum[x];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getOut</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">size</span>(x) != <span class="number">1</span>) &#123;</span><br><span class="line">            setNum[x] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; setNum.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (setNum[x] == setNum[i]) &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; setNum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="function">UF <span class="title">uf</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> op, x, y;</span><br><span class="line">            cin &gt;&gt; op;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">                cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">                uf.<span class="built_in">unio</span>(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                uf.<span class="built_in">getOut</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                cin &gt;&gt; x;</span><br><span class="line">                cout &lt;&lt; uf.<span class="built_in">size</span>(x) &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="no.-3">No. 3</h2><p><img src="https://img-blog.csdnimg.cn/2020041315143877.png" alt="在这里插入图片描述" /> 开始就知道暴力过不了，想着骗点分算了，枚举A的所有错排<span class="math inline">\(\{B_1,B_2...\}\)</span>，计算A与B的最小距离即可，不知道为什么WA，结果爆零。。。<br />贴下暴力代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span>  <span class="comment">// INT_MAX</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; <span class="title">w</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; w[a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[i]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = <span class="built_in">find</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), b[i]) - a.<span class="built_in">begin</span>() - i;</span><br><span class="line">                    cur += w[b[i]] * <span class="built_in">abs</span>(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>()));</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较正派的做法我有想到一点，不过当时第2题没过，心情有点烦躁，净想着骗分去了~<br />要使<code>dist</code>最小，就要求错排的每个位置移动尽可能少，使得<code>pos</code>之差尽可能小。<br />如果n是偶数，相邻位置两两互换，<code>pos</code>之差为1；<br />如果n是奇数，会多一个奇数位置的坑(有点贪心的意思)，这样必然要有一个奇数位置的数移动2次，当然选择权值最小的那个数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    cin &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">w</span><span class="params">(n)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            cin &gt;&gt; w[i];</span><br><span class="line">            sum += w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> minIdx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (w[i] &lt; w[minIdx]) &#123;</span><br><span class="line">                    minIdx = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += w[minIdx];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试">面试</h2><p>收到面试通知很意外，唯一一个机会，还是面的完爆了呢。<br />这几天一直在看面经，说实话不难，而且很多人都没手撕代码，就有了侥幸心理。。只看了面经的代码，easy的题目都没有做出来。<br />第一次真正面试中写代码，紧张情绪下与平时状态完全不一样，第一次理解错题意，也没有确认就开始写，写完后才发现搞错了。。。<br />不知道是面试官表达能力有问题，还是我理解能力有问题，从一开始的基础知识、到后来的智力题、再到编程题，五次三番误解他的意思，总之聊的很不愉快！！！面试有时候也看运气吧~<br />简单做个总结吧：</p><ul><li>回答问题、手撕代码前一定要问清楚！！！！确认函数签名等细节，还可以先描述下自己的思路；</li><li>只看面经不行，复习范围很局限，还是要系统学习、疯狂练习，平时有100%状态，面试才可能有70%状态；</li><li>多参加面试，锻炼下高压下的思路和码力，任何时候都要冷静分析。</li></ul><p>很难过了，后面应该还会再投一些公司吧。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TOP-K Problems</title>
      <link href="/2020/03/31/TOP-K%20Problems/"/>
      <url>/2020/03/31/TOP-K%20Problems/</url>
      
        <content type="html"><![CDATA[<h2 id="最小的k个数">最小的K个数</h2><ul><li>直接数组排序，取出前K个。复杂度<span class="math inline">\(O(nlogn)\)</span>。</li><li>分治<br />此题只要求出最小的K个数，并不要求这K个数有序。<br />我们可以借鉴快排中的<code>partition</code>做法，将比第K个数小的都放前面，其余都放后面，即得到答案，但是这种方法会<strong>改变原有数组</strong>：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">topKMin</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="built_in">partition</span>(nums, start, end);</span><br><span class="line">        <span class="keyword">while</span> (index != k - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                end = index - <span class="number">1</span>;</span><br><span class="line">                index = <span class="built_in">partition</span>(nums, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                start = index + <span class="number">1</span>;</span><br><span class="line">                index = <span class="built_in">partition</span>(nums, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;(<span class="built_in">begin</span>(nums), <span class="built_in">begin</span>(nums) + k);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">empty</span>() || l &lt; <span class="number">0</span> || r &gt;= nums.<span class="built_in">size</span>())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">int</span> pivotIndex = <span class="built_in">randomNum</span>(l, r);</span><br><span class="line">        <span class="built_in">swap</span>(nums[pivotIndex], nums[r]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> smaller = l - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt; r; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &lt;= nums[r]) &#123;</span><br><span class="line">                ++smaller;</span><br><span class="line">                <span class="built_in">swap</span>(nums[smaller], nums[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++smaller;</span><br><span class="line">        <span class="built_in">swap</span>(nums[smaller], nums[r]);</span><br><span class="line">        <span class="keyword">return</span> smaller;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">randomNum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  <span class="comment">// use system time as seed</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="built_in">rand</span>() % (y - x + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以得到递归关系：<span class="math inline">\(T(n)=T(n/2)+n\)</span>，由主定理可知复杂度<span class="math inline">\(O(n)\)</span>。<br />与快排不同的是：快排要处理2个子问题，故为<span class="math inline">\(T(n)=2T(n/2)+n\)</span>，复杂度<span class="math inline">\(O(nlogn)\)</span>。<br />关于复杂度，还可以用代入法证明： <span class="math display">\[T(n)=T(n/2)+n=T(n/4)+n/2+n=T(n/8)+n/4+n/2+n=...\]</span> 重复k次后： <span class="math display">\[T(n)=T(n/2^k)+n/2^{k-1}+...+n/2+n\]</span> 故：<span class="math inline">\(T(n)=n+n/2+n/4+...+1=2n+1\)</span></p><ul><li>堆/红黑树<br />主要思路是用容器存储K个数，之后不断更新：如果当前值小于容器最大值，替换最大值。<br />用最大堆作为容器，删除及插入<span class="math inline">\(O(lgk)\)</span>，故总复杂度<span class="math inline">\(O(nlgk)\)</span>：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// max heap</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">priority_queue&lt;<span class="keyword">int</span>&gt; <span class="title">topKMin</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        priority_queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = nums.<span class="built_in">begin</span>(); it != nums.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &lt; k) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(*it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (q.<span class="built_in">top</span>() &gt; * it) &#123;</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                    q.<span class="built_in">push</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然也可以使用红黑树：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// multiset</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">topKMin</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">1</span> || k &gt; nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        multiset&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt; ms;</span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="keyword">int</span>&gt;::iterator it = nums.<span class="built_in">begin</span>(); it != nums.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ms.<span class="built_in">size</span>() &lt; k) &#123;</span><br><span class="line">                ms.<span class="built_in">insert</span>(*it);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (*ms.<span class="built_in">begin</span>() &gt; * it) &#123;</span><br><span class="line">                    ms.<span class="built_in">erase</span>(ms.<span class="built_in">begin</span>());</span><br><span class="line">                    ms.<span class="built_in">insert</span>(*it);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt;(ms.<span class="built_in">begin</span>(), ms.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>之所以说这种解法适用于海量数据，是因为很多时候不能一次性把数据读入内存处理，这种解法可以从硬盘一次读一个，判断是否放入容器即可，只需要在内存中存储容器即可。</p><h2 id="最常出现的k个数">最常出现的K个数</h2><ul><li>统计出现频率，排序后取出前K个。复杂度<span class="math inline">\(O(nlgn)\)</span>。</li><li>最小堆。维护K个数，如果新数的频率大于堆顶，替换之。复杂度<span class="math inline">\(O(nlgk)\)</span>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            ++cnt[nums[i]];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : cnt) &#123;</span><br><span class="line">            q.<span class="built_in">emplace</span>(p.second, p.first);</span><br><span class="line">            <span class="keyword">if</span> (q.<span class="built_in">size</span>() &gt; k) &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k;++i) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(q.<span class="built_in">top</span>().second);</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>桶排。用很多桶记录不同频率到对应数字的映射。时间<span class="math inline">\(O(n)\)</span>，空间<span class="math inline">\(O(n)\)</span>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">topKFrequent</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> maxFre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            maxFre = <span class="built_in">max</span>(maxFre, ++cnt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        unordered_map&lt;<span class="keyword">int</span>, vector&lt;<span class="keyword">int</span>&gt;&gt; bucket;  <span class="comment">// freq -&gt; nums</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : cnt) &#123;</span><br><span class="line">            bucket[p.second].<span class="built_in">push_back</span>(p.first);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = maxFre;i &gt; <span class="number">0</span>;--i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> a : bucket[i]) &#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(a);</span><br><span class="line">                <span class="keyword">if</span>(ans.<span class="built_in">size</span>() == k) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ans;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg Dropping Puzzle</title>
      <link href="/2020/03/22/Egg%20Dropping%20Puzzle/"/>
      <url>/2020/03/22/Egg%20Dropping%20Puzzle/</url>
      
        <content type="html"><![CDATA[<h2 id="the-two-egg-problem">The Two Egg Problem</h2><p>曾经是Google的一道经典题。 题意：有一个百层高楼，鸡蛋在<span class="math inline">\(L\)</span>层及以下扔都不碎，在<span class="math inline">\(L\)</span>层以上都会碎。现在某人有<span class="math inline">\(k\)</span>个鸡蛋，问在<strong>最坏情况下</strong>，至少扔多少次(用<span class="math inline">\(m\)</span>表示)可以确定<span class="math inline">\(L\)</span>的值。 分析：先来考虑<span class="math inline">\(k=1\)</span>的情况。只有1个鸡蛋，为了得到一个确定的<span class="math inline">\(L\)</span>，只能从第一层开始，逐渐尝试增加楼层高度，因此<span class="math inline">\(m=100\)</span>时，无论<span class="math inline">\(L\)</span>的值是多少，都可以被确定。 再来考虑<span class="math inline">\(k=\infty\)</span>的情况。这种情况就变为了binary search的问题，先拿一个在50层扔，如果碎，则在25层扔；如果不碎，则在75层扔...即<span class="math inline">\(m=7\)</span>。 最后来考虑<span class="math inline">\(k=2\)</span>的情况。因为<span class="math inline">\(k=1\)</span>只能一层一层试，所以第一个鸡蛋应该尽可能缩小搜索空间，但是如果第一个鸡蛋的楼层间隔太小(比如在2层、4层...)，无疑会增加<span class="math inline">\(m\)</span>。不妨取第一个鸡蛋在10层、20层...，共10次；假如第一个在10层没碎，在20碎了，那么第二个鸡蛋可以尝试11、12...19，共9次；故<span class="math inline">\(m=19\)</span>。 上面方案的问题在于：如果临界楼层比较高，那么第二个鸡蛋的次数是确定的，但第一个就需要多试几次，总次数就会增加。 那么如何使得不论临界楼层在哪，<span class="math inline">\(m\)</span>的值都不会波动呢？ 很简单，只要第一个多扔一次，确定的范围(第二个要试的次数)减小，总次数就会均衡。 对于第一个鸡蛋，第一次在<span class="math inline">\(a\)</span>层扔，如果不碎，第二次向上增加<span class="math inline">\(a-1\)</span>层...直到最后只向上增加<span class="math inline">\(1\)</span>层：<span class="math inline">\(a+(a-1)+...+1\geq100\)</span>，故<span class="math inline">\(a\geq13.7\)</span>。 鸡蛋一：在14层、27层、39层、50层、60层、69层、77层、84层、90层、95层、99层、100层扔，共12次； 鸡蛋二：如果蛋一在14层碎了，蛋二要扔13次，共14次；如果蛋一在27层碎了，蛋二要扔12次，共14次...故<span class="math inline">\(m=14\)</span>。 ## Super Egg Problem 对于<span class="math inline">\(k=2\)</span>，我们有了一个比较好的解决方案。那么现在有<span class="math inline">\(k\)</span>个鸡蛋，楼高<span class="math inline">\(n\)</span>层，<a href="https://leetcode.com/problems/super-egg-drop/">问题</a>(记作<span class="math inline">\(m(k,n)\)</span>)又该如何解决？ <span class="math inline">\(k=1\)</span>和<span class="math inline">\(n=1\)</span>的情况比较简单： |n1|2|3|4|...| |--|--|--|--|--|--| |1|1|1|1|1| |2|2| |3|3| |...| | 那么如果我们递归地思考：任选一层<span class="math inline">\(h\)</span>扔第一个鸡蛋，无非有碎和不碎2种情况： 碎：临界楼层在1<sub>h之间，问题规模缩小为<span class="math inline">\(m(k-1,h-1)\)</span>； 不碎：临界楼层在h</sub>n之间，问题规模缩小为<span class="math inline">\(m(k,n-h)\)</span>。 所以：<span class="math inline">\(m_h(k,n)=1+max\{ m(k-1,h-1),m(k,n-h)\}\)</span>。 对于<span class="math inline">\(h\)</span>，可以采用枚举的方法，计算<span class="math inline">\(m_h(k,n)\)</span>，在其中选出一个最小的值，故问题得到解决： <span class="math display">\[m(k,n)=min\{m_h(k,n)\},h=1,2,...n\]</span> Base Case就是<span class="math inline">\(k=1\)</span>和<span class="math inline">\(n=1\)</span>。 时间复杂度<span class="math inline">\(O(KN^2)\)</span>，空间复杂度<span class="math inline">\(O(KN)\)</span>。 记忆化递归：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">memo</span>(K + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(N + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">helper</span>(K, N, memo);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(N &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[K][N]) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[K][N];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;++i) &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, <span class="number">1</span> + <span class="built_in">max</span>(<span class="built_in">superEggDrop</span>(K - <span class="number">1</span>, i - <span class="number">1</span>), <span class="built_in">superEggDrop</span>(K, N - i)));</span><br><span class="line">        &#125;</span><br><span class="line">        memo[K][N] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上述最直观的解法复杂度太高，无法通过Leetcode的数据。如何优化呢？ <span class="math inline">\(m(K,N)\)</span>表示该问题的解，如果鸡蛋数<span class="math inline">\(K\)</span>固定，随着楼层数<span class="math inline">\(N\)</span>增加，问题的解一定是增加的。 我们又把问题分解为了2个子问题<span class="math inline">\(m(k-1,h-1)\)</span>和<span class="math inline">\(m(k,n-h)\)</span>，<span class="math inline">\(m(k-1,h-1)\)</span>随<span class="math inline">\(h\)</span>单调递增，<span class="math inline">\(m(k,n-h)\)</span>单调递减(<a href="https://zhuanlan.zhihu.com/p/92288604">图源</a>)： <img src="https://img-blog.csdnimg.cn/20200319150302530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 此时<span class="math inline">\(min(max(...))\)</span>就是求中间的折点，可以使用Binary Search，时间复杂度降为<span class="math inline">\(O(KNlgN)\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">superEggDrop</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">memo</span>(K + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(N + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">helper</span>(K, N, memo);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span> K, <span class="keyword">int</span> N, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; memo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(K == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(N &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(memo[K][N]) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[K][N];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = N + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> broken = <span class="built_in">helper</span>(K - <span class="number">1</span>, m - <span class="number">1</span>, memo), noBroken = <span class="built_in">helper</span>(K, N - m, memo);</span><br><span class="line">            <span class="keyword">if</span>(broken &gt; noBroken) &#123;</span><br><span class="line">                r = m;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="number">1</span> + broken);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, <span class="number">1</span> + noBroken);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        memo[K][N] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，此题还有<span class="math inline">\(O(KN)\)</span>的做法，甚至还有一种数学做法可以达到<span class="math inline">\(O(KlgN)\)</span>的时间复杂度和<span class="math inline">\(O(1)\)</span>的空间复杂度，由于本人水平实在有限，就不再探索。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>风雨混沌 曙光难觅</title>
      <link href="/2020/03/21/%E9%A3%8E%E9%9B%A8%E6%B7%B7%E6%B2%8C%20%E6%9B%99%E5%85%89%E9%9A%BE%E8%A7%85/"/>
      <url>/2020/03/21/%E9%A3%8E%E9%9B%A8%E6%B7%B7%E6%B2%8C%20%E6%9B%99%E5%85%89%E9%9A%BE%E8%A7%85/</url>
      
        <content type="html"><![CDATA[<p>懵懵懂懂的少年，夏日刺眼的阳光，还有，操场飘飞的国旗~</p><blockquote><p>我志愿加入中国共产主义青年团</p><p>坚决拥护党的领导</p><p>遵守团的章程，执行团的决议</p><p>履行团员义务，严守团的纪律</p><p>勤奋学习，积极工作</p><p>吃苦在前，享乐在后</p><p>为共产主义事业而奋斗！</p></blockquote><p>那时的我，有着初中生独特的稚气，涉世未深，但满怀激情。</p><p>并不太理解口中的誓词，但仍然高举右拳。声音高亢洪亮，目光笃定坚毅。</p><p>虽渺小，却坚定。我相信，风雨永远阻挡不了彩虹！</p><p>可是，成长了七年之后，我却愈发难以判断这个世界的真伪！</p><p>因为我的认知已经被完全颠覆 <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200320115313972-500146240.png" alt="img" /> 一个无数青年向往的团体，千千万中国学子的梦想源地，究竟都在做些什么？</p><p><strong>或许这再也不是我熟悉的那个共青团了，永远都不是了。</strong></p><p>北京，中产，却连自己的孩子都保护不了。</p><p>祖国的花朵还不曾来得及绽放，就已烙下了深深的童年阴影。不久后，事情不了了之的时候，那些所谓的“叔叔医生、爷爷医生”会逍遥法外（如果还有法律的话），继续它们的生活，仿佛从未出现一样......可是受伤的心灵又由谁来抚慰呢？</p><p>【我有一个长长的望远镜，一直能伸到你的家里，你说什么话做什么事，我都知道。】</p><p>略显艺术的欺骗，让人恐怖、胆寒。</p><p>长长的望远镜难道不应该用来看星星吗？</p><p>事后，有人冷眼相望，有人造谣撞骗，有人疯狂洗地......</p><p>很欣慰的是：<strong>正义永远不会缺失。</strong></p><p>很多媒体人，顶着压力去探求真相；很多明星，站出来追问谴责；很多你我一样的普通人，持续关注着后续进展，尽力去捍卫孩子们的权益。</p><p>我说，很温暖，谢谢你，谢谢你们！ <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200320115322124-352552867.png" /> 前苏联总理Nikolai Rizhkov在反省苏联垮台时曾说：</p><blockquote><p>我们监守自盗，行贿受贿，无论在报纸、新闻还是在讲台上，都谎话连篇，我们一面沉溺于自己的谎言，一面为彼此佩戴奖章。而且所有人都在这么干，从上到下，从下到上！</p></blockquote><p>很失望，很愤怒。</p><p>但我想，重要的是：</p><p>在洞透人性的善恶后，我们依然渴望曙光，那是对生命的尊重！</p><p align="right">写于2017年11月29日，知乎</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Volunteer Teacher</title>
      <link href="/2020/03/20/A%20Volunteer%20Teacher/"/>
      <url>/2020/03/20/A%20Volunteer%20Teacher/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9bd7f2ca391d3f1169ea74ee97fa878ae6e0fe3fe68f95e33c84ae70cc7b0a0e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Football Memory</title>
      <link href="/2020/03/19/Football%20Memory/"/>
      <url>/2020/03/19/Football%20Memory/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6253cfbe6abff5f7ce22135cc2c42238e1820f64311d1d8fe0810b40362819d3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Senior Year</title>
      <link href="/2020/03/18/Senior%20Year/"/>
      <url>/2020/03/18/Senior%20Year/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="066cfe0b7cf7a22edbb23ee61633a35dc569920d6a8d0369767dd681ab675c89"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>High School Memory</title>
      <link href="/2020/03/17/High%20School%20Memory/"/>
      <url>/2020/03/17/High%20School%20Memory/</url>
      
        <content type="html"><![CDATA[<p>无数的回忆，却不知怎么讲起。</p><p>生命中黄金般的三年留在了那里，留在了教室、食堂，留在了操场、水房。丁香台的幽怨、风范楼的纪念……时间逝去的了无痕迹。 暮去朝来，脑海里的记忆渐成碎片，模糊，远去……可青春残存的余温却不时袭来，让人不知所措。 难吃的饭菜，打水的长队，漫长的台阶，无尽的作业，这被吐槽的一切，我该怎样留住？</p><p>恍惚的日子里，我们沐浴着初春的阳光，穿着蓝白色的校服，三三两两，去清扫校门口的垃圾，飞舞的塑料袋好像永远都跟你作对，高一的卫生红旗班总也不是我们。 刚入学的我们难脱稚气，宿舍的卧谈会不知道开到了几点，三国杀也总是通宵通宵地玩。体育课后的历史课，简直是睡觉的天堂，老师略显无奈，不过并没有人care。</p><p>二年级的教室并没有变化，我一度觉得无聊。清洁区变到了教室后面，仲夏的中午拿着笤帚，扫扫松针，偶尔会有几片落叶，倒也非常惬意呢！ 学习任务貌似重了一些，感觉大家更加熟悉和融洽了。让我印象颇深的两件事：一是教师节那天，国旗下的演讲。莫名其妙地成了要演讲的人，没见过那么大场面，所以提前一周就在准备，演讲稿不知道背了几百遍，周天的晚自习啥也没干，盯着看了两节课，手心直冒汗。第二天上台慷慨激昂地背完了稿子，也算是没给班级丢人；二是期中考试后的家长会，教室装扮着气球，彩带，音乐竟然是“爸爸去哪了”，老师，家长，学生共处一室，感觉其乐融融，真的很温馨。。。 搬出了宿舍，租房子住倒也安静。不过院里大部分都认识，还是会经常“联谊”。 之后文理分科，学业考试，有走的人，也有来的。下学期有了竞赛培训，很喜欢翘掉晚自习 ，溜出教室去听数学竞赛。</p><p>高三搬到了更靠近后花园——骊山的风范楼，体育课很方便咯。大家时间紧张，所以楼后面的空地自然成了最佳锻炼地。课间的羽毛球，足球，跳绳略显疯狂啊！ 学校要求冬天早晨跑早操，真的是感人肺腑，无语凝噎。纵然好多领导（Lu Xiang，Wang Jian）监督，还是有人去厕所或者蹲着系鞋带。。。跑完冻如狗，回到异常温暖的教室，再吃点夹馍，零食什么的，早读只能睡过去了。 相对来说，我更喜欢广播体操。悠闲的大课间，上个厕所，晃到操场，晒晒太阳，活动一下筋骨。下来时候还能聊聊天，打打闹闹，也算是“偷得浮生半日闲”了。</p><p>每次考完试，操场就变为了乐园，火爆程度超乎想象。在球场奔跑，听着风的声音，跑累了就躺下来看天，看云，看夕阳，考试的阴影一扫而光，那是我最开心的时刻之一。大家会一起玩到很晚，“下山”去吃东西。 很喜欢坐在教室靠窗的位置，呼吸几口新鲜的空气，压抑感瞬间消失，上课扭过头就是小树小花。下雪的日子还可以赏景，雪景可美了！ 贴几张喜欢的～ <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317145955582-1438830147.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150009418-1659103469.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150020999-14015772.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150030273-1471598340.png" /> 毕业之后，学校就升级成陕西省示范高中了（也算是没有辜负我们为了迎接检查，频繁打扫卫生啊）。 虽然实力有限，水平不高，经费不足，饭菜难吃（母校就是我们自己随便黑，却决不允许外人说一句闲话的神奇地方），但进步可见，未来可期！ 给帅气无敌，宛若天仙的母校再次打call～ <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150039438-994418279.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150049066-681633682.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150053530-631484450.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150059306-93407777.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150105634-1361526225.png" /> <img src="https://img2020.cnblogs.com/blog/1260581/202003/1260581-20200317150112433-1502532336.png" /> 纵观这三年，奋斗的时光恍如昨日。从学习结果的角度来说，我无疑是失败的。但论人格的成熟，收获的友谊，价值观的塑造，我又觉得自己是无比幸运的。很多老师的教诲至今仍然记忆犹新，也许会受益终身： &gt; 1，不被嘲笑的梦想不值得被实现。 &gt; 2，高考并不会决定什么，但它必定会成为你人生当中的分水岭。 &gt; 3，......</p><p>逝去的岁月没有人能抓住，不论你多么眷恋，亦或有多少遗憾，都要藏在心底，因为前路漫漫！ 以后若有人问起你的青春，你大可以掰着手指，细数学校曾经的沧桑，拾起被风吹落的故事，那是你私藏的幸福！ 写于2017年10月16日，知乎</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>士兵突击随想</title>
      <link href="/2020/03/16/%E5%A3%AB%E5%85%B5%E7%AA%81%E5%87%BB%E9%9A%8F%E6%83%B3/"/>
      <url>/2020/03/16/%E5%A3%AB%E5%85%B5%E7%AA%81%E5%87%BB%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>这部2006年上映的作品豆瓣评分9.3，时至今日仍然有人乐此不疲地讨论剧情和启发，我想称之为经典应该不算过分。 这部剧我至少完整看过3遍，随着阅历增加，对某些角色的体会也变得更深刻。 ## 许三多 许三多是幸福的。从老马、史今到袁朗，他的成长，总有贵人相助，再加上自身近乎于偏执地努力，成为“兵王”并非意外。 <strong>每个开始，总会艰难一些。</strong> 初来乍到，面对自家坦克，他举手投降，连长怒了。于是，红三连，五班。 就像初入社会，没什么朋友，周围的东西和我们格格不入，许三多的境遇大抵如此了。 那个“无数班长的坟墓，所有孬兵的天堂”，他活得很简单、很纯粹：负重跑步、整理内务，日日如此，还为连队修了条路。 <strong>无人问津的地方，你有得选择。</strong>你可以放弃，可以混日子；也可以认真，可以努力。 重回钢七连，仍然没有人相信他，除了班长，那个有过承诺的班长。 说实话，那个时候，我讨厌许三多。讨厌他的愚笨，讨厌他不争气，最讨厌的，他拖垮了史今。 史今的心思全部倾注给了许三多，那么优秀的班长，在天安门前抱头痛哭，怎叫人不心疼！ 有人说，史今给许三多打好了地基，袁朗则在地基上盖好了房子。 是的，没有史今，就不会有后来的许三多。 333个腹部绕杠，许三多开始了自己的蜕变。 七连改编，他又把“不抛弃，不放弃”诠释到了极致。 不焦虑，耐得住寂寞。 <img src="https://img-blog.csdnimg.cn/20200316141449843.png" alt="在这里插入图片描述" /> 在最绝望的情况下，在完全失去理想和希望的情况下，也会尽自己最大的努力。 失手杀掉毒贩，他也怀疑过自己，怀疑过这支部队，因为他相信人性本善，每个人都可以好好活。 不过历经波折，最终还是艰难地完成了心智的转变。 无意批评，许三多是好兵，但他绝非将才。可能与他成长的家庭有关，父亲的教育方式让他绝对服从、勇于认错，但他缺乏思考。 没有思考，就没有大局观；没有大局观，自然不能指挥别人。 ## 吴哲 吴哲我比较喜欢，尽管被塑造得稍稍理想了些。 年少有为，技术出众。 他对自己有着清醒的认识，对这个世界同样如此。 一如演习后他对袁朗所说：</p><blockquote><p>我成为不了他，而他亦取代不了我。</p></blockquote><p>不会畏惧权威，永远坚持理想。 当他发现现实环境与期望之所相距甚远，他会质疑、会抗议，会去维护自己的理想。 理想让他仰望星空，“平常心”使他脚踏实地。 <img src="https://img-blog.csdnimg.cn/20200316141511696.png" alt="在这里插入图片描述" /> 附上袁朗的点评</p><blockquote><p>我不会践踏你们的理想和希望，我不能，因为那是我最珍惜的部分，也是我选择你们的第一要素，我只是想，你们在没有这些东西的情况下也能生存，在更加真实和残酷的环境里还能生存。 我敬佩一位老军人，他说他费尽心血却不敢妄谈胜利，他只想他的部下能在战场上少死几个，他说这是军人的人道。 这个人略显轻浮，但心理稳重。坚持自己的原则，充满希望和乐观。重要的是，他能跟许三多这样的兵交朋友，这一点，就不会毁于他很容易产生的优越感。 ## 袁朗 最完美的人，也是无数人想成为的人。 他似乎总是站在上帝视角，洞悉一切，指点迷津。 军事素养拔尖，一举枪，便打掉了成才的狙击梦。 有能力、有思想，也有情义。 老A选拔的最后，伍六一放弃，我明明看到了袁朗强忍的泪水。 许三多决定复员，他并不是强行挽留。给他钱，给他假，给他自由，我想，这么做，他心里是有底的。 演习评估的剧情，异常精彩。袁朗手术刀般精准地评价了每个人，他看得透他们。 “不抛弃，不放弃”，他理解的深刻得多。正因为如此，他给了成才第二次机会；也正因为如此，才有了许三多坠落后，他对成才说的话：</p></blockquote><blockquote><p>百万大军数年心血，人走人留，抛家舍业，一切数据和非数据的结果都要在这几天检验，最后得不出一个公平的结果，因为我的战士要在战场上和他的朋友重拾友谊。 你开始珍惜，可你真懂珍惜了吗？不抛弃，不放弃，你倒记住了，你也这样告诉许三多，那么先想想，做到这六个字的人抛弃了什么，放弃了什么。想吧，现在。</p></blockquote><p>初次看这段，我也一脸懵逼。 后来才知，许三多为了胜利付出了鲜血，他创造的机会才是真正值得珍惜的，抓住机会获取胜利、为军队改革提供经验，远比立刻抢救队友意义重大的多。 他循循善诱，告诉成才一个指挥官应该做什么，告诉他战场上应该怎样取舍。 袁朗说自己年轻时最像成才，比吴哲更专心，比成才更知道自己想要什么。 我想，袁朗最终也算是给自己找到了接班人吧。 <img src="https://img-blog.csdnimg.cn/20200316140043328.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/2020031614005371.png" alt="在这里插入图片描述" /> ## 成才 相比之下，成才的路的确坎坷的多。 经历了荣光，也熬过了低谷，最后做到了出众。 这个人物塑造地很真实，他会为了个人利益抛弃战友，但也会在需要理智时做出正确选择，而许三多感情用事更多一些，这在战场上是致命的，尤其对于指挥官而言。 <img src="https://img-blog.csdnimg.cn/202003161416111.png" alt="在这里插入图片描述" /> 袁朗曾经对他寄予厚望，但演习后一切似乎又戛然而止：</p><blockquote><p>你老把一切当成你的对立，总想征服一切，费了这么大的力，我们只想在你们没有战争的时候，就经历第一场战争。战争中伤亡最重的总是新兵，因为没有心理经历，没有适应时间。 理由你太见外，任何个人和团体很难在你的心里占到一席之地。你很活跃，也很有能力，但你很封闭，你总是在自己的世界里，想自己的，做自己的。成才，我们这伙人不只是为了对抗，你的战友，甚至你的敌人，需要你去理解、融洽和经历。 <strong>你经历的每个地方、每个人、每件事，都需要你付出时间和生命，可你从来没付出感情，你总是冷冰冰的把它们扔掉，那你的努力是为了什么？为一个结果虚耗人生？</strong> 你该想的不是怎么成为一个特种兵，是善待自己做好普通一兵。 七连只是你的一个过路的地方，如果再有更好的去处，这儿也是你过路的地方，我们不敢跟这样的战友一起上战场。 我对你很失望，我一直在想，这么一个优秀的兵，为什么不能把我们当成他的战友。从那天起我开始对你失望，你们是团队的核心、精神、唯一的财富，其它都是虚的，我无法只看你们的表现，我更看重的是人。 我终于发现这世界上还有你在意的人，可这并不能说明你就学会了珍惜。</p></blockquote><p>很多时候，觉得世界并非纯粹的黑白，每个人的选择，也不能简单地用对错衡量。 第一次收看的时候，我十分讨厌这个家伙：自私、虚伪、圆滑，为了成绩不顾一切。他被淘汰出局时，观众看得很解气。作为对比，许三多单纯、团结、向上，虽然早期经历挫折，但后期军旅之路愈发风顺，这也是观众喜闻乐见的情节。 但随年岁增长，我们会发现许三多这样的人几乎不存在，而早期的成才则比比皆是。 能从五班重新走回老A，大多数人看到了他超乎寻常的冷静和神乎其神的枪法，却少有人关心他在五班的日子是怎么渡过的。要知道：从山峰跌落，要远比在平地上摔倒疼的多。唯一关心他的只有许三多（有这样的朋友，真是不知道交到什么好运气了）：</p><blockquote><p>你说他逃避了你设计的经历，这个你在意，可他真实经历了什么，你根本就不在意。你设计的几个小时，难道比他过的这段日子还要难吗？你要是去过五班就不会这样。</p></blockquote><p>后来他说自己只是草原上一个跑丢了的兵。 草原五班的这段经历弥足珍贵，成才学着知足常乐、学着善待别人，他真的后悔了。 浴火重生，他真该感谢袁朗，让他重新起跑，而且跑得不算太晚。 最后的演习，很显然，他唯一的机会了。 这次没有让袁朗失望：</p><blockquote><p>你像个指挥员开始思考问题了。 吴哲领路，我不在的时候成才领队。</p></blockquote><p>事实上，这就是对成才的肯定。 袁朗故意暴露，一是掩护行动，二可能也想培养成才吧。</p><blockquote><p>你的路还很长，比许三多要长的多，同时你的迷茫要比他多得多，如果这是你的路，你愿意来老A吗？</p></blockquote><p>成才可算成才了~ 写于2018年8月28日，知乎</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Longest XXX</title>
      <link href="/2020/03/11/Longest%20XXX/"/>
      <url>/2020/03/11/Longest%20XXX/</url>
      
        <content type="html"><![CDATA[<h2 id="longest-common-substring">Longest Common Substring</h2><ul><li>Brute Force<br />遍历<code>a</code>和<code>b</code>所有位置的组合，向后延伸，直到遇到两个不同的字符，复杂度是<span class="math inline">\(n^3\)</span>级别。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 返回所有结果</span></span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">longestCommonSubstring</span><span class="params">(string&amp; a, string&amp; b)</span> </span>&#123;</span><br><span class="line">        vector&lt;string&gt; ans;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; b.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                string cur;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = i, n = j; m &lt; a.<span class="built_in">size</span>() &amp;&amp; n &lt; b.<span class="built_in">size</span>(); ++m, ++n) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a[m] != b[n]) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cur += a[m];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.<span class="built_in">size</span>() &amp;&amp; cur.<span class="built_in">size</span>() &gt;= maxLen) &#123;</span><br><span class="line">                    maxLen = cur.<span class="built_in">size</span>();</span><br><span class="line">                    ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>DP<br />暴力解有很多重复计算：比如以<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>为起点去向后延伸，我们可能需要比较<span class="math inline">\(i+1\)</span>和<span class="math inline">\(j+1\)</span>、<span class="math inline">\(i+2\)</span>和<span class="math inline">\(j+2\)</span>...而以<span class="math inline">\(i+1\)</span>和<span class="math inline">\(j+1\)</span>为起点时，仍然要比较<span class="math inline">\(i+2\)</span>和<span class="math inline">\(j+2\)</span>，<strong>重叠子问题</strong>给动态规划带来了可能。<br />暴力做法是将每个<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>作为起点，现在我们考虑将<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>作为终点，令<span class="math inline">\(L(i,j)\)</span>表示text1[0...i]和text2[0...j]中的最长子串的长度（不是非要以<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>作为结尾）： <span class="math display">\[L(i,j)=\begin{cases}1+L(i-1,j-1)&amp; \text{a[i]=b[j]}\\0&amp; \text{a[i]!=b[j]}\end{cases}\]</span> 为了简便，假设下标从1开始，那么边界条件：<span class="math inline">\(L(0,j)=0,L(i,0)=0\)</span>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(string&amp; a, string&amp; b)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">L</span>(<span class="number">1</span> + a.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> + b.<span class="built_in">size</span>(), <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= b.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i - <span class="number">1</span>] == b[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    L[i][j] = <span class="number">1</span> + L[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    L[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, L[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>显然时间降为<span class="math inline">\(O(n^2)\)</span>，空间升为<span class="math inline">\(O(n^2)\)</span>。仔细观察，计算<span class="math inline">\(L(i,j)\)</span>只需要左上方<span class="math inline">\(L(i-1,j-1)\)</span>的信息，所以我们按照斜线方向计算，可以将空间优化到<span class="math inline">\(O(1)\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubstring</span><span class="params">(string&amp; a, string&amp; b)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// from the up-right corner</span></span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, col = b.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (row &lt; a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">int</span> curLen = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = row, j = col; i &lt; a.<span class="built_in">size</span>() &amp;&amp; j &lt; b.<span class="built_in">size</span>(); ++i, ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a[i] == b[j]) &#123;</span><br><span class="line">                    ++curLen;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    curLen = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                maxLen = <span class="built_in">max</span>(maxLen, curLen);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (col &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                --col;  <span class="comment">// 斜线左移</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ++row;   <span class="comment">// 斜线下移</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(TODO)输出所有的最长公共子串</p><h2 id="longest-common-subsequence">Longest Common Subsequence</h2><ul><li>Brute Force<br />找到<code>a</code>的所有子序列，判断是否是<code>b</code>的子序列，指数级复杂度，也就没有写出来的必要了。</li><li>DP<br />重叠子问题很明显，而且LCS具有最优子结构，令<span class="math inline">\(L(i,j)\)</span>表示text1[0...i]和text2[0...j]的LCS长度（不是非要以<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>作为结尾）： <span class="math display">\[L(i,j)=\begin{cases}1+L(i-1,j-1)&amp; \text{a[i]=b[j]}\\max\{L(i-1,j),L(i,j-1)\}&amp; \text{a[i]!=b[j]}\end{cases}\]</span> 为了简便，假设下标从1开始，那么边界条件：<span class="math inline">\(L(0,j)=0,L(i,0)=0\)</span>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> m = text1.<span class="built_in">size</span>(), n = text2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">L</span>(m + <span class="number">1</span>, vector&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    L[i][j] = <span class="number">1</span> + L[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    L[i][j] = <span class="built_in">max</span>(L[i - <span class="number">1</span>][j], L[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, L[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间和空间都是<span class="math inline">\(O(mn)\)</span>。类似的，<span class="math inline">\(L(i,j)\)</span>依赖于左上角<span class="math inline">\(L(i-1,j-1)\)</span>、左边<span class="math inline">\(L(i,j-1)\)</span>、上边<span class="math inline">\(L(i-1,j)\)</span>，可以只存储上一行和当前行的<span class="math inline">\(L\)</span>。进一步考虑：可以只存储当前行的<span class="math inline">\(L\)</span>，外加一个变量<span class="math inline">\(pre\)</span>存储左上角<span class="math inline">\(L(i-1,j-1)\)</span>，空间可以优化到<span class="math inline">\(O(min(m,n))\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> m = text1.<span class="built_in">size</span>(), n = text2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m &lt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">longestCommonSubsequence</span>(text2, text1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">curRow</span><span class="params">(n + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= m;++i) &#123;</span><br><span class="line">            pre = curRow[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= n;++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = curRow[j];</span><br><span class="line">                <span class="keyword">if</span>(text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                    curRow[j] = <span class="number">1</span> + pre;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    curRow[j] = <span class="built_in">max</span>(curRow[j], curRow[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, curRow[j]);</span><br><span class="line">                pre = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(TODO)输出所有的最长公共子串</p><h2 id="longest-increasing-subsequence">Longest Increasing Subsequence</h2><ul><li>DP<br /><span class="math inline">\(dp[i]\)</span>表示从左向右扫描直到以a[i]元素结尾的序列所形成的LIS的长度，且子序列包含a[i]： <span class="math display">\[dp[i]=max\{dp[i],1+dp[j]\}, 0\leq j&lt;i,a[i]&gt;a[j]\]</span></li></ul><p>最终答案即是<span class="math inline">\(dp\)</span>数组的最大值：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!nums.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(nums.size(), <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; nums.<span class="built_in">size</span>();++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> curMax = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; i;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    curMax = <span class="built_in">max</span>(curMax, dp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = <span class="number">1</span> + curMax;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间<span class="math inline">\(O(n^2)\)</span>，空间<span class="math inline">\(O(n)\)</span>。</p><ul><li>DP+Binary Search<br />遍历数组的过程中，不停填充<span class="math inline">\(dp\)</span>数组，维护<span class="math inline">\(dp\)</span>数组使得其存储递增序列：<br />如果<span class="math inline">\(nums[i]&lt;dp[0]\)</span>，更新<span class="math inline">\(dp[0]\)</span>；<br />如果<span class="math inline">\(nums[i]&gt;dp[len]\)</span>，<span class="math inline">\(++len\)</span>，并且存入<span class="math inline">\(nums[i]\)</span>；<br />如果<span class="math inline">\(nums[i]\)</span>介于<span class="math inline">\(dp\)</span>中间，就二分查找<span class="math inline">\(nums[i]\)</span>的位置，并更新相应的<span class="math inline">\(dp\)</span>值。<br />举例来说，<span class="math inline">\(nums=[0,8,4,12,2]\)</span>，<span class="math inline">\(dp\)</span>数组：<br /><span class="math inline">\([0]\)</span><br /><span class="math inline">\([0,8]\)</span><br /><span class="math inline">\([0,4]\)</span><br /><span class="math inline">\([0,4,12]\)</span><br /><span class="math inline">\([0,2,12]\)</span><br />虽然<span class="math inline">\(dp\)</span>数组最终存储的不是LIS，但长度确是LIS的长度：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == n)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n;++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; dp[<span class="number">0</span>]) &#123;</span><br><span class="line">                dp[<span class="number">0</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i] &gt; dp[len]) &#123;</span><br><span class="line">                dp[++len] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> index = <span class="built_in">biSearch</span>(dp, <span class="number">0</span>, len, nums[i]);</span><br><span class="line">                dp[index] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[m] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> m;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target &gt; nums[m]) &#123;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                r = m;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间<span class="math inline">\(O(nlgn)\)</span>，空间<span class="math inline">\(O(n)\)</span>。</p><h2 id="longest-palindromic-substring">Longest Palindromic Substring</h2><ul><li>Brute Force<br />枚举每个子串的起始和结束位置，判断是否回文。时间<span class="math inline">\(O(n^3)\)</span>，空间<span class="math inline">\(O(1)\)</span>。</li><li>DP<br />假设输入<code>ababa</code>，如果我们已经判断了<code>bab</code>是回文的，那么<code>ababa</code>就不需要再扫描一遍，因为两端都是<code>a</code>。 所以一个很直观的动规： 令<span class="math inline">\(dp(i,j)\)</span>去<strong>记忆</strong><span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>之间的串是否回文，那么转移方程： <span class="math display">\[dp(i,j)=dp(i+1,j-1)\&amp;\&amp;s[i]=s[j]\]</span> 边界条件<span class="math inline">\(dp(i,i)=true,dp(i,i+1)=(s[i]=s[i+1])\)</span>：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 填充方向：由边界条件dp(i,i)向其他地方扩展，只需要填充j&gt;i的三角形部分</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">bool</span>&gt;&gt; <span class="built_in">dp</span>(s.<span class="built_in">length</span>() + <span class="number">1</span>, vector&lt;<span class="keyword">bool</span>&gt;(s.<span class="built_in">length</span>() + <span class="number">1</span>, <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; s.<span class="built_in">length</span>() - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][i + <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                    start = i;</span><br><span class="line">                    end = i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][i + <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; s.<span class="built_in">length</span>(); ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == s[j]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span> (dp[i][j] &amp;&amp; maxLen &lt; j - i + <span class="number">1</span>) &#123;</span><br><span class="line">                        start = i;</span><br><span class="line">                        end = j;</span><br><span class="line">                        maxLen = end - start + <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间<span class="math inline">\(O(n^2)\)</span>，空间<span class="math inline">\(O(n^2)\)</span>。 - Expand Around Center<br />回文串都是镜像对称的，可以遍历整个串，从当前位置向两边延伸，直到遇到不相等的字母。这里要考虑字符串长度的奇偶：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span> (!n)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = <span class="built_in">expandCenter</span>(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = <span class="built_in">expandCenter</span>(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = <span class="built_in">max</span>(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start + <span class="number">1</span>) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start, end - start + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">expandCenter</span><span class="params">(string s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; end &lt; s.<span class="built_in">length</span>() &amp;&amp; s[start] == s[end]) &#123;</span><br><span class="line">            --start;</span><br><span class="line">            ++end;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> end - start - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间<span class="math inline">\(O(n^2)\)</span>，空间<span class="math inline">\(O(1)\)</span>。</p><ul><li>Manacher's Algorithm（待填）<br />时间<span class="math inline">\(O(n)\)</span>。</li></ul><h2 id="longest-palindromic-subsequence">Longest Palindromic Subsequence</h2><ul><li>DP<br />令<span class="math inline">\(dp(i,j)\)</span>表示介于<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>间的LPS的长度，那么状态转移方程： <span class="math display">\[dp(i,j)=\begin{cases}2+dp(i+1,j-1)&amp; \text{s[i]=s[j]}\\max\{dp(i+1,j),dp(i,j-1)\}&amp; \text{s[i]$\neq$s[j]}\end{cases}\]</span></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(n, vector&lt;<span class="keyword">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt; n;++j) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间<span class="math inline">\(O(n^2)\)</span>，空间<span class="math inline">\(O(n^2)\)</span>。<br />同样，空间可以优化到<span class="math inline">\(O(n)\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>, pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>;i &gt;= <span class="number">0</span>;--i) &#123;</span><br><span class="line">            pre = dp[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt; n;++j) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = dp[j];</span><br><span class="line">                <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">                    dp[j] = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(s[i] == s[j]) &#123;</span><br><span class="line">                    dp[j] = pre + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j] = <span class="built_in">max</span>(dp[j - <span class="number">1</span>], dp[j]);</span><br><span class="line">                &#125;</span><br><span class="line">                pre = tmp;</span><br><span class="line">                ans = <span class="built_in">max</span>(ans, dp[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oliver Twist</title>
      <link href="/2020/03/07/Oliver%20Twist/"/>
      <url>/2020/03/07/Oliver%20Twist/</url>
      
        <content type="html"><![CDATA[<p>对于济贫院那些绅士们而言，贫民好吃懒做、贪得无厌。他们消耗的食物即是对教区最大的威胁。</p><p>绅士们的利益得不到满足时，孤儿们只能被驱之而后快，甚至被“加价出售”。</p><blockquote><p>然而，眼泪这种东西根本无法触及Bumble先生的灵魂，他的心是防水的。</p></blockquote><p>小Oliver被卖到棺材店做学徒，受尽欺凌，却从未忘记反抗。 <img src="https://img-blog.csdnimg.cn/2020030720431780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="Oliver Twist" /> 逃离了魔窟，迎来的并非光明，而是欺骗。</p><p>骗他少不更事，骗他无依无靠，差点把他骗成了小偷。</p><blockquote><p>与其说这是白昼的诞生，不如说是黑夜的死亡。</p></blockquote><p>全书随处可见反讽口吻，英国的很多社会问题跃然纸上。</p><p>Oliver很幸运，Brownlow先生收留了他，照顾他，让他拥有了第一段短暂而又美妙的时光——小孩子应得的时光。</p><p>可是那种社会，善总是被恶击败。</p><p>无奈，重入贼巢。</p><blockquote><p>诡计多端的老犹太已经使这孩子误入歧途，他用孤独与忧郁去熏陶奥利弗的心，让他感到在这样一个阴森凄凉的地方，无论与谁为伍都比独自一人沉浸在忧愁苦恼中好受一些，他现在正将毒汁缓慢地注入Oliver的灵魂，企图熏染他，将那颗心变黑，永远改变它的颜色。</p></blockquote><p>他曾寄希望于Nancy，而Nancy亦没有辜负他。</p><p>先是保护他免遭毒打，后又不顾危险，报信给Brownlow先生。</p><p>幸运女神再一次光顾了小Oliver，枪伤让他与死神擦肩而过，来到希望的田野。</p><p>就这样开始了第二段毫无忧虑的时光。</p><blockquote><p>在睡梦中的孩子发出微笑，彷佛这些怜悯的表示唤醒了某种令人愉快的梦境，那里有他从未领略过的爱心与温情。有的时候，一支亲切的乐曲，一处幽静地方的潺潺水声，一朵花的芳香，甚而只是说出一个熟悉的字眼，会突然唤起一些模糊的记忆，那是一些不曾出现过的场景，它们会像微风一样飘散，彷佛刹那间唤醒了某种久以别离的、比较快乐的往事，而这种记忆单靠苦思冥想是怎么也想不起来的。</p></blockquote><p>Nancy是悲惨的，明明有机会逃离苦海，却因为不合时宜的爱情（也许是爱情吧）葬送了自己。</p><blockquote><p>她觉得自己积重难返，难以抛弃过去的生活，即使她讨厌它。</p></blockquote><p>天真地以为Bill会和她一起去过一些“干净”的日子。</p><p>恶的外表下隐藏着善，这无疑是可悲的，令人唏嘘的。</p><p>或许她的死亡是在救赎过去犯下的罪，是一种解脱，也是她很好的归宿了吧。</p><p>善恶终有报。</p><p>Bill杀人后疯狂地救火，不过只是掩饰自己犯下的罪行、求得一丝可怜的心理安慰而已，繁忙过后，留给他的只有煎熬和无尽的苦痛。</p><p>至于Fagin，那个恶魔</p><blockquote><p>这是他的最后一夜，一种意识到自己已经濒临绝境的幻灭感正向他那晦暗的灵魂全力袭来。</p></blockquote><p>抠抠索索一辈子，绞刑架确是他最终的栖息地。</p><p>如书中所言，</p><blockquote><p>在生活中我们不是置身事外的观众，而是粉墨登场的演员。</p></blockquote><p>降生后的角色是上帝赋予的，我们无能为力。</p><p>能做的，只是像小Oliver一样，永怀希望与感恩。</p><p>写于2018年8月26日，知乎</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Knapsack Problem</title>
      <link href="/2020/02/23/Knapsack%20Problem/"/>
      <url>/2020/02/23/Knapsack%20Problem/</url>
      
        <content type="html"><![CDATA[<figure><img src="https://img-blog.csdnimg.cn/824d4e63a6e34090847dac97a84a3806.png" alt="背包问题分类" /><figcaption>背包问题分类</figcaption></figure><h2 id="背包">0-1背包</h2><ul><li>描述：N件物品，第i件的重量是w[i]，价值v[i]。有一个容量为W的背包，求将哪些物品放入背包可使总价值最大。每件物品可以用<strong>0或1次</strong>。</li><li>分析：根据题意，可以写出表达式： <span class="math display">\[max(\Sigma v_ix_i), s.t. \Sigma w_ix_i&lt;=W, x_i\in\{0, 1\}\]</span> 最直接的思路就是：对于每件物品，都有yes/no两种选择，尝试所有的组合，记录每个组合的价值，选出满足重量条件的最大价值。时间复杂度<span class="math inline">\(O(2^n)\)</span>，空间复杂度<span class="math inline">\(O(n)\)</span>。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backtracking</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">knapsack01</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, vector&lt;<span class="keyword">int</span>&gt;&amp; w, vector&lt;<span class="keyword">int</span>&gt;&amp; v, string&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="function">string <span class="title">cur</span><span class="params">(w.size(), <span class="string">&#x27;0&#x27;</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, W, w, v, cur, ans);</span><br><span class="line">        <span class="keyword">return</span> maxV;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> curW, <span class="keyword">int</span> curV, <span class="keyword">int</span> W, vector&lt;<span class="keyword">int</span>&gt;&amp; w, vector&lt;<span class="keyword">int</span>&gt;&amp; v, string&amp; cur, string&amp; ans)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 到达叶子结点，得到一个解，所以在这里更改最终结果</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt;= w.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxV &lt; curV) &#123;</span><br><span class="line">                ans.<span class="built_in">assign</span>(cur);</span><br><span class="line">                maxV = curV;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// as for goods s, two choices</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            cur[s] = i + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (curW + i * w[s] &lt;= W) &#123;</span><br><span class="line">                curW += i * w[s];</span><br><span class="line">                curV += i * v[s];</span><br><span class="line">                <span class="built_in">dfs</span>(s + <span class="number">1</span>, curW, curV, W, w, v, cur, ans);</span><br><span class="line">                curW -= i * w[s];</span><br><span class="line">                curV -= i * v[s];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxV = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的程序可以通过剪枝进行优化，下来换一种思路：<br />令<code>dp[i][j]</code>表示有前i件物品可选，背包容量为j时具有的最大价值，问题转化为求<code>dp[N][0...W]</code>的最大值，边界条件： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一列全0，第一行取决于物品0体积与背包大小关系</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(w.<span class="built_in">size</span>(), vector&lt;<span class="keyword">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = w[<span class="number">0</span>]; j &lt;= W; ++j) &#123;</span><br><span class="line">    dp[<span class="number">0</span>][j] = v[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 假设3件物品，<span class="math inline">\(w=\{1,1,2\}\)</span>，<span class="math inline">\(v=\{1,2,4\}\)</span>，<span class="math inline">\(W=2\)</span>，先用递归形式分析，每件物品只有yes/no两种状态： <img src="https://img-blog.csdnimg.cn/20200223185930802.png" alt="在这里插入图片描述" /> 可以看到，求解过程中有很多<strong>重叠子问题</strong>，故可以采用记忆化递归求解，时间复杂度即为子问题数量<span class="math inline">\(O(NW)\)</span>，空间复杂度<span class="math inline">\(O(NW)\)</span>。<br />记忆化递归可以写成自底向上的动态规划，状态转移方程： <span class="math display">\[dp[i][j]=max\{dp[i-1][j], v[i]+dp[i-1][j-w[i]]\}\]</span> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp-&gt;space complexity O(NW)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">knapsack01</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, vector&lt;<span class="keyword">int</span>&gt;&amp; w, vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N = w.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(N, vector&lt;<span class="keyword">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = w[<span class="number">0</span>]; j &lt;= W; ++j) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = v[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; w[i]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], v[i] + dp[i - <span class="number">1</span>][j - w[i]]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[N - <span class="number">1</span>][W];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 前i件物品只依赖于前i-1件物品，<span class="math inline">\(dp\)</span>数组的更新方向为： <img src="https://img-blog.csdnimg.cn/20200223200829966.png" alt="在这里插入图片描述" /><br />所以可以使用滚动数组降低空间复杂度为<span class="math inline">\(O(W)\)</span>： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dp-&gt;space complexity O(W)</span></span><br><span class="line"><span class="comment">// method 1: use temp array</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">knapsack01</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, vector&lt;<span class="keyword">int</span>&gt;&amp; w, vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N = w.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">temp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = w[i - <span class="number">1</span>]; j &lt;= W; ++j) &#123;</span><br><span class="line">                temp[j] = <span class="built_in">max</span>(temp[j], v[i - <span class="number">1</span>] + dp[j - w[i - <span class="number">1</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">            dp.<span class="built_in">swap</span>(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method 2: use scrolling array</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">knapsack01</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">knapsack</span><span class="params">(<span class="keyword">int</span> W, vector&lt;<span class="keyword">int</span>&gt;&amp; w, vector&lt;<span class="keyword">int</span>&gt;&amp; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N = w.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = w[<span class="number">0</span>]; j &lt;= W; ++j) &#123;</span><br><span class="line">            dp[j] = v[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">            <span class="comment">// iterate j reversely, avoid dp override</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = W; j &gt;= w[i]; --j) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], v[i] + dp[j - w[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[W];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 01背包有一些细节需要注意：</p><ul><li>两个for循环的先后：核心在于当前值取决于其正上方的值和上一行前面的某个值，二维中行优先和列优先都可以保证更新当前值之前其需要的两个值已经更新，故可以颠倒；一维中列优先是不可以的，因为上一行前面的某个值会被覆盖</li><li>二维和一维j的遍历顺序：二维正反都可以；一维只能反向，否则会被覆盖</li></ul><p>有一道比较类似的题目<a href="https://leetcode.com/problems/target-sum/">Target Sum</a>，分析下此题顺便再练习下DP的套路。<br />题意是这样：给定一些<strong>非负</strong>数字，可以给每个数字添上<code>+</code>或<code>-</code>号，使得添加后的所有数字之和等于<code>S</code>。数组大小不超过20，<code>S</code>大小不超过1000。<br />我第一次做感觉这是个纯暴力DFS，枚举所有可能，复杂度<span class="math inline">\(O(2^n)\)</span>。 这道题和0/1背包不同之处在于：数组里的所有数字都必须用到。</p><p>接着我们试着做一些优化：<br />换种方式看问题：在这堆数字中选一些作为正数集合<span class="math inline">\(P\)</span>，剩下作为负数集合<span class="math inline">\(N\)</span>，那么有<span class="math inline">\(sum(P)-sum(N)=S\)</span>，<span class="math inline">\(sum(P)+sum(N)+sum(P)-sum(N)=sum(nums)+S=2*sum(P)\)</span>，故<span class="math inline">\(sum(P)=(sum(nums)+S)/2\)</span>，同时注意到<span class="math inline">\(sum(nums)+S\)</span>是偶数。<br />所以问题转化为在数组中寻找一些数作为正数，使得这些数的和为<span class="math inline">\((sum(nums)+S)/2\)</span>，求这样的组合有多少种。这就转化为了0/1背包问题。</p><p>我们用<span class="math inline">\(dp(i,j)\)</span>表示从前i个数中选出和为j的方案数目，有状态转移方程<span class="math inline">\(dp(i,j)=dp(i-1,j)+dp(i-1,j-nums[i])\)</span>，如果纯粹暴力递归，有很多重叠子问题（类似背包问题的那个图）。Base Case就是，<span class="math inline">\(dp(0,0)=1\)</span>，即选出和为0的方案，就是每个都不选一种；否则当<code>i = 0 || j &lt; 0</code>时，<span class="math inline">\(dp(i,j)=0\)</span>。</p><p>所以先用记忆化搜索：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)</span><br><span class="line">            sum += num;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">memo</span>(<span class="number">21</span>, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1001</span>, <span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> sum &lt; S || (sum + S) &amp; <span class="number">1</span> ? <span class="number">0</span> : <span class="built_in">cnt</span>(nums, memo, nums.<span class="built_in">size</span>(), (sum + S) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cnt</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp;memo, <span class="keyword">int</span> idx, <span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!idx &amp;&amp; !sum)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!idx || sum &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (memo[idx][sum] &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> memo[idx][sum];</span><br><span class="line">        memo[idx][sum] = <span class="built_in">cnt</span>(nums, memo, idx - <span class="number">1</span>, sum) + <span class="built_in">cnt</span>(nums, memo, idx - <span class="number">1</span>, sum - nums[idx - <span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> memo[idx][sum];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>改一下Bottom-Up的形式，更新方向从左到右、从上到下，注意这里j不能从<code>nums[i - 1]</code>开始，否则j的前半部分无法更新到正确的值，后面如果用到就是错误的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums)</span><br><span class="line">            sum += num;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; S || (sum + S) &amp; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">dp</span>(<span class="number">21</span>, vector&lt;<span class="keyword">int</span>&gt;(<span class="number">1001</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="comment">// 不能for (int j = nums[i - 1]; j &lt;= (sum + S) &gt;&gt; 1; ++j)</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= (sum + S) &gt;&gt; <span class="number">1</span>; ++j) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] += dp[i - <span class="number">1</span>][j - nums[i - <span class="number">1</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.<span class="built_in">size</span>()][(sum + S) &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后来优化空间：<span class="math inline">\(dp(i,j)\)</span>取决于<span class="math inline">\(dp(i-1,j)\)</span>和<span class="math inline">\(dp(i-1,j-num[i-1])\)</span>，所以只要用一个一维数组<span class="math inline">\(dp(j)\)</span>记录上一行的所有值即可，这里必须反向更新，因为如果正向，上一行的j-num[i-1]位置已经被新值覆盖，计算结果出错。如果反向：上一行需要的2个位置都没有被覆盖：<span class="math inline">\(dp(j)=dp(j)+dp(j-nums[i-1])\)</span>。<br />初始时候(0,0)位置为1，即<span class="math inline">\(dp(0)=1\)</span>，以后<span class="math inline">\(dp(0)\)</span>会不断更新。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum &lt; S || (S + sum) &amp; <span class="number">1</span> ? <span class="number">0</span> : <span class="built_in">numSubsetSum</span>(nums, (S + sum) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numSubsetSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(target + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">            <span class="comment">/* 等价写法</span></span><br><span class="line"><span class="comment">        for (int j = target; j &gt;= 0; --j)&#123;</span></span><br><span class="line"><span class="comment">if (j - nums[i] &gt;= 0)</span></span><br><span class="line"><span class="comment">dp[j] += dp[j - nums[i]];</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">            <span class="comment">// 只有j&gt;=nums[i]才更新，否则沿用上一行的值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = target; j &gt;= nums[i]; --j) &#123;</span><br><span class="line">                dp[j] += dp[j - nums[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="完全背包">完全背包</h2><ul><li>每件物品可以使用<strong>任意多次</strong>。</li><li>一个Naive的思路： 虽然题目描述每件物品可以使用任意多次，但实际上由于W的限制，每件物品最多使用<span class="math inline">\(\lfloor W/w[i] \rfloor\)</span>次。这样我们可以将每件物品拆为<span class="math inline">\(\lfloor W/w[i] \rfloor\)</span>件，问题就转化为了0-1背包。子问题仍然有NW个，但是求解每个子问题需要<span class="math inline">\(O(W/w[i])\)</span>，总的时间复杂度<span class="math inline">\(O(\Sigma (W/w[i])*W)\)</span>，也即<span class="math inline">\(O(W*拆后物品件数)\)</span>。</li><li>更tricky的做法：W无法改变，只能改变<strong>拆后物品件数</strong>。这里可以使用二进制的思想：假设我们某件物品可以使用<span class="math inline">\(10=8+2\)</span>次，原本需要复制出10件，现在只要复制出2件，价值和重量是原来的8倍和2倍，这样就降低了复杂度。</li><li>完全背包有<span class="math inline">\(O(NW)\)</span>的算法</li></ul><p><span class="math inline">\(dp(i,j)=max\{dp(i-1,j-kw[i])+kv[i]\},0\leq kw[i]\leq j\)</span> 为了得到更加简洁的表示，考虑： <span class="math display">\[dp(i,j-w[i])=max\{dp(i-1,j-w[i]-aw[i])+av[i]\},0\leq aw[i]\leq j-w[i],a\geq 0 \\=max\{dp(i-1,j-(a+1)w[i])+av[i]\},0\leq aw[i]\leq j-w[i],a\geq 0 \\=max\{dp(i-1,j-kw[i])+(k-1)v[i]\},0\leq (k-1)w[i]\leq j-w[i],k\geq 1 \\=max\{dp(i-1,j-kw[i])+kv[i]\}-v[i],0\leq (k-1)w[i]\leq j-w[i],k\geq 1\]</span> 因此当<span class="math inline">\(k\geq 1\)</span>时有<span class="math inline">\(max\{dp(i-1,j-kw[i])+kv[i]\}=dp(i,j-w[i])+v[i]\)</span><br />综上有<span class="math inline">\(dp(i,j)=max\{dp(i-1,j),dp(i,j-w[i])+v[i]\}\)</span>，状态<span class="math inline">\(dp(i,j-w[i])\)</span>包含了第i件物品被选择若干次后的最大价值。<br />完全背包两个for循环的顺序也可以颠倒，但是j的遍历只能而且应该正向。</p><h2 id="多重背包">多重背包</h2><ul><li>每件物品最多可以使用<span class="math inline">\(num[i]\)</span>次。</li><li>同样，Naive的思路就是将每件物品都复制<span class="math inline">\(num[i]\)</span>次，问题转化为0-1背包，复杂度<span class="math inline">\(O(\Sigma nums[i]*W)\)</span>。</li><li>将<span class="math inline">\(num[i]\)</span>用二进制表示，价值和重量变为原来的相应倍，降低复杂度。</li></ul><h2 id="future">Future</h2><p>后续还有混合背包、二维费用的背包等，详情可以学习<a href="https://comzyh.com/upload/PDF/Pack-PDF-Comzyh.pdf">背包九讲</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shortest Path</title>
      <link href="/2020/02/18/Shortest%20Path/"/>
      <url>/2020/02/18/Shortest%20Path/</url>
      
        <content type="html"><![CDATA[<h2 id="dijkstra">Dijkstra</h2><p>BFS可以用来求无权图的最短路径，Dijkstra是<strong>单源最短路径</strong>算法，<strong>只能用于所有边权值为正的图</strong>，本质上还是贪心，思想：</p><ol type="1"><li>将所有结点分为两类：已经确定最短路径的点集<span class="math inline">\(u\)</span>、未确定最短路径的点<span class="math inline">\(v\)</span>；</li><li>初始化<span class="math inline">\(dis[start]=0\)</span>，其余结点<span class="math inline">\(dis\)</span>设为无穷大；</li><li>找出一个<span class="math inline">\(dis\)</span>最小的<span class="math inline">\(v\)</span>中的点<span class="math inline">\(x\)</span>，将其标记为<span class="math inline">\(u\)</span>，遍历<span class="math inline">\(x\)</span>的所有<strong>出边</strong>，若<span class="math inline">\(dis[y]&gt;dis[x]+weight\)</span>，则更新<span class="math inline">\(y\)</span>点到源点的最短路径长度<span class="math inline">\(dis[y]=dis[x]+weight\)</span>；</li><li>重复，直到所有点都在<span class="math inline">\(u\)</span>中。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 邻接矩阵版，适合顶点比较少的图，复杂度O(V^2) */</span></span><br><span class="line"><span class="keyword">int</span> vertexNum, adjMatrix[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];  <span class="comment">// 起点到各点最短路径长度</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAXN] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        dis[i] = INFINITY;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="comment">// 寻找未访问点中dis最小的</span></span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, minDis = INFINITY;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="literal">false</span> &amp;&amp; dis[j] &lt; minDis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                minDis = dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u == <span class="number">-1</span>)  <span class="comment">// 剩余的点与起点不连通</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 以u为中介试图优化dis[j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; vertexNum; j++) &#123;</span><br><span class="line">            <span class="comment">// 未访问、u可达、路过u可以使dis[j]更优</span></span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="literal">false</span> &amp;&amp; adjMatrix[u][j] != INFINITY &amp;&amp; dis[u] + adjMatrix[u][j] &lt; dis[j])</span><br><span class="line">                dis[j] = dis[u] + adjMatrix[u][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 邻接表版，复杂度O(V^2+E) */</span></span><br><span class="line"><span class="keyword">int</span> vertexNum;</span><br><span class="line"><span class="keyword">int</span> dis[MAXN];  <span class="comment">// dis[i]表示源点到i点的最小距离</span></span><br><span class="line"><span class="keyword">bool</span> visited[MAXN] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> des;  <span class="comment">// 边的目标顶点</span></span><br><span class="line">    <span class="keyword">int</span> weight;  <span class="comment">// 边的权值</span></span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; adjList[MAXN];   <span class="comment">// 邻接表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; vertexNum;i++) &#123;</span><br><span class="line">        dis[i] = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    dis[start] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; vertexNum;i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="number">-1</span>, minDis = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; vertexNum;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[j] == <span class="literal">false</span> &amp;&amp; dis[j] &lt; minDis) &#123;</span><br><span class="line">                u = j;</span><br><span class="line">                minDis = dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(u == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        visited[u] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; adjList[u].<span class="built_in">size</span>();j++) &#123;</span><br><span class="line">            <span class="comment">// 直接获得u能到达的点</span></span><br><span class="line">            <span class="keyword">int</span> v = adjList[u][j].des;</span><br><span class="line">            <span class="keyword">if</span>(visited[v] == <span class="literal">false</span> &amp;&amp; dis[v] &gt; dis[u] + adjList[u][j].weight) &#123;</span><br><span class="line">                dis[v] = dis[u] + adjList[u][j].weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寻找<span class="math inline">\(dis[u]\)</span>的循环可以用堆来优化，使得复杂度降为<span class="math inline">\(O(VlogV+E)\)</span>。 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dijkstra</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    pq = []</span><br><span class="line">    heapq.heappush(pq, (<span class="number">0</span>, s))</span><br><span class="line"></span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    parent = &#123;s : <span class="literal">None</span>&#125;</span><br><span class="line">    dis = &#123;s : <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> g:</span><br><span class="line">        <span class="keyword">if</span> v != s:</span><br><span class="line">            dis[v] = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(pq) &gt; <span class="number">0</span>):</span><br><span class="line">        pair = heapq.heappop(pq)</span><br><span class="line">        cur_dis = pair[<span class="number">0</span>]</span><br><span class="line">        cur_vertex = pair[<span class="number">1</span>]</span><br><span class="line">        marked.add(cur_vertex)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> adj <span class="keyword">in</span> g[cur_vertex].keys():</span><br><span class="line">            <span class="keyword">if</span> adj <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                <span class="keyword">if</span> cur_dis + g[cur_vertex][adj] &lt; dis[adj]:</span><br><span class="line">                    heapq.heappush(pq, (cur_dis + g[cur_vertex][adj], adj))</span><br><span class="line">                    parent[adj] = cur_vertex</span><br><span class="line">                    dis[adj] = cur_dis + g[cur_vertex][adj]</span><br><span class="line">    <span class="keyword">return</span> parent, dis</span><br></pre></td></tr></table></figure></p><h2 id="bellman-ford">Bellman-Ford</h2><p>可以计算含有负权的边，检测是否存在一个从源结点可以到达的权重为负值的环路（负权环）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">bellmanFord</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; edge, vector&lt;<span class="keyword">int</span>&gt;&amp; dis, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dis.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == start)</span><br><span class="line">            dis[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dis[i] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dis.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; edge.<span class="built_in">size</span>(); ++j)</span><br><span class="line">            dis[edge[j][<span class="number">1</span>]] = <span class="built_in">min</span>(dis[edge[j][<span class="number">1</span>]], dis[edge[j][<span class="number">0</span>]] + edge[j][<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> negCycle = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge.<span class="built_in">size</span>(); ++i)</span><br><span class="line">        <span class="keyword">if</span> (dis[edge[i][<span class="number">1</span>]] &gt; dis[edge[i][<span class="number">0</span>]] + edge[i][<span class="number">2</span>]) &#123;</span><br><span class="line">            negCycle = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> negCycle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度<span class="math inline">\(O(VE)\)</span>。 ## Floyd-Warshall 多源最短路径算法。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">size_t</span> k = <span class="number">0</span>;k &lt; m.<span class="built_in">size</span>();++k)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">size_t</span> i = <span class="number">0</span>;i &lt; m.<span class="built_in">size</span>();++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j &lt; m.<span class="built_in">size</span>(); ++j) &#123;</span><br><span class="line">                <span class="comment">// m不能用INT_MAX初始化，会溢出，用0x3f3f3f3f</span></span><br><span class="line">                <span class="keyword">if</span> (m[i][k] + m[k][j] &lt; m[i][j])</span><br><span class="line">                    m[i][j] = m[i][k] + m[k][j];</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 不能用于含有<strong>负权环</strong>的图，这种图不存在最短路径。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CompressIt</title>
      <link href="/2020/02/13/CompressIt/"/>
      <url>/2020/02/13/CompressIt/</url>
      
        <content type="html"><![CDATA[<h2 id="结构">结构</h2><p>压缩软件的核心在于压缩算法。基于Huffman编码的压缩算法思路：</p><ol type="1"><li>以<strong>二进制方式</strong>读取源文件，按照每8bits作为一个字符；</li><li>统计每个字符的出现频率即为叶子结点的权值，按照Huffman算法得到每个叶子的编码；</li><li>对源文件的每个字符，将新的编码组合为二进制流，按照每8bits一个单位写入压缩文件。</li></ol><p>举例来看： 假设我们有待压缩源文件<code>hello</code>，<code>h</code>的ASCII码为<code>01101000</code>，同理可得整个文件的二进制形式<code>0110100001100101011011000110110001101111</code>，共5B，40bits。 根据Huffman算法：得到<code>h</code>的编码为<code>00</code>，同理可得整个文件的Huffman编码为<code>0001111110</code>，末尾不够8bits，采用补0的方法可得<code>0001111110000000</code>，按照每8bits一个单位，写入压缩文件的是<code>31</code>和<code>255</code>对应的字符，共2B，16bits。 解压缩流程是压缩的逆过程：</p><ol type="1"><li>以<strong>二进制方式</strong>读取压缩文件；</li><li>每次取1bit，从Huffman树的根结点出发，找到某个叶子即为源字符。</li></ol><h2 id="效果">效果</h2><p>做一个简单的比较：</p><table><thead><tr class="header"><th>压缩软件</th><th>测试文件</th><th>压缩率</th><th>测试文件</th><th>压缩率</th></tr></thead><tbody><tr class="odd"><td>CompressIt</td><td>txt(840B)</td><td>70.4%</td><td>png(282KB)</td><td>101%</td></tr><tr class="even"><td>WinRaR</td><td>txt(840B)</td><td>14.4%</td><td>png(282KB)</td><td>100%</td></tr></tbody></table><p>压缩率和压缩时间和专业软件没法比。之所以出现压缩文件大于源文件，是因为压缩文件中还存储了Huffman树等信息，为解压所需。 对于不同内容的文件，得到的压缩文件大小也不尽相同，这主要与Huffman编码的性质有关。 ## 理论分析 Huffman编码依赖于信源的统计特征，其背后的原理在于为出现频率高的字符分配尽可能短的码长，这样就可以降低平均码长： <span class="math display">\[L=\Sigma p_il_i\]</span> 使得<span class="math inline">\(L\)</span>最短的编码就是最优编码，可以证明Huffman编码是一种最优编码。 同时Huffman编码还是前缀码，简化了解码过程。 假设一种理想情况：源文件长<span class="math inline">\(len\)</span>很大，共有<span class="math inline">\(m\)</span>种不同字符，每个字符用8bits表示，并且每种字符出现频率<span class="math inline">\(\frac{len}{m}\)</span>相同，忽略掉存储Huffman树等信息所需的空间。 这棵完全二叉树共有结点<span class="math inline">\(n=2*m-1\)</span>个，那么树深度为<span class="math inline">\(h=1+\lfloor log_2n \rfloor\)</span>，每个字符的压缩长度为<span class="math inline">\(h-1=\lfloor log_2n \rfloor\)</span>，故压缩后的串长度为<span class="math inline">\(\frac{(h-1)*len}{8}\)</span>，可得压缩率<span class="math inline">\(\frac{h-1}{8}\)</span>，即： <span class="math display">\[\alpha=\frac{\lfloor log_2(2*m-1) \rfloor}{8}\]</span> 源文件中不同字符种类<span class="math inline">\(m\)</span>越小，即源文件分布越集中，压缩效果越好。 如果和定长编码比较，可以得到压缩率： <span class="math display">\[\alpha=\frac{\lfloor log_2(2*m-1) \rfloor}{\lceil log_2(m) \rceil}\]</span> <span class="math inline">\(m\)</span>取值256时，Huffman树是一棵满二叉树，压缩率为100%，并不比8位固定长度编码更高效。 ## 收获</p><ul><li><code>EOF</code>和<code>feof()</code> <code>EOF</code>是一个定义在<code>cstdio</code>头文件中的宏，一般为-1：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOF (-1)</span></span><br></pre></td></tr></table></figure><p>但是如果按照二进制读取文件，对于文件中的-1又该如何处理？ 阮一峰的博客说：</p><blockquote><p>在Linux系统之中，EOF根本不是一个字符，而是当系统读取到文件结尾，所返回的一个信号值（也就是-1）。至于系统怎么知道文件的结尾，资料上说是通过比较文件的长度。</p></blockquote><p>我们通常会写出下面程序来读取文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> ((ch = <span class="built_in">fgetc</span>(fp)) != EOF) &#123;</span><br><span class="line">    <span class="comment">// your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是<code>fgetc()</code>在到达文件结尾和发生读取错误的情况下都会返回<code>EOF</code>，所以上述代码不严谨，采用<code>feof()</code>函数来判断文件结尾：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp)) &#123;</span><br><span class="line">    ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">    <span class="comment">// your code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是采用<code>feof()</code>也有一个问题：读取最后一个字符后，<code>feof()</code>仍然返回0，进入循环，<code>fgetc()</code>再向后读取一个字符，<code>feof()</code>才返回1，这样程序会多循环一次。 所以比较安全的写法是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">while</span> (ch != EOF) &#123;</span><br><span class="line">    <span class="comment">// your code here</span></span><br><span class="line">    ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">feof</span>(fp))</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;End-of-File reached.&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Something went wrong.&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>虚析构函数 基类的析构函数一般写成虚函数，做个测试：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">base</span>() &#123;&#125;;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">base</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destructor in base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;f in base&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">derive</span> :</span><span class="keyword">public</span> base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">derive</span>() &#123;&#125;;</span><br><span class="line">    ~<span class="built_in">derive</span>() &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;destructor in derive&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;f in derive&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">base* p = <span class="keyword">new</span> derive;</span><br><span class="line">p-&gt;<span class="built_in">f</span>();</span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f in derive</span><br><span class="line">destructor in derive</span><br><span class="line">destructor in base</span><br></pre></td></tr></table></figure><p>如果基类的析构函数不是虚函数，输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f in derive</span><br><span class="line">destructor in base</span><br></pre></td></tr></table></figure><p>结果并没有调用派生类的析构函数，造成内存泄漏。 所以基类的虚析构函数的作用是：<strong>当一个基类指针删除一个派生类对象，确保调用派生类的析构函数</strong>。 - 二进制文件 在压缩过程中，对于不同格式源文件的读取都是采用二进制方式<code>rb</code>。 实际上二进制文件和文本文件并没有本质区别，你所看到的内容取决于打开文件的软件对二进制流的解释方式，文件扩展名帮助计算机知道应该用哪种解释方式，通常的文本文件的解释方式有ASCII码和Unicode码。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Union-Find</title>
      <link href="/2020/01/26/Union-Find/"/>
      <url>/2020/01/26/Union-Find/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>并查集是一种用来维护集合的数据结构，底层通过<code>parent</code>数组实现，每个集合只有唯一的根结点，并将其作为该集合的标志。</p><p>并查集有两个基本操作： 1. 并：合并两集合； 2. 查：查询某元素的父结点。</p><p>初始化所有元素都是一个独立的集合： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> parent[MAXN];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    parent[i] = i;    <span class="comment">// i元素的父结点初始化为自己，也可以初始化为-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="合并与查找">合并与查找</h2><ul><li>Find<br />查找某个元素属于哪个集合（如果单独成集就返回自己），返回该集合的代表元素（即parent为-1的那个元素/parent为自身的那个元素）。<br />查找的同时可以通过<strong>路径压缩</strong>来将均摊复杂度降低为<span class="math inline">\(O(1)\)</span>。查找某个结点时，将其经过的全部结点直接连到父结点，这样下次查询时次数就会减少。</li><li>Union<br />合并时可以遵循<strong>按秩合并</strong>原则，将秩小的树合并到秩大的树，降低路径压缩时的开销。<br />将两个不同的集合合并为一个集合，只要将其中一个集合的根结点的<code>parent</code>指向另一个集合的根结点即可。<br />对于属于同一个集合的两个元素的合并没有意义，所以我们一般只对两个不同的集合进行合并，这样避免同一个集合成环，因此并查集的每个集合都是一棵树。</li></ul><p>并查集可以将均摊复杂度变为<span class="math inline">\(O(1)\)</span>，但如果涉及到删除元素、计算每个集合元素个数等操作时，实现会有些复杂；<br />好吧！计算每个集合元素个数以及统计有多少个集合并不复杂，计算元素个数可以开一个数组cnt初始全为1，每次merge都更新cnt即可，cnt[i]即为根为i的集合包含的元素个数<br />统计多少个集合遍历所有元素，遇到不同的根结点就更新ans。</p><p><a href="https://www.zxpblog.cn/2020/02/17/%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%AD%97%E5%85%B8%E6%A0%91%E5%92%8C%E5%B9%B6%E6%9F%A5%E9%9B%86%E5%92%8C%E7%BA%BF%E6%AE%B5%E6%A0%91/">最原始的并查集</a>虽然复杂度稍差，但是可以完成的功能比较多。<br /><a href="https://www.cnblogs.com/EIMadrigal/p/12693959.html">原始并查集实现</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">unionFind</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; parents_;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ranks_;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unionFind</span>(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n;++i) &#123;</span><br><span class="line">            parents_.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">            ranks_.<span class="built_in">emplace_back</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get the root of x</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// path compression</span></span><br><span class="line">        <span class="keyword">if</span>(x != parents_[x]) &#123;</span><br><span class="line">            parents_[x] = <span class="built_in">Find</span>(parents_[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parents_[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// merge set u and v</span></span><br><span class="line">    <span class="comment">// false -&gt; u and v are already in one set</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rootu = <span class="built_in">Find</span>(u);</span><br><span class="line">        <span class="keyword">int</span> rootv = <span class="built_in">Find</span>(v);</span><br><span class="line">        <span class="keyword">if</span>(rootu == rootv)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// merge low rank to high rank</span></span><br><span class="line">        <span class="keyword">if</span>(ranks_[rootu] &lt; ranks_[rootv]) &#123;</span><br><span class="line">            parents_[rootu] = rootv;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ranks_[rootv] &lt; ranks_[rootu]) &#123;</span><br><span class="line">            parents_[rootv] = rootu;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            parents_[rootu] = rootv;</span><br><span class="line">            ++ranks_[rootv];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一道例题：<a href="https://www.luogu.com.cn/problem/P1551">亲戚</a><br />不做路径压缩可以求<a href="https://www.nowcoder.com/profile/135924065/codeBookDetail?submissionId=83987857">最小环长</a></p><p>检测无向图是否有环：对于图中每条边（类似kruskal），不断将结点通过并查集合并，如果在加入边(i,j)前，i和j已经同属一个集合，意味着i和j必然有某条其他路径连通，那么这条路径和该边一起必然构成环。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; g;  <span class="comment">// edge list</span></span><br><span class="line">g.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">g.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">2</span>));</span><br><span class="line">g.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">has_cycle</span><span class="params">(vector&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&amp; g)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> rootx = <span class="built_in">Find</span>(g[i].first);</span><br><span class="line">        <span class="keyword">int</span> rooty = <span class="built_in">Find</span>(g[i].second);</span><br><span class="line">        <span class="keyword">if</span> (rootx == rooty) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Union</span>(rootx, rooty);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="种类并查集todo">种类并查集（TODO）</h2><p>普通并查集的特点就是只有一个集合，比如上述例题只有亲戚一个集合。如果涉及到多个集合，就需要种类并查集。<br />假如有n个集合，常用的手法就是开一个n倍大小的并查集。<br /><a href="https://www.luogu.com.cn/problem/P2024">食物链</a><br /><a href="https://www.luogu.com.cn/problem/P1892">团伙</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linked List-3</title>
      <link href="/2020/01/26/Linked%20List-3/"/>
      <url>/2020/01/26/Linked%20List-3/</url>
      
        <content type="html"><![CDATA[<p>第一篇<a href="https://www.cnblogs.com/EIMadrigal/p/12130882.html">终结Linked List（一）</a>、<a href="https://www.cnblogs.com/EIMadrigal/p/12130892.html">终结Linked List（二）</a>主要讲了单链表的基础知识，接下来的第二篇主要讲一些比较经典的问题。 ## 一、<code>Count()</code> 给一个单链表和一个整数，返回这个整数在链表中出现了多少次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Given a list and an int, return the number of times </span><br><span class="line">that int ocucurs in the list.</span><br><span class="line">*/</span><br><span class="line">int Count(struct node* head,int searchFor)</span><br><span class="line">&#123;</span><br><span class="line">    int cnt = 0;</span><br><span class="line">    struct node* cur = head;</span><br><span class="line"></span><br><span class="line">    while (cur != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        if (cur-&gt;data == searchFor)</span><br><span class="line">            cnt++;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用<code>for</code>循环实现。 ## 二、<code>GetNth()</code> 给一个单链表和一个index，返回index位置上的数值，类似<code>array[index]</code>操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Given a list and an index, return the data in the nth</span><br><span class="line">node of the list. The nodes are numbered from 0.</span><br><span class="line">Assert fails if the index is invalid (outside 0..length - 1).</span><br><span class="line">*/</span><br><span class="line">int GetNth(struct node* head,int index)</span><br><span class="line">&#123;</span><br><span class="line">    int len = 0;</span><br><span class="line">    struct node* cur = head;</span><br><span class="line"></span><br><span class="line">    while (cur)</span><br><span class="line">    &#123;</span><br><span class="line">        if (len == index)</span><br><span class="line">        &#123;</span><br><span class="line">            return cur-&gt;data;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(0);  //如果走到这一行，表达式的值为假，断言失败</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三deletelist">三、<code>DeleteList()</code></h2><p>给一个单链表，删除所有节点，使<code>head</code>为<code>NULL</code>。 删除链表<code>&#123;1,2,3&#125;</code>的示意图： <img src="https://img-blog.csdnimg.cn/201904071952350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">void DeleteList(struct node** headRef)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* cur = *headRef;  //deref headRef to get the real head</span><br><span class="line"></span><br><span class="line">    while (*headRef)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = *headRef;</span><br><span class="line">        *headRef = cur-&gt;next;</span><br><span class="line">        free(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> ## 四、<code>Pop()</code> 给一个链表，删掉头节点，返回头节点的数据。 内存示意图： <img src="https://img-blog.csdnimg.cn/20190407230157807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">The opposite of Push().Takes a non-empty list and </span><br><span class="line">remove the front node, and returns the data which was in that node.</span><br><span class="line">*/</span><br><span class="line">int pop(struct node** headRef)</span><br><span class="line">&#123;</span><br><span class="line">    assert(*headRef != NULL);</span><br><span class="line">    int ans = (*headRef)-&gt;data;  //pull out the data before the node is deleted</span><br><span class="line"></span><br><span class="line">    struct node* cur = *headRef;</span><br><span class="line">    *headRef = (*headRef)-&gt;next;   //unlink the head node for the caller</span><br><span class="line">    free(cur);    //free the head node</span><br><span class="line"></span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五insertnth">五、<code>InsertNth()</code></h2><p>可以在<code>[0,length]</code>的任意位置插入指定元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">A more general version of Push().</span><br><span class="line">Given a list, an index &#x27;n&#x27; in the range 0..length,</span><br><span class="line">and a data element, add a new node to the list so that</span><br><span class="line">it has the given index.</span><br><span class="line">*/</span><br><span class="line">void InsertNth(struct node** headRef,int index,int data)</span><br><span class="line">&#123;</span><br><span class="line">    //position 0 is a special case</span><br><span class="line">    if (index == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(headRef, data);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        int cnt = 0;</span><br><span class="line">        struct node* cur = *headRef;</span><br><span class="line"></span><br><span class="line">        while (cnt &lt; index - 1)</span><br><span class="line">        &#123;</span><br><span class="line">            assert(cur != NULL);   //if this fails, the index was too big</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        assert(cur != NULL);    //tricky:you have to check one last time</span><br><span class="line"></span><br><span class="line">        Push(&amp;(cur-&gt;next), data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码坑有点多，可以通过<strong>画图</strong>或者<strong>单步跟踪</strong>的方法调试。 <code>InsertNthTest()</code>可以用来测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void InsertNthTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = NULL;   //start with the empty list</span><br><span class="line">     </span><br><span class="line">    InsertNth(&amp;head, 0, 13);   //&#123;13&#125;</span><br><span class="line">    InsertNth(&amp;head, 1, 42);    //&#123;13,42&#125;</span><br><span class="line">    InsertNth(&amp;head, 1, 5);     //&#123;13,5,42&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六sortedinsert">六、<code>SortedInsert()</code></h2><p>给定一个有序链表和一个节点，将该节点插入到合适的位置。 共有三种方法： 1、Uses special case code for the head end <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">void SortedInsert(struct node** headRef,struct node* newNode)</span><br><span class="line">&#123;</span><br><span class="line">    //Special case for the head end</span><br><span class="line">    if (newNode-&gt;data &lt;= (*headRef)-&gt;data || *headRef == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        newNode-&gt;next = *headRef;</span><br><span class="line">        *headRef = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        //Locate the node before the point of insertion</span><br><span class="line">        struct node* cur = *headRef;</span><br><span class="line">        while (cur-&gt;next &amp;&amp; cur-&gt;next-&gt;data &lt; newNode-&gt;data)</span><br><span class="line">        &#123;</span><br><span class="line">            cur = cur-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        newNode-&gt;next = cur-&gt;next;</span><br><span class="line">        cur-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 2、Dummy node strategy for the head end 用<code>dummy node</code>这种方法一般不需要处理特殊情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void SortedInsert2(struct node** headRef,struct node* newNode) &#123;</span><br><span class="line">    struct node dummy;</span><br><span class="line">    struct node* cur = &amp;dummy</span><br><span class="line">    dummy.next = *headRef;</span><br><span class="line"></span><br><span class="line">    while (cur-&gt;next &amp;&amp; newNode-&gt;data &gt;= cur-&gt;next-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    newNode-&gt;next = cur-&gt;next;</span><br><span class="line">    cur-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">    *headRef = dummy.next;  //头指针永远指向dummy.next</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、Local references strategy for the head end</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void SortedInsert3(struct node** headRef,struct node* newNode)</span><br><span class="line">&#123;</span><br><span class="line">    struct node** curRef = headRef;</span><br><span class="line"></span><br><span class="line">    while (*curRef &amp;&amp; (*curRef)-&gt;data &lt;= newNode-&gt;data)</span><br><span class="line">    &#123;</span><br><span class="line">        curRef = &amp;((*curRef)-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newNode-&gt;next = *curRef;  //Bug:(*curRef)-&gt;next  is incorrect</span><br><span class="line"></span><br><span class="line">    *curRef = newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表反转">链表反转</h2><p>206 92 25 链表反转的题目都是套路，如果要反转[l,r)内的部分，需要记录l的前一个结点 让cur = l, prev = r 循环次数等于[l,r)内的结点数，每次循环都是标准操作 tmp = cur.next cur.next = prev prev = cur cur = tmp 最终cur指向r，prev指向l即反转后的第一个结点 头结点主要看你是反转整个链表还是一部分，反转整个链表就没必要了，因为l直接指向头结点 92题可以直接按照上述方法做，但是开始要把r指向正确的位置，相当于多走了一遍，因此开始把prev设置为None，反转结束先通过l前一个结点修正l的指针指向cur，再让l前一个结点指向prev</p><p>25题因为要分组反转，所以需要判断剩余的结点够不够k个，因此r必然需要向后走一遍去判断，因此[l,r)肯定要走2遍。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Minimum Spanning Tree</title>
      <link href="/2020/01/26/Minimum%20Spanning%20Tree/"/>
      <url>/2020/01/26/Minimum%20Spanning%20Tree/</url>
      
        <content type="html"><![CDATA[<h2 id="一prim">一、Prim</h2><p>Prim算法的思想是：</p><ol type="1"><li>整个顶点集为<span class="math inline">\(V\)</span>，初始选一个起点<span class="math inline">\(s\)</span>，令集合<span class="math inline">\(u=\{s\}, v=\{\}\)</span>；</li><li>在集合<span class="math inline">\(u\)</span>与集合<span class="math inline">\(V-u\)</span>中的点组成的边中，选一条权值最小的边<span class="math inline">\(u_0v_0\)</span>加入MST，并且将<span class="math inline">\(u_0\)</span>加入<span class="math inline">\(u\)</span>；</li><li>重复直到MST有<span class="math inline">\(n-1\)</span>条边或<span class="math inline">\(n\)</span>个顶点为止。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> adjMax[MAXN][MAXN];  <span class="comment">//邻接矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;   <span class="comment">//顶点数目</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> visited[MAXN] = &#123;<span class="number">0</span>&#125;, cost[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cost[i] = adjMax[<span class="number">0</span>][i];  <span class="comment">//集合u与集合V-u中的i点间距离最小值</span></span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    visited[<span class="number">0</span>] = <span class="literal">true</span>;   <span class="comment">//已经在MST中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)  <span class="comment">//再找n-1个点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//找到连接u和V-u的最小边并记录位置</span></span><br><span class="line">        <span class="keyword">int</span> tmp = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="literal">false</span> &amp;&amp; cost[j] &lt; tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = cost[j];</span><br><span class="line">                pos = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ans += tmp;</span><br><span class="line">        visited[pos] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加入某点后，V-u中的点j到u的距离可能变短，故更新cost[j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[j] == <span class="literal">false</span> &amp;&amp; cost[j] &gt; adjMax[pos][j])</span><br><span class="line">            &#123;</span><br><span class="line">                cost[j] = adjMax[pos][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：邻接矩阵表示不依赖于边数，复杂度<span class="math inline">\(O(|V|^2)\)</span>，适合边稠密的图。 ## 二、Kruskal 该算法思想：将所有边的权值递增排序，如果加入某边后不构成回路，则将该边加入MST，直到MST中有<span class="math inline">\(n-1\)</span>条边或<span class="math inline">\(n\)</span>个顶点：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用结构体存储边的信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> start, des;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;edge[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用并查集判断有没有环</span></span><br><span class="line"><span class="keyword">int</span> UFSets[MAXN];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    UFSets[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在S中查找并返回包含x的树的根</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> S[],<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (S[x] &gt;= <span class="number">0</span>)</span><br><span class="line">        x = S[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = <span class="built_in">find</span>(UFSets, edge[i].start);</span><br><span class="line">        <span class="keyword">int</span> v = <span class="built_in">find</span>(UFSets, edge[i].des);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (u == v)  <span class="comment">//edge[i]的两端点有相同的祖先，成环</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        ans += edge[i].val;</span><br><span class="line">        UFSets[u] = v;  <span class="comment">//合并两个并查集</span></span><br><span class="line">        cnt++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cnt == n - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>性能：复杂度<span class="math inline">\(O(ElogE)\)</span>，适合边稀疏、顶点多的图。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>贝叶斯学习</title>
      <link href="/2020/01/18/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/01/18/%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>贝叶斯概率理论是由Thomas Bayes在1764年提出，采用一种概率的方式进行推理。贝叶斯学习有2个假设： - 观察到的样本实例并非确定性事件，而是随机的，服从某种概率分布； - 通过对观测数据样本和相关的概率特性进行推理学习能够得到最优的决策或分类。</p><p>贝叶斯学习为衡量多个假设的置信度提供了定量的方法，其依赖于贝叶斯决策理论（Bayesian Decision Theory）。贝叶斯决策理论是一种统计学上的方法，用来定量化地描述使用概率做出的不同决策以及这些决策付出的代价之间的权衡。首先假设一些概率值是已知的，然后根据这些已知概率推理一些未知情况下的概率值，最终利用这些推理的概率值进行决策。</p><p>以分类问题为例，假设有2种鱼分别是鲑鱼和鲈鱼，将w定义为观测到的鱼的类型，令<span class="math inline">\(w=w_1\)</span>代表鲈鱼，<span class="math inline">\(w=w_2\)</span>代表鲑鱼，定义<span class="math inline">\(P(w_1)\)</span>表示下一条鱼是鲈鱼的先验概率，<span class="math inline">\(P(w_2)\)</span>表示下一条鱼是鲑鱼的先验概率。先验概率反映了人们根据经验和背景知识对事物的判断，即在看到下一条鱼之前对于<span class="math inline">\(P(w_1)\)</span>和<span class="math inline">\(P(w_2)\)</span>的判断。如果没有经验上的偏好，就可以设置为均匀先验<span class="math inline">\(P(w_1)=P(w_2)\)</span>；如果有诸如海域因素、时间等背景，便可以为<span class="math inline">\(P(w_1)\)</span>和<span class="math inline">\(P(w_2)\)</span>设置不同的先验概率。另外假设只有这2种鱼，即<span class="math inline">\(P(w_1)+P(w_2)=1\)</span>。在仅有先验概率的情况下，选择先验概率大的作为最终决策，这种情况下决策错误的概率为<span class="math inline">\(min\{P(w_1),P(w_2)\}\)</span>。</p><p>贝叶斯决策理论是很多重要的学习算法的基础，例如朴素贝叶斯分类器、贝叶斯信念网络以及EM算法等。另外，贝叶斯决策理论为许多非贝叶斯的学习算法提供了很好的数学和框架性理论基础，对某些学习任务而言，贝叶斯学习是最实用的方法之一。</p><p>贝叶斯学习有以下特点： - 每个观测到的训练样本都可以很小程度上增大或减小某个假设正确的概率； - 先验知识可以和观测数据结合起来决定某个假设的最终概率，可以计算显式的假设概率； - 新实例的预测可以结合多个假设输出概率的加权值； - 通常需要一些背景知识或先前经验来确定先验概率，选出贝叶斯最优分类器计算代价比较大。</p><h2 id="贝叶斯定理">贝叶斯定理</h2><p>贝叶斯定理是贝叶斯学习的基石，给定训练数据集D，在假设空间H中寻找最优的假设h，最优假设可以定义为给定数据集D以及H中不同假设的先验概率条件下的最可能的假设。 利用贝叶斯定理，在已知假设的先验概率、观测数据以及给定假设下观测到特定数据的概率就可以计算出最有可能的假设。</p><p>给定数据集D以及假设空间H，定义如下记号： - 先验概率P(h)：没有训练数据前假设h的初始概率，反映了根据人们的相关认知背景，假设h成为正确假设的概率，如果没有先验知识，可以将每一个候选假设的先验概率设置为相同的。 - 先验概率P(D)：训练数据D的先验概率，即不知道哪个假设成立的前提下观测到D的概率。 - 观测数据的条件概率P(D|h)：在假设h成立的条件下观测到数据集D的概率。 - 后验概率P(h|D)：给定观测到的训练数据集D时假设h成立的概率，反映了观测到的训练数据是D时h成立的置信度。</p><p>利用贝叶斯定理可以计算给定训练数据集D下任一假设的后验概率： <span class="math display">\[P(h|D)=\frac{P(D|h)P(h)}{P(D)}\]</span></p><p>贝叶斯推理得到的结果很大程度上依赖于先验概率，并且不是完全接受或拒绝假设h，而是给出假设为真的可能性。因此可以计算每个假设的概率，输出其中概率最大的，称为最大后验概率准则（Maximum A Posteriori）。</p><p><span class="math display">\[h_{MAP}=\underset{h\in H}{\operatorname{\argmax}}\ P(h|D) \\=\underset{h\in H}{\operatorname{\argmax}}\ \frac{P(D|h)P(h)}{P(D)} \\=\underset{h\in H}{\operatorname{\argmax}}\ P(D|h)P(h)\]</span></p><p>如果假设空间中每个假设的先验概率都是相同的，即<span class="math inline">\(P(h_i)=P(h_j),\forall h_i\in H \wedge \forall h_j\in H\)</span>，那么只需要考虑给定假设h下数据D的似然P(D|h)，这样最大后验概率准则就变为了最大似然估计（Maximum Likelihood）： <span class="math display">\[h_{ML}=\underset{h\in H}{\operatorname{\argmax}}\ P(D|h)\]</span></p><h2 id="最小描述长度原则">最小描述长度原则</h2><p>根据奥卡姆剃刀原则，其它条件相同时选择最简单的假设，最简单的假设可以定义为描述长度最小的假设，即给定假设空间H和数据集D，应该寻找一个假设或者假设组合使得D被最大程度地压缩。定义<span class="math inline">\(L_{C}(x)\)</span>表示在编码机制C下编码x需要的最少的比特数为编码机制C下的x的描述长度。 <span class="math display">\[h_{MDL}=\underset{h\in H}{\operatorname{\argmin}}\ L_{C_1}(h)+L_{C_2}(D|h)\]</span></p><p><span class="math inline">\(L_{C_1}(h)\)</span>是假设的描述长度即比特数，反映了模型的复杂程度；<span class="math inline">\(L_{C_2}(D|h)\)</span>是当采用假设h编码后数据的描述长度，反映了错误的数目。通常会发现：一个非常复杂的假设（<span class="math inline">\(L_{C_1}(h)\)</span>大）会有一个比较好的拟合（<span class="math inline">\(L_{C_2}(D|h)\)</span>小），反之一个非常简单的假设（<span class="math inline">\(L_{C_1}(h)\)</span>小）会有比较差的拟合（<span class="math inline">\(L_{C_2}(D|h)\)</span>大）。因此希望寻找一个假设：既不会过于复杂同时还可以对数据有比较好的拟合。</p><p>如果对MAP的公式进行变形： <span class="math display">\[h_{MAP}=\underset{h\in H}{\operatorname{\argmax}}\ P(D|h)P(h) \\=\underset{h\in H}{\operatorname{\argmax}}\ log_2P(D|h)+log_2P(h) \\=\underset{h\in H}{\operatorname{\argmin}}\ -log_2P(h)-log_2P(D|h) \\\]</span></p><p>可以看到：第一项<span class="math inline">\(-log_2P(h)\)</span>对应了最优编码机制<span class="math inline">\(C_1\)</span>下h的描述长度<span class="math inline">\(L_{C_1}(h)\)</span>，第二项<span class="math inline">\(-log_2P(D|h)\)</span>对应了最优编码机制<span class="math inline">\(C_2\)</span>下数据的描述长度<span class="math inline">\(L_{C_2}(D|h)\)</span>。两者的优化目标是一致的。</p><h2 id="贝叶斯最优分类器">贝叶斯最优分类器</h2><p>通过MAP准则可以求出在给定训练数据下的最有可能的假设，那么如何求出给定训练集下一个新实例的最优预测呢？可以对新实例使用MAP准则，求得最大的假设然后进行分类。</p><p>但是最优的结果应该是结合所有假设的预测结果对新实例进行分类，结合的方法是通过后验概率加权： <span class="math display">\[\underset{v_j\in V}{\operatorname{\argmax}}\ \sum_{h_i\in H}P(v_j|h_i)P(h_i|D)\]</span></p><p>V表示所有可能的预测结果，<span class="math inline">\(v_j\)</span>是其中一种预测分类。<span class="math inline">\(P(v_j|h_i)\)</span>表示假设<span class="math inline">\(h_i\)</span>将新实例预测为<span class="math inline">\(v_j\)</span>的概率大小，<span class="math inline">\(P(h_i|D)\)</span>表示假设<span class="math inline">\(h_i\)</span>的后验概率。</p><p>例如假设空间<span class="math inline">\(H=\{h_1,h_2,h_3\}\)</span>，可能的预测结果<span class="math inline">\(V=\{+,-\}\)</span>，对于一个新实例假设有： <span class="math display">\[P(h_1|D)=0.4, P(-|h_1)=0, P(+|h_1)=1 \\P(h_2|D)=0.3, P(-|h_2)=1, P(+|h_2)=0 \\P(h_3|D)=0.3, P(-|h_3)=1, P(+|h_3)=0 \\\]</span></p><p>那么有： <span class="math display">\[\sum_{h_i\in H}P(+|h_i)P(h_i|D)=0.4 \\\sum_{h_i\in H}P(-|h_i)P(h_i|D)=0.6 \\\]</span> 因此最终选择将新实例分类为-。</p><p>可以看到：贝叶斯最优分类器最大化了新实例被正确分类的概率，在使用相同假设空间和先验知识的条件下，没有其他方法比贝叶斯最优分类器的平均效果好，最终的预测结果可能对应一个不包含于<span class="math inline">\(H\)</span>的假设。</p><p>虽然效果很好，但是贝叶斯最优分类器计算代价非常大： - 需要遍历假设空间中的所有假设； - 当假设空间非常大时这种方式是不可行的。</p><p>因此可以通过吉布斯算法（Gibbs）解决。吉布斯算法根据假设的后验概率分布随机选取一个假设对新实例进行分类。可以证明：在特定条件下，该方法的期望误差最多是贝叶斯最优分类器的两倍。还可以通过采样多个假设并求其预测结果的平均值来提高吉布斯算法的性能，例如可以使用马尔科夫蒙特卡洛采样（MCMC）。</p><h2 id="bagging分类器">Bagging分类器</h2><p>虽然可以使用吉布斯算法来降低计算代价，但是从后验概率分布P(h|D)采样是比较困难的： - P(h|D)的计算本身就比较困难 - 对于不是基于概率的分类器例如SVM等P(h|D)是无法计算的 - 当假设空间很大时P(h|D)计算结果会很小</p><p>为了解决上述问题，引入Bagging的思想，通过对训练样本的采样实现对后验分布P(h|D)的采样。假设给定的数据集D包含m个样本，自助采样法（Bootstrap sampling）步骤如下： - 从D中有放回地采样m个样本构成数据集<span class="math inline">\(D^i\)</span> - D中大约有37%的样本不会被采样到</p><p>Bagging算法步骤如下： - 创建k个自助采样的数据集<span class="math inline">\(D^1,D^2,...,D^k\)</span> - 在每个数据集<span class="math inline">\(D^i\)</span>独立训练分类器<span class="math inline">\(h_i\)</span> - 通过相等权重的投票法来对新实例进行分类：</p><p><span class="math display">\[c^*(x)=\underset{c}{\operatorname{\argmax}}\ \sum_{i=1}^{k}P(c|h_i,x)\]</span> 由于自助采样法几乎和直接从后验概率分布P(h|D)采样相同，因此Bagging产生的分类器也近似于贝叶斯最优分类器。通常Bagging产生的分类器效果要优于单独的分类器，因为其有效地降低了模型的方差。</p><h2 id="朴素贝叶斯分类器">朴素贝叶斯分类器</h2><p>假设训练集D中的每条实例x均可以被n个属性的组合<span class="math inline">\(&lt;a_1,a_2,...,a_n&gt;\)</span>描述，并且<span class="math inline">\(v(x)\in V\)</span>是一个有限的集合。那么贝叶斯方法对于新实例的分类是选择一个最有可能的目标值： <span class="math display">\[v_{MAP}=\underset{v_j\in V}{\operatorname{\argmax}}\ P(v_j|a_1,a_2,...,a_n)\]</span></p><p>通过贝叶斯定理进行变形： <span class="math display">\[v_{MAP}=\underset{v_j\in V}{\operatorname{\argmax}}\ \frac{P(a_1,a_2,...,a_n|v_j)P(v_j)}{P(a_1,a_2,...,a_n)}\]</span></p><p>那么要如何计算<span class="math inline">\(P(v_j)\)</span>和<span class="math inline">\(P(a_1,a_2,...,a_n|v_j)\)</span>呢？ - <span class="math inline">\(P(v_j)\)</span>可以通过每个目标值<span class="math inline">\(v_j\)</span>在训练数据中出现的频率来估算 - 在训练数据集很小的情况下，<span class="math inline">\(P(a_1,a_2,...,a_n|v_j)\)</span>的估算是不可能的，不同的<span class="math inline">\(P(a_1,a_2,...,a_n|v_j)\)</span>的数目等于所有可能的目标值的数量与所有可能的样本数目的乘积。</p><p>为了解决上述问题，提出了朴素贝叶斯假设，即在给定目标值下样本属性之间是条件独立的： <span class="math display">\[P(a_1,a_2,...,a_n|v_j)=\prod_{i}P(a_i|v_j)\]</span></p><p>因此朴素贝叶斯分类器即为： <span class="math display">\[v_{NB}=\underset{v_j\in V}{\operatorname{\argmax}}\ P(v_j)\prod_{i}P(a_i|v_j)\]</span></p><p>其中，<span class="math inline">\(v_{NB}\)</span>是朴素贝叶斯分类器的预测输出，<span class="math inline">\(P(a_i|v_j)\)</span>是训练数据中目标值<span class="math inline">\(v_j\)</span>时属性<span class="math inline">\(a_i\)</span>的频率。不同的<span class="math inline">\(P(a_i|v_j)\)</span>的数目等于不同的目标值数量与属性数量的乘积，该数值远小于不同的<span class="math inline">\(P(a_1,a_2,...,a_n|v_j)\)</span>的数目。</p><p>下面举一个朴素贝叶斯分类器的例子，假设训练数据如下： <img src="https://img-blog.csdnimg.cn/286e8b45687d4d259b1ef6ba87433c2f.png" alt="在这里插入图片描述" /></p><p>需要对于一个新实例{Outlook=sunny, Temperature=cool, Humidity=high, Wind=strong}进行分类，所有可能的目标值是{yes, no}。因此分类器为： <span class="math display">\[v_{NB}=\underset{v_j\in \{yes,no\}}{\operatorname{\argmax}}\ P(v_j)\prod_{i}P(a_i|v_j)\]</span></p><p>从训练数据可知，<span class="math inline">\(P(v_j)\)</span>即不同目标值的概率为： <span class="math display">\[P(yes)=9/14=0.64, P(no)=5/14=0.36\]</span></p><p>条件概率<span class="math inline">\(P(a_i|v_j)\)</span>为： <span class="math display">\[P(Wind=strong|yes)=3/9=0.33 \\P(Wind=strong|no)=3/5=0.60 \\...\]</span></p><p>因此可以计算： <span class="math display">\[P(yes)P(sunny|yes)P(cool|yes)P(high|yes)P(strong|yes)=0.0053 \\P(no)P(sunny|no)P(cool|no)P(high|no)P(strong|no)=0.0206 \\\]</span></p><p>故最终的预测结果为no。</p><h2 id="贝叶斯信念网络">贝叶斯信念网络</h2><p>贝叶斯最优分类器应用起来代价太大，朴素贝叶斯分类器虽然使用条件独立假设降低了代价，但是很多情况下条件独立假设都难以满足。因此，贝叶斯信念网络做了一个折衷，允许对属性集合的子集应用条件独立假设。</p><p>贝叶斯信念网络是一种概率图模型，通过有向无环图（DAG）来表示一系列变量及它们的条件依赖关系和变量集合的联合概率分布。通常用结点表示变量，可以是观测变量、隐藏变量、未知参数和假设等等；用边表示结点间的依赖关系；条件概率表的每个元素对应图中唯一的结点，存储该结点对于其所有直接前驱结点的联合条件概率。</p><p>贝叶斯信念网络一条非常重要的性质是：每个结点在其直接前驱结点的值给定后，该结点条件独立于其所有非直接前驱结点。条件独立的定义是：在给定Z的条件下X的概率分布与Y的取值无关，即： <span class="math display">\[\forall x_i,y_j,z_k\ P(X=x_i|Y=y_j,Z=z_k)=P(X=x_i|Z=z_k)\]</span></p><p>条件独立的定义可以扩展到多个变量的情形：即在给定变量<span class="math inline">\(Z_1,...,Z_n\)</span>的条件下，变量集合<span class="math inline">\(X_1,...,X_l\)</span>的概率分布与变量集合<span class="math inline">\(Y_1,...,Y_m\)</span>的取值无关： <span class="math display">\[P(X_1,...,X_l|Y_1,...,Y_m,Z_1,...,Z_n)=P(X_1,...,X_l|Z_1,...,Z_n)\]</span></p><p>朴素贝叶斯分类器即使用了条件独立假设使得<span class="math inline">\(P(X,Y|Z)=P(X|Y,Z)P(Y|Z)=P(X|Z)P(Y|Z)\)</span>。</p><p>贝叶斯网络也可以看作是表示变量之间因果性的因果图，可以进行原因推理或结果预测。例如，假设草坪是湿的记作变量W，那么有多大概率是因为下雨（记作变量R）造成的？那么可以利用贝叶斯网络进行原因推理： <span class="math display">\[P(R|W)=\frac{P(W|R)P(R)}{P(W)}=\frac{P(W|R)P(R)}{P(W|R)P(R)+P(W|\sim R)P(\sim R)}\]</span></p><p>同样可以进行结果的预测，假设洒水器打开记作事件S，那么有多大概率草坪是湿的是因为S导致的？即洒水器和下雨都可能导致草坪是湿的： <span class="math display">\[P(W|S)=P(W|R,S)P(R|S)+P(W|\sim R,S)P(\sim R|S) \\=P(W|R,S)P(R)+P(W|\sim R,S)P(\sim R)\]</span></p><p>随着贝叶斯网络的结点与边的增加，可以进行更加复杂的因果推断。</p><h2 id="总结">总结</h2><p>贝叶斯学习为基于先验知识的概率学习方法提供了理论基础，在先验知识的基础上，根据观测数据修正先验知识，计算出每个假设的后验概率进而进行预测。可以选择出在给定观测数据下的最有可能的假设即MAP假设，贝叶斯最优分类器通过后验概率的加权结合了所有可能假设的预测结果去得到新实例的最有可能的预测结果。朴素贝叶斯分类器通过条件独立假设增强了其实用性，在很多实际应用中表现很好。贝叶斯信念网络提供了一种条件独立的变量之间更强大的表示方法，使得其可以有更加广泛的应用场景。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Segment Tree</title>
      <link href="/2020/01/15/Segment%20Tree/"/>
      <url>/2020/01/15/Segment%20Tree/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">引言</h2><p><a href="https://leetcode.com/problems/range-sum-query-mutable/">Leetcode307</a> 这道题如果没有优化, 那么单次query的时间复杂度<span class="math inline">\(O(n)\)</span>, 单次update复杂度<span class="math inline">\(O(1)\)</span> 如果用前缀和数组, 那么单次query的时间复杂度<span class="math inline">\(O(1)\)</span>, 单次update复杂度<span class="math inline">\(O(n)\)</span>, 因为update(i)会使得前缀和数组i以后的元素均更新</p><p>因此如果query和update非常多次, 上面的2种方式效率都比较低.</p><p>这道题除了使用树状数组，还可以使用线段树。 线段树是一种平衡二叉树，支持快速区间查找<span class="math inline">\(O(lgn+k)\)</span>和更新<span class="math inline">\(O(lgn)\)</span>。</p><h2 id="线段树">线段树</h2><p>线段树核心思想是叶子结点负责保存原始信息，非叶结点负责其孩子表示范围的union，可以是求和、最值等： <img src="https://img-blog.csdnimg.cn/20200115103411544.png" alt="在这里插入图片描述" /> 对于每个结点，需要存储起始点、终止点、值、左右指针：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">segTreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">segTreeNode</span>(<span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> val, segTreeNode* left = <span class="literal">nullptr</span>, segTreeNode* right = <span class="literal">nullptr</span>) : <span class="built_in">start</span>(start), <span class="built_in">end</span>(end), <span class="built_in">val</span>(val), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">segTreeNode</span>() &#123;</span><br><span class="line">        <span class="keyword">delete</span> left;</span><br><span class="line">        <span class="keyword">delete</span> right;</span><br><span class="line">        left = right = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">int</span> end;</span><br><span class="line">    <span class="keyword">int</span> val;    <span class="comment">// can be sum, min, max...</span></span><br><span class="line">    segTreeNode* left;</span><br><span class="line">    segTreeNode* right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建树可以通过递归方式进行：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">segTreeNode* <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end, vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">segTreeNode</span>(start, end, nums[start]);</span><br><span class="line">    <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> left = <span class="built_in">buildTree</span>(start, mid, nums);</span><br><span class="line">    <span class="keyword">auto</span> right = <span class="built_in">buildTree</span>(mid + <span class="number">1</span>, end, nums);</span><br><span class="line">    <span class="keyword">auto</span> root = <span class="keyword">new</span> <span class="built_in">segTreeNode</span>(start, end, left-&gt;val + right-&gt;val, left, right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong>更新</strong>操作，只要找到叶子结点，一路向上更新至根结点，复杂度<span class="math inline">\(O(lgn)\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(segTreeNode* root, <span class="keyword">int</span> i, <span class="keyword">int</span> newVal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root-&gt;start == i &amp;&amp; root-&gt;end == i) &#123;</span><br><span class="line">        root-&gt;val = newVal;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt;= mid)</span><br><span class="line">        <span class="built_in">update</span>(root-&gt;left, i, newVal);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">update</span>(root-&gt;right, i, newVal);</span><br><span class="line">    root-&gt;val = root-&gt;left-&gt;val + root-&gt;right-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong>查询</strong>操作，查询范围有三种情况：</p><ol type="1"><li>范围正好和根结点负责的范围一致，直接返回；</li><li>范围由某个下层结点负责，找到该结点返回其值；</li><li>范围由两个下层结点组合负责，返回两个结点的sum。</li></ol><p>查询最好情况复杂度<span class="math inline">\(O(1)\)</span>，最坏情况<span class="math inline">\(O(lgn+k)\)</span>，<span class="math inline">\(k\)</span>是某层结点的数目：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(segTreeNode* root, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == root-&gt;start &amp;&amp; j == root-&gt;end)</span><br><span class="line">        <span class="keyword">return</span> root-&gt;val;</span><br><span class="line">    <span class="keyword">int</span> mid = root-&gt;start + (root-&gt;end - root-&gt;start) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (j &lt;= mid)  <span class="comment">// 查询范围完全落在左子树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(root-&gt;left, i, j);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; mid)  <span class="comment">// 查询范围完全落在右子树</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(root-&gt;right, i, j);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(root-&gt;left, i, mid) + <span class="built_in">query</span>(root-&gt;right, mid + <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference">Reference</h2><ul><li><a href="https://zxi.mytechroad.com/blog/sp/segment-tree-sp14/">花花酱 Segment Tree 线段树 SP14</a></li><li><a href="https://www.cnblogs.com/TenosDoIt/p/3453089.html">一步一步理解线段树</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Indexed Tree</title>
      <link href="/2020/01/13/Binary%20Index%20Tree/"/>
      <url>/2020/01/13/Binary%20Index%20Tree/</url>
      
        <content type="html"><![CDATA[<h2 id="引言">0 引言</h2><p><a href="https://leetcode.com/problems/range-sum-query-mutable/">Leetcode307</a> 这道题给一个<strong>可变</strong>数组，求从<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>的元素之和。 一个naive的做法是，每次查询都从<span class="math inline">\(i\)</span>累加到<span class="math inline">\(j\)</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NumArray</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        nums_ = nums;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        nums_[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sumRange</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = i;l &lt;= j;++l)</span><br><span class="line">            ans += nums_[l];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; nums_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这种方法每次更新的复杂度为<span class="math inline">\(O(1)\)</span>，<strong>每次查询</strong>的复杂度为<span class="math inline">\(O(n)\)</span>。</p><h2 id="树状数组">树状数组</h2><p>树状数组可以在<span class="math inline">\(O(lgn)\)</span>时间复杂度内完成下面两个操作： 1. 计算前缀和（意味着可以快速区间查询） 2. 单点更新</p><p>BIT并不需要定义树的结点和指针，而是维护了一个特殊的前缀和数组<code>prefix_sum_</code>，下面的例子均是1-indexed，调用BIT时需要传入原始索引+1。填充<code>prefix_sum_</code>的过程是这样的： <img src="https://img-blog.csdnimg.cn/259f7f2172354cdd86e4283efaa79e14.png" alt="在这里插入图片描述" /> 1. 按照索引的二进制表示，先看最低位，将所有最低位为1的数值直接存入T 2. 再看次低位为1的（即10结尾的），将该数和前一个数（共2个数）的和存入T 3. 再看以100结尾的，将该数及之前的3个数（共4个数）的和存入T 4. 再看以1000结尾的，将8个数的和存入T，以此类推...</p><p>填充好<code>prefix_sum_</code>后，就可以查询原始数组的前缀和并且更新原始数组。</p><h2 id="查询">查询</h2><p>假设要求前缀和A[1]+...+A[7]即<code>query(7)</code>，只需要<code>query(7)+query(6)+query(4)</code>即可，从二进制来看就是<code>query(00111)+query(00110)+query(00100)</code>，即每次将最后一位1翻转然后累加直到i变为0。</p><h2 id="更新">更新</h2><p>假设要更新A[4]即<code>update(4, 10)</code>，需要更新T[4]和T[8]，即<code>00100</code>和<code>01000</code>，即每次将最后一位1左移直到i超出数组长度，移位过程中更新相应的T[i]。</p><p>填充<code>prefix_sum_</code>可以直接调用<code>update</code>。</p><p>那么我们的tree： <img src="https://img-blog.csdnimg.cn/20200113151522944.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 0是dummy node，将结点的二进制表示的最后一个1翻转，就能得到其父结点。</p><p>下来填充这棵树： <span class="math inline">\(1=0+2^0\)</span>，存储从下标0开始的前1个数的和：3（0，0）； <span class="math inline">\(2=0+2^1\)</span>，存储从下标0开始的前2个数的和：5（0，1）； <span class="math inline">\(3=2^1+2^0\)</span>，存储从下标2开始的前1个数的和：-1（2，2）； <span class="math inline">\(4=0+2^2\)</span>，存储从下标0开始的前4个数的和：10（0，3）； <span class="math inline">\(5=2^2+2^0\)</span>，存储从下标4开始的前1个数的和：5（4，4）； <span class="math inline">\(6=2^2+2^1\)</span>，存储从下标4开始的前2个数的和：9（4，5）； <span class="math inline">\(7=2^2+2^1+2^0\)</span>，存储从下标6开始的前1个数的和：-3（6，6）； <span class="math inline">\(8=0+2^3\)</span>，存储从下标0开始的前8个数的和：19（0，7）； <span class="math inline">\(9=2^3+2^0\)</span>，存储从下标8开始的前1个数的和：7（8，8）； <span class="math inline">\(10=2^3+2^1\)</span>，存储从下标8开始的前2个数的和：9（8，9）； <span class="math inline">\(11=2^3+2^1+2^0\)</span>，存储从下标10开始的前1个数的和：3（10，10）； 填充后的tree： <img src="https://img-blog.csdnimg.cn/20200113154240511.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 接下来就可以根据这棵树来计算<code>prefixSums_</code>： 假如要计算<span class="math inline">\(0-5\)</span>的和，从下标6出发，一直加到dummy node，得到<code>prefixSums_[6]=9+10=19</code>； 要计算<span class="math inline">\(0-9\)</span>的和，从下标10出发，一直加到dummy node，得到<code>prefixSums_[10]=9+19=28</code>。 以计算<span class="math inline">\(0-9\)</span>的和为例，结点10存储的是（8，9）的<strong>部分和</strong>，结点8存储的是（0，7）的<strong>部分和</strong>，所以加起来就是<span class="math inline">\(0-9\)</span>的和。</p><h2 id="快速实现">快速实现</h2><p>上面求结点的父结点、将下标拆解为二进制去填充树的方式很慢，来看一种稍快的方式。 <strong>查询</strong>时，我们需要计算从某结点到dummy node的和，这就涉及计算该结点的parent： 假如要求结点7的parent，7的二进制原码为<code>111</code>，-7的补码为<code>001</code>，将原码和补码按位与得<code>001</code>，用原码减去<code>001</code>，得<code>110=6</code>，即7的父结点是6。 <strong>更新</strong>时，我们需要更新所有包含该结点的部分和结点： 假如更新了结点1，1的二进制原码为<code>001</code>，-1的补码为<code>111</code>，将原码和补码按位与得<code>001</code>，用原码加上<code>001</code>，得<code>010=2</code>，即还要更新结点2，更新了结点2，还要更新结点4...... 最后来看下非常简洁的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; prefix_sum_;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BIT</span>(<span class="keyword">int</span> n) : <span class="built_in">prefix_sum_</span>(n + <span class="number">1</span>, <span class="number">0</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; prefix_sum_.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            prefix_sum_[i] += delta;</span><br><span class="line">            i += <span class="built_in">lowbit</span>(i);  <span class="comment">// add last set bit</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compute nums[0] + nums[1] + ... + nums[i - 1]</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += prefix_sum_[i];</span><br><span class="line">            i -= <span class="built_in">lowbit</span>(i);  <span class="comment">// flip the last set bit</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="reference">Reference</h2><p><a href="https://youtu.be/CWDQJGaN1gY">Fenwick Tree or Binary Indexed Tree</a><br /><a href="https://zxi.mytechroad.com/blog/sp/fenwick-tree-binary-indexed-tree-sp3/">花花酱 Fenwick Tree / Binary Indexed Tree SP3</a><br /><a href="youtube.com/watch?v=uSFzHCZ4E-8">Fenwick Tree</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Search</title>
      <link href="/2020/01/11/Binary%20Search/"/>
      <url>/2020/01/11/Binary%20Search/</url>
      
        <content type="html"><![CDATA[<h2 id="基本型">基本型</h2><p>对于一个<strong>没有重复元素</strong>的<strong>有序</strong>数组，查找某个元素，存在返回index，否则返回-1。 二分查找有4个地方容易混淆： 1. lr初始化，即区间定义。可以是[l,r]，也可以是[l,r) 1. while的循环条件：可以是小于/小于等于 1. lr更新：可以是mid/mid+1/mid-1 1. 返回值：可以是l/r/mid/其他值</p><p>如果区间初始化为左闭右闭，循环条件就应该是小于等于，因为等于时待检查区间还有1个元素，需要继续；并且r的更新应该是mid-1，因为已经确定mid不是target且右边界是闭的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            m = l + (r - l) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> nums[m] == target:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            <span class="keyword">elif</span> nums[m] &gt; target:</span><br><span class="line">                r = m - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l = m + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>如果区间定义为左闭右开，此时循环条件小于，等于时表示区间为空；当mid&gt;target时r应该为mid，因为mid不是target且右边界开，即下一次不会考虑mid。这种情况如果没找到最终必然有l==r</p><p>我最常用的板子是左闭右开<code>[l, r)</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version 1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">// avoid dead loop</span></span><br><span class="line">        <span class="keyword">if</span> (target == nums[mid])</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">            l = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;   <span class="comment">// not found</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// version 2</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target == nums[mid])</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;   <span class="comment">// not found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>稍微扩展一些的题目有<code>lower_bound()</code>和<code>upper_bound()</code>，都是数组中有<strong>重复元素</strong>： 对于<code>lower_bound()</code>，即查找满足<span class="math inline">\(x&gt;=target\)</span>的最小<span class="math inline">\(x\)</span>的index： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &gt; nums[mid])</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 可变形为查找最后一个小于<span class="math inline">\(target\)</span>的数：即<span class="math inline">\(l-1\)</span>。 对于<code>upper_bound()</code>，即查找满足<span class="math inline">\(x&gt;target\)</span>的最小<span class="math inline">\(x\)</span>的index： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">biSearch</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (target &gt;= nums[mid])</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            r = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 可变形为查找最后一个小于等于<span class="math inline">\(target\)</span>的数：即<span class="math inline">\(l-1\)</span>。</p><p>Leetcode 704/35/34/69/367</p><h2 id="rotated-sorted-array"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array/">Rotated Sorted Array</a></h2><p>Find the index of the target if it is in the array, else return -1. All values of the array are <strong>unique</strong>.</p><p>We can find that at least half of the elements are sorted, so we should find out whether it's on the left or the right.</p><p>Let's see an example: [0,1,2,3]{all sorted}, [3,0,1,2]{right}, [2,3,0,1]{left or right}, [1,2,3,0]{left}. Another example: [0,1,2,3,4]{all sorted}, [4,0,1,2,3]{right}, [3,4,0,1,2]{right}, [2,3,4,0,1]{left}, [1,2,3,4,0]{left}. It is important to know that the sorted side is <strong>at least half of the array</strong> (longer). So the mid is in this side.</p><p>We can compare nums[mid] with nums[left] (or nums[right]) to decide which side is sorted. If <code>nums[mid]&gt;nums[left]</code>, then left half is sorted, else right is sorted.</p><p>The second step is to compare the target with nums[mid] to narrow down the range.</p><ul><li>Left half is sorted. If target&gt;nums[mid], it must lie in the right interval. So we can make left pointer forward left = mid + 1. <img src="https://img-blog.csdnimg.cn/20210303220721888.png" alt="在这里插入图片描述" /> If target&lt;nums[mid], there exists 2 situations: <img src="https://img-blog.csdnimg.cn/20210303214903684.png" alt="在这里插入图片描述" /> The first graph means target is less than mid but bigger than or equal to left, we move the right pointer toward left right = mid. The second graph means target is less than left, thus we move the left pointer towards right left = mid + 1.</li></ul><p>Finally if nums[mid]==nums[left], it means that left and mid are pointing to the same element due to the distinct values. In this case right must be mid or mid + 1. Where is the target? It must be on the right side of mid (actually nums[right]) or it do not exist. So we can move the left pointer by 1 to see nums[right] is equal to target or not.</p><ul><li>Right half is sorted. You can analysis this by yourself.</li></ul><p>We can write the following code based on the previous discussion:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            m = l + (r - l) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target == nums[m]:</span><br><span class="line">                <span class="keyword">return</span> m</span><br><span class="line">            <span class="keyword">if</span> nums[m] &gt; nums[l]: <span class="comment"># left side is sorted</span></span><br><span class="line">                <span class="keyword">if</span> target &gt; nums[m]:</span><br><span class="line">                    l = m + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> target &gt;= nums[l]:</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[m] &lt; nums[l]: <span class="comment"># right side is sorted</span></span><br><span class="line">                <span class="keyword">if</span> target &lt; nums[m]:</span><br><span class="line">                    r = m - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> target &lt;= nums[r]:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="rotated-sorted-array-ii"><a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">Rotated Sorted Array II</a></h2><p>It is the same as the last one except that the array may contains <strong>duplicates</strong>. And you do not need to find the index but return true or false.</p><p>The code is the same except that you should return T or F.</p><p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">Find Minimum in Rotated Sorted Array</a> shares the same idea:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMin</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            m = (l + r) &gt;&gt; <span class="number">1</span></span><br><span class="line">            ans = <span class="built_in">min</span>(ans, nums[m])</span><br><span class="line">            <span class="keyword">if</span> nums[m] &gt; nums[l]:</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, nums[l])</span><br><span class="line">                l = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[m] &lt; nums[l]:</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, nums[m])</span><br><span class="line">                r = m - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h2 id="rotated-sorted-array-yyds"><a href="https://leetcode-cn.com/problems/search-rotate-array-lcci/">Rotated Sorted Array yyds</a></h2><p>In this case you should return the index of the target in a duplicated array. If you do not know the idea above, this will be a little harder to solve since there are many corner cases.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span></span><br><span class="line">        ans = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">            m = l + (r - l) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target == nums[m]:</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, m)</span><br><span class="line">                r = m - <span class="number">1</span> <span class="comment"># do not return since there might be smaller index</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> nums[m] &gt; nums[l]: <span class="comment"># left side is sorted</span></span><br><span class="line">                <span class="keyword">if</span> target &gt; nums[m]:</span><br><span class="line">                    l = m + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> target &gt;= nums[l]:</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums[m] &lt; nums[l]: <span class="comment"># right side is sorted</span></span><br><span class="line">                <span class="keyword">if</span> target &lt; nums[m]:</span><br><span class="line">                    r = m - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> target &lt; nums[r]:</span><br><span class="line">                        l = m + <span class="number">1</span></span><br><span class="line">                    <span class="keyword">elif</span> target &gt; nums[r]:</span><br><span class="line">                        r = m - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">if</span> target == nums[l]:</span><br><span class="line">                            ans = <span class="built_in">min</span>(ans, l)</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            l = m + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> ans == <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="keyword">else</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Regular Expression</title>
      <link href="/2020/01/10/Regular%20Expression/"/>
      <url>/2020/01/10/Regular%20Expression/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正则表达式使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。</p></blockquote><p>先看一个判断Email地址是否合法的例子： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\\w+@\\w+(\\.\\w&#123;2,3&#125;)*\\.\\w&#123;2,3&#125;&quot;</span></span><br></pre></td></tr></table></figure> 一般Email地址的格式为：<code>X@X.com</code>，<code>X</code>表示一个或多个字符，<code>.com</code>后面可能还会跟有<code>.cn</code>等。总结这些规律，我们用上述的regex来匹配。 当然，这种匹配可能会遗漏某些特殊的Email地址，想要更大范围的覆盖，还需要更为复杂精巧的设计。 接着解释下上面的regex： <code>\\w</code>表示匹配字母/数字/下划线/汉字； <code>+</code>表示字符可以出现一次/多次； <code>(\\.\\w&#123;2,3&#125;)*</code>表示类似<code>.edu</code>格式的字符串可以出现零次/多次。 <code>\</code>在计算机科学中一般表示转义，形如<code>\w</code>的叫做<strong>元字符</strong>，类似的还有：</p><table><thead><tr class="header"><th>元字符</th><th>意义</th></tr></thead><tbody><tr class="odd"><td>.</td><td>除换行符外任意字符</td></tr><tr class="even"><td></td><td>数字</td></tr><tr class="odd"><td></td><td>字母/数字/汉字/下划线</td></tr><tr class="even"><td></td><td>单词的开始/结束</td></tr><tr class="odd"><td>^</td><td>字符串的开始</td></tr><tr class="even"><td>$</td><td>字符串的结束</td></tr></tbody></table><p>还可以通过<code>[]</code>表示元字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;[abc]23&quot;</span></span><br></pre></td></tr></table></figure><p>这样<code>a23</code>，<code>b23</code>，<code>c23</code>都是匹配的字符串。 形如<code>+</code>，<code>*</code>叫做<strong>修饰限定符</strong>，用来控制某类串重复多少次：</p><table><thead><tr class="header"><th>修饰限定符</th><th>意义</th></tr></thead><tbody><tr class="odd"><td>*</td><td>0次/多次</td></tr><tr class="even"><td>+</td><td>1次/多次</td></tr><tr class="odd"><td>？</td><td>0次/1次</td></tr><tr class="even"><td>{n}</td><td>n次</td></tr><tr class="odd"><td>{n,}</td><td>n次/更多次</td></tr><tr class="even"><td>{n,m}</td><td>n~m次</td></tr></tbody></table><p>很多语言和文本编辑器都集成了正则表达式引擎，以Java为例来测试下上述例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String regex = <span class="string">&quot;\\w+@\\w+(\\.\\w&#123;2,3&#125;)*\\.\\w&#123;2,3&#125;&quot;</span>;</span><br><span class="line">        String s1 = <span class="string">&quot;hello@stu.edu.cn&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(s1.matches(regex))</span><br><span class="line">            System.out.println(<span class="string">&quot;Valid Address!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上述内容只是最最基本的关于正则表达式的知识，还有零宽断言、递归匹配等更加复杂的内容有待挖掘~</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming</title>
      <link href="/2020/01/06/Dynamic%20Programming/"/>
      <url>/2020/01/06/Dynamic%20Programming/</url>
      
        <content type="html"><![CDATA[<p>DP是算法学习中非常重要的一种思想，关于动态规划的解释，可以参考<a href="https://www.zhihu.com/question/23995189/answer/613096905?hb_wx_block=1">这篇文章</a>。 ## 概念 使用DP三个条件：</p><ol type="1"><li>最优子结构：待解决的问题可以被分解为若干子问题，并且递归地找到子问题的最优解；</li><li>重叠子问题：在解决子问题的过程中，很多子问题都会被求解多次，第一次计算后存储该子问题的解，以后就可以直接使用，即降低了时间复杂度。如果子问题没有重叠，那么这就是<strong>分治</strong>的问题；</li><li>无后效性：子问题的最优解是确定的，完全可以用来解决更大的子问题。</li></ol><p>DP一般有两种形式：</p><ul><li>Top-down: 记忆化递归可能stackoverflow</li><li>Bottom-up</li></ul><p>模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记忆化递归</span></span><br><span class="line">unordered_map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>=&quot;&quot;&gt; hash;               <span class="comment">// memory dict</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(i, j, ...)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">if</span> <span class="title">base_case</span><span class="params">(i, j)</span></span></span><br><span class="line"><span class="function"><span class="keyword">return</span> ...</span>;</span><br><span class="line">    <span class="keyword">if</span> (i, j) <span class="keyword">not</span> in hash</span><br><span class="line">        hash[(i, j)] = ...;</span><br><span class="line">    <span class="keyword">return</span> hash[(i, j)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">f</span>(n, m);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DP</span></span><br><span class="line"><span class="keyword">int</span> dp[][];   <span class="comment">// need padding sometimes</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = ...;   <span class="comment">// base case</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;++i)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j =  <span class="number">0</span>;j &lt; m;++j)</span><br><span class="line">        dp[i][j] = ...                <span class="comment">// 状态转移</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[n][m];</span><br></pre></td></tr></table></figure><h2 id="分类">分类</h2><ul><li>基础题：LeetCode 509/70/746/62/63/343/96/<a href="https://www.cnblogs.com/EIMadrigal/p/11478906.html">Fibonacci</a></li><li>背包问题：<ul><li><a href="https://www.cnblogs.com/EIMadrigal/p/12345051.html">0/1 Knapsack</a>：LeetCode 416/1049/494/474</li><li><a href="https://www.cnblogs.com/EIMadrigal/p/12345051.html">Unbounded Knapsack</a>：LeetCode 518/377/70/322/279/139</li></ul></li><li>House Thief：LeetCode 198/213/337</li><li>股票问题：LeetCode 121/122/123/188/309/714</li><li>Longest Common Substring/Subsequeunce：LeetCode 300/1143/1035/674/718/53/392/115/583/72/647/516</li></ul><h2 id="步骤">步骤</h2><p>一般来讲，都是通过暴力-&gt;记忆化递归-&gt;Bottom-up三部曲，当然熟悉后可以快速判断这是一个DP问题，然后直接写出Bottom-up的解法。 我个人认为最难的一步在于判断出你的暴力解法满足DP的性质（你要能认出来这是一个DP问题），可以用DP去优化暴力解法。 - 确定问题分类 - 确定状态：需要几个变量来跟踪目前的状态，一般来讲至少需要index，因为这决定了我们已经考虑过了哪些值，没考虑哪些值，正在考虑哪些值。选定的变量组合要能唯一确定一个状态 - 状态转移：为了达到base case，当前状态怎么才能由之前的状态得到。也就是Top-down逐渐分解问题，每一次递归调用都会分解一下 - base case：一般比较简单，不废话了 - code：思路清楚了，也不难 - 优化：一般优化空间复杂度</p><h2 id="ref">Ref</h2><p><a href="https://leetcode.com/problems/target-sum/discuss/455024/DP-IS-EASY!-5-Steps-to-Think-Through-DP-Questions.">DP IS EASY! 5 Steps to Think Through DP Questions.</a> &lt;/int,&gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>留白</title>
      <link href="/2020/01/01/%E7%95%99%E7%99%BD/"/>
      <url>/2020/01/01/%E7%95%99%E7%99%BD/</url>
      
        <content type="html"><![CDATA[<p>hello</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>什么是P问题、NP问题和NPC问题</title>
      <link href="/2020/01/01/%E4%BB%80%E4%B9%88%E6%98%AFP%E9%97%AE%E9%A2%98%E3%80%81NP%E9%97%AE%E9%A2%98%E5%92%8CNPC%E9%97%AE%E9%A2%98/"/>
      <url>/2020/01/01/%E4%BB%80%E4%B9%88%E6%98%AFP%E9%97%AE%E9%A2%98%E3%80%81NP%E9%97%AE%E9%A2%98%E5%92%8CNPC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>很久之前观看WJMZBMR特奖答辩时听到了<span class="math inline">\(P!=NP\)</span>，一直似懂非懂，看了Matrix67的<a href="http://www.matrix67.com/blog/archives/105">什么是P问题、NP问题和NPC问题</a>，<del>特意作文纪念</del> 。</p><p>一张图就可以解释三者间的关系：<img src="https://img-blog.csdnimg.cn/20190728150856295.png" alt="在这里插入图片描述" /> ## 什么是P问题、NP问题和NPC问题 这或许是众多OIer最大的误区之一。 你会经常看到网上出现“这怎么做，这不是NP问题吗”、“这个只有搜了，这已经被证明是NP问题了”之类的话。你要知道，大多数人此时所说的NP问题其实都是指的NPC问题。他们没有搞清楚NP问题和NPC问题的概念。NP问题并不是那种“只有搜才行”的问题，NPC问题才是。好，行了，基本上这个误解已经被澄清了。下面的内容都是在讲什么是P问题，什么是NP问题，什么是NPC问题，你如果不是很感兴趣就可以不看了。接下来你可以看到，把NP问题当成是NPC问题是一个多大的错误。</p><p>还是先用几句话简单说明一下时间复杂度。时间复杂度并不是表示一个程序解决问题需要花多少时间，而是当问题规模扩大后，程序需要的时间长度增长得有多快。也就是说，对于高速处理数据的计算机来说，处理某一个特定数据的效率不能衡量一个程序的好坏，而应该看当这个数据的规模变大到数百倍后，程序运行时间是否还是一样，或者也跟着慢了数百倍，或者变慢了数万倍。不管数据有多大，程序处理花的时间始终是那么多的，我们就说这个程序很好，具有<span class="math inline">\(O(1)\)</span>的时间复杂度，也称常数级复杂度；数据规模变得有多大，花的时间也跟着变得有多长，这个程序的时间复杂度就是<span class="math inline">\(O(n)\)</span>，比如找n个数中的最大值；而像冒泡排序、插入排序等，数据扩大2倍，时间变慢4倍的，属于<span class="math inline">\(O(n^2)\)</span>的复杂度。还有一些穷举类的算法，所需时间长度成几何阶数上涨，这就是<span class="math inline">\(O(a^n)\)</span>的指数级复杂度，甚至<span class="math inline">\(O(n!)\)</span>的阶乘级复杂度。不会存在<span class="math inline">\(O(2*n^2)\)</span>的复杂度，因为前面的那个“2”是系数，根本不会影响到整个程序的时间增长。同样地，<span class="math inline">\(O (n^3+n^2)\)</span>的复杂度也就是<span class="math inline">\(O(n^3)\)</span>的复杂度。因此，我们会说，一个<span class="math inline">\(O(0.01*n^3)\)</span>的程序的效率比<span class="math inline">\(O(100*n^2)\)</span>的效率低，尽管在n很小的时候，前者优于后者，但后者时间随数据规模增长得慢，最终<span class="math inline">\(O(n^3)\)</span>的复杂度将远远超过<span class="math inline">\(O(n^2)\)</span>。我们也说，<span class="math inline">\(O(n^{100})\)</span>的复杂度小于<span class="math inline">\(O(1.01^n)\)</span>的复杂度。</p><p>容易看出，前面的几类复杂度被分为两种级别，其中后者的复杂度无论如何都远远大于前者：一种是<span class="math inline">\(O(1),O(log(n)),O(n^a)\)</span>等，我们把它叫做多项式级的复杂度，因为它的规模n出现在底数的位置；另一种是<span class="math inline">\(O(a^n)\)</span>和<span class="math inline">\(O(n!)\)</span>型复杂度，它是非多项式级的，其复杂度计算机往往不能承受。当我们在解决一个问题时，我们选择的算法通常都需要是多项式级的复杂度，非多项式级的复杂度需要的时间太多，往往会超时，除非是数据规模非常小。</p><p>自然地，人们会想到一个问题：会不会所有的问题都可以找到复杂度为多项式级的算法呢？很遗憾，答案是否定的。有些问题甚至根本不可能找到一个正确的算法来，这称之为“不可解问题”(Undecidable Decision Problem)。The Halting Problem就是一个著名的不可解问题，在我的Blog上有过专门的介绍和证明。再比如，输出从1到n这n个数的全排列。不管你用什么方法，你的复杂度都是阶乘级，因为你总得用阶乘级的时间打印出结果来。有人说，这样的“问题”不是一个“正规”的问题，正规的问题是让程序解决一个问题，输出一个“YES”或“NO”（这被称为判定性问题），或者一个什么什么的最优值（这被称为最优化问题）。那么，根据这个定义，我也能举出一个不大可能会有多项式级算法的问题来：Hamilton回路。问题是这样的：给你一个图，问你能否找到一条经过每个顶点一次且恰好一次（不遗漏也不重复）最后又走回来的路（满足这个条件的路径叫做Hamilton回路）。这个问题现在还没有找到多项式级的算法。事实上，这个问题就是我们后面要说的NPC问题。</p><p>下面引入P类问题的概念：如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。P是英文单词多项式的第一个字母。哪些问题是P类问题呢？通常NOI和NOIP不会出不属于P类问题的题目。我们常见到的一些信息奥赛的题目都是P问题。道理很简单，一个用穷举换来的非多项式级时间的超时程序不会涵盖任何有价值的算法。</p><p>接下来引入NP问题的概念。这个就有点难理解了，或者说容易理解错误。在这里强调（回到我竭力想澄清的误区上），NP问题不是非P类问题。NP问题是指可以在多项式的时间里验证一个解的问题。NP问题的另一个定义是，可以在多项式的时间里猜出一个解的问题。比方说，我RP很好，在程序中需要枚举时，我可以一猜一个准。现在某人拿到了一个求最短路径的问题，问从起点到终点是否有一条小于100个单位长度的路线。它根据数据画好了图，但怎么也算不出来，于是来问我：你看怎么选条路走得最少？我说，我RP很好，肯定能随便给你指条很短的路出来。然后我就胡乱画了几条线，说就这条吧。那人按我指的这条把权值加起来一看，嘿，神了，路径长度98，比100小。于是答案出来了，存在比100小的路径。别人会问他这题怎么做出来的，他就可以说，因为我找到了一个比100 小的解。在这个题中，找一个解很困难，但验证一个解很容易。验证一个解只需要O(n)的时间复杂度，也就是说我可以花O(n)的时间把我猜的路径的长度加出来。那么，只要我RP好，猜得准，我一定能在多项式的时间里解决这个问题。我猜到的方案总是最优的，不满足题意的方案也不会来骗我去选它。这就是NP问题。当然有不是NP问题的问题，即你猜到了解但是没用，因为你不能在多项式的时间里去验证它。下面我要举的例子是一个经典的例子，它指出了一个目前还没有办法在多项式的时间里验证一个解的问题。很显然，前面所说的Hamilton回路是NP问题，因为验证一条路是否恰好经过了每一个顶点非常容易。但我要把问题换成这样：试问一个图中是否不存在Hamilton回路。这样问题就没法在多项式的时间里进行验证了，因为除非你试过所有的路，否则你不敢断定它“没有Hamilton回路”。</p><p>之所以要定义NP问题，是因为通常只有NP问题才可能找到多项式的算法。我们不会指望一个连多项式地验证一个解都不行的问题存在一个解决它的多项式级的算法。相信读者很快明白，信息学中的号称最困难的问题——“NP问题”，实际上是在探讨NP问题与P类问题的关系。</p><p>很显然，所有的P类问题都是NP问题。也就是说，能多项式地解决一个问题，必然能多项式地验证一个问题的解——既然正解都出来了，验证任意给定的解也只需要比较一下就可以了。关键是，人们想知道，是否所有的NP问题都是P类问题。我们可以再用集合的观点来说明。如果把所有P类问题归为一个集合P中，把所有 NP问题划进另一个集合NP中，那么，显然有P属于NP。现在，所有对NP问题的研究都集中在一个问题上，即究竟是否有P=NP？通常所谓的“NP问题”，其实就一句话：证明或推翻P=NP。</p><p>NP问题一直都是信息学的巅峰。巅峰，意即很引人注目但难以解决。在信息学研究中，这是一个耗费了很多时间和精力也没有解决的终极问题，好比物理学中的大统一和数学中的歌德巴赫猜想等。</p><p>目前为止这个问题还“啃不动”。但是，一个总的趋势、一个大方向是有的。人们普遍认为，P=NP不成立，也就是说，多数人相信，存在至少一个不可能有多项式级复杂度的算法的NP问题。人们如此坚信P≠NP是有原因的，就是在研究NP问题的过程中找出了一类非常特殊的NP问题叫做NP-完全问题，也即所谓的 NPC问题。C是英文单词“完全”的第一个字母。正是NPC问题的存在，使人们相信P≠NP。下文将花大量篇幅介绍NPC问题，你从中可以体会到NPC问题使P=NP变得多么不可思议。</p><p>为了说明NPC问题，我们先引入一个概念——约化(Reducibility，有的资料上叫“归约”)。</p><p>简单地说，一个问题A可以约化为问题B的含义即是，可以用问题B的解法解决问题A，或者说，问题A可以“变成”问题B。《算法导论》上举了这么一个例子。比如说，现在有两个问题：求解一个一元一次方程和求解一个一元二次方程。那么我们说，前者可以约化为后者，意即知道如何解一个一元二次方程那么一定能解出一元一次方程。我们可以写出两个程序分别对应两个问题，那么我们能找到一个“规则”，按照这个规则把解一元一次方程程序的输入数据变一下，用在解一元二次方程的程序上，两个程序总能得到一样的结果。这个规则即是：两个方程的对应项系数不变，一元二次方程的二次项系数为0。按照这个规则把前一个问题转换成后一个问题，两个问题就等价了。同样地，我们可以说，Hamilton回路可以约化为TSP问题(Travelling Salesman Problem，旅行商问题)：在Hamilton回路问题中，两点相连即这两点距离为0，两点不直接相连则令其距离为1，于是问题转化为在TSP问题中，是否存在一条长为0的路径。Hamilton回路存在当且仅当TSP问题中存在长为0的回路。</p><p>“问题A可约化为问题B”有一个重要的直观意义：B的时间复杂度高于或者等于A的时间复杂度。也就是说，问题A不比问题B难。这很容易理解。既然问题A能用问题B来解决，倘若B的时间复杂度比A的时间复杂度还低了，那A的算法就可以改进为B的算法，两者的时间复杂度还是相同。正如解一元二次方程比解一元一次方程难，因为解决前者的方法可以用来解决后者。</p><p>很显然，约化具有一项重要的性质：约化具有传递性。如果问题A可约化为问题B，问题B可约化为问题C，则问题A一定可约化为问题C。这个道理非常简单，就不必阐述了。</p><p>现在再来说一下约化的标准概念就不难理解了：如果能找到这样一个变化法则，对任意一个程序A的输入，都能按这个法则变换成程序B的输入，使两程序的输出相同，那么我们说，问题A可约化为问题B。</p><p>当然，我们所说的“可约化”是指的可“多项式地”约化(Polynomial-time Reducible)，即变换输入的方法是能在多项式的时间里完成的。约化的过程只有用多项式的时间完成才有意义。</p><p>好了，从约化的定义中我们看到，一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了。通过对某些问题的不断约化，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。再回想前面讲的P和NP问题，联想起约化的传递性，自然地，我们会想问，如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后是否有可能找到一个时间复杂度最高，并且能“通吃”所有的 NP问题的这样一个超级NP问题？答案居然是肯定的。也就是说，存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。这种问题的存在难以置信，并且更加不可思议的是，这种问题不只一个，它有很多个，它是一类问题。这一类问题就是传说中的NPC 问题，也就是NP-完全问题。NPC问题的出现使整个NP问题的研究得到了飞跃式的发展。我们有理由相信，NPC问题是最复杂的问题。再次回到全文开头，我们可以看到，人们想表达一个问题不存在多项式的高效算法时应该说它“属于NPC问题”。此时，我的目的终于达到了，我已经把NP问题和NPC问题区别开了。到此为止，本文已经写了近5000字了，我佩服你还能看到这里来，同时也佩服一下自己能写到这里来。</p><p>NPC问题的定义非常简单。同时满足下面两个条件的问题就是NPC问题。首先，它得是一个NP问题；然后，所有的NP问题都可以约化到它。证明一个问题是 NPC问题也很简单。先证明它至少是一个NP问题，再证明其中一个已知的NPC问题能约化到它（由约化的传递性，则NPC问题定义的第二条也得以满足；至于第一个NPC问题是怎么来的，下文将介绍），这样就可以说它是NPC问题了。</p><p>既然所有的NP问题都能约化成NPC问题，那么只要任意一个NPC问题找到了一个多项式的算法，那么所有的NP问题都能用这个算法解决了，NP也就等于P 了。因此，给NPC找一个多项式算法太不可思议了。因此，前文才说，“正是NPC问题的存在，使人们相信P≠NP”。我们可以就此直观地理解，NPC问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度的搜索。</p><p>顺便讲一下NP-Hard问题。NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比 NPC问题的范围广）。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p><p>不要以为NPC问题是一纸空谈。NPC问题是存在的。确实有这么一个非常具体的问题属于NPC问题。下文即将介绍它。</p><p>下文即将介绍逻辑电路问题。这是第一个NPC问题。其它的NPC问题都是由这个问题约化而来的。因此，逻辑电路问题是NPC类问题的“鼻祖”。</p><p>逻辑电路问题是指的这样一个问题：给定一个逻辑电路，问是否存在一种输入使输出为True。 什么叫做逻辑电路呢？一个逻辑电路由若干个输入，一个输出，若干“逻辑门”和密密麻麻的线组成。看下面一例，不需要解释你马上就明白了。 <img src="https://img-blog.csdnimg.cn/20190728155740104.png" alt="在这里插入图片描述" /> 这是个较简单的逻辑电路，当输入1、输入2、输入3分别为True、True、False或False、True、False时，输出为True。</p><p>有输出无论如何都不可能为True的逻辑电路吗？有。下面就是一个简单的例子。 <img src="https://img-blog.csdnimg.cn/20190728155803196.png" alt="在这里插入图片描述" /> 上面这个逻辑电路中，无论输入是什么，输出都是False。我们就说，这个逻辑电路不存在使输出为True的一组输入。</p><p>回到上文，给定一个逻辑电路，问是否存在一种输入使输出为True，这即逻辑电路问题。</p><p>逻辑电路问题属于NPC问题。这是有严格证明的。它显然属于NP问题，并且可以直接证明所有的NP问题都可以约化到它（不要以为NP问题有无穷多个将给证明造成不可逾越的困难）。证明过程相当复杂，其大概意思是说任意一个NP问题的输入和输出都可以转换成逻辑电路的输入和输出（想想计算机内部也不过是一些 0和1的运算），因此对于一个NP问题来说，问题转化为了求出满足结果为True的一个输入（即一个可行解）。</p><p>有了第一个NPC问题后，一大堆NPC问题就出现了，因为再证明一个新的NPC问题只需要将一个已知的NPC问题约化到它就行了。后来，Hamilton 回路成了NPC问题，TSP问题也成了NPC问题。现在被证明是NPC问题的有很多，任何一个找到了多项式算法的话所有的NP问题都可以完美解决了。因此说，正是因为NPC问题的存在，P=NP变得难以置信。P=NP问题还有许多有趣的东西，有待大家自己进一步的挖掘。攀登这个信息学的巅峰是我们这一代的终极目标。现在我们需要做的，至少是不要把概念弄混淆了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Pointers and Memory</title>
      <link href="/2020/01/01/Pointers%20and%20Memory/"/>
      <url>/2020/01/01/Pointers%20and%20Memory/</url>
      
        <content type="html"><![CDATA[<p><em>Stanford CS Education Library #102</em> ## Basic Pointers 指针主要有两个用途：使不同的代码段共享信息、方便链表（树）的处理。 指针示意图： <img src="https://img-blog.csdnimg.cn/2019041619200938.png" alt="在这里插入图片描述" /> <code>dereference</code>操作会根据指针的值去找到它的<code>pointee</code>。 <code>NULL</code>是一个特殊的指针值（一般是地址0），表示这个指针不指向任何<code>pointee</code>。 <img src="https://img-blog.csdnimg.cn/20190416193109659.png" alt="在这里插入图片描述" /> 指针的赋值会使得两个指针指向相同的<code>pointee</code>，但<code>pointee</code>本身不会改变： <img src="https://img-blog.csdnimg.cn/20190416192708547.png" alt="在这里插入图片描述" /> 传指针vs传值： <img src="https://img-blog.csdnimg.cn/20190416193445969.png" alt="在这里插入图片描述" /> 定义一个指针后，这个指针是没有被初始化的： <img src="https://img-blog.csdnimg.cn/2019041619372662.png" alt="在这里插入图片描述" /> 这时候如果进行<code>dereference</code>操作会发生Runtime Error. 对于Java、LISP等语言，当定义一个指针时，系统会将其设置为<code>NULL</code>，并且会在<code>dereference</code>操作时检查其值，这也是Java比较慢的原因之一。 <img src="https://img-blog.csdnimg.cn/20190416194404553.png" alt="在这里插入图片描述" /> 一个比较典型的指针错误：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BadPointer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* p;  <span class="comment">//allocate the pointer, but not the pointee</span></span><br><span class="line">    *p = <span class="number">42</span>; <span class="comment">//serious RE</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行<code>*p</code>时： <img src="https://img-blog.csdnimg.cn/20190416195104100.png" alt="在这里插入图片描述" /></p><h2 id="local-memory">Local Memory</h2><p>函数开始运行时，会为局部变量分配内存，结束运行会回收内存。 看一个错误的例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TAB -- The Ampersand Bug function</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">TAB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">return</span> (&amp;temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Victim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* ptr;</span><br><span class="line">    ptr = TAB();</span><br><span class="line">    *ptr = <span class="number">42</span>;    <span class="comment">//The pointee was local to TAB</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题在于<code>TAB()</code>返回了一个局部变量的地址，但这个局部变量的空间已经被回收，<code>ptr</code>指针没有<code>pointee</code>。</p><h2 id="reference-parameters">Reference Parameters</h2><p>传值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span> worth)</span> </span>&#123;</span><br><span class="line">    worth++;</span><br><span class="line">    <span class="comment">// T2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> netWorth = <span class="number">55</span>;  <span class="comment">//T1</span></span><br><span class="line">    B(netWorth);</span><br><span class="line">    <span class="comment">// T3 -- B() did not change netWorth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190416203356234.png" alt="在这里插入图片描述" /> 传指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">(<span class="keyword">int</span>* worthRef)</span> </span>&#123;</span><br><span class="line">    (*worthRef)++;</span><br><span class="line">    <span class="comment">// T2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> netWorth = <span class="number">55</span>;  <span class="comment">//T1</span></span><br><span class="line">    B(&amp;netWorth);</span><br><span class="line">    <span class="comment">// T3</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190416203939385.png" alt="在这里插入图片描述" /> 传指针在c++中可以通过<strong>传引用</strong>的方式实现： <img src="https://img-blog.csdnimg.cn/20190416205349526.png" alt="在这里插入图片描述" /></p><h2 id="heap-memory">Heap Memory</h2><p>分配示意图： <img src="https://img-blog.csdnimg.cn/20190416205821650.png" alt="在这里插入图片描述" /> 释放示意图： <img src="https://img-blog.csdnimg.cn/20190416210059909.png" alt="在这里插入图片描述" /> 释放后，指针虽然还在，但却不可以在使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//size以字节为单位，分配成功返回指针，失败返回NULL</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不需要size，因为heap manager之前已经记录过</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span>* heapBlockPointer)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190416211219354.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20190416211242340.png" alt="在这里插入图片描述" /> 一个<code>StringCopy()</code>的例子： <img src="https://img-blog.csdnimg.cn/20190416211900707.png" alt="在这里插入图片描述" /> 对于分配的堆内存，只有一个负责释放的，要么是<code>caller</code>，要么是<code>callee</code>： <img src="https://img-blog.csdnimg.cn/20190416212610387.png" alt="在这里插入图片描述" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linked List-2</title>
      <link href="/2020/01/01/Linked%20List-2/"/>
      <url>/2020/01/01/Linked%20List-2/</url>
      
        <content type="html"><![CDATA[<h2 id="三编码技巧">三、编码技巧</h2><p><strong>1、遍历链表</strong> 先将<code>head</code>指针赋值给一个局部变量<code>current</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//return the number of nodes in a list (while-loop version)</span><br><span class="line">int Length(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    int count = 0;</span><br><span class="line">    struct node* current = head;</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然也可以写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for (current = head; current != NULL; current = current-&gt;next) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>2、通过传递<code>reference pointer</code>改变某个指针</strong> 看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//Change the passed in head pointer to be NULL</span><br><span class="line">//Uses a reference pointer to access the caller&#x27;s memory</span><br><span class="line">void ChangeToNull(struct node** headRef)  //takes a pointer to the value of interest</span><br><span class="line">&#123;</span><br><span class="line">    *headRef = NULL;//use * to access the value of interest</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void ChangeCaller()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head1;</span><br><span class="line">    struct node* head2;</span><br><span class="line"></span><br><span class="line">    ChangeToNull(&amp;head1);//use &amp; to compute and pass a pointer to</span><br><span class="line">    ChangeToNull(&amp;head2);//the value of interest</span><br><span class="line">    //head1 and head2 are NULL at this point</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块的思想是和（一）中的<code>Push()</code>类似。 内存示意图： <img src="https://img-blog.csdnimg.cn/20190330151133187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <strong>3、通过<code>Push()</code>建立链表（头插法）</strong> 这种方式的优点是速度飞快，简单易行，缺点是得到的链表是逆序的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct node* AddAtHead()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = NULL;</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt; 6; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(&amp;head, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //head == &#123;5,4,3,2,1&#125;;</span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、尾插法建立链表</strong> 这种方法需要找到链表最后一个节点，改变其<code>.next</code>域： <img src="https://img-blog.csdnimg.cn/20190330155111506.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><ul><li>插入或者删除节点，需要找到该节点的前一个节点的指针，改变其<code>.next</code>域；</li><li>特例：<strong>如果涉及第一个节点的操作，那么一定要改变<code>head</code>指针。</strong></li></ul><p><strong>5、特例+尾插法</strong> 如果要构建一个新的链表，那么头节点就要单独处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct node* BuildWithSpecialCase()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = NULL;</span><br><span class="line">    struct node* tail;</span><br><span class="line">    </span><br><span class="line">    //deal with the head node here, and set the tail pointer</span><br><span class="line">    Push(&amp;head, 1);</span><br><span class="line">    tail = head;</span><br><span class="line"></span><br><span class="line">    //do all the other nodes using &quot;tail&quot;</span><br><span class="line">    for (int i = 2; i &lt; 6; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(&amp;(tail-&gt;next), i);   //add node at tail-&gt;next</span><br><span class="line">        tail = tail-&gt;next;     //advance tail to point to last node</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return head;    //head == &#123;1,2,3,4,5&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、临时节点建立</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct node* BuildWithDummyNode()</span><br><span class="line">&#123;</span><br><span class="line">    struct node dummy;   //dummy node is temporarily the first node</span><br><span class="line">    struct node* tail = &amp;dummy;   //build the list on dummy.next</span><br><span class="line"></span><br><span class="line">    dummy.next = NULL;</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt; 6; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(&amp;(tail-&gt;next), i);</span><br><span class="line">        tail = tail-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //the real result list is now in dummy.next</span><br><span class="line">    //dummy.next == &#123;1,2,3,4,5&#125;</span><br><span class="line">    return dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7、本地指针建立</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">struct node* BuildWithLocalRef()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = NULL;</span><br><span class="line">    struct node** lastPtrRef = &amp;head;   //start out pointing to the head pointer</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt; 6; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(lastPtrRef, i);  //add node at the last pointer in the list</span><br><span class="line">        //advance to point to the new last pointer</span><br><span class="line">        lastPtrRef = &amp;((*lastPtrRef)-&gt;next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return head;  //head == &#123;1,2,3,4,5&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块可能有些抽象： 1）<code>lastPtrRef</code>开始指向<code>head</code>指针，以后指向链表最后一个节点中的<code>.next</code>域； 2）在最后加上一个节点； 3）让<code>lastPtrRef</code>指针向后移动，指向最后一个<strong>节点的<code>.next</code>域</strong>。 <code>(*lastPtrRef)-&gt;next</code>可以理解为<code>*lastPtrRef</code>指针指向的节点的<code>next</code>域。 <img src="https://img-blog.csdnimg.cn/20190403193507385.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 四、代码示例 <strong>1、AppendNode()</strong> 1) 不使用<code>Push()</code>函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">struct node* AppendNode(struct node** headRef, int num)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = *headRef;</span><br><span class="line">    struct node* newNode;</span><br><span class="line"></span><br><span class="line">    newNode = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">    newNode-&gt;data = num;</span><br><span class="line">    newNode-&gt;next = NULL;</span><br><span class="line"></span><br><span class="line">    //special case for length 0</span><br><span class="line">    if (current == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        *headRef = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        //Locate the last node</span><br><span class="line">        while (current-&gt;next != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        current-&gt;next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>使用<code>Push()</code>函数：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">struct node* AppendNode(struct node** headRef, int num)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = *headRef;</span><br><span class="line"></span><br><span class="line">    //special case for length 0</span><br><span class="line">    if (current == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(headRef, num);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        //Locate the last node</span><br><span class="line">        while (current-&gt;next != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            current = current-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //Build the node after the last node</span><br><span class="line">        Push(&amp;(current-&gt;next), num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、CopyList</strong> 用一个指针遍历原来的链表，两个指针跟踪新生成的链表（一个<code>head</code>，一个<code>tail</code>）。</p><ol type="1"><li>不使用<code>Push()</code>函数： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">struct node* CopyList(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;   //used to iterate over the original list</span><br><span class="line">    struct node* newList = NULL;   //head of the new list</span><br><span class="line">    struct node* tail = NULL;     //kept pointing to the last node in the new list</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        if (newList == NULL)    //special case for the first new node</span><br><span class="line">        &#123;</span><br><span class="line">            newList = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">            newList-&gt;data = current-&gt;data;</span><br><span class="line">            newList-&gt;next = NULL;</span><br><span class="line">            tail = newList;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            tail-&gt;next = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">            tail = tail-&gt;next;</span><br><span class="line">            tail-&gt;data = current-&gt;data;</span><br><span class="line">            tail-&gt;next = NULL;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 内存示意图： <img src="https://img-blog.csdnimg.cn/20190407094454488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li><li>使用<code>Push()</code>函数：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">struct node* CopyList2(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;   //used to iterate over the original list</span><br><span class="line">    struct node* newList = NULL;   //head of the new list</span><br><span class="line">    struct node* tail = NULL;     //kept pointing to the last node in the new list</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        if (newList == NULL)    //special case for the first new node</span><br><span class="line">        &#123;</span><br><span class="line">            Push(&amp;newList, current-&gt;data);</span><br><span class="line">            tail = newList;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            Push(&amp;(tail-&gt;next), current-&gt;data);   //add each node at the tail </span><br><span class="line">            tail = tail-&gt;next;       //advance the tail to the new last node;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>使用<code>Dummy Node</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct node* CopyList3(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;   //used to iterate over the original list</span><br><span class="line">    struct node* tail = NULL;     //kept pointing to the last node in the new list</span><br><span class="line">    struct node dummy;            //build the new list off this dummy node</span><br><span class="line"></span><br><span class="line">    dummy.next = NULL;</span><br><span class="line">    tail = &amp;dummy;      //start the tail pointing at the dummy</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(&amp;(tail-&gt;next), current-&gt;data);   //add each node at the tail</span><br><span class="line">        tail = tail-&gt;next;                    //advance the tail to the new last node</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>使用<code>Local References</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct node* CopyList4(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;   //used to iterate over the original list</span><br><span class="line">    struct node* newList = NULL;   //head of the new list</span><br><span class="line">    struct node** lastPtr;           </span><br><span class="line"></span><br><span class="line">    lastPtr = &amp;newList;      //start off pointing to the head itself</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(lastPtr, current-&gt;data);   //add each node at the lastPtr</span><br><span class="line">        lastPtr = &amp;((*lastPtr)-&gt;next);    //advance lastPtr</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心思想是使用<code>lastPtr</code>指针指向每个节点的<code>.next</code>域这个指针，而不是指向节点本身。</p><ol start="5" type="1"><li>使用<code>Recursive</code>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct node* CopyList5(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;</span><br><span class="line">    if (head == NULL)</span><br><span class="line">        return NULL;</span><br><span class="line">    else &#123;</span><br><span class="line">        struct node* newList = (struct node*)malloc(sizeof(struct node));  //make one node</span><br><span class="line">        newList-&gt;data = current-&gt;data;</span><br><span class="line"></span><br><span class="line">        newList-&gt;next = CopyList5(current-&gt;next);    //recur for the rest</span><br><span class="line">        return newList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linked List-1</title>
      <link href="/2020/01/01/Linked%20List-1/"/>
      <url>/2020/01/01/Linked%20List-1/</url>
      
        <content type="html"><![CDATA[<p>链表一直是面试的重点问题，恰好最近看到了Stanford的一篇<a href="http://cslibrary.stanford.edu/">材料</a>，涵盖了链表的基础知识以及派生的各种问题。 第一篇主要是关于链表的基础知识。 ## 一、基本结构 <strong>1、数组回顾</strong> 链表和数组都是用来存储一堆数据的集合，其中单个元素的类型可以有很多种。 通过数组下标可以直接访问数组中的元素，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">void ArrayTest()</span><br><span class="line">&#123;</span><br><span class="line">    int scores[100];</span><br><span class="line"></span><br><span class="line">    //初始化前3个元素</span><br><span class="line">    scores[0] = 1;</span><br><span class="line">    scores[1] = 2;</span><br><span class="line">    scores[2] = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键的是：整个数组被分配了一整块内存： <img src="https://img-blog.csdnimg.cn/2019032615150057.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" /> 数组元素之所以能被快速访问，原因在于其地址的计算是通过首地址加上偏移值得到的，只有一次乘法和一次加法运算而已。 数组的缺点在于：</p><ul><li>数组的大小是固定的：数组的规模在编译时就被确定，当然你可以在运行时通过<code>malloc</code>在堆中改变数组的大小，不过很麻烦；</li><li>由于上述原因，所以很多人就会定义一个很大的数组，不过这又会导致两个问题： 1）数组的大部分空间可能被浪费掉； 2）如果程序需要更大的空间，就会崩溃。</li><li>在数组前面插入元素代价很大，需要移动很多元素。 链表也有自己的优缺点，只不过和数组刚好互补：链表会在需要时为每个节点单独分配内存。 <strong>2、指针回顾</strong> 指针存储了变量的地址，如果指针的值是<code>NULL</code>（c/c++中<code>NULL</code>可以表示逻辑<code>false</code>），那么该指针不指向任何变量。 在c/c++中，没有初始化的指针就是野指针，对野指针进行<code>dereference</code>操作可能导致程序崩溃。 两个指针的赋值结果就是都指向相同的内存区域。 <code>malloc()</code>函数用来在堆中申请一块内存，并且返回一个指向该块的指针，如果申请失败，会返回<code>NULL</code>，使用后，需要用<code>free()</code>去释放。这些堆函数原型都在<code>stdlib.h</code>头文件中声明。 <strong>3、链表</strong> 一个包含<code>&#123;1,2,3&#125;</code>三个元素的链表： <img src="https://img-blog.csdnimg.cn/20190326161911717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 空链表的<code>head</code>的值是<code>NULL</code>，<strong>编程时要考虑到这种边界情况</strong>。</li></ul><p>节点的定义：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct node &#123;</span><br><span class="line">    int data;</span><br><span class="line">    struct node* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>指向节点的指针类型是<code>struct node*</code>。 接着看看上图中的链表是怎么建立的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Build the list &#123;1,2,3&#125; in the heap and store</span><br><span class="line">its head pointer in a local stack variable.</span><br><span class="line">Returns the head pointer to the caller.</span><br><span class="line">*/</span><br><span class="line">struct node* BuildOneTwoThree()</span><br><span class="line">&#123;</span><br><span class="line">    //there are three pointers in the stack, but pointer assignment link the list.</span><br><span class="line">    struct node* head = NULL;</span><br><span class="line">    struct node* second = NULL;</span><br><span class="line">    struct node* third = NULL;</span><br><span class="line"></span><br><span class="line">    //allocate 3 nodes</span><br><span class="line">    head = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">    second = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">    third = (struct node*)malloc(sizeof(struct node));</span><br><span class="line"></span><br><span class="line">    head-&gt;data = 1;    //setup first node</span><br><span class="line">    head-&gt;next = second;   //note:pointer assignment rule</span><br><span class="line"></span><br><span class="line">    second-&gt;data = 2;    //setup second node</span><br><span class="line">    second-&gt;next = third;</span><br><span class="line"></span><br><span class="line">    third-&gt;data = 3;    //setup third node</span><br><span class="line">    third-&gt;next = NULL;</span><br><span class="line"></span><br><span class="line">    //at this point, the linked list referenced by &quot;head&quot;</span><br><span class="line">    //matches the list in the drawing.</span><br><span class="line">    return head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何求链表中的元素个数呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Given a linked list head pointer, compute </span><br><span class="line">and return the number of nodes in the list.</span><br><span class="line">*/</span><br><span class="line">int Length(struct node* head)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* current = head;</span><br><span class="line">    int count = 0;</span><br><span class="line"></span><br><span class="line">    while (current != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，传递进函数的只是头指针，这样调用者和被调用者都有了头指针，但是却共享了整个链表。</p><ul><li><code>current</code>指针占据的空间会被自动释放，但是堆中的链表仍然保留；</li><li><code>while</code>循环已经考虑了空链表的情况；</li><li><code>current</code>最后的值会是<code>NULL</code>。 调用<code>Length()</code>：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void LengthTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* myList = BuildOneTwoThree();</span><br><span class="line">    int len = Length(myList);    //results in len == 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用<code>Length()</code>之前： <img src="https://img-blog.csdnimg.cn/20190326172043909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li><li>执行<code>Length()</code>过程中： <img src="https://img-blog.csdnimg.cn/20190326172354519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></li></ul><h2 id="二链表建立">二、链表建立</h2><p>用<code>BuildOneTwoThree()</code>函数来建立链表未免有些古板，下面用头插法建立链表：</p><p>1、分配节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct node* newNode;</span><br><span class="line">newNode = (struct node*)malloc(sizeof(struct node));</span><br><span class="line">newNode-&gt;data = data_client_wants_stored;</span><br></pre></td></tr></table></figure><p>2、让新节点的<code>next</code>指向当前链表的第一个节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newNode-&gt;next = head;</span><br></pre></td></tr></table></figure><p>3、让<code>head</code>指针指向链表的第一个节点： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head = newNode;</span><br></pre></td></tr></table></figure> 整理下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">void LinkTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = buildTwoThree();  //suppose this builds list &#123;2,3&#125;</span><br><span class="line">    struct node* newNode;</span><br><span class="line"></span><br><span class="line">    newNode = (struct node*)malloc(sizeof(struct node));  //allocate</span><br><span class="line">    newNode-&gt;data = 1;</span><br><span class="line">    </span><br><span class="line">    newNode-&gt;next = head;   //link next</span><br><span class="line"></span><br><span class="line">    head = newNode;   //link head</span><br><span class="line"></span><br><span class="line">    //now head points to the list &#123;1,2,3&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如图： <img src="https://img-blog.csdnimg.cn/20190326205401503.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <em>先看一个错误的示范：</em> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void WrongPush(struct node* head,int data)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* newNode = (struct node*)malloc(sizeof(struct node));</span><br><span class="line"></span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = head;</span><br><span class="line">    head = newNode;    //NO this line does not work</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void WrongPushTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = buildTwoThree();  </span><br><span class="line">    </span><br><span class="line">    WrongPush(head, 1);    //try to push 1 on front -- doesn&#x27;t work</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 这个问题就在于C语言的<strong>值传递</strong>，在<code>WrongPush()</code>中对<code>head</code>指针的改变不会影响到<code>WrongPushTest</code>中的我们需要的<code>head</code>指针。 这个问题传统的解决方案是传递当前值的指针给函数而不是传递一份当前值的拷贝，即： 要改变调用者中<code>int</code>的值，就传一个<code>int*</code>给被调用者。在这个例子中，要改变<code>struct node*</code>，就要传递<code>struct node**</code>。也即：<code>head</code>的类型是<code>pointer to a struct node</code>，想要改变这个指针，就需要传一个指向该指针的指针<code>pointer to a pointer to a struct node</code>。 <strong>规则就是：<code>to modify caller memory, pass a pointer to that memory.</code></strong></p><p><em>所以正确的代码如下：</em> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Takes a list and a data value.</span><br><span class="line">Creates a new link with the given data and pushes it</span><br><span class="line">onto the front of the list.</span><br><span class="line">The list is not passed in by its head pointer.</span><br><span class="line">Instead the list is passed in as a &quot;reference&quot; pointer</span><br><span class="line">to the head pointer -- this allows us to modify the caller&#x27;s memory.</span><br><span class="line">*/</span><br><span class="line">void Push(struct node** headRef,int data)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* newNode = (struct node*)malloc(sizeof(struct node));</span><br><span class="line"></span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = *headRef;//the * to dereferences back to the real head </span><br><span class="line">    *headRef = newNode;    //ditto</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void PushTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = buildTwoThree();//suppose this returns the list &#123;2,3&#125;</span><br><span class="line">    </span><br><span class="line">    Push(&amp;head, 1);    //note the &amp;</span><br><span class="line">    Push(&amp;head, 13);</span><br><span class="line"></span><br><span class="line">    //head is now the list &#123;13,1,2,3&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 内存示意图： <img src="https://img-blog.csdnimg.cn/20190330143627528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 如果是C++，那么可以用<strong>引用</strong>完成上述工作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Push in C++ -- We just add a &amp; to the right hand side of the head parameter type,</span><br><span class="line">and the compiler makes that parameter work by reference. So this code changes the </span><br><span class="line">caller&#x27;s memory, but no extra uses of * are necessary -- we just access &quot;head&quot; directly,</span><br><span class="line">and the compiler makes that change reference back to the caller.</span><br><span class="line">*/</span><br><span class="line">void Push(struct node*&amp; head,int data)</span><br><span class="line">&#123;</span><br><span class="line">    struct node* newNode = (struct node*)malloc(sizeof(struct node));</span><br><span class="line"></span><br><span class="line">    newNode-&gt;data = data;</span><br><span class="line">    newNode-&gt;next = head;//No extra use of * necessary on head -- the compiler</span><br><span class="line">    head = newNode;    //just takes care of it behind the scenes.</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void PushTest()</span><br><span class="line">&#123;</span><br><span class="line">    struct node* head = buildTwoThree();//suppose this returns the list &#123;2,3&#125;</span><br><span class="line">    </span><br><span class="line">    Push(head, 1);    //No extra use &amp; necessary -- the compiler </span><br><span class="line">    Push(head, 13);   //takes care of it here too. Head is being changed by these calls. </span><br><span class="line"></span><br><span class="line">    //head is now the list &#123;13,1,2,3&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>老实人的摸索与反思---写在高考七年后</title>
      <link href="/2019/12/02/%E8%80%81%E5%AE%9E%E4%BA%BA%E7%9A%84%E6%91%B8%E7%B4%A2%E4%B8%8E%E5%8F%8D%E6%80%9D---%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E4%B8%83%E5%B9%B4%E5%90%8E/"/>
      <url>/2019/12/02/%E8%80%81%E5%AE%9E%E4%BA%BA%E7%9A%84%E6%91%B8%E7%B4%A2%E4%B8%8E%E5%8F%8D%E6%80%9D---%E5%86%99%E5%9C%A8%E9%AB%98%E8%80%83%E4%B8%83%E5%B9%B4%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<p><em>说明：本文是徐国曦老师写于2018年6月，我第一次看到此文是在2019年4月中旬。鉴于我当时状态很糟糕，此文给了我极大的震撼与启发，每每读来都有不同的感受，遂摘录于此。 附：<a href="https://zhuanlan.zhihu.com/p/37859452">原文链接</a></em></p><hr /><p>说明：上篇《老实人的归国与失身》获得了超过预想的关注，文中虽声明“本故事纯属虚构”，但实际上真实情况与艺术加工大约各占一半。上篇文章想要表达的主题可能并不十分清楚，不同人看到的东西会有极大不同。因此在今天这篇文章中我将详细讲一下这些年来发生的事情以及自己的一些思考，本文句句事实，不说一句大话、假话、空话，不贩卖焦虑，不灌任何鸡汤和毒鸡汤。我也不讳言自己身上出现的问题，曾经的生活充满不堪，有些遮蔽在眼前的玻璃滤镜总要有需要被打破的一天。</p><p>时至今日，我也是时候与过去的自己告别，开始新的第二人生了。我也希望将自己的经历写出来，给境遇相似的人提供一些可能的思考或警示。几年折腾下来，不敢说积累了多少人生经验，但是讲教训我这里是有很多的，这篇文章的目的也在于用亲身经历指出我自己及处境相似的年轻人思维和行动上的误区。其中的一些个人想法可能不完善或者不成熟，也欢迎批评指教。</p><hr />认真投决定命运的硬币，却不知道最后要去哪里。<p align="right">——题记</p><h2 id="section">0</h2><p>在文章开始之前，先放几篇在某段时间内引发广泛讨论的微信文，读者们或多或少可能看过其中一些：</p><ol start="0" type="1"><li><a href="https://www.zhihu.com/question/277691008">《老实人的归国与失身》</a> 作者是我自己</li><li><a href="https://www.zhihu.com/question/50766928">《T大本科舍友阶级分化实录，该何去何从？》</a></li><li><a href="https://www.zhihu.com/question/44186681">《凭什么我辛苦二十年，现在却比别人差那么多？》</a></li><li><a href="https://www.zhihu.com/question/52031149">《我上了985 211才发现自己一无所有》</a></li><li><a href="https://www.zhihu.com/question/65098412">《一个月就辞职，一个北大女生的求职悲欢》</a></li></ol><p>这些文章可能可以或多或少的反映当前包括我在内部分名校学生所面临的现实问题与认知偏差。也因此，因为视角有限，必然不代表整个年轻人群体的普遍现象，更不能说契合多数人的价值观，请带着批判的眼光看到上面提到的所有文章，也包括我这篇。</p><h2 id="section-1">1</h2><p>好了废话不多说，开始讲故事，十年经历，尽在此篇。如果觉得故事过长，请直接看最后的结论。</p><p>美西时间2018年6月6日下午，我上完了学生时代的最后一节课程，只待最后的考试、毕业、回国、入职。打开朋友圈，看到大家都在怀念当年的高考，作为一个上了大学后就基本没再怎么提起高考这茬事的人，突然觉得这个事情好遥远。不过从尘埃落定以来我也一直想找个机会分享一下我个人几年来遇到的事情，就索性在高考七年之后学生时代临近结束的时候，进行一次彻底的总结，向过去的自己说再见，轻装迎接未知的未来。这篇的主题其实和高考本身没有多大关系，不过还是像上篇一样，从高中时代讲起。</p><p>如同《老实人的归国与失身》当中讲到的那样，我十年之前升入一个高考大省省会的重点高中，虽然管理并非变态到监狱式的程度，但是由于升学压力的缘故，大部分学生的日子还是过得相对波澜不惊。在一个在郊区住校，一两周回一趟家，手机都不一定人手一部，诺基亚N95就能称霸，上QQ空间可能是最好的娱乐活动的时代，我们的日常生活也不像十年之后的今天有着各种各样的诱惑。如同我现在看到快手抖音和知乎上的00后们接受着我们从没想过的信息，做着我们想追求却曾经不敢去做的事情，18岁的他们姿势水平可能完爆25岁的自己，就觉得时代的发展如同车轮一般，而90后已经成了被冲在沙滩上的前浪。</p><p>而在那样的环境下，可想而知，学生当中最受欢迎的群体并不是只知道好好学习的书呆子（虽然我自己可能并不是），而永远都是绯闻缠身的帅哥靓女们，家里有一些背景考到一本线就能上本地985的关系户，手机一周一换的富二代，carry大家打游戏的大咖，带着些许叛逆的所谓不良少年，甚至高中时代成熟的早偷尝禁果还顺便能给朋友们性启蒙的人。虽然当我之后见到更大的世界之后发现这都不算什么，但放在当时，这些现象还是对很多十五六岁经历一片空白的少男少女有着一定杀伤力的。</p><p>在这些人面前，我竟有些自卑，说不清楚自己除了成绩稍微好一些之外还有什么优点，更何况成绩根本没好到可以完爆他们的程度。而我个人的课余生活就更是单调，<strong>上晚自习看《萌芽》追连载小说得到的快乐，可能并不亚于几年之后在国际期刊发表一作文章的快乐</strong>。人在成长过程中都是这样，小时候得到个玩具就能高兴好几天，可是长大之后很有可能金钱和权力等这些世俗成功标准的降临都带不来一样的感动了。人的阈值总是随时间而增长的，这是好事还是坏事呢？</p><p>我在这所高中成绩比较稳定位于年级中上，课余和寒暑假的时间都用来搞竞赛，虽然略吃力但也有所收获。正常情况下单凭高考考到中等985学校没问题，如果竞赛保送可以去前十学校。我自己高中时候的目标是上清华北大，但由于从当时的情况看来过于不切实际，因此也很少跟别人提起。到了高三，竞赛获了省一拿到了保送资格，报了清华和另外一所华五学校，清华没考过线，另外一所学校过了录取线却把我调剂到了法医专业。由于实在是不想读这个专业，不得不放弃保送资格强行拼高考。高三一年各次模拟考试我的成绩稳定在六百三四十（虽然事后看来，模拟题和高考真题完全不是一个路数），即便加上竞赛加分，离梦想的学校也相距太远。以至于到了高三的五月，我竟觉得“就这样吧，考到哪算哪”。</p><p>于是高考前最后的一个月我连作业都懒得做了，每天用几乎全部的时间研究历年高考真题，琢磨里面的规律。2011年高考的三天也波澜不惊的过去了，甚至高考之后答案都懒得去对，抱着出了分之后随便报个志愿的弃疗态度就去睡了十五天大觉。结果出乎意料的是超常发挥了近三十分，莫名其妙的考到了全市前五全省前五十，竟然可以真的报清北了。</p><p>鉴于当时的确不知道自己喜欢什么和适合什么专业，当天急急忙忙的就和清华签了约，而专业也是招生老师推荐给我的，我想都没想就接受了，身边的长辈也全都给我说：</p><p><strong>“你都上了清华了，学什么专业不重要”。</strong></p><p>那个时候自己对未来的想法只有： <strong>“我想做一个科学家”</strong></p><p>（然而可能连什么是科学家都不甚清楚），看到是个理工科专业，就糊里糊涂接受了。这就是一个典型的战术上勤奋战略上懒惰的例子。</p><p>我本人并非小县城出身，与“学霸”这个词更是八竿子打不着。但是，可能时至今日我自己身上仍然还有一些小县城学霸思维方式的残余。尤其在高考大省，我们很多人在18岁之前除了学习什么都不懂，而工人阶级或者知识分子的父母从小告诉我们的就是“<strong>读书改变命运</strong>”甚至是“<strong>考个好大学什么都不用愁了</strong>”。</p><p>固然在他们那个时代可能是这样，但是如今，这样的“<strong>努力就能得到回报</strong>”、“<strong>一分耕耘一分收获</strong>”的单线程的、线性的思维方式在更大程度上是对生活的一种不完全归纳甚至是片面归纳。从小地方考入最高学府，必须承认眼界和见识必然比不过一部分同龄人：2017年夏天我在斯坦福带过一个国内初中生组成的所谓“游学团”，平均年龄十三四岁，平均去过十几二十个国家，有的甚至是来美国开独奏会的，聊天当中处处被教做人，甚至有白比他们年龄长一倍的感觉，这样的眼界和见识怎么比？</p><p>事实上，比无头苍蝇乱撞般瞎努力更重要的是选择，比选择更重要的是信息，还有历史行程、社会形势、贵人相助以及运气等因素。<strong>有时候必须承认人与人的差距可能努力程度占三分，而其他因素，占七分，甚至九十七分</strong>。也因此，小县城学霸以及我这样的伪“小县城学霸”到了顶尖名校之后不可避免会有一定失落感，这也是现实存在的一个问题。</p><h2 id="section-2">2</h2><p>从这一刻起，没有金刚钻却强行揽了瓷器活的日子开始了。德不配位，必会撞墙。不过话说回来，如果没有当年的撞墙也不会有如今的成长。下面所有的故事，可以称为“<strong>一个名校（主流价值观中的）差生的试错与教训</strong>”。整个过程，也就是跟自己的局限、幼稚与无知斗争的过程。</p><p>虽然从考上清华那一刻开始自己就隐隐约约感觉到，高考一次的成功不能说明太多问题，更没有一劳永逸的感觉，然而现实永远比想象的更加要命。大一第一学期我和高三的辛苦程度差不多，但是期中考试的成绩竟然是（大约）年级倒数前三（年级100人左右），有一门差点没及格。看到成绩的时候我突然懂得了很多事情，而大学四年的目标，也由在本领域做出点成绩变成了安全毕业。</p><p>我当时的想法就是，既然学术（单说成绩方面）这条路走不通，那索性就去多试试别的。于是我从那之后几乎每学期都选35-40学分的课，想拓展自己的视野，找找自己可能能行的方面究竟在哪里。同时加了学生会，加了社团，认识了一些从当时看来闪闪发光的牛人，甚至还有过做了个互联网信息平台差点创业的经历。故事发展到这里，从外界看来似乎我的大学生活将要过得风生水起，然而似乎并没这么简单。</p><p>到了大二，我逐渐认识到自己对本专业并没有像自己想象的那般兴趣，而且学习也越来越吃力。带着困惑，我去咨询了一些前辈，前辈给的建议都是“好好学专业课，好好做科研，当你用到你所学的知识的时候你自然会喜欢的”（这是我唯一能得到的信息，尽管帮助着实有限）。于是我进了实验室（这在当时已经算起了个大早），然而发现根本不知道自己学的知识能够如何用到科研当中。此时此刻，同年级里有的同学已经开始接独立课题，有的同学已经有文章发表（非一作，不过放到现在，大二发一作的也已经不计其数了）。我在想，成绩拼不过不要紧，科研别输给他们。</p><p>终于在大三的时候，换过好几个实验室，我在一个交叉学科方向找到了自己的兴趣，而且这个方向一做就是四年。至于成绩，好的时候年级倒数1/3，差的时候年级倒数1/6，已经不在乎了。凭这样的成绩直接申国外博士几乎是不可能的，保研本系或者本校也差一点，于是不得不通过读硕士找个跳板，试图积累成绩以外的其他资源。其实在这个阶段，我也想过未来发展的其他可能性，但苦于真的不知道该去哪寻找信息（甚至那个时候大部分出国党都不知道有暑期研修这东西存在，反观今日，没个海外研修都不好意思出国），周围以我的眼界所能听到的声音也是“万般皆下品，唯有科研高”这样的价值观占主导，所以我并不觉得这里面有什么问题，或者并不知道自己选择这条路有多少是出于自己真心所想，而又有多少是出于随大流或者生活的惯性。</p><p>于是我算是在两眼一抹黑的情况下申请出国，匆匆忙忙准备申请材料，运气还算好，也拿到了较为不错的录取，还提前联系好了将来想跟的导师和实验室。再加上大四一年拼命科研，虽然到最后成绩仍然在倒数1/4，但国内国际期刊均有论文收获，这对于大学四年没得过任何荣誉（如果课余参加的一些数学物理方面的竞赛不算的话，只算官方荣誉）没拿过任何奖学金甚至很少受到赏识的自己来说也觉得没白来一遭。四年来受到的自信心打击太多，甚至到了最后已经被碾压到心如止水了，也越来越觉得有些时候人与人的差距不是通过努力能够追上的。即便如此，最后也涉险毕业，准备去美国开始一段新的人生，虽然直到本科毕业，我连一次出国经历也都没有。</p><h2 id="section-3">3</h2><p>在另一段“没有金刚钻却强行揽了瓷器活”的经历开始之前，我觉得这里有必要评价一下<strong>名校学渣</strong>这种客观存在且无数人经历过或正在经历的状态。</p><p>曾经知乎上有个问题，叫“在清华大学当学渣是种怎样的体验？”，回答者甚众，甚至在我本科时代的周围，包括我自己在内，都有很多人实实在在的经历过这样的挫折。很多时候当我们分享起自己被碾压的经历，会换来别人的不理解，甚至是“何不食肉糜”。然而这里面的痛苦却是真实的，我也见过有人因为学习成绩跟不上，退学的有之，休学的有之，抑郁的有之，甚至自杀的都存在。<strong>在很多情况下成绩成了衡量一个人唯一或者最重要的标准，赢者通吃，而在这一评价体系下没有胜出的人就很难得到主流舆论体系的承认。</strong></p><p>本科毕业之后我曾经跟一些这种处境的学弟学妹聊过，看到他们的迷茫我似乎也看到了当年自己的影子。那种自卑、焦虑、挫折、不被承认的感觉是的的确确困扰着我们当中很多人的，更何况名校学生对自己的期待和现实很难不产生心理落差。</p><p>由于人与人的痛苦是不共通的，每个人的解决方案也不尽相同。放在我身上，当我被学习成绩打击的时候，我当时的选择是在学生会做好事情，去实验室做好科研，而身边一些人可能是通过外出实习、体育运动、恋爱等方式排解。当被主流评价体系打击到怀疑自己存在的价值和意义时，我现在能给出的建议是，<strong>出去申请实习（甚至完全不必是自己对口行业的实习）</strong>，真正接触一下工作是怎样的，破除单一价值观带来的禁锢（不管这种单一价值观是外界强加的还是自己想象的），你会发现原来自己还能做出这样的贡献。我们在学校里的跑道只有一条，但实际上现实生活中的跑道有无数条。树挪死人挪活，换个环境很多时候都会带来不错的发挥。</p><p>现在，我想提出这样一个问题：<strong>如果读者作为名校毕业生，在大学四年过去之后，享受了较好的教育资源，你认为在什么方面自己应该具有一定优势</strong>？文章的最后我将谈一下自己对这个问题的看法。</p><h2 id="section-4">4</h2><p>2015年夏天，我仍然是在两眼一抹黑的情况下来到了美国。清华四年的经历虽然洗刷掉了我所有的骄傲和大部分的自信心，让我明白自己其实实力也就是中人之资，但还是模模糊糊抱着一个想当科学家的梦想。可是此时，我面临的主要矛盾已经变成了看到了更大的世界和自己内心可怜的信息量和姿势水平之间的矛盾。</p><p>本科期间我对象牙塔里的这一些规则或者体系有了一定的了解，但对社会的认知其实比刚入大学的时候并没有多少长进。在国内的时候，本身和其他背景的人交流就不多，科研压力也让我每天都在闷头向前赶，却很少抬起头来想想为什么，或者看看周围更广阔的风景。结果就是，到了美国，当不得不睁眼看世界的时候，发现身边的人一个比一个生活多姿多彩光鲜亮丽，而自己就像一个只知道埋头干活反而连活都干不好的傻B。</p><p>诸位别笑，这的确是我来到美国的第一感觉。一个见识有限的人突然到了一个大环境当中，不可避免有一种刘姥姥进了大观园的感觉。很多人的经历也让我大开眼界，有好的也有坏的，好的让我觉得“我大学期间都错过了什么”，而不好的让我觉得“原来还有这样的人存在，服气服气”。也因此，来到美国一两个月，我的三观就几乎被刷新了一遍。</p><p>在科研领域遇到的挫折（实际上什么都没做出来）让我发现这条路并非这么容易，生活中遇到过不靠谱的人和事太多我也只能说自己曾经太傻太天真。经历了刚出国换环境的阵痛，我再次陷入了不知道将来想做什么的困惑当中。但是所不同的是，这一次，我知道的信息更多，有一定可以选择的余地，也做好了试错的准备。</p><p>但是主业也容不得耽误，于是匆匆忙忙填完了博士申请，结果在关键时刻一篇投往顶级期刊的一作文章被拒，唯一可以拿得出手的砝码丢了，拿到的是隔壁学校降转硕士的录取（按照当时的情况留本校可能可以拿到博士，但在当时的环境下过得实在是太不开心，加之所在的研究方向不喜欢，不想一直这样下去）。</p><p>虽然不甘心但是也没办法，实力不济加上运气不好，只能接受现实，第一时间联系好了自己想做的方向的导师，因为正常情况下做得好是能留下来读博的。同时我利用这当中的空闲时间，投过咨询机构的实习，尝试了他们的思维方式。之后又投了几家金融业的实习，虽然做的也并不愉快。我试图通过这个，去弥补本科期间，甚至更早的时候，对这个社会，对各个将来可能从事的行业认知的缺失。然而事实告诉我，你还是太年轻，想的太简单。</p><p>说到这里，我想谈一下我们很多年轻人对这个社会认知的问题。我们在真正独立走上社会之前，接受的宣传是通过主流价值观为主的。但即使这样，这样的信息也难免偏颇，很多时候我们只看到了事物的A面，而没有看到B面，甚至可能还有S面。就单说科研领域，社会告诉我们的是做出成果无尽荣光，可是却不会告诉我们一将功成万骨枯，以及很多领域象牙塔和工业界存在脱节。金融领域我们看到从业者西装革履光鲜亮丽，但是背后却有朝八晚三不为人知的辛酸。创业圈更是这样，有人ICO，IPO一夜暴富，可更多的却是亏完了钱打水漂睡沙发的窘迫。</p><p>打个比方，我所在的城市高楼林立科技发达，然而当夜幕降临在一些不为人知的角落，也存在流浪者、大麻甚至是枪击。很多时候我们带着有色的，甚至可能是带着粉红泡泡的眼镜去看待社会，这个滤镜是我们了解社会的为数不多的途径，即便它存在失真。因此初出茅庐的人很容易去带着单纯的心态去相信A面是社会的全貌，然而当撞到南墙的时候，可能会遭到这样的批评：“<strong>你对社会的认知存在偏差，这锅你不背谁背</strong>？”你总觉得哪里不对，却无法反驳。</p><p>确实我们在往上攀登和向广阔的未知天地进发的时候，每一步都在离开自己的舒适区，这也就意味着我们在小圆内对世界的认知是没法向外延拓的。每一步都存在风险，每一步都在跳未知的坑，再加上人生不如意十之八九，难免怀疑人生，其实到最后不管是焦虑还是佛系，都是挣扎之后的结果。打碎面前的云山雾罩似乎很容易，但是人总愿意去相信事物对自己有利的一面，而潜意识的厌恶可能存在的风险。到了这里，闭关自守也罢，虚无主义也罢，随着这样的恶性循环慢慢成了我们挥之不去的绊脚石。也因此，很多时候虽然道理就在那里摆着，但唯有撞南墙尝苦果，才能让我们冲破这层人性原罪的束缚，去认知更大的更全面的新世界。</p><h2 id="section-5">5</h2><p>如果说刚刚出国的时候的情况是两眼一抹黑，那么一年之后的状态就是面前摆着几条道路，每条似乎都通向光明的前途，你却根本不知道该选哪一条。所幸导师对我很好，不管是在学术方面还是在生活方面都给了我很多人生经验和指引，让我有一种发自内心的因为受到知遇之恩所以必须要好好干活的感觉。受到这样的激励，我也立志在科研领域做出自己的一份贡献，然而由于接触的世界越来越大，我开始听到了很多不同的声音，而这些声音是我从来没有想象过的。</p><p>就比如说2016年很火的两篇帖子<a href="https://www.zhihu.com/question/50766928">《T大本科舍友阶级分化实录，该何去何从？》</a>与<a href="https://www.zhihu.com/question/44186681">《凭什么我辛苦二十年，现在却比别人差那么多？》</a>。从局外人的角度看来，我们可以说里面的主人公书生气过重，博士快要毕业了仍然没有认清楚一个事实，即你的学习成绩和学术成果和你将来在世俗评价标准下的成功只有很弱的相关性。可是话说回来，这样的谴责虽然道理正确，但并无助于解决问题，而且难免有一种站着说话不腰疼的感觉。更重要的是，久居象牙塔中的我们（包括我在内，也曾具有上述的思维误区），<strong>跟社会的接触少了，就很容易用这种单一的线性的价值观去评判自己和他人，尤其是和别人一比较，各种不如意便会纷至沓来</strong>。而且还是那个问题，人总愿意去相信对自己有利的观点，这就很容易用战术上的勤奋去掩盖战略上的懒惰（即便我在很长时间的科研当中也是如此，没仔细想why就去想how并亲身实践了无数种错误的how，结果自然是充满了无用功和南辕北辙）。</p><p>从上面这个现象引申出来另一个现象，即对部分存在产学研脱节现象学科的劝退，想必大家都了解了许多。如今信息比以前通畅得多，大学新生选择专业以及高校毕业生选择行业的时候比几年之前更懂得去参考历史的行程决定个人的发展方向，其实也未尝不是个好事。我个人曾经也是一个劝退者，但是如今，我觉得更应该做的是，消除信息不对称，也就是让了解信息有限的人们不仅认识到学术这条路的A面，更要了解其B面，对将来可能面临的风险有一个充分的估计，想明白自己追求的是什么。<strong>经过深思熟虑之后做出的选择，要比冲着高大上的标签或者七大姑八大姨的期待做出的选择，要更加理性</strong>。在这个方面，我自己就是活生生的目标不明确东一榔头西一棒子乱打的反例。</p><p>不得不承认做科研的经历是有一定痛苦的（其实任何事情都这样，不存在既高大上又光鲜亮丽的事情）。在自己的课题研究过程中，无数次遇到解不出来的公式，跑不出来的程序，和理论不一样的实验结果，以及各式各样用尽世间已有知识解释不了的问题。与此同时，周围的很多人在积极谋求转行，而金融和互联网成为了转行的首选。在这样的气氛中，除非是自己心里有明确目标且能塌下心来坐得住的人，否则包括我在内的很多人也难免被舆论影响，盖因心里虽然有目标但目标根本不坚定。此时此刻，我再次陷入迷茫，经常思考两个问题：1.我为什么要来这里？2.我将来到底想做什么？</p><h2 id="section-6">6</h2><p>时间到了2017年，在社会经历着指数型的科技发展浪潮的过程当中，一种名为勃学的新思潮发展的如火如荼。简而言之，勃学基于失败学，我们每个人都有自己的失败，我们要对自身的失败有清醒的认识。从外界看来，取得了一定世俗成就的人本应是成功的，这样的失败是不是何不食肉糜呢？但是确实，这种思潮确实反映了一部分通过自我奋斗达到一定高度，所看到的世界却灰暗了许多的人们的认同感，尤其是名校毕业生和中产人士。为什么明明已经得到了很多，它们却带来了无尽的挫败感呢？</p><p>这里不谈阶级固化、精英主义等高大上的话题，只想举一个例子。我们的祖辈可能一生都没有走出过小镇，日出而作日落而息生活简单而充实。我们每个人都有那种小学初中同学，早早离开学校进入社会，在我本人朋友圈里看到的一些例子是，他们没有离开家乡，在家乡做着一些相对低收入低技术含量的工作，例如摆摊开店，大部分已经结婚生子，看起来十分快乐，现世安稳岁月静好。而我们很多人，从高考的残酷竞争中杀出来进入名校，可能还出国见了更大的世界，或是找到了高收入的工作，可为什么得不到他们的那种快乐呢？</p><p>我们或许可以这样思考，古人提出过人生三境界，如果我们永远不走出自己的舒适区，那么就是“<strong>看山是山看水是水</strong>”，或者说“我未入过繁华之境，未听过喧嚣的声音，未见过太多生灵，未有过滚烫心情，所以也未觉大洋正中有多么安静”。也因此，对客观世界的认知符合自己的常识，可以很轻易的通过自己的常识得到快乐。</p><p>然而到了第二境界，“<strong>看山不是山看水不是水</strong>”，当我们见了更大的世界，发现自己的一套体系已经不足以解释自己看到的世界，就比如苦心孤诣探索学术十几年，主观上做出了足够的努力，却在客观上收获不了自己想要的“书中自有黄金屋，书中自有颜如玉”，认知崩塌陷入对自己的怀疑，不管归因于“错的是我”抑或是“错的是世界”，价值观就会解体重塑。无论是打破幻影还是打破枷锁，这个过程都是十分痛苦的。</p><p>然而大部分人终其一生也很难达到第三境界，“<strong>看山还是山看水还是水</strong>”，没有一定经历和成就，这一层是连想都很难想象到的。即便是”众里寻他千百度；蓦然回首，那人却在灯火阑珊处“的”啊，原来你也在这里“，不经历一番”昨夜西风凋碧树，独上高楼，望尽天涯路“和”衣带渐宽终不悔，为伊消得人憔悴“的苦痛挣扎也是无法实现的。由于我自己远远没有达到这一境界，因此不多赘述。但总之，”你所认为的世界运行的规律“和”世界真实的运行规律“两者之间大部分情况下存在夹角，甚至有时候夹角还是钝角。因此，你不得不不断地调整自己对世界的认知，而这里面的阻力和惯性，以及调整之后与之前状态的错位，就容易让人怀疑自己所想所做到底对不对。</p><p>曾经有两篇阅读量极高的文章，<a href="https://www.zhihu.com/question/52031149">《我上了985 211才发现自己一无所有》</a>和<a href="https://www.zhihu.com/question/65098412">《一个月就辞职，一个北大女生的求职悲欢》</a>。虽然和勃学并未有联系，但反映的问题却是共通的。有些人对这种现象的批评，包括”无病呻吟“也罢，”庸俗矫情“也罢，其实仔细想想是站不住脚的，由于痛苦不共通，这就像问抑郁症的人为啥要自杀一样缺乏同理心，更何况我相信每个人都有过这样的怀疑和纠结，只是程度不同而已。人生对每个人都只有一次，进入社会见到更大的世界，必然面临着自我和世界的冲突，而处在冲突当中的个人，很容易将自己遇到的问题放大，陷入痛苦，就像小时候辛苦搭好的积木倒塌之后仿佛失去了全世界一样。从这个意义上来说，我倒是觉得同为年轻人的自己和这里面提到的主人公有一定共鸣。同是天涯沦落人，相逢何必曾相识？不过话说回来，该类文章其实反映了一个问题，就是“<strong>学区房值钱（个人奋斗几十年都不一定买得起）</strong>”和“<strong>学历不值钱（名校毕业生的世俗成就达不到内心期望）</strong>”之间的矛盾。所以，这个错位背后，是哪里错了呢？（这个问题我也没有想明白）。</p><h2 id="section-7">7</h2><p>人生总有想不明白的哲学问题，就像科研也永远不能一路顺风一样。2017年发生过太多的事情，以至于刚脱胎换骨一遍的三观又被现实撕得粉碎。其间遇到了转博被拒的挫折，认识了硅谷科技界上百的IT工作者，回国看到了祖国翻天覆地的变化，也经历了对自己价值的彻底怀疑，人际关系的全面崩溃，甚至无数次夜不能寐在凌晨四点的帕罗奥图的天空下失声痛哭。</p><p>然而，冥冥之中总有个声音对我说：</p><p>“<strong>你得到今天的这一切，本来就是运气眷顾，你还想要什么呢</strong>？”</p><p>对啊，能走到今天，我所拥有的东西本来就不是和自己的能力匹配的，你是不是太贪得无厌了？</p><p><strong>“将寄托于花朵的思念用言语来表达出来，我丝毫不想伤害这个世界，如果没有聆听者的话，你就可以放任自己为所欲为吗？</strong></p><p><strong>然而，然而，你却把打算摘给别人的花留下，然后看到他的时候，却为了能得到赞扬把花送给他。</strong></p><p><strong>能找到这么漂亮的花，我是个好孩子吧。我来告诉你怎样去摘这朵花吧！</strong></p><p><strong>像这样假装亲切，好好炫耀一番。 以花为借口亲近他，伪君子。”</strong></p><p align="right">——《School Days》 清浦刹那</p><p>我真的问心无愧吗？</p><p>我的初心是什么？为什么扭曲成了现在这个鬼样子？你看重的东西真的不是虚无缥缈的吗？</p><p>是不是一开始一切都错了呢？</p><p>为什么在给别人建议的时候从未失手，到自己身上就撞南墙撞得头破血流了呢？</p><p><strong>为什么会这样呢？？？</strong></p><p>2017年的冬天格外寒冷，在无尽的挣扎当中，整个冬天不仅科研没有进展，甚至什么都没干，极端的时候甚至想用安眠药一了百了。<strong>（题外话：我知道很多人曾经有过这样的想法，但是在这种时候，请一定一定去找自己信得过的人倾诉，或者去找专业的人员帮助解决心理问题</strong>。如果没有，我本人愿意做一个倾听者，也承诺保密所了解到的一切信息，毕竟我曾经在这样的痛苦中挣扎过。这种情况的人，我彻夜长谈过的，至少有三个，他们现在都已走出了内心的阴影，重获了生活的快乐。）</p><p>人们对于坏消息的第六感往往是非常准确的，尤其是在人生境遇处在低谷的时候。当转博被拒的时候我就觉得有些一厢情愿的事情可能就要到头了。于是我通过各种途径联系了外校的部分教授，硬着头皮再次投了一次博士申请，但是越来越觉得我想要的东西和我正在做的事情已经完全南辕北辙了。</p><p>2017年12月，由于对人生的怀疑和对现实的弃疗，我时常和各种人聊天，谈论各种各样的迷茫及困苦。与三十五岁恋爱都没谈过的博后促膝长谈，也与四十几岁孤身一人漂泊美国的研究员对月举杯。这就是我曾经想做的事情的B面，可是如果换成我，我愿意去赌这一个未知的未来吗？扪心自问，答案是否定的。</p><p><strong>“差一点骗了自己骗了你</strong></p><p><strong>爱与被爱不一定成正比</strong></p><p><strong>我知道被疼是一种运气</strong></p><p><strong>但我无法完全交出自己”</strong></p><p align="right">——《可惜不是你》 梁静茹</p><p>所以，你确定自己不是叶公好龙吗？</p><p>这条路上所需要的努力（1分）、热情（3分）、运气（6分），你一个也没有。</p><p>你的初心可能没错，但是你所做的所想的，和你所追求的东西，完全是两个不同的方向。</p><p>这场持续三年的梦境，是时候该落幕了。</p><p>转过头来2018年到了，雨神似乎笼罩了湾区，终日不见阳光，让人的心情不由得也变得压抑。但是，梦醒了，是时候该回到原点重新开始了。</p><p>留下来读博做不到我不惊讶，联系好的教授放了我鸽子我也不惊讶，反正已经习惯了，起了个大早赶了个晚集的人又不止一个。然而收到第一个offer的时候我心里却五味杂陈。</p><p>一月的寒风中我前所未有的点上了一根烟让自己冷静下来（虽然我这25年来抽过的烟用两只手都能数过来）。烟雾中幻化出无数个平行世界，平行世界A中的我读完博士拿到教职走上人生巅峰令人艳羡，BCD中的我费了九牛二虎之力读完博士转行拿到了和别人本科毕业一样的工作，EFG……而平行世界XYZ中的自己，一生碌碌不得志，最后变成了MITBBS上的戾气溢出屏幕的精神已经不正常的中年loser。</p><p>路是自己选的，将来不管收获的是果，还是锅，也都是自己的。人生没有后悔药，做决策的时候多想想未来，而不要考虑沉没成本。</p><p><strong>“在终于释怀的那一刻</strong></p><p><strong>找回了久违的快乐”</strong></p><p align="right">——《我决定》 梁静茹</p><p>自己辛苦追寻的金刚钻终究没有得到，瓷器活也只能另请高明了。</p><h2 id="section-8">8</h2><p>2018年3月，我来到洛杉矶参加了一场学术会议，算是亲手给自己的追寻（本专业的）学术成就之路画下一个句号。讲完自己海报的一刻，突然有一种神清气爽的感觉，来不及放下东西，直奔加州理工去拜访几个多年未见的好朋友。此时此刻，我终于彻底想明白了一个道理，“<strong>科研和世俗成功两者之间即便不是垂直，夹角也至少有88°</strong>”。有人问88°是怎么得来的，我说用量角器量出来的。量出这个角度，我花了三年，而另一些人，甚至是十三年，三十年。饭桌上跟几个博士在读的朋友聊过，发现原来他们这等神人也有世俗的烦恼（虽然这是废话，但我的思维始终没有转过这个弯来）。家家有本难念的经，我们都是普通人，为什么要互相比较一些有的没的来给自己增加不必要的烦恼呢？求仁得仁，想要什么，就冲着那个方向放手一搏吧。</p><p>于是在几个月的刷题和几年来积累的计算机方面的知识、能力和项目经历的基础上，3月下旬的某一天我一夜之间通过各路朋友的内推向国内互联网公司投了五十份简历。虽然自己这几年来学术上不敢说有所收获，但是人脉和软实力上所积累的一切是我至今不悔留美三年的一个很重要的原因。虽然自己的知识体系必然不系统，但是我个人觉得自己的水平和科班CS大三大四的水平还是比较相当的（除了没有相关科研及实习经历以外）。闻道有先后，术业有专攻，如是而已，终究亡羊补牢也没晚多少。由于名校牌子的加成，整个求职过程还算顺利，连轴面试将近一个月，国内最后拿到4个offer，美国这边也投了几个小公司并都走到了最后一面，由于国内的offer到了，加之我个人在这里实在是过得不快乐，所以就没再继续面下去。本着此心安处是吾乡的原则，选完城市，再选公司，兜兜转转回到了最熟悉的五道口，加入一家蒸蒸日上的创业公司。（题外话：在五道口的前辈和友人们欢迎到时找我约饭。）</p><p>由于我实力有限加上并非走的正常校招流程，具体的求职细节就不在这里讲了，以防班门弄斧。如果同为转专业且对这个过程有兴趣将来可以私聊。当然不得不承认，由于求职始于匆忙，中间各种问题也出过不少，还出过一个差点没法毕业的乌龙，不过最终的结果还算不错，经过了几年的尝试，用了无数次排除法，在此刻虽然我也不敢说自己一定喜欢做什么，但是有把握说自己不喜欢做什么。这就像一个深度优先搜索一样，撞了南墙再回头，虽然有时候走了不少冤枉路撞了不少南墙，比别人晚到了目的地，可是看到的东西也更多了。</p><p>我曾经想过，如果高中多搞一门竞赛会怎样，大学选择一个不同的专业会怎样，研究生期间年年暑假出去实习会怎样，再仔细一想，在没有信息的情况下有多少人能做出这样的选择，而从最终结果看起来也不过是小的得失而已。有些事情放在当时看，重要吗？的确重要。可是从更长远的时间看来，什么都不是。如同幼儿园丢了个小红花，中学错过了喜欢的人，高考失利，求职遇挫，每个人都会对此做出应激反应，可是几年之后回首，也不过是饭桌上的一件谈资而已。</p><p>在上篇《老实人的归国与失身》中我曾经提到，求职过程中受到高中同学的内推，文中提到的高中同学本科位于家乡普通一本，通过考研来到了北京，积累了无数的实习经历最终在另一家独角兽企业独当一面。文中结尾提到的“明明是我先来的，为什么会变成这样呢？”本来是一个出自《白色相簿2》的梗，招致了一些不懂背景的人的误会。什么叫做线性思维/学生思维？这就是。早起的人不一定能赶上集，生活本来也没有先来后到。更何况别人在另一些方面比自己先来，比如工业界经验，比如对社会的认知，这都是象牙塔本身所给不了自己的。该篇文章中的主人公可能也是幸存者偏差的产物。</p><p>前段时间和朋友讨论，说到了不同的人在不同阶段所做的努力和承受的痛苦。从高考大省杀出来固然需要拼命，但从考研大省逆袭何尝不需要努力，而且艰苦程度也是非亲历者不能想象。我们能看到的例子是通过个人奋斗逆袭走上人生巅峰的人们，可是在这背后的B面，多少人在这一过程中折戟撞墙，最终成为了默默无闻的普通人，他们的故事又如何去表达出来呢？</p><p>什么是幸存者偏差？2018年高考全国二卷的作文就很能说明问题。</p><p><img src="https://img-blog.csdnimg.cn/20191202223556152.png" alt="在这里插入图片描述" /> 2018年6月，在即将离开美国的时候，我与科研大佬聊过他们申请教职当中的悲与喜，与硅谷科技从业者谈到科技下一步的发展方向，与现在的牛人本科生讨论他们的梦想，与00后一代学习他们的价值体系和处世方式，也与在国内的本科同学们交流不同行业的求职经历，以及当前日新月异的一线城市。曾经的自己只顾脚下的一条路，以为这就是整个世界，到头来路越走越窄以至于痛撞南墙。而抬起头来，发现参差多态乃是幸福本源，生活的跑道比自己想象的还要多得多。而这个时代恰恰也是信息量爆炸的时代，每个人都在追寻自己的梦想，就看谁能把握住这里面的机会。</p><p><strong>“回想起历往云烟终于让我全都看透</strong></p><p><strong>闭着眼低头走过那份温柔”</strong></p><p align="right">——《涙の理由》 栗林美奈实</p><p>总之，运气眷顾，在一个新的领域，我在不知道自己有没有金刚钻的情况下又接下了瓷器活。可如今最大的不同就是，即便没有金刚钻，我也知道如何去获得它。即便无法获得，我也知道如何打磨现有的资源使之无限接近真正的金刚钻。几年的摸索告诉了我这样的方法论，也算是不虚此行了。感谢一路上遇到的前辈和同辈，感谢他们给我的指引和人生经验，感谢遇到的挫折使我想明白自己内心深处究竟想要的是什么，感谢命运待我还算不薄。路还很长，所以更要心无旁骛望着远方。</p><p>最后放一张图，描述在这么多年来我”想当一名科学家“的这个愿望的强烈程度是如何变化的。虽然走到现在，这条路上的追寻暂时鸣金收兵了，但失之东隅收之桑榆，我也看到了更广阔的风景，开始了另一条路上新的追寻。</p><figure><img src="https://img-blog.csdnimg.cn/20191202223756684.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><h2 id="section-9">9</h2><p>时光飞逝，我自己的学生时代即将结束。清华四年经历告诉了我自己的能力是有局限的，而美国三年经历告诉了我天有多高地有多厚。虽然初心只是自己幼稚时候的一厢情愿，但人在长大的过程中都会变的，甚至在半年之前我都没有料到今天是这样的结局，计划永远赶不上变化，而未知的未来可能信息量更大。有时候我在思考一个问题：我一路以来享受了最好的教育资源，可是有没有做出相符的成绩和贡献呢？如果没有的话，我从中积累了什么优势呢？眼界，人脉，还是对更大的世界的认知，对自己较为全面的评价？</p><p>如果限制我们的成就的是外在因素，很多时候我们只会惋惜命运待人不公。就如同如果基础教育能够普及，广袤的非洲能走出多少科学家？可是这里面无数的聪明人就因为食不果腹而终其一生无法为人类的发展做出贡献。而我自己，出身明明优于90%的同辈人，享受着最好的教育资源，不缺天时地利人和，想要找到贵人相助也不难，在人生的重要选择关口也不乏运气垂青，理应有着更大的使命，为这个世界做出自己更大的贡献。然而，有时候事情的发展偏离了预想的轨道，现实情况和自我期待出现错位，明明自己能力达不到却不得不去努力争取，明明追寻的东西就在眼前看似唾手可得但就是得不到，那种失落和不甘心，如同差一点爬到高峰又狠狠摔下，带来的痛苦就要比在平地上跌倒要强烈得多。</p><p>我的经历和反思讲完了，在最后，我觉得有必要给出一些简单的结论：</p><p><strong>（0）选择正确的方向比努力更重要，而信息的通畅是做出明智选择的保证。将获取信息的能力从1提到2，边际效应要远远胜过努力程度由9提到10。</strong></p><p><strong>（1）对于名校同学，有时候我们自身带着一种骄傲，但在校内评价体系下受到的打击会令我们自卑，两者叠加在一起会让我们很难对自己有准确的定位。然而，既然享受着资源优势，而且终究都要走出象牙塔走向社会（即便是立志从事科研工作也不能免除与更大的世界打交道），不如早点接触真实的工作环境，在找到自己价值所在的同时，提前排除错误选项或者选定正确选项，不至于到最后赢在了成绩却输在了社会经验。</strong></p><p><strong>（2）对于非名校同学，高考、毕业学校这些东西和将来的成绩的相关度是很弱的，通过主动获取信息做出明智的选择，避免无头苍蝇一般的无效努力，进而比名校学生优秀的也大有人在。没有那种小心翼翼瞻前顾后患得患失，反而更大胆去试错和总结经验，这些都不是从书本上能够学到的。</strong></p><p><strong>（e）(e=2.718281828) 综上所述，高考考的如何和去什么学校读书真的没那么重要，在需要努力的时候尽力而为，但永远记得仅仅是努力本身是没有价值的。打怪升级获得的奖励，从来都不是和打怪的难度成正比。</strong></p><p><strong>（3）老实人们会习惯性认为，努力读书、努力工作等等才是能力，然而，真相却是，“不老实”可能是一种比个人奋斗更重要的能力。</strong></p><p><strong>（π）(π=3.141592654) 因此，老实，其实并不是一个好事。</strong></p><p>满纸荒唐言，一把辛酸泪。</p>]]></content>
      
      
      <categories>
          
          <category> Hills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round</title>
      <link href="/2019/10/02/Codeforces%20Round%20#590/"/>
      <url>/2019/10/02/Codeforces%20Round%20#590/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1234">Round #590</a> 题目答案：<a href="https://codeforces.com/blog/entry/70233">官方Editorial</a>、<a href="https://github.com/EIMadrigal/CF">My Solution</a> ## A. Equalize Prices Again 签到题还WA了一发，向上取整有点问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//my wrong code, 1.0 * sum返回double</span></span><br><span class="line"><span class="built_in">ceil</span>(<span class="number">1.0</span> * sum / n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//right code</span></span><br><span class="line">(<span class="keyword">int</span>)<span class="built_in">ceil</span>(<span class="number">1.0</span> * sum / n);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ceil()原型</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> x)</span></span>;</span><br></pre></td></tr></table></figure><p><code>float</code>能保证6位精度（有效数字），<code>double</code>能保证15位精度。但是<code>float</code>和<code>double</code><strong>默认都只显示6位有效数字</strong>，所以一旦<code>1.0 * sum / n</code>大于6位，函数返回的<code>double</code>就显示不全，造成精度损失（比如结果应该是<code>5336844</code>，但返回<code>5.33684e+006</code>），故进行强制类型转换。 ## B1. Social Network (easy version) 题意：屏幕可以容纳<span class="math inline">\(k\)</span>条短信，有若干朋友发来<span class="math inline">\(n\)</span>条短信。如果某个朋友已经在屏幕上，不做改变；否则将其他朋友下移，新收到的朋友置顶。求最终自顶向下显示在屏幕上的朋友。 思路：按照题意模拟，我搞得有些繁琐（用<code>queue + set</code>来考虑是否将新来的短信放入屏幕，再用<code>queue.size()</code>和<span class="math inline">\(k\)</span>判断是否需要将旧短信<code>pop()</code>，最后将队列中的元素逆序输出）。 ## B2. Social Network (hard version) 数据量变到了<span class="math inline">\(10^5\)</span>级别，官方题解和我在B1中的思路一致。不过最后输出我是先压栈，题解是先存入<code>vector</code>，再用<code>reverse()</code>函数逆序，复杂度<span class="math inline">\(O(nlogk)\)</span>。 ## C. Pipes 模拟题：比赛时候发现了既然可以无限旋转，那么管道一共有2类：<span class="math inline">\(12\)</span>一样，<span class="math inline">\(3456\)</span>一样。 水流到<span class="math inline">\(12\)</span>这类，只能水平向右流； 流到<span class="math inline">\(3456\)</span>这类，那么另一行对应的位置也必须是<span class="math inline">\(3456\)</span>类，水就会换一行流动（异或即可换行），否则水没法继续流动。 最后判断水能否流到第二行第<span class="math inline">\(n\)</span>列。 ## D. Distinct Characters Queries 题意：给一字符串和<span class="math inline">\(q\)</span>次查询，查询分为两类：一类是替换字符串中某个字母，另一类是求子串中非重复字符的个数。 比赛时的思路是：遇到第一类查询就按规则替换，第二类先拿到子串，依次把子串的每个字符放入<code>set</code>中，最后返回<code>set.size()</code>即是非重复字符个数。 此题的教训就是要学会根据数据量级猜算法：1s/2s时限，C++运算次数大约在<span class="math inline">\(10^7\)</span>，本题的数据范围<span class="math inline">\(10^5\)</span>，我傻傻地把<span class="math inline">\(O(n^2)\)</span>的算法交了三次，TLE了三次，我还以为是<code>cin</code>的问题。。。 参考下大佬经验：<a href="https://www.acwing.com/blog/content/32/">由数据范围反推算法复杂度</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round</title>
      <link href="/2019/09/23/Codeforces%20Round%20#587/"/>
      <url>/2019/09/23/Codeforces%20Round%20#587/</url>
      
        <content type="html"><![CDATA[<p>题目链接：<a href="https://codeforces.com/contest/1216">Round #587</a> 题目答案：<a href="https://codeforces.com/blog/entry/69954">官方Editorial</a>、<a href="https://github.com/EIMadrigal/CF">My Solution</a> ## A. Prefixes 题意：给一字符串，只含有<code>'a'</code>或<code>'b'</code>，需要改变某些位置（<code>'a'</code>变<code>'b'</code>或<code>'b'</code>变<code>'a'</code>），使得该字符串任意偶数长度前缀中<code>'a'</code>和<code>'b'</code>个数相等，求改变的最少次数以及更改后的字符串。</p><p>题解：遍历，判断<code>s[2i]</code>和<code>s[2i+1]</code>是否相等。如果相等，需要一次更改，并将其中一个改为不同字母。 ## B. Shooting 题意：给<span class="math inline">\(n\)</span>个编号<span class="math inline">\(1\)</span>~<span class="math inline">\(n\)</span>的射击目标，每个目标有不同的耐久度，假设已经击倒了<span class="math inline">\(x\)</span>个目标，将要射击第<span class="math inline">\(i\)</span>个目标，那么需要<span class="math inline">\(a_i*x+1\)</span>次才可以击倒该目标，<span class="math inline">\(a_i\)</span>为第<span class="math inline">\(i\)</span>个目标的耐久度。求击倒所有目标的最少射击次数以及射击次序。</p><p>题解：贪心。想要射击次数最少，就要先射击耐久度大的目标，所以按照耐久度由大到小排序，同时记录对应的目标序号。 ## C. White Sheet 题意：给定三个矩形，两黑一白，判断两个黑色矩形是否可以完全覆盖白色矩形，不能完全覆盖输出<code>YES</code>。</p><p>题解：分两种情况，记白色矩形面积为<span class="math inline">\(S_w\)</span>，一个黑色矩形与白色矩形交叉面积为<span class="math inline">\(S_{wb1}\)</span>，另一个黑色矩形与白色矩形交叉面积为<span class="math inline">\(S_{wb2}\)</span>，两黑色矩形交叉面积为<span class="math inline">\(S_{bb}\)</span>： 1、两黑色矩形无交叉：只要<span class="math inline">\(S_{wb1}+S_{wb2}&lt;S_w\)</span>，就可以看到白色矩形； 2、两黑色矩形有交叉：如果<span class="math inline">\(S_{wb1}+S_{wb2}-S_{bb}&lt;S_w\)</span>，可以看到白色矩形。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Recursion and Backtracking</title>
      <link href="/2019/09/16/Recursion%20and%20Backtracking/"/>
      <url>/2019/09/16/Recursion%20and%20Backtracking/</url>
      
        <content type="html"><![CDATA[<h2 id="tree-recursion">Tree Recursion</h2><p>递归是计算机科学中一个非常重要的概念，对于斐波那契那种比较简单的递归，分析起来比较容易，但是由于二叉树涉及指针操作，所以模拟下遍历过程中系统栈的情况。 以二叉树中序遍历为例演示： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    TreeNode* left;</span><br><span class="line">    TreeNode* right;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="built_in">TreeNode</span>(<span class="keyword">int</span> x) :<span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">NULL</span>), <span class="built_in">right</span>(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> 中序遍历的递归实现： <img src="https://img-blog.csdnimg.cn/20190915232047750.png" alt="在这里插入图片描述" /> 假设二叉树如图所示： <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTI2MDU4MS8yMDE5MDkvMTI2MDU4MS0yMDE5MDkxNTIzMTQyMDE5MS0xMTMxOTk2Nzc2LnBuZw?x-oss-process=image/format,png" /> 其中序遍历序列为<span class="math inline">\(2413\)</span>，可以在VS中用单步调试的方法跟踪相应的变量： 当<code>root==NULL(root指向2的左孩子)</code>时，此时的系统栈（将1和2都压栈，因为中序遍历需要先访问左孩子）： <img src="https://img-blog.csdnimg.cn/20190916223229149.png" alt="在这里插入图片描述" /> 这时<code>if</code>不成立，执行83行的<code>return</code>语句，接着退栈，回到78行，此时的<code>root指向2(因为此时程序已经来到了新的栈顶)，并且向这个新栈顶返回了一个空的seq</code>： <img src="https://img-blog.csdnimg.cn/20190916223847870.png" alt="在这里插入图片描述" /> 接着执行79行(因为这是上一个函数<code>return</code>的，所以不会再一次执行78行)，将2存入<code>seq</code>中； 执行80行（<code>root</code>指向4），进而执行78行，<code>root</code>指向4的左孩子，此时的系统栈（很明显可以看到从<strong>栈底到栈顶依次存放根结点到当前<code>root</code>结点的路径</strong>上的结点）： <img src="https://img-blog.csdnimg.cn/20190916225924483.png" alt="在这里插入图片描述" /> 同样，执行<code>return</code>语句，退栈，将<code>seq</code>(里面只有2)返回到这一层，这一层的<code>root</code>指向4，接着将4存入<code>seq</code>； 到80行，调用<code>inOrder()</code>使得<code>root</code>指向4的右孩子，右孩子为空，所以返回并退栈，<code>root</code>重新指向4，此时80行执行完毕，整个<code>if</code>执行完毕，返回<code>seq</code>并退栈，<code>root</code>返回到了2，以2为根结点的子树中序遍历完毕，系统栈： <img src="https://img-blog.csdnimg.cn/20190916230804141.png" alt="在这里插入图片描述" /> 继续执行，return到78行，<code>root</code>指向1，将1存入seq，以此类推，就可以得到整个的遍历序列。</p><p>最关键的是：之所以要递归调用<code>inOrder</code>，就是因为现在还不想访问当前的结点（对于中序，要先找到最左边的结点），所以通过递归的方式将当前暂时不想访问的结点压入系统栈，找到了想访问的结点后，访问它并利用退栈操作返回父结点。 有关树的问题，有一些通用的模板： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one root</span></span><br><span class="line"><span class="function">func <span class="title">solve</span><span class="params">(root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == null)  <span class="keyword">return</span> ...</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">f</span>(root) <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line">    l = <span class="built_in">solve</span>(root-&gt;left);</span><br><span class="line">    r = <span class="built_in">solve</span>(root-&gt;right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">g</span>(root, l , r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// two roots</span></span><br><span class="line"><span class="function">func <span class="title">solve</span><span class="params">(p, q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == null &amp;&amp; q == null)  <span class="keyword">return</span> ...</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">f</span>(p, q)  <span class="keyword">return</span> ...</span><br><span class="line"></span><br><span class="line">    l = <span class="built_in">solve</span>(p.child, q.child);</span><br><span class="line">    r = <span class="built_in">solve</span>(p.child, q.child);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">g</span>(p, q, l, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经典递归">经典递归</h2><p>除了树这种本身就是递归定义的结构外，还有一些search的问题也可以通过递归解决： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">length</span>() &lt;= <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> s[<span class="number">0</span>] == s[s.<span class="built_in">length</span>() - <span class="number">1</span>] &amp;&amp;</span><br><span class="line">        <span class="built_in">isPalindrome</span>(s.<span class="built_in">substr</span>(<span class="number">1</span>, s.<span class="built_in">length</span>() - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NotFound = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSearch</span><span class="params">(vector&lt;string&gt;&amp; v, <span class="keyword">int</span> start, <span class="keyword">int</span> stop, string key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; stop) <span class="keyword">return</span> NotFound;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (start + stop) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (key == v[mid])</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; v[mid])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSearch</span>(v, mid + <span class="number">1</span>, stop, key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">BSearch</span>(v, start, mid - <span class="number">1</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == k || k == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(n - <span class="number">1</span>, k) + <span class="built_in">C</span>(n - <span class="number">1</span>, k - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">permute</span><span class="params">(string soFar, string rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="string">&quot;&quot;</span>)</span><br><span class="line">        cout &lt;&lt; soFar &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rest.<span class="built_in">length</span>(); ++i) &#123;</span><br><span class="line">            string next = soFar + rest[i];</span><br><span class="line">            string remaining = rest.<span class="built_in">substr</span>(<span class="number">0</span>, i) + rest.<span class="built_in">substr</span>(i + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">permute</span>(next, remaining);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// v2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">per</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n, <span class="keyword">int</span> d, vector&lt;<span class="keyword">bool</span>&gt;&amp; used, vector&lt;<span class="keyword">int</span>&gt;&amp; cur, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == d) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        cur.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">per</span>(nums, n, d + <span class="number">1</span>, used, cur, ans);</span><br><span class="line">        cur.<span class="built_in">pop_back</span>();</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对数组a的[l, r]做全排列</span></span><br><span class="line"><span class="comment"> * 每个数字都要充当第一个</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">perm</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">            cout &lt;&lt; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(a[l], a[i]);  <span class="comment">// 第i个元素充当第一个</span></span><br><span class="line">        <span class="built_in">perm</span>(a, l + <span class="number">1</span>, r);  <span class="comment">// 剩余元素全排列</span></span><br><span class="line">        <span class="built_in">swap</span>(a[l], a[i]);  <span class="comment">// 恢复状态，保证下个做第一个元素的状态正确</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200704153124426.png" alt="在这里插入图片描述" /> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">com</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> n, <span class="keyword">int</span> d, <span class="keyword">int</span> start, vector&lt;<span class="keyword">int</span>&gt;&amp; cur, vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == d) &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        cur.<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">        <span class="built_in">com</span>(nums, n, d + <span class="number">1</span>, i + <span class="number">1</span>, cur, ans);</span><br><span class="line">        cur.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">subsets</span><span class="params">(string soFar,string rest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rest == <span class="string">&quot;&quot;</span>)</span><br><span class="line">        cout &lt;&lt; soFar &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// add to subset, remove from rest, recur</span></span><br><span class="line">        <span class="built_in">subsets</span>(soFar + rest[<span class="number">0</span>], rest.<span class="built_in">substr</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="comment">// do not add to subset, remove from rest, recur</span></span><br><span class="line">        <span class="built_in">subsets</span>(soFar, rest.<span class="built_in">substr</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200704153731705.png" alt="在这里插入图片描述" /> 从递归树可以看到：Permutation和Subsets都是关于<em>选择</em>的问题，树的深度代表选择的次数，每层的宽度代表每次决定时的选项。这种都是Exhaustive Recursion，所以复杂度很高。</p><h2 id="backtracking">Backtracking</h2><figure><img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211129144559235-1738742177.png" alt="image" /><figcaption>image</figcaption></figure><p>主要可以解决<strong>组合问题</strong>、<strong>排列问题</strong>、<strong>子集问题</strong>、<strong>字符串切割问题</strong>、<strong>棋盘问题</strong>，这些问题都可以抽象为<strong>多叉树的搜索问题</strong></p><figure><img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211129090136628-461210128.png" alt="image" /><figcaption>image</figcaption></figure><p>回溯用来搜索选择性问题（a series of choices）的所有/部分解，每做一次选择，就递归一次，如果约束条件不满足，需要<strong>回退到上一层递归的参数状态</strong>。 通过约束条件的剪枝可以避免对整个搜索空间的穷举，从而提高效率。</p><p>三个关键点：</p><ol type="1"><li>Choice 明确要做的决定，<strong>每次递归代表一次决定，每次的决策结果都保存在这一层的call stack中</strong>。 eg. 遍历二叉树时，当处在某一层的某结点时，下一次递归调用是向左还是向右。</li><li>Constraints 怎样剪枝，当前状态已经invalid，不必再从该状态继续搜索，直接返回。</li><li>Goal 找到target后，就要回溯到上一层，进行其它可能性的搜索。</li></ol><p>Pattern： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backtracking</span></span><br><span class="line"><span class="keyword">bool</span>/<span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(configuration conf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (no more choices)  <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">return</span> (conf is goal state);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (all available choices) &#123;</span><br><span class="line">        <span class="keyword">try</span> one choice c:</span><br><span class="line">        <span class="comment">// solve from here, if works out, you are done</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">solve</span>(conf with choice c made))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        unmake choice c;   <span class="comment">// explore other solutions</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// tried all choices, no soln found</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>几个例子：</p><ol type="1"><li>N-Queens 对照N皇后问题，明确三个关键点： 1）对于每一列，要做的决定是将Q放在哪一行，每次递归都会进入下一列的决策； 2）约束条件：不能出现在同一行、同一列、同一斜线； 3）目标：当在最后一列成功放置Q后，就可以回溯到上一层去探索其它解。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(grid&lt;<span class="keyword">bool</span>&gt;&amp; board, <span class="keyword">int</span> col)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (col &gt;= board.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> rowToTry = <span class="number">0</span>; rowToTry &lt; board.<span class="built_in">size</span>(); ++rowToTry) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isSafe</span>(board, rowToTry, col)) &#123;</span><br><span class="line">            <span class="built_in">placeQueen</span>(board, rowToTry, col);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">solve</span>(board, col + <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">removeQueen</span>(board, rowToTry, col);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>Sudoku <img src="https://img-blog.csdnimg.cn/20200704162901848.png" alt="在这里插入图片描述" /> 将1-9放入格子，要求每行、每列、每块不能有重复数字。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(Grid&lt;<span class="keyword">int</span>&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the gird to check, we should check all the grids</span></span><br><span class="line">    <span class="keyword">int</span> row, col;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// all grids assigned successfully</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">findUnassigned</span>(grid, row, col)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> num = <span class="number">1</span>; num &lt;= <span class="number">9</span>; ++num) &#123; <span class="comment">// options are 1-9</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">noConflict</span>(grid, row, col, num)) &#123;</span><br><span class="line">            <span class="built_in">grid</span>(row, col) = num; <span class="comment">// try assign</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">solve</span>(grid)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">grid</span>(row, col) = UNASSIGNED; <span class="comment">// undo and try again</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>球员归化</title>
      <link href="/2019/09/10/%E7%90%83%E5%91%98%E5%BD%92%E5%8C%96/"/>
      <url>/2019/09/10/%E7%90%83%E5%91%98%E5%BD%92%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="历史时刻">历史时刻？</h2><p>2019年9月10日，2022年卡塔尔世界杯亚洲区预选赛，马尔代夫对阵中国。 归化球员Elkeson身披11号球衣，代表中国男足首发出战。 不久之前，Elkeson加入中国国籍，甚至连自己中文名字（艾克森）还不会写、国歌都不会唱，却成为了国家队的一员。</p><h2 id="福还是祸">福还是祸？</h2><p>我个人一直是坚定地反对无血缘归化，可是舆论好像支持的比较多。 回顾历史，国足只在2002年打进过一次世界杯。受到零几年黑球、假球的影响，我们的足球人才出现了严重的断档，自然国家队的水平也长期徘徊在亚洲二三流。 长期无缘世界杯让我们的球迷焦躁不安，更是由于老大喜欢足球，并且多次在公开场合表示要把中国足球搞上去，中国足协出了各种各样的奇葩政策：</p><ol type="1"><li>高薪聘请国外教练：里皮、阿里汉、卡马乔，解约卡马乔时支付5000万违约金；</li><li>在中超联赛施行U23政策，俱乐部也是上有政策、下有对策：U23球员的出场时间非常可怜，只是满足足协最低要求而已；</li></ol><p>可惜，就是不把主要精力放在青训上，总想着捷径：当然，这也是官僚一贯的急功近利作风，前人栽树后人乘凉的事想都不要想。 中超联赛踢得如火如荼，可是没有跑道的专业球场屈指可数； 外援垄断了射手榜和关键位置，国内球员只是陪跑； 如果静下心来踏踏实实做好青训，规范我们的联赛，开展俱乐部各级梯队的比赛，做好校园足球的普及和推广，就像姚明对中国篮球的改革一样，那么我们10年后一定可以打进世界杯，可惜领导从来不会有这样的耐心。 其实我们的目标只是打进世界杯而已，从来就不是提高中国足球的水平。围绕这个任务，所有的一切也都得到了非常合理的解释：在恒大建立国家集训队、无血缘归化...... 有人说归化可以带动中国足球水平的提高，让越来越多的孩子走上职业联赛，并且归化和青训可以同时进行。。。 就足协那个尿性，一旦从归化中尝到了甜头，还有谁愿意冒着风险、付出成本去做青训？ 我对Elkeson并不反感，从2013年亚冠就开始看他的比赛。在俱乐部层面，他给中国足球带来了亚冠冠军；平时生活中对中国文化也很尊重； 加入中国国籍可能有对于这个国家的热爱，但是背后是8<sub>9位数的薪资以及复杂的利益纠缠，否则怎么会那么轻易主动放弃自己祖国国籍？ Elkeson只是第一个，后面可能还有高拉特、费尔南多、阿洛伊西奥......这就是恒大许老板所谓的“全华班”？ 这样即使打进世界杯，看着巴西人组成的前锋线，球迷心里真的还会有那份民族自豪感吗？ 另外，归化对于联赛的公平运作也是毁灭性的打击。其他俱乐部的外援都去恒大，足协钦定的政策谁敢不从？ 喊了这么多年联赛职业化，可惜中超的职业化只是政治因素下的可笑的玩物！ 曾经，国家队的每场比赛我都不会错过：赢了我激动地欢呼，输了我会难过好几天。见过它的高光，也陪伴它走过低谷。 这次我是真的失望到无法接受：从今天开始，我不会再关注中国足球的任何消息，这潭泛着恶臭的死水已经开始恶心到我了！ 以后就看看梅西、阿森纳和西班牙就行了</sub></p>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Football </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高墙与鸡蛋</title>
      <link href="/2019/09/06/%E9%AB%98%E5%A2%99%E4%B8%8E%E9%B8%A1%E8%9B%8B/"/>
      <url>/2019/09/06/%E9%AB%98%E5%A2%99%E4%B8%8E%E9%B8%A1%E8%9B%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="村上在耶路撒冷">村上在耶路撒冷</h2><p>2009年春天，村上春树获得了“耶路撒冷文学奖”。当时巴勒斯坦和以色列之间的冲突愈演愈烈，很多人都劝阻村上不要去以色列领奖，何况村上其实对公开场合发表演讲、接受采访这些事是比较排斥的。 他最终还是决定出席（原因他在演讲时解释了），并且发表了极为精彩的演说--“高墙与鸡蛋”。 全文还是不太好找，不过最终在林少华先生的博客中找到了中文版（林少华先生是村上小说很重要的翻译家）：<a href="http://blog.sina.com.cn/s/blog_48f36ce00100e3qd.html">原文链接</a></p><blockquote><p>我作为一个小说家，换句话说，作为以巧妙说谎为职业的人来到这里、来到耶路撒冷市。</p><p>当然，说谎的不都是小说家。诸位知道，政治家屡屡说谎，外交官和军人说谎，二手车推销员、肉铺和建筑业者也说谎。但小说家说谎和他们说谎的不同之处在于：小说家说谎不受道义上的谴责。莫如说谎说得越大越高明，小说家越能得到人们的赞赏和好评。为什么呢？</p><p>这是因为，小说家能够通过巧妙说谎、通过栩栩如生的虚构而将真相拽到另一场所投以另一光照。以其固有的形式捕捉真相并予以准确描述在许多情况下是不可能的。惟其如此，我们才要把真相引诱出来移去虚构地带，通过将其置换为虚构形式来抓住真相的尾巴。但为此必须首先在自己心底明确真相的所在，这是巧妙说谎所需要的重要资格。</p><p>可是今天我不准备说谎，打算尽可能说实话。一年之中我也有几天不说谎，今天恰好是其中的一天。</p><p>实话实说好了。关于此次来以色列接受耶路撒冷文学奖，不少人劝我最好拒绝。甚至警告说如果前来，将开展不买我的书的运动。无须说，理由在于加沙地区的激战。迄今为止，已不止一千人在被封锁的城区丧生，据联合国报告，大多数是儿童、老人等手无寸铁的平民。</p><p>接到获奖通知以来，我本人也一再自问：这种时候来以色列接受文学奖果真是妥当的行为吗？不会给人以支持作为纷争当事者一方、拥有占绝对优势的军事力量并积极行使的国家及其方针的印象吗？那当然不是我所希望的。我不认可任何战争，不支持任何国家。同时，自不待言，我的书在书店被人拒买也不是我所希求的。</p><p>然而，经过深思熟虑，我重新坚定了来这里的决心。原因之一，就在于有那么多人劝我最好别来。或许我有一种大部分小说家都有的“犟脾气”--别人叫我“别去那里”、“别干那个”、尤其那样警告我的时候，我就偏偏想去或想干，此乃小说家的nature（天性）。为什么呢？因为小说家属于这样一种人：无论刮怎样的逆风，也只能相信自己实际目睹、自己实际手摸的东西。</p><p>正因如此，我才出现在这里。较之不来，选择了来；较之什么也不看，选择了看点儿什么；较之什么也不说，选择了向诸位说点儿什么。</p><p>有一句话（message）请允许我说出来，一句个人性质的话。这句话在我写小说时总在我脑袋里挥之不去。它并非写在纸上贴在墙壁，而是刻于我的脑壁。那是这样一句话：</p><p><strong>假如这里有坚固的高墙和撞墙破碎的鸡蛋，我总是站在鸡蛋一边。</strong></p><p>是的，无论高墙多么正确和鸡蛋多么错误，我也还是站在鸡蛋一边。正确不正确是由别人决定的，或是由时间和历史决定的。假如小说家站在高墙一边写作--不管出于何种理由--那个作家又有多大价值呢？</p><p>那么，这一隐喻到底意味什么呢？在某种情况下它是简单明了的。轰炸机、坦克、火箭、白燐弹、机关枪是坚硬的高墙。被其摧毁、烧毁、击穿的非武装平民是鸡蛋。这是这一隐喻的一个含义。</p><p>但不仅仅是这个，还有更深的含义。请这样设想好了：我们每一个人都或多或少分别是一个鸡蛋，是具有无可替代的灵魂和包拢它的脆弱外壳的鸡蛋。我是，你们也是。再假如我们或多或少面对之于每一个人的坚硬的高墙。高墙有个名称，叫作体制（System）。体制本应是保护我们的，而它有时候却自行其是地杀害我们和让我们杀人：<strong>冷酷</strong>地、高效地、而且系统性地（Systematically）。</p><p>我写小说的理由，归根结底只有一个，那就是为了让个人灵魂的尊严浮现出来，将光线投在上面。经常投以光线，敲响警钟，以免我们的灵魂被体制纠缠和贬损。这正是故事的职责，对此我深信不疑。不断试图通过写生与死的故事、写爱的故事来让人哭泣、让人惧怕、让人欢笑，以此证明每个灵魂的无可替代性--这就是小说家的工作。我们为此而日复一日地认真编造故事。</p><p>我的父亲去年夏天去世了，活了九十岁。他是个退休教师，也是个兼职佛教僧侣。在研究生院就读期间被征召入伍，参加了中国大陆的战斗。我小的时候，他每天早上都在饭前向佛坛献上长长的深深的祈祷。一次我问父亲为什么祈祷，他回答为了在战场死去的人，为了在那里--无论友方敌方--失去性命的人。每次看见父亲祈祷的身姿，我都觉得那里似乎漂浮着死亡的阴影。</p><p>父亲去世了，其记忆--还没等我搞清是怎样的记忆--也彻底消失了。但是，那里漂浮的死亡气息仍留在我的记忆中。那是我从父亲身上继承的少数然而宝贵的事项之一。</p><p>我在这里想向诸位传达的只有一点：我们都是超越国籍、种族和宗教的一个一个的人，都是面对体制这堵高墙的一个一个的蛋。看上去我们毫无获胜的希望。墙是那么高那么硬，那么冰冷。假如我们有类似获胜希望那样的东西，那只能来自我们相信自己和他人的灵魂的无可替代性并将其温煦聚拢在一起。</p><p>请这样想想看。我们每一个人都有可以拿在手中的活的灵魂，体制则没有。不能让体制利用我们，不能让体制自行其是。不是体制创造了我们，而是我们创造了体制。</p><p>我想对诸位说的仅此一点。</p><p>荣获耶路撒冷奖，我很感谢。感谢世界很多地方都有看我书的人。我要向耶路撒冷的每一位读者致以谢意。毕竟是因了你们的力量我才出现在这里的。但愿我们能够共同拥有什么--非常有意义的什么。我很高兴得以来此向诸位讲话。</p></blockquote><p>村上的小说一直强调个人的自由，他也一直希望每个个体都能拥有独特的生活方式、活出自我，而不是被体制化（Institutionalization）。 其实发表演讲时，如果不是因为战争的背景以及村上的解释，那么我对于<strong>永远站在鸡蛋一边</strong>是无法苟同的：试想如果鸡蛋（弱势者）的行为的确非常过分，那么如此绝对地站队是不是有些混淆是非呢？ 不过村上的浅层隐喻是在讽刺战争对平民的伤害，更深层次的是对体制的搏斗以及自由的向往，这些观点足以让我信服。</p><h2 id="hard-boiled">Hard-Boiled</h2><p>这篇演说比较有趣的地方在于：村上这个系统建构狂魔为读者解释了他的一本小说的名字（这个我也是从杨照老师那里了解的）：《世界末日与冷酷仙境》。 这本小说本来是直接用英语命名，把英语写成日语外来语起名。原来叫做Hard-Boiled Wonderland and the End of the World，Wonderland比较明显出自于Alice's Adventures in Wonderland（爱丽丝梦游仙境），但是Hard-Boiled只看字面意思的话，很难理解为什么会翻译成冷酷，应该是沸腾加热这种意思才对啊~ Hard-Boiled一般就只用在美国人吃早餐时候：服务员会问你要的eggs是要soft-boiled or hard-boiled？全熟的蛋也不能叫做冷酷吧？ 美国在上世纪有一类流行小说叫做Hard-Boiled Detective Story，村上一直受西方文学影响，而且很喜欢这种类型的小说。 所谓硬汉侦探小说，其实并不是大家想象中的那种超级英雄：无坚不摧、拯救世界。 这种Hard-Boiled“硬汉”其实只是看起来很酷，戴个墨镜，实际上只是在逞强而已，他们是在社会上摸爬滚打多年、不断受挫，内心很柔弱、很受伤的一群人，成为侦探是因为他们和罪犯有着相似的生活经历，所以了解他们。 这种类型的硬汉虽然不会轻易认输，但是其实也是在苦苦支撑而已，就像是早餐店里那种Hard-Boiled eggs，以为自己成熟了，但是如果这种蛋碰到墙上，那么破碎的必然是蛋，而高墙不会有任何损失。 即使这样，村上也还是会<strong>永远站在鸡蛋一边，无论高墙多么正确和鸡蛋多么错误。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
            <tag> Haruki Murakami </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻唱与抄袭</title>
      <link href="/2019/08/31/%E7%BF%BB%E5%94%B1%E4%B8%8E%E6%8A%84%E8%A2%AD/"/>
      <url>/2019/08/31/%E7%BF%BB%E5%94%B1%E4%B8%8E%E6%8A%84%E8%A2%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由">缘由</h2><p>曾经，《老男孩》风靡一时，无数人热泪盈眶，我也感动得一塌糊涂。筷子兄弟也凭借此歌迅速走红，获得无数粉丝青睐。 我起初对日本音乐了解甚少，平时也不太接触。偶然听到山口百惠、中森明菜等一些昭和时代歌姬的演唱之后，才逐渐开始欣赏日本音乐。 毫不夸张地说，日本音乐在亚洲绝对顶级水准。这也造就了一大批靠翻唱、抄袭日本曲目成名的歌手，以及一些我们曾经为之泪流满面的歌曲。 当然，拿到原创的允许进行翻唱无可厚非，但是没有版权、重新填词并公开商演又是一种怎样的行为呢？</p><h2 id="ありがとう">ありがとう</h2><p>大桥卓弥的《ありがとう》（谢谢），就是《老男孩》的原曲。 <a href="https://b23.tv/av22011510">原曲</a>关于亲情的MV非常感人。</p><p>筷子兄弟在没有授权的情况下填词发布，后来面临起诉时才购买版权。这种“先上车后补票”的行为并不少见，据说《父亲》的旋律是把福山雅治的《milk tea》副歌部分和宫本笑里的《stay with me》副歌部分拼凑到一起的，不过并没有实锤。有人戏谑（ありがとう网易云热评）：“在知道老男孩是翻唱的之后，我一点也不好奇为什么筷子兄弟的曲风一下从老男孩变成了小苹果”。</p><h2 id="反思">反思</h2><p>很多网友戏称：中岛美雪养活了大半个华语音乐圈。 很不幸，国内许多歌手的代表作都是翻唱美雪阿姨的：任贤齐的《伤心太平洋》、王菲的《容易受伤的女人》...... 刘若英的《后来》是翻唱Kiroro的《未来へ》，《很爱很爱你》也是翻唱这个组合的同一张专辑...... 再看最近，自称“原创歌手”的花粥代表作《盗将行》、《出山》都涉嫌抄袭； <a href="https://b23.tv/av45107069">《出山》原曲</a> 附上<a href="https://b23.tv/av45298740">左右声道对比</a></p><p>神曲《起风了》也是翻唱高桥优的《ヤキモチ》（吃醋），附上<a href="https://b23.tv/av23618612/p1">MV链接</a> 真的太多太多了，我曾经在贴吧看过一个统计，国内知名歌手翻唱日本歌手的歌曲一共列了好几十个页面...... 说这些不是为了引战，我们要正视差距，填词都很不错，优秀的作曲真的太少太少，所以周杰伦才那么难能可贵。 反观日本，几乎每个歌手都是创作者，作品的旋律也非常优美，能把人深深吸引进故事里，而不是写一些口水歌。 唱功再好，最多就是个singer，成为不了musician~</p>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Norwegian Wood</title>
      <link href="/2019/08/26/Norwegian%20Wood/"/>
      <url>/2019/08/26/Norwegian%20Wood/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>《挪威的森林》是村上春树很有名的一部小说，但我想大多数人阅读的时候都只是把书名当作一个符号，而不是作为故事去追究。 我国台湾知名文学评论家杨照先生说过：村上的书里有太多太多典故，如果你只是把这些典故当作符号看待，那么会少很多阅读的乐趣。你探寻这些典故越深，就越能体会村上想要表达的意思。 那么《挪威的森林》是怎么来的？</p><h2 id="the-beatles">the Beatles</h2><p>了解村上的人都知道：他生命中最重要的几件事就是写作、听音乐、长跑和翻译。 Norwegian Wood(This Bird Has Flown)是Beatles在1965年发行的歌，这首歌的歌词非常简单：</p><blockquote><p>I once had a girl Or should I say she once had me She showed me her room Isn't good Norwegian wood?</p></blockquote><blockquote><p>She asked me to stay And she told me to sit anywhere So I looked around And I noticed there wasn't a chair I sat on a rug biding my time</p></blockquote><blockquote><p>Drinking her wine We talked until two and then she said &quot;It's time for bed&quot; She told me she worked In the morning and started to laugh I told her I didn't And crawled off to sleep in the bath</p></blockquote><blockquote><p>And when I awoke I was alone This bird had flown So I lit a fire Isn't it good Norwegian wood?</p></blockquote><p>歌词的寓意很明显：这个女孩喜欢男孩，想和他滚床单，男孩激动地陪她喝酒聊天。 等他早上醒来的时候，发现女孩已经走了，本来在他手里的鸟飞走了，好似喝醉后的一场梦，转瞬无影踪。 可是Norwegian wood为什么莫名其妙出现在这里？</p><h2 id="故事">故事</h2><p>这首歌基本上是John Lennon完成的，歌词原本是<strong>Isn't good? Knowing she would</strong> 创作完成后，唱片公司觉得歌词的意味太明显，在60年代这样的歌词有些太过直白。 唱片公司要求John修改歌词，调皮的John就利用谐音把<strong>Knowing she would</strong>改成了<strong>Norwegian wood</strong> 改完之后，起初录音时候他还是唱<strong>Knowing she would</strong>，于是唱片公司下了最后通牒：如果还这样唱，那这首歌不能收录。 就这样，John Lennon唱出了<strong>Norwegian wood</strong>，村上听着<strong>Norwegian wood</strong>写出了<strong>Norwegian wood</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Literature </tag>
            
            <tag> Haruki Murakami </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Blog Customization</title>
      <link href="/2019/08/19/Blog%20Customization/"/>
      <url>/2019/08/19/Blog%20Customization/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>从大二开始写博客，主要为了记录自己学习过程中的问题。尝试使用过CSDN、博客园等公共服务，也用Github pages搭建过自己的博客，但效果都不令人满意。CSDN广告太多，界面乌烟瘴气，而且很多博客内容都是抄袭而来；博客园模板比较单一，而且对Markdown的支持不友好；Github pages很自由，但是搭建以及发布文章比较麻烦。<a href="https://eimadrigal.blogspot.com/">blogspot</a>对国内用户很不友好。</p><p>后来在网上浏览别人的博客园时，才发现原来是可以自己定制博客的，遂写此文。</p><h2 id="皮肤">皮肤</h2><p>皮肤也就是博客的背景，博客园提供了一些模板，可以在管理-&gt;设置-&gt;博客皮肤中选择。 如果你对于CSS比较熟悉，那完全可以自己写一个网页的样式，然后勾选禁用模板默认CSS。 <img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825184956989-1010438394.png" alt="img" /> 如果你不熟悉Web开发，可以找一些别人写好的页面定制代码，复制到页面定制CSS代码框中。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Monokai Sublime style. Derived from Monokai by noformnocontent http://nn.mit-license.org/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">pre &#123;</span><br><span class="line">    <span class="comment">/*控制代码不换行*/</span></span><br><span class="line">    <span class="attribute">white-space</span>: pre;</span><br><span class="line">    <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cnblogs-markdown</span> <span class="selector-class">.hljs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1.3em</span> <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#272822</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">700px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs</span>,</span><br><span class="line"><span class="selector-class">.hljs-tag</span>,</span><br><span class="line"><span class="selector-class">.hljs-subst</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f8f8f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-strong</span>,</span><br><span class="line"><span class="selector-class">.hljs-emphasis</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a8a8a2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-bullet</span>,</span><br><span class="line"><span class="selector-class">.hljs-quote</span>,</span><br><span class="line"><span class="selector-class">.hljs-number</span>,</span><br><span class="line"><span class="selector-class">.hljs-regexp</span>,</span><br><span class="line"><span class="selector-class">.hljs-literal</span>,</span><br><span class="line"><span class="selector-class">.hljs-link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ae81ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-code</span>,</span><br><span class="line"><span class="selector-class">.hljs-title</span>,</span><br><span class="line"><span class="selector-class">.hljs-section</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-class</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a6e22e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-strong</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-emphasis</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-keyword</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-tag</span>,</span><br><span class="line"><span class="selector-class">.hljs-name</span>,</span><br><span class="line"><span class="selector-class">.hljs-attr</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f92672</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-symbol</span>,</span><br><span class="line"><span class="selector-class">.hljs-attribute</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#66d9ef</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-params</span>,</span><br><span class="line"><span class="selector-class">.hljs-class</span> <span class="selector-class">.hljs-title</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f8f8f2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-string</span>,</span><br><span class="line"><span class="selector-class">.hljs-type</span>,</span><br><span class="line"><span class="selector-class">.hljs-built_in</span>,</span><br><span class="line"><span class="selector-class">.hljs-builtin-name</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-id</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-attr</span>,</span><br><span class="line"><span class="selector-class">.hljs-selector-pseudo</span>,</span><br><span class="line"><span class="selector-class">.hljs-addition</span>,</span><br><span class="line"><span class="selector-class">.hljs-variable</span>,</span><br><span class="line"><span class="selector-class">.hljs-template-variable</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#e6db74</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hljs-comment</span>,</span><br><span class="line"><span class="selector-class">.hljs-deletion</span>,</span><br><span class="line"><span class="selector-class">.hljs-meta</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#75715e</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 黑色主题makedown代码结束 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*makedown行间代码样式 */</span></span><br><span class="line"><span class="selector-class">.cnblogs-markdown</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c7254e</span>;</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f2f4</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*引言样式*/</span></span><br><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span> <span class="selector-tag">strong</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*博客顶部容器包括标题、副标题、导航栏*/</span></span><br><span class="line"><span class="comment">/* 博客标题和副标题 */</span></span><br><span class="line"><span class="selector-id">#blogTitle</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blogTitle</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blogTitle</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*博客导航栏 */</span></span><br><span class="line"><span class="selector-id">#navList</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#navList</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blogStats</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*sideBar博客侧边栏容器*/</span></span><br><span class="line"><span class="selector-id">#sideBar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newsItem</span>, <span class="selector-class">.catListComment</span>, <span class="selector-class">.catListEssay</span>, <span class="selector-class">.catListView</span>, <span class="selector-class">.catListFeedback</span>,</span><br><span class="line"><span class="selector-id">#blog-calendar</span>, <span class="selector-id">#sidebar_postcategory</span>, <span class="selector-id">#sidebar_postcategory</span>, <span class="selector-id">#sidebar_postarchive</span>, <span class="selector-id">#sidebar_search</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#A7A8AD</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sideBarMain</span> <span class="selector-tag">h3</span>, <span class="selector-class">.newsItem</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">0.5em</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://www.cnblogs.com/skins/red_autumnal_leaves/images/titlebg.png</span>) no-repeat left center <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sideBarMain</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#sideBarMain</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*侧边栏公告*/</span></span><br><span class="line"><span class="selector-id">#blog-news</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/*头像*/</span></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#profile_block</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#profile_block</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#F60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*公告结束*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 日历 */</span></span><br><span class="line"><span class="selector-id">#blog-calendar</span>, <span class="selector-id">#calendar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blog-calendar</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blog-calendar</span> <span class="selector-tag">td</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#59a020</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blog-calendar</span> <span class="selector-tag">table</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#59a020</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#blog-calendar</span> <span class="selector-tag">table</span> u &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*日历结束*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*设置背景色和字体大小*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*mainContent主体内容容器*/</span></span><br><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">95%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mainContent</span> <span class="selector-class">.forFlow</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">310px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mainContent</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">310px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#post_detail</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 标题title样式 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#topics</span> <span class="selector-class">.postTitle</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cb_post_title_url</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">background-position</span>: left center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主体内容样式 */</span></span><br><span class="line"><span class="selector-class">.postBody</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cnblogs_post_body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="comment">/*标题h2*/</span></span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d6dbdf</span>8a;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#cnblogs_post_body</span> <span class="selector-tag">h4</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#topics</span> <span class="selector-class">.postDesc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 个性签名 */</span></span><br><span class="line"><span class="selector-id">#MySignature</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">8px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">#989898</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: solid <span class="number">5px</span> <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#F3F3F3</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">50%</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2.4</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#MySignature</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#4183c4</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#MySignature</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#MySignature</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f60</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关注收藏等几个按钮 */</span></span><br><span class="line"><span class="selector-id">#green_channel</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#green_channel</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: none;</span><br><span class="line">    <span class="attribute">font-weight</span>: normal;</span><br><span class="line">    <span class="attribute">box-shadow</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 禁用下划线 */</span></span><br><span class="line"><span class="selector-class">.postBody</span> <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>, <span class="selector-class">.postBody</span> <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>, <span class="selector-class">.postBody</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 上一篇下一篇 */</span></span><br><span class="line"><span class="selector-id">#post_next_prev</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#535353</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*底部隐藏作者，隐藏推荐和反对*/</span></span><br><span class="line"><span class="selector-id">#author_profile</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#div_digg</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*隐藏广告*/</span></span><br><span class="line"><span class="selector-id">#ad_t2</span>, <span class="selector-id">#cnblogs_c1</span>, <span class="selector-id">#under_post_news</span>, <span class="selector-id">#cnblogs_c2</span>, <span class="selector-id">#under_post_kb</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*评论*/</span></span><br><span class="line"><span class="comment">/*评论列表*/</span></span><br><span class="line"><span class="selector-id">#blog-comments-placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.feedback_area_title</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">//www.cnblogs.com/skins/red_autumnal_leaves/images/titlebg.png</span>) no-repeat left center <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#55895B</span>;</span><br><span class="line">    <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*侧边评论*/</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.recent_comment_body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提交评论按钮 */</span></span><br><span class="line"><span class="selector-id">#btn_comment_submit</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#fd6d0d</span>d1 <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fd6d0d</span>d1 <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="标题和导航栏">标题和导航栏</h2><figure><img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825185903232-1879765133.png" alt="img" /><figcaption>img</figcaption></figure><p>标题和子标题的修改也在管理-&gt;设置中； 导航栏的控件在管理-&gt;选项中勾选，这里还包含侧边栏的控件，可以根据需要自行选择。 <img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825190124197-141259783.png" alt="img" /></p><h2 id="侧边栏公告">侧边栏公告</h2><figure><img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825190343070-1772796324.png" alt="img" /><figcaption>img</figcaption></figure><p>这部分的修改也在管理-&gt;设置中，不过修改前需要发邮件给博客园后台申请JS权限。 这里主要有3点： 一、动态时钟 这个我是copy了<a href="https://www.cnblogs.com/jingmoxukong/p/7826982.html">详谈如何定制自己的博客园皮肤</a>； 二、背景音乐 背景音乐的添加需要进入网易云音乐网页后，找到喜欢的音乐，生成外链播放器，然后复制那段HTML代码到侧边栏公告即可。 <img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825191108110-1169449336.png" alt="img" /> 这里要注意：博客园不支持iframe插件，所以只能采用flash插件！ 三、访客统计 <img src="https://img2018.cnblogs.com/blog/1260581/201908/1260581-20190825191224704-336517055.png" alt="img" /> 这个功能可以去<a href="http://www.flagcounter.com/">flagcounter</a>完成，同样复制HTML代码到侧边栏公告即可。我的博客把这个放到了页脚html代码中，所以可以看到这个在左下角显示。 完整的博客侧边栏公告代码，注意：其中的网易云音乐和访问人数需要自己生成外链！ <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!---  自定义侧边栏  ---&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mySideBar&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p_b_follow&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;follow(&#x27;ca5022e9-4171-4a38-e168-08d4ef52ecb5&#x27;)&quot;</span>&gt;</span>+Follow Me<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>student@XJTU<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">p</span>&gt;</span>Email：andrew_ren@163.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--- 动态时钟  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">wmode</span>=<span class="string">&quot;transparent&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://files.cnblogs.com/files/jingmoxukong/honehone_clock_tr.swf&quot;</span> <span class="attr">quality</span>=<span class="string">&quot;high&quot;</span> <span class="attr">bgcolor</span>=<span class="string">&quot;#FDF6E3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;240&quot;</span> <span class="attr">height</span>=<span class="string">&quot;110&quot;</span> <span class="attr">name</span>=<span class="string">&quot;honehoneclock&quot;</span> <span class="attr">align</span>=<span class="string">&quot;middle&quot;</span> <span class="attr">allowscriptaccess</span>=<span class="string">&quot;always&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/x-shockwave-flash&quot;</span> <span class="attr">pluginspage</span>=<span class="string">&quot;http://www.macromedia.com/go/getflashplayer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--- 网易云音乐  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;//music.163.com/style/swf/widget.swf?sid=26511658&amp;type=2&amp;auto=1&amp;width=320&amp;height=66&quot;</span> <span class="attr">width</span>=<span class="string">&quot;340&quot;</span> <span class="attr">height</span>=<span class="string">&quot;86&quot;</span>  <span class="attr">allowNetworking</span>=<span class="string">&quot;all&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--- 访问人数  ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://info.flagcounter.com/myYT&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s01.flagcounter.com/count2/myYT/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_4/viewers_0/labels_1/pageviews_1/flags_0/percent_0/&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Flag Counter&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--- 导入js库  ---&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"> <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;c_n4&quot;</span> <span class="attr">width</span>=<span class="string">&quot;860&quot;</span> <span class="attr">height</span>=<span class="string">&quot;968&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed; top: 0px; left: 0px; z-index: -1; opacity: 0.5;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure> 最后点击保存即可。</p><h2 id="自适应手机屏幕">自适应手机屏幕</h2><p>博客园的模板并没有自适应手机屏幕，可以参考<a href="https://www.cnblogs.com/lvdabao/p/5245247.html">这篇博文</a>修改CSS中的参数，就可以得到自适应移动设备的网页。</p><h2 id="reference">Reference</h2><p>当前使用的是在<a href="https://github.com/Summertime-Wu/make_cnblogs_better">这个</a>基础上做了一些魔改。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Counting Sort and Radix Sort</title>
      <link href="/2019/06/30/Counting%20Sort%20and%20Radix%20Sort/"/>
      <url>/2019/06/30/Counting%20Sort%20and%20Radix%20Sort/</url>
      
        <content type="html"><![CDATA[<h2 id="counting-sort">Counting Sort</h2><p>计数排序适用于数据量很大，但是数据类别很少的情况，可以做到线性时间。 举例来看：如果有100万个字符串，但只有cat, dog, person三种类型，采用基于比较的排序方式，可以做到<span class="math inline">\(NlogN\)</span>，计数排序采用了一种完全不同的思想：</p><ul><li>新建一个<code>counts[3]</code>，记录每种类型数据的出现次数；</li><li>遍历待排序数组，完成<code>count[]</code>的统计，并创建一个结果数组<code>sorted[]</code>： <img src="https://img-blog.csdnimg.cn/20200624082843898.png" alt="在这里插入图片描述" /></li><li>基于<code>count[]</code>，我们完全可以知道第一个cat应该放置在0，第一个dog应该放置在<code>count[0]=4</code>处，第一个person应该放置在<code>count[0]+count[1]=6</code>处，为了更加清晰，创建一个<code>starts[3]</code>表示每类数据中的第一个的起始位置： <img src="https://img-blog.csdnimg.cn/20200624083353219.png" alt="在这里插入图片描述" /></li><li>接着第二次遍历待排序数组，遇到第一个cat，我们知道它应该放在<code>sorted[starts[0]]</code>；第一个dog应该放在<code>sorted[starts[1]]</code>，第二个dog应该放在<code>sorted[starts[1]+1]</code>。或者可以这样做：每当放置完一个dog，就<code>++starts[1]</code>，这样下一次的dog还是会放在<code>sorted[starts[1]]</code>，最终结果： <img src="https://img-blog.csdnimg.cn/20200624084335135.png" alt="在这里插入图片描述" /></li></ul><p>对于字符串排序，我们需要规定<code>counts[]</code>中每个下标对应哪种类型。如果对于非负整数，我们可以用<code>counts[i]</code>表示i的出现次数，接着遍历<code>counts[]</code>，将整数i放置<code>counts[i]</code>次；如果有负数，可以找到最小值min和最大值max，平移到0~max-min即可。</p><h2 id="radix-sort">Radix Sort</h2><p>计数排序的前提就是需要知道待排序数组的内容/范围，那么如果范围很大，空间上是无法忍受的，由此来看更加general的基数排序：如果给定某种基（二进制2/十进制10/小写字母26）下的待排序数据，基数排序会逐位处理。基数排序有两种方式：</p><ol type="1"><li>LSD(Least Significant Digit) 首先按照最右边一位排序，依次处理左边的每一位： 356, 112, 904, 294, 209, 820, 394, 810； 820, 810, 112, 904, 294, 394, 356, 209； 904, 209, 810, 112, 820, 356, 294, 394； 112, 209, 294, 356, 394, 810, 820, 904。 由于对第二位排序不能改变第一位排序的结果，所以要求按位排序算法必须是<strong>稳定</strong>的。</li><li>MSD(Most Significant Digit) 从左到右处理，MSD需要用到桶： [112], [294, 209], [356, 394], [820, 810], [904]； 对于每个桶采用类似的方法直到最后一位，以[294, 209]为例，接着处理第二位：[209], [294]。 最后收集每个桶中的元素即可。</li></ol><h2 id="reference">Reference</h2><p><a href="https://github.com/EIMadrigal/CS61B/tree/master/lab13">具体实现</a>，不知道LSD哪里实现的有问题，提交AutoGrader总是超时。<br /><a href="https://sp18.datastructur.es/materials/lab/lab13/lab13">lab 13 Radix Sorts</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Naïve Bayes</title>
      <link href="/2019/06/08/Na%C3%AFve%20Bayes/"/>
      <url>/2019/06/08/Na%C3%AFve%20Bayes/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><h2 id="details">Details</h2><h2 id="example">Example</h2><h2 id="implementation">Implementation</h2><h2 id="properties">Properties</h2><p>NBC有坚实的数学基础，稳定的分类效率，超参数少（先验），对缺失数据不敏感，算法简单。 如果属性较多且相关性比较大，决策树优于NBC，否则NBC性能很好。</p><p>垃圾邮件分类器 事先做一个vocabulary存放常用的单词，如果邮件中包含vocabulary的第j个单词，特征向量中<span class="math inline">\(x_j=1\)</span> 朴素贝叶斯假设给定标签前提下各个属性是独立的（条件独立）： <span class="math inline">\(P(x_1,...,x_d|y)=P(x_1|y)P(x_2|y,x_1)...P(x_d|y,x_1,...,x_{d-1})=P(x_1|y)P(x_2|y)...P(x_d|y)\)</span> <span class="math inline">\(P(x_2|y,x_1)\)</span>表示在<span class="math inline">\((y,x_1)\)</span>的条件下<span class="math inline">\(x_2\)</span>发生的概率 <span class="math inline">\(P(junk|D)=\frac{P(junk)P(D|junk)}{P(D)},P(normal|D)=\frac{P(normal)P(D|normal)}{P(D)}\)</span> P(junk)/P(normal)根据邮件库的比例即可 P(D|junk)=P(word1,word2,...,wordn|junk)，联合概率分布的数据是稀疏的，在垃圾邮件集合中出现与当前邮件相同的邮件概率。 P(word1|junk)P(word2|word1,junk)P(word3|word2,word1,junk)... 如果条件独立假设成立， P(word1|junk)P(word2|junk)P(word3|junk)...只要统计垃圾邮件中每个单词的频率</p><p>拼写纠正 max P(猜测用户希望输入的单词|实际输入单词) <span class="math inline">\(P(h_1|D),P(h_2|D)\)</span> <span class="math inline">\(P(h|D)\propto P(h)P(D|h)\)</span> 对给定的观测数据，一个猜测的好坏正比于先验和这个猜测生成观测数据的可能性大小（似然）</p><p>假设实际输入D=thew,h1=the,h2=thaw <span class="math inline">\(P(h_1|D)=\)</span>the本身在词典中的出现概率及输入the前提下输thew的可能</p><p>ID3（Iterative Dichotomiser 3）迭代二叉树3代，启发式算法 以信息增益做属性选择，选择分裂后信息增益最大的属性进行分裂</p><ol type="1"><li>top-down贪心遍历可能的决策树空间</li><li>核心问题在于如何选择划分属性</li><li>按照信息增益选择分类能力最好的属性</li><li>属性的每个值产生一个分支，将训练数据放在合适的分支，不回溯考虑之前的选择</li></ol><p>都知道熵用来衡量随机变量的不确定性，在这里就是刻画数据集的不纯度 条件熵是指在某个条件下，随机变量的不确定性 信息增益即熵-条件熵，即某条件下信息不确定性减少的程度 举例来看：明天下雨的熵为2，阴天条件下下雨的熵是0.01（即阴天下雨的可能性很大，所以不确定性很小），信息增益=2-0.01=1.99，获知阴天后，下雨的不确定性减少了很多，信息增益很大，所以阴天对下雨这一推断很重要，意味着这个特征很关键。</p><p>IG衡量给定属性区分训练样例的能力 <span class="math inline">\(Entropy(S)=\sum_{i=1}^{c}-p_ilog_2p_i\)</span>，c表示该属性有c个取值，Pi表示子集中样例占总数的比例。介于[0,1]之间，所有样例属于1类，最纯，熵为0；平分熵最大为1</p><p>一个属性的IG意味着用该属性分割样例导致的熵减的期望， <span class="math inline">\(IG(S,A)=E(S)-\sum_{i=1}^{c}\frac{|S_i|}{|S|}E(S_i)\)</span></p><p>C4.5用信息增益率作为属性选择的依据，构造过程中会进行剪枝（不考虑只有几个元素的结点，避免过拟合） 率即用相对性衡量（10经过10s到20，1经过1s到2，虽然前者的增益大，但如果用速度增加率即加速度衡量是一样的）</p><p>可以处理非离散数据和不完整数据</p><p>当前数据集S，当前属性A有c个取值，S需要被分割为c个子集 <span class="math inline">\(GainRatio(S,A)=\frac{IG(S,A)}{SplitInfo(S,A)}\)</span> <span class="math inline">\(SplitInfo(S,A)=-\sum_{i=1}^{c}\frac{|S_i|}{|S|}log_2\frac{|S_i|}{|S|}\)</span> 如果A能完全分割，那么splitinfo=0；如果对半分，那么=1，即splitinfo阻碍选择值均匀分布的属性 如果splitinfo=0，可以先计算每个属性的信息增益，选择增益&gt;平均值的属性再去应用增益比率，因为如果splitinfo=0，即A能完全分割，意味着信息增益=0，不可能&gt;平均值</p><p>实际中决策树的过拟合是比较严重的，C4.5克服了ID3用IG选择属性时倾向选择取值多的属性的不足。</p><p>马尔可夫随机过程： s1：名词 s2：动词 s3：形容词 转移矩阵A=0.3 0.5 0.2;0.5 0.3 0.2;0.4 0.2 0.4即A11表示s1后面跟着s1的概率</p><p>若某段话第一个词为名词s1，那么该句子是“名动形名”的概率是多少？ <span class="math inline">\(P(s1,s2,s3,s1|model)=P(s1)P(s2|s1)P(s3|s2)P(s1|s3)=1*A12*A23*A31=0.004\)</span>？？？ 马尔科夫链：转移弧上有概率的非确定有限状态自动机，圈代表状态，每个结点的出度加起来是1 隐马尔可夫模型HMM：状态转换是不可观察的</p><p>EM（expectation maximization） 假设数据点是围绕k个核心点的k个正态分布源产生，目标是根据已知点推断正态分布的核心及参数，这也是一个贝叶斯问题</p><p>矛盾之处在于：蛋与鸡的问题 只有已知哪些点属于同一个圈，才能预测参数 只有参数靠谱，才能知道哪些点属于哪个圈</p><p>解这种问题，一般要先随机给蛋或鸡，随便猜一个参数，计算每个点属于哪个圈，接着重新评估参数，直至最后参数基本不变，有点kmeans那味。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/06/07/#Week7%20Neural%20Networks%20Learning/"/>
      <url>/2019/06/07/#Week7%20Neural%20Networks%20Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="一cost-function-and-backpropagation">一、Cost Function and Backpropagation</h2><p>神经网络的损失函数： <span class="math display">\[J(\Theta) = - \frac{1}{m} \sum_{i=1}^m \sum_{k=1}^K \left[y^{(i)}_k \log ((h_\Theta (x^{(i)}))_k) + (1 - y^{(i)}_k)\log (1 - (h_\Theta(x^{(i)}))_k)\right] + \frac{\lambda}{2m}\sum_{l=1}^{L-1} \sum_{i=1}^{s_l} \sum_{j=1}^{s_{l+1}} ( \Theta_{j,i}^{(l)})^2\]</span> <img src="https://img-blog.csdnimg.cn/20190520213954195.png" alt="在这里插入图片描述" /> 这个cost function是在logistic regression基础上演变而来，只是神经网络有很多输出结点，而logistic regression只有一个输出结点，所以这个cost function只是把所有的K个输出结点的损失函数进行累加。</p><p>得到cost function后，为了寻找使得<span class="math inline">\(J(\theta)\)</span>最小的那组参数<span class="math inline">\(\theta\)</span>，我们需要知道<span class="math inline">\(J(\theta)\)</span>关于每个<span class="math inline">\(\theta\)</span>的偏导数，而后向传播算法可以帮助我们计算偏导数： <img src="https://img-blog.csdnimg.cn/20190520215248992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 对于每个训练样本，先利用forward propagation计算每一层的<span class="math inline">\(a\)</span>： <img src="https://img-blog.csdnimg.cn/20190520215514406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 接着利用样本真实标签<span class="math inline">\(y^{(t)}\)</span>计算最后一层的误差值；</p><p>之后从右向左计算每一层（输入层除外）的误差： <img src="https://img-blog.csdnimg.cn/20190520215848578.png" alt="在这里插入图片描述" /> 这样每个样本一次正向、一次反向来更新误差矩阵： <img src="https://img-blog.csdnimg.cn/20190520220141936.png" alt="在这里插入图片描述" /> 向量化表示： <img src="https://img-blog.csdnimg.cn/2019052022020666.png" alt="在这里插入图片描述" /> 最后，就可以得到偏导数： <img src="https://img-blog.csdnimg.cn/20190520220255255.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20190520220307411.png" alt="在这里插入图片描述" /> ## 二、Backpropagation in Pratice 为了使用<code>fminunc</code>等高级的优化方法来求得cost function的最小值，所以将<span class="math inline">\(\theta\)</span>这个矩阵展成向量传入<code>fminunc</code>，完成后可以通过<code>reshape</code>从向量中提取<span class="math inline">\(\theta^{(1)}、\theta^{(2)}\)</span>等： <img src="https://img-blog.csdnimg.cn/20190521193802355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><p>为了确保我们使用Backpropagation求得的偏导数的正确性，可以使用Gradient Checking（<strong>很慢</strong>）来检验： 根据偏导数定义： <span class="math display">\[\dfrac{\partial}{\partial\Theta_j}J(\Theta) \approx \dfrac{J(\Theta_1, \dots, \Theta_j + \epsilon, \dots, \Theta_n) - J(\Theta_1, \dots, \Theta_j - \epsilon, \dots, \Theta_n)}{2\epsilon}\]</span> <span class="math display">\[一般\epsilon=10^{-4}\]</span> 通过将这种方式计算的偏导数与之前Backpropagation求得的偏导数比较，即可得知Backpropagation的正确性。</p><p>之前在Linear Regression和Logistic Regression，我们可以用全0来初始化<span class="math inline">\(\theta\)</span>，但在神经网络中，这样做会有问题，所以采用<strong>随机初始化</strong>： <img src="https://img-blog.csdnimg.cn/20190521195045220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 最后，从整体捋一遍流程： 1、选择网络结构： <img src="https://img-blog.csdnimg.cn/20190521195351245.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 2、训练神经网络：</p><p>对每一个训练样本： <img src="https://img-blog.csdnimg.cn/20190521195432613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Multilayer Perceptron</title>
      <link href="/2019/06/06/Multilayer%20Perceptron/"/>
      <url>/2019/06/06/Multilayer%20Perceptron/</url>
      
        <content type="html"><![CDATA[<h2 id="non-linear-hypotheses">Non-linear Hypotheses</h2><p>线性回归和逻辑回归在特征很多时，计算量会很大。 一个简单的三层神经网络模型： <span class="math display">\[a_i^{(j)} = \text{&quot;activation&quot; of unit $i$ in layer $j$}\]</span><span class="math display">\[\Theta^{(j)} = \text{matrix of weights controlling function mapping from layer $j$ to layer $j+1$}\]</span> <img src="https://img-blog.csdnimg.cn/20190519144739691.png" alt="在这里插入图片描述" /> 其中：<span class="math display">\[a_1^{(2)} = g(\Theta_{10}^{(1)}x_0 + \Theta_{11}^{(1)}x_1 + \Theta_{12}^{(1)}x_2 + \Theta_{13}^{(1)}x_3)\]</span><span class="math display">\[a_2^{(2)} = g(\Theta_{20}^{(1)}x_0 + \Theta_{21}^{(1)}x_1 + \Theta_{22}^{(1)}x_2 + \Theta_{23}^{(1)}x_3)\]</span><span class="math display">\[a_3^{(2)} = g(\Theta_{30}^{(1)}x_0 + \Theta_{31}^{(1)}x_1 + \Theta_{32}^{(1)}x_2 + \Theta_{33}^{(1)}x_3)\]</span><span class="math display">\[h_\Theta(x) = a_1^{(3)} = g(\Theta_{10}^{(2)}a_0^{(2)} + \Theta_{11}^{(2)}a_1^{(2)} + \Theta_{12}^{(2)}a_2^{(2)} + \Theta_{13}^{(2)}a_3^{(2)})\]</span> ## vectorized implementation 将上面公式中函数<span class="math inline">\(g\)</span>中的东西用<span class="math inline">\(z\)</span>代替： <span class="math display">\[a_1^{(2)} = g(z_1^{(2)})\]</span><span class="math display">\[a_2^{(2)} = g(z_2^{(2)})\]</span><span class="math display">\[a_3^{(2)} = g(z_3^{(2)})\]</span> 令<span class="math inline">\(x=a^{(1)}\)</span>： <span class="math display">\[z^{(j)} = \Theta^{(j-1)}a^{(j-1)}\]</span> 得到： <span class="math display">\[\begin{aligned}z^{(j)} = \begin{bmatrix}z_1^{(j)} \\ z_2^{(j)} \\ \cdots \\z_n^{(j)}\end{bmatrix}\end{aligned}\]</span></p><p>这块的记号比较多，用例子梳理下： 实现一个逻辑与的神经网络： <img src="https://img-blog.csdnimg.cn/20190321105245428.png" alt="在这里插入图片描述" /> 那么： <img src="https://img-blog.csdnimg.cn/20190321105438230.png" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20190321105453184.png" alt="在这里插入图片描述" /> 所以有： <img src="https://img-blog.csdnimg.cn/20190321105628787.png" alt="在这里插入图片描述" /> 再来一个多层的，实现XNOR功能（两输入都为0或都为1，输出才为1）： <img src="https://img-blog.csdnimg.cn/20190321110644318.png" alt="在这里插入图片描述" /> 基本的神经元：</p><ul><li>逻辑与 <img src="https://img-blog.csdnimg.cn/2019032111133091.png" alt="在这里插入图片描述" /></li><li>逻辑或 <img src="https://img-blog.csdnimg.cn/20190321111355954.png" alt="在这里插入图片描述" /></li><li>逻辑非 <img src="https://img-blog.csdnimg.cn/20190321111411429.png" alt="在这里插入图片描述" /> 先构造一个表示后半部分的神经元：<img src="https://img-blog.csdnimg.cn/20190321111519333.png" alt="在这里插入图片描述" /> 这样的： <img src="https://img-blog.csdnimg.cn/20190321111806888.png" alt="在这里插入图片描述" /> 接着将前半部分组合起来： <img src="https://img-blog.csdnimg.cn/20190321112023420.png" alt="在这里插入图片描述" /> ## Multiclass Classification <img src="https://img-blog.csdnimg.cn/20190321165848893.png" alt="在这里插入图片描述" /> ## Motivation ## Implementation</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> FashionMNIST</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span>():</span></span><br><span class="line">    <span class="comment"># My data is in ../data/FashionMNIST/raw &amp; ../data/FashionMNIST/processed</span></span><br><span class="line">    train_data = FashionMNIST(root=<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line">    test_data = FashionMNIST(root=<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line">    train_iter = DataLoader(train_data, batch_size=<span class="number">256</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">    test_iter = DataLoader(test_data, batch_size=<span class="number">256</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> train_iter, test_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_inputs, num_outputs, num_hiddens = <span class="number">784</span>, <span class="number">10</span>, <span class="number">256</span></span><br><span class="line">W1 = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_inputs, num_hiddens)), dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">b1 = torch.zeros(num_hiddens, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">W2 = torch.tensor(np.random.normal(<span class="number">0</span>, <span class="number">0.01</span>, (num_hiddens, num_outputs)), dtype=torch.<span class="built_in">float</span>)</span><br><span class="line">b2 = torch.zeros(num_outputs, dtype=torch.<span class="built_in">float</span>)</span><br><span class="line"><span class="comment"># W1 = nn.Parameter(torch.randn(num_inputs, num_hiddens, requires_grad=True) * 0.01)</span></span><br><span class="line"><span class="comment"># b1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=True))</span></span><br><span class="line"><span class="comment"># W2 = nn.Parameter(torch.randn(num_hiddens, num_outputs, requires_grad=True) * 0.01)</span></span><br><span class="line"><span class="comment"># b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=True))</span></span><br><span class="line">params = [W1, b1, W2, b2]</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">    param.requires_grad_(requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span>(<span class="params">X</span>):</span></span><br><span class="line">    <span class="keyword">return</span> torch.<span class="built_in">max</span>(<span class="built_in">input</span>=X, other=torch.zeros(X.shape))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span>(<span class="params">X</span>):</span></span><br><span class="line">    X_exp = torch.exp(X)</span><br><span class="line">    partition = X_exp.<span class="built_in">sum</span>(<span class="number">1</span>, keepdim=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> X_exp / partition</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">net</span>(<span class="params">X</span>):</span></span><br><span class="line">    X = X.reshape((-<span class="number">1</span>, num_inputs))</span><br><span class="line">    H = relu(torch.matmul(X, W1) + b1)</span><br><span class="line">    output = torch.matmul(H, W2) + b2</span><br><span class="line">    <span class="keyword">return</span> softmax(output)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross_entropy</span>(<span class="params">y_predict, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> -torch.log(y_predict[<span class="built_in">range</span>(<span class="built_in">len</span>(y_predict)), y])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sgd</span>(<span class="params">params, lr, batch_size</span>):</span></span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param.data -= lr * param.grad / batch_size</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span>(<span class="params">net, data_iter</span>):</span></span><br><span class="line">    acc_sum, n = <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line">        acc_sum += (net(X).argmax(dim=<span class="number">1</span>) == y).<span class="built_in">float</span>().<span class="built_in">sum</span>().item()</span><br><span class="line">        n += y.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> acc_sum / n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">net, train_iter, test_iter, loss, num_epochs, batch_size=<span class="number">256</span>, lr=<span class="number">0.1</span>, params=<span class="literal">None</span>, optimizer=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        train_loss_sum, train_acc_sum, n = <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            y_predict = net(X)</span><br><span class="line">            l = cross_entropy(y_predict, y).<span class="built_in">sum</span>()</span><br><span class="line">            l.backward()</span><br><span class="line">            sgd(params, lr, batch_size)</span><br><span class="line"></span><br><span class="line">            W1.grad.data.zero_()</span><br><span class="line">            b1.grad.data.zero_()</span><br><span class="line">            W2.grad.data.zero_()</span><br><span class="line">            b2.grad.data.zero_()</span><br><span class="line"></span><br><span class="line">            train_loss_sum += l.item()</span><br><span class="line">            train_acc_sum += (y_predict.argmax(dim=<span class="number">1</span>) == y).<span class="built_in">sum</span>().item()</span><br><span class="line">            n += y.shape[<span class="number">0</span>]</span><br><span class="line">        test_acc = evaluate_accuracy(net, test_iter)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %.4f, train_acc %.4f, test_acc %.4f&#x27;</span></span><br><span class="line">              % (epoch + <span class="number">1</span>, train_loss_sum / n, train_acc_sum / n, test_acc))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># device = torch.device(&quot;cuda&quot; if torch.cuda.is_available() else &quot;cpu&quot;)</span></span><br><span class="line">    train_iter, test_iter = load_data()</span><br><span class="line">    train(net, train_iter, test_iter, cross_entropy, <span class="number">10</span>, lr=<span class="number">0.1</span>, params=params)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.init <span class="keyword">as</span> init</span><br><span class="line"><span class="keyword">from</span> torchvision.datasets <span class="keyword">import</span> FashionMNIST</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span>():</span></span><br><span class="line">    <span class="comment"># My data is in ../data/FashionMNIST/raw &amp; ../data/FashionMNIST/processed</span></span><br><span class="line">    train_data = FashionMNIST(root=<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line">    test_data = FashionMNIST(root=<span class="string">&#x27;../data&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">False</span>, transform=transforms.ToTensor())</span><br><span class="line">    train_iter = DataLoader(train_data, batch_size=<span class="number">256</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">    test_iter = DataLoader(test_data, batch_size=<span class="number">256</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> train_iter, test_iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span>(<span class="params">nn.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num_inputs, num_outputs, num_hiddens</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Net, self).__init__()</span><br><span class="line">        self.l1 = nn.Linear(num_inputs, num_hiddens)</span><br><span class="line">        self.relu1 = nn.ReLU()</span><br><span class="line">        self.l2 = nn.Linear(num_hiddens, num_outputs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X = X.view(X.shape[<span class="number">0</span>], -<span class="number">1</span>)</span><br><span class="line">        o1 = self.relu1(self.l1(X))</span><br><span class="line">        o2 = self.l2(o1)</span><br><span class="line">        <span class="keyword">return</span> o2</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_params</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> self.parameters():</span><br><span class="line">            init.normal_(param, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate_accuracy</span>(<span class="params">net, data_iter</span>):</span></span><br><span class="line">    acc_sum, n = <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter:</span><br><span class="line">        acc_sum += (net(X).argmax(dim=<span class="number">1</span>) == y).<span class="built_in">float</span>().<span class="built_in">sum</span>().item()</span><br><span class="line">        n += y.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> acc_sum / n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">net, train_iter, test_iter, loss, num_epochs, batch_size=<span class="number">256</span>, lr=<span class="number">0.1</span>, params=<span class="literal">None</span>, optimizer=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">        train_loss_sum, train_acc_sum, n = <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> train_iter:</span><br><span class="line">            y_predict = net(X)</span><br><span class="line">            l = loss(y_predict, y).<span class="built_in">sum</span>()</span><br><span class="line">            l.backward()</span><br><span class="line"></span><br><span class="line">            optimizer.step()</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line"></span><br><span class="line">            train_loss_sum += l.item()</span><br><span class="line">            train_acc_sum += (y_predict.argmax(dim=<span class="number">1</span>) == y).<span class="built_in">sum</span>().item()</span><br><span class="line">            n += y.shape[<span class="number">0</span>]</span><br><span class="line">        test_acc = evaluate_accuracy(net, test_iter)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;epoch %d, loss %.4f, train_acc %.4f, test_acc %.4f&#x27;</span></span><br><span class="line">              % (epoch + <span class="number">1</span>, train_loss_sum / n, train_acc_sum / n, test_acc))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_inputs, num_outputs, num_hiddens = <span class="number">784</span>, <span class="number">10</span>, <span class="number">256</span></span><br><span class="line">net = Net(num_inputs, num_outputs, num_hiddens)</span><br><span class="line">net.init_params()</span><br><span class="line"></span><br><span class="line">loss = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(net.parameters(), lr=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    train_iter, test_iter = load_data()</span><br><span class="line">    train(net, train_iter, test_iter, loss, <span class="number">10</span>, optimizer=optimizer)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Advice for applying ML &amp; ML System Design</title>
      <link href="/2019/06/05/Advice%20for%20applying%20ML%20&amp;%20ML%20System%20Design/"/>
      <url>/2019/06/05/Advice%20for%20applying%20ML%20&amp;%20ML%20System%20Design/</url>
      
        <content type="html"><![CDATA[<h2 id="一the-problem-of-overfitting">一、The Problem of Overfitting</h2><p><img src="https://img-blog.csdnimg.cn/20190320163616569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20190320164216967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 欠拟合（high bias）：模型不能很好地适应训练集； 过拟合（high variance）：模型过于强调拟合原始数据，测试时效果会比较差。 处理过拟合： 1、丢弃一些特征，包括人工丢弃和算法选择； 2、正则化：保留所有特征，但减小参数的值。 ## 二、Cost Function 过拟合一般是由高次项引起，那么我们可以通过增加某些项的cost，来降低它们的权重。 在梯度下降过程中，要使损失函数变小，那么<span class="math inline">\(\theta\)</span>就会变得很小，所以假设函数中的<span class="math inline">\(\theta\)</span>就会变小，该项的权重就会降低。</p><p>如果不知道要惩罚哪些特征，可以一起惩罚（除了<span class="math inline">\(\theta_0\)</span>）。 将代价函数改为： <img src="https://img-blog.csdnimg.cn/20190320165635129.png" alt="在这里插入图片描述" /> <span class="math inline">\(\lambda\)</span>是正则化参数。 如果<span class="math inline">\(\lambda\)</span>过大，那么所有的参数都会最小化，那么假设就会变为<span class="math inline">\(h_\theta(x)=\theta_0\)</span>，造成欠拟合。 ## 三、Regularized Linear Regression <span class="math inline">\(\theta_0\)</span>没有正则化处理，所以梯度下降要分情况： <img src="https://img-blog.csdnimg.cn/20190320170642494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 化简下： <img src="https://img-blog.csdnimg.cn/20190320170825316.png" alt="在这里插入图片描述" /> 可以看到： 正则化后的参数更新比原来多减小了一个值。</p><p>再看线性回归的另外一个工具：常规方程。 <img src="https://img-blog.csdnimg.cn/20190320171502423.png" alt="在这里插入图片描述" /> 推导过程省略...... ## 四、Regularized Logistic Regression 对于逻辑回归的代价函数，同样增加一个正则化表达式： <img src="https://img-blog.csdnimg.cn/2019032019010815.png" alt="在这里插入图片描述" /> 梯度下降算法与线性回归相同，不过<span class="math inline">\(h_\theta(x)\)</span>不同。 <img src="https://img-blog.csdnimg.cn/20190320190430424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /></p><h2 id="一evaluating-a-learning-algorithm">一、Evaluating a Learning Algorithm</h2><p>训练后测试时如果发现模型表现很差，可以有很多种方法去更改：</p><ol type="1"><li>用更多的训练样本；</li><li>减少/增加特征数目；</li><li>尝试多项式特征；</li><li>增大/减小正则化参数<span class="math inline">\(\lambda\)</span>。 那么该怎么去选择采用哪种方式呢？ 一般将70%的数据作为训练集，30%的数据作为测试集。 先用训练集最小化<span class="math inline">\(J_{train}(\Theta)\)</span>，得到一组参数值<span class="math inline">\(\Theta\)</span>； 然后计算测试集误差<span class="math inline">\(J_{test}(\Theta)\)</span>： 对于<strong>线性回归</strong>： <img src="https://img-blog.csdnimg.cn/20190603210422113.png" alt="在这里插入图片描述" /> 对于<strong>逻辑回归</strong>： <img src="https://img-blog.csdnimg.cn/20190603210631921.png" alt="在这里插入图片描述" /> 测试集的平均误差（分类错误的比率）： <img src="https://img-blog.csdnimg.cn/20190603210807680.png" alt="在这里插入图片描述" /> 假设要选择用几次多项式<span class="math inline">\(d\)</span>去作为假设函数，那么做法就是不断尝试<span class="math inline">\(d\)</span>，选择一个在测试集上损失最小的<span class="math inline">\(d\)</span>，以此作为模型泛化能力的衡量。但是这样是有问题的，因为<span class="math inline">\(d\)</span>相当于是被测试集训练的，再用测试集去测试，很不公平。所以一般将数据集分为3部分：60%训练集、20%交叉验证集、20%测试集： <img src="https://img-blog.csdnimg.cn/20190605102227988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 二、Bias vs. Variance 看图： <img src="https://img-blog.csdnimg.cn/20190719151251691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="图来自知乎" /> <img src="https://img-blog.csdnimg.cn/20190605102435642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 正则化和Bias/Variance的关系： <img src="https://img-blog.csdnimg.cn/20190605102608526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> 训练集大小与Bias/Variance的关系： <img src="https://img-blog.csdnimg.cn/20190605102730371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> <img src="https://img-blog.csdnimg.cn/20190605102745765.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 三、Error Analysis Andrew推荐的流程： <img src="https://img-blog.csdnimg.cn/20190605103603490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 四、Handling Skewed Data 如果数据集中正负类的数据规模差距过大，只用误差衡量模型是不可靠的，此时需要查准率和召回率两个指标。 <img src="https://img-blog.csdnimg.cn/20190605104947575.png" alt="在这里插入图片描述" /> 如何权衡这两个指标，一般使用<span class="math inline">\(F1\)</span>得分： <span class="math display">\[F_1=2\frac{PR}{P+R}\]</span></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Logistic Regression</title>
      <link href="/2019/06/04/Logistic%20Regression/"/>
      <url>/2019/06/04/Logistic%20Regression/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>If y only takes a finite set of discrete values such as {0,1}, then using Linear Regression to predict a <span class="math inline">\(\hat y&gt;1/\hat y&lt;0\)</span> does not make sense at all. But fortunately we can fix Linear Regression to produce a value between [0,1].</p><h2 id="details">Details</h2><p>We choose sigmoid/logistic function to map the value: <span class="math display">\[h_\theta(x)=g(\theta^Tx),g(z)=\frac{1}{1+e^{-z}}\]</span> <img src="https://img-blog.csdnimg.cn/20190516212200143.png" alt="在这里插入图片描述" /> We can assume that: <span class="math display">\[h_\theta(x)=P(y=1|x;\theta)\\1-h_\theta(x)=P(y=0|x;\theta)\]</span> Or more compactly: <span class="math display">\[p(y|x;\theta)=[h_\theta(x)]^y[1-h_\theta(x)]^{1-y}\]</span> Now we will use maximum likelihood to fit parameters <span class="math inline">\(\theta\)</span>, assume n training examples are independent, then the likelihood of the parameters is: <span class="math display">\[L(\theta)=p(\vec y|X;\theta)=\prod_{i=1}^{n}p(y^{(i)}|x^{(i)};\theta)=\prod_{i=1}^{n}[h(x^{(i)})]^{y^{(i)}}[1-h(x^{(i)})]^{1-y^{(i)}}\]</span> To make life easier, we use the log likelihood: <span class="math display">\[l(\theta)=log\ L(\theta)=\sum_{i=1}^{n}y^{(i)}log\ h(x^{(i)})+(1-y^{(i)})log\ (1-h(x^{(i)}))\]</span> Let's first take out one example <span class="math inline">\((x,y)\)</span> to derive the stochastic gradient ascent rule: <span class="math display">\[\frac{\partial}{\partial\theta_j}l(\theta)=[y\frac{1}{g(\theta^Tx)}-(1-y)\frac{1}{1-g(\theta^Tx)}]\frac{\partial}{\partial\theta_j}g(\theta^Tx) \\=[y\frac{1}{g(\theta^Tx)}-(1-y)\frac{1}{1-g(\theta^Tx)}]g(\theta^Tx)(1-g(\theta^Tx))\frac{\partial}{\partial\theta_j}\theta^Tx \\=[y(1-g(\theta^Tx))-(1-y)g(\theta^Tx)]x_j=(y-h_\theta(x))x_j\]</span> Then we can update the parameters: <span class="math display">\[\theta_j=\theta_j+\alpha(y^{(i)}-h_{\theta}(x^{(i)}))x_j^{(i)}\]</span></p><p>Here we use maximum likelihood to get the update rule. Generally we would like to minimize the object function. So we can add a negative sign to the maximum likelihood's formula, it is called <strong>logistic loss</strong>. Thus there exists another way to understand it.</p><p>The loss on a single sample can be formulated as follows: <span class="math display">\[cost(h_{\theta}(x),y)=\left\{\begin{aligned}-log(h_{\theta}(x))\ \ \ if\ y=1\\-log(1-h_{\theta}(x))\ \ \ if\ y=0\end{aligned}\right.\]</span> If y=1 and the prediction=1, then loss=0; else if y=1 and the prediction=0, then loss=<span class="math inline">\(+\infty\)</span> is a huge penalty for the totally wrong prediction. It is the same for y=0.</p><p>We can unify the two cases together and the loss for the whole training data is: <span class="math display">\[cost((h_{\theta}(x),y))=-ylog(h_{\theta}(x))-(1-y)log(1-h_{\theta}(x))\\=-\frac{1}{m}\sum_{i=1}^{m}[y^{(i)}log(h_{\theta}(x^{(i)}))+(1-y^{(i)})log(1-h_{\theta}(x^{(i)}))]\]</span> Here the reason why we don't use the MSE loss such as Linear Regression is that the <span class="math inline">\(J(\theta)\)</span> is non-convex and very hard to optimize for the global optimum.</p><p>To make life easier again, we can write the formula as the vectorized version: <span class="math display">\[h = g(X\theta),J(\theta) = \frac{1}{m} \cdot \left(-y^{T}\log(h)-(1-y)^{T}\log(1-h)\right)\]</span> Then our goal is to minimize <span class="math inline">\(J(\theta)\)</span> and get appropriate parameters <span class="math inline">\(\theta\)</span> and use <span class="math inline">\(h_\theta(x)=\frac{1}{1+e^{-\theta^Tx}}\)</span> to get our predictions.</p><p>Since it is a little complex to get answer analytically, so we still use Gradient Descent to minimize the loss numerically. The update rule is the same as the above one: <span class="math display">\[\theta_j=\theta_j+\alpha\frac{1}{m}\sum_{i=1}^{m}(y^{(i)}-h_{\theta}(x^{(i)}))x_j^{(i)}\]</span> Here you should notice that all <span class="math inline">\(\theta_j\)</span> should be updated simultaneously when you program. Again the vectorized version: <span class="math display">\[\theta=\theta-\frac{\alpha}{m}X^T[g(X\theta)-y]\]</span> It is the same formula as the Linear Regression except that <span class="math inline">\(h_\theta(x)\)</span> is different.</p><h2 id="牛顿法">牛顿法</h2><p>除了用梯度上升法去最大化<span class="math inline">\(l(\theta)\)</span>，牛顿迭代法也能干这件事。</p><p>普通同学都是在求方程的零点<span class="math inline">\(f(\theta)=0\)</span>时接触到牛顿法，其更新规则为： <span class="math display">\[\theta=\theta-\frac{f(\theta)}{f^{&#39;}(\theta)}\]</span> 这个规则可以理解为：我们一直在用一个线性函数去近似<span class="math inline">\(f\)</span>，因此希望下一次迭代的<span class="math inline">\(\theta\)</span>就是该线性函数的零点： <img src="https://img-blog.csdnimg.cn/20210616190823439.png" alt="在这里插入图片描述" /> 再结合一点高中数学，<span class="math inline">\(l(\theta)\)</span>极大值点处的一阶导数为0，因此只要令<span class="math inline">\(l^{&#39;}(\theta)=0\)</span>就能解出对应的<span class="math inline">\(\theta\)</span>： <span class="math display">\[\theta=\theta-\frac{l^{&#39;}(\theta)}{l^{&#39;&#39;}(\theta)}\]</span> 由于逻辑回归中<span class="math inline">\(\theta\)</span>是向量而非scalar，因此需要稍稍改变下更新规则： <span class="math display">\[\theta=\theta-H^{-1}\nabla_{\theta}l(\theta)\]</span> 其中，Hessian阵中的元素为<span class="math inline">\(H_{ij}=\frac{\partial^2l(\theta)}{\partial\theta_i\partial\theta_j}\)</span>。</p><p>牛顿法通常比梯度上升收敛快得多，因为利用了<span class="math inline">\(l(\theta)\)</span>的二阶信息，但是存储和求解<span class="math inline">\(H^{-1}\)</span>开销会比较大。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linear Regression</title>
      <link href="/2019/06/03/Linear%20Regression/"/>
      <url>/2019/06/03/Linear%20Regression/</url>
      
        <content type="html"><![CDATA[<h2 id="线性回归模型">线性回归模型</h2><p><span class="math display">\[h_{\theta}(x)=\sum_{i=0}^{d}\theta_ix_i=\theta^Tx=x^T\theta\]</span> 其中，<span class="math inline">\(x_0=1\)</span>，<span class="math inline">\(d\)</span>表示<span class="math inline">\(x\)</span>的特征数量。</p><p>在给定训练集下，需要用学习算法确定参数<span class="math inline">\(\theta\)</span>，使得模型的预测值<span class="math inline">\(h(x)\)</span>与真实值<span class="math inline">\(y\)</span>尽可能接近。为了精确地描述这种接近程度，定义损失函数： <span class="math display">\[J(\theta)=\frac{1}{2}\sum_{i=1}^{n}(h_{\theta}(x^{(i)})-y^{(i)})^2\]</span> 问题转化为选择一组<span class="math inline">\(\theta\)</span>使得<span class="math inline">\(J(\theta)\)</span>最小，这里有2种求解方法：</p><ol type="1"><li>梯度下降</li><li>Normal Equation</li></ol><h2 id="梯度下降">梯度下降</h2><p>梯度下降的motivation非常直观，首先随机选择一组参数<span class="math inline">\(\theta\)</span>，接着沿<span class="math inline">\(J(\theta)\)</span>下降最快的方向更新<span class="math inline">\(\theta\)</span>，经过若干次迭代就有望找到令<span class="math inline">\(J(\theta)\)</span>收敛的参数<span class="math inline">\(\theta\)</span>： <span class="math display">\[\theta_j=\theta_j-\alpha\frac{\partial}{\partial\theta_j}J(\theta)\]</span> 将<span class="math inline">\(J(\theta)\)</span>的偏导数代入即得到所谓的batch gradient descent更新规则： <span class="math display">\[\theta_j=\theta_j-\alpha\sum_{i=1}^{n}(h_\theta(x^{(i)})-y^{(i)})x_j^{(i)}\]</span> 其向量化表示为： <span class="math display">\[\theta=\theta-\alpha\sum_{i=1}^{n}(h_\theta(x^{(i)})-y^{(i)})x^{(i)}\]</span> 由于损失函数<span class="math inline">\(J(\theta)\)</span>是凸二次函数，因此总能收敛到唯一的全局最小值。</p><p>batch gradient descent一次更新需要计算所有训练样本，开销较大，因此有同学提出了stochastic gradient descent，每遇到一个训练样本就进行一次参数更新： <span class="math display">\[\theta=\theta-\alpha(h_\theta(x^{(i)})-y^{(i)})x^{(i)}\]</span> stochastic gradient descent一般比batch gradient descent收敛快，但是有可能在<span class="math inline">\(J(\theta)\)</span>的最优点附近振荡，永远无法收敛到精确最优。不过一般选择最优点附近的参数也可以接受，还可以通过递减学习率<span class="math inline">\(\alpha\)</span>确保其精确收敛。</p><p>值得一提的是：梯度下降算法存在“锯齿”效应，因此为了加速收敛，通常要进行归一化处理使得不同特征的尺度相近。</p><h2 id="normal-equation">Normal Equation</h2><p>除了用迭代的方式求解<span class="math inline">\(J(\theta)\)</span>的最小值，还可以用数学工具直接求得闭式解。</p><p>为了简洁地表示后续求导，使得人生不要太过凌乱，我们首先研究下<span class="math inline">\(J(\theta)\)</span>的向量表示：<br />假设训练集<span class="math inline">\(X\)</span>和对应的标签<span class="math inline">\(y\)</span>分别为： <span class="math display">\[X=\left[\begin{matrix} (x^{(1)})^T \\ (x^{(2)})^T \\ \vdots \\ (x^{(n)})^T \\\end{matrix}\right],y=\left[\begin{matrix} y^{(1)} \\ y^{(2)} \\ \vdots \\ y^{(n)} \\\end{matrix}\right]\]</span> 由于<span class="math inline">\(h_{\theta}(x^{(i)})=(x^{(i)})^T\theta\)</span>，所以有： <span class="math display">\[X\theta-y=\left[\begin{matrix} (x^{(1)})^T\theta \\ (x^{(2)})^T\theta \\ \vdots \\ (x^{(n)})^T\theta \\\end{matrix}\right]-\left[\begin{matrix} y^{(1)} \\ y^{(2)} \\ \vdots \\ y^{(n)} \\\end{matrix}\right]=\left[\begin{matrix} h_{\theta}(x^{(1)})-y^{(1)}  \\ h_{\theta}(x^{(2)})-y^{(2)} \\ \vdots \\ h_{\theta}(x^{(n)})-y^{(n)} \\\end{matrix}\right]\]</span> 根据向量运算法则<span class="math inline">\(x^Tx=\sum_ix_i^2\)</span>，终于得到了<span class="math inline">\(J(\theta)\)</span>的简单点的表示： <span class="math display">\[\frac{1}{2}(X\theta-y)^T(X\theta-y)=\frac{1}{2}\sum_{i=1}^{n}(h_{\theta}(x^{(i)})-y^{(i)})^2=J(\theta)\]</span> 利用高中数学导数的知识，只要求得<span class="math inline">\(J(\theta)\)</span>关于参数<span class="math inline">\(\theta\)</span>的导数并令其为0，就大功告成了： <span class="math display">\[\nabla_{\theta}J(\theta)=\frac{1}{2}(X\theta-y)^T(X\theta-y)\\=\frac{1}{2}\nabla_{\theta}[(X\theta)^TX\theta-(X\theta)^Ty-y^T(X\theta)+y^Ty]=\frac{1}{2}\nabla_{\theta}[\theta^T(X^TX)\theta-y^T(X\theta)-y^T(X\theta)]\\=\frac{1}{2}\nabla_{\theta}[\theta^T(X^TX)\theta-2(X^Ty)^T\theta]=\frac{1}{2}(2X^TX\theta-2X^Ty)=X^TX\theta-X^Ty\]</span> 哦，高中数学好像不太够，还要知道<span class="math inline">\(a^Tb=b^Ta,\nabla_{x}Ax=A^T,\nabla_{x}x^TAx=(A+A^T)x\)</span>。</p><p>结束了无聊的数学推导，所谓的Normal Equation就来了： <span class="math display">\[X^TX\theta=X^Ty\]</span> 我们暂时先不考虑<span class="math inline">\(X^TX\)</span>不可逆的情况，最终的解析解就是<span class="math inline">\(\theta=(X^TX)^{-1}X^Ty\)</span>。这种方法不需要做Feature Scaling，但是只能用于容易求解的模型。</p><h2 id="probabilistic-view">Probabilistic view</h2><p>当观测数据满足一些假设条件时，就可以自然而然地推导出均方误差形式的损失函数。</p><p>假设观测数据满足： <span class="math display">\[y^{(i)}=\theta^Tx^{(i)}+\epsilon^{(i)}\]</span> 其中，<span class="math inline">\(\epsilon^{(i)}\)</span>表示偏差项，并且<span class="math inline">\(\epsilon^{(i)}\)</span>服从IID的高斯分布，即<span class="math inline">\(\epsilon^{(i)}\sim \mathcal{N}(0, \sigma^2)\)</span>。</p><p>在满足上述假设的条件下，给定<span class="math inline">\(x^{(i)}\)</span>，观测到的<span class="math inline">\(y^{(i)}\)</span>满足概率分布<span class="math inline">\(y^{(i)}|x^{(i)};\theta\sim \mathcal{N}(\theta^Tx^{(i)}, \sigma^2)\)</span>，即： <span class="math display">\[p(y^{(i)}|x^{(i)};\theta)=\frac{1}{\sqrt{2\pi }\sigma}exp(-\frac{(y^{(i)}-\theta^Tx^{(i)})^2}{2 \sigma^2})\]</span> 我们希望选择合适的参数<span class="math inline">\(\theta\)</span>，使得在整个训练集上最大化观测数据出现的概率，也就是所谓的极大似然估计： <span class="math display">\[\prod_{i=1}^{n}p(y^{(i)}|x^{(i)};\theta)=\prod_{i=1}^{n}\frac{1}{\sqrt{2\pi }\sigma}exp(-\frac{(y^{(i)}-\theta^Tx^{(i)})^2}{2 \sigma^2})=L(\theta)\]</span> To make our life easier，采用对数似然函数的形式去求<span class="math inline">\(L(\theta)\)</span>的最大值： <span class="math display">\[l(\theta)=log\ L(\theta)=nlog\ \frac{1}{\sqrt{2\pi }\sigma}-\frac{1}{2\sigma^2}\sum_{i=1}^n(y^{(i)}-\theta^Tx^{(i)})^2\]</span> 因此，最大化<span class="math inline">\(L(\theta)\)</span>与最小化<span class="math inline">\(J(\theta)=\frac{1}{2}\sum_{i=1}^{n}(h_{\theta}(x^{(i)})-y^{(i)})^2\)</span>等价，也就证明了均方误差损失函数的合理性。</p><p>值得一提的是：上述假设并不唯一，存在其它合理的假设同样能够证明均方误差作为损失函数的合理性。</p><h2 id="局部加权线性回归">局部加权线性回归</h2><p>在朴素的线性回归中，训练模型得到的参数<span class="math inline">\(\theta\)</span>是固定的，对于每个要预测的点<span class="math inline">\(x\)</span>计算<span class="math inline">\(\theta^Tx\)</span>就完事了。这种参数化的学习算法在预测时不需要训练数据的支持，非常快捷。</p><p>局部加权线性回归的motivation在于：朴素线性模型强行拟合所有训练样本，因为模型简单往往欠拟合。对于任意一个样本<span class="math inline">\(x\)</span>，如果只根据其周围几个样本来建立局部的线性模型，且距离<span class="math inline">\(x\)</span>越近其在损失函数中的权值越大，就得到了所谓的Locally Weighted Linear Regression： <span class="math display">\[J(\theta)=\frac{1}{2}\sum_{i=1}^{n}w^{(i)}(h_{\theta}(x^{(i)})-y^{(i)})^2\]</span> 直观上看：如果一个点权值较大，其对损失函数的贡献就越大；如果权值较小，那么该点基本可以忽略不计。</p><p>权值一般会设计为指数函数： <span class="math display">\[w^{(i)}=exp(-\frac{(x^{(i)}-x)^T(x^{(i)}-x)}{2\tau^2})\]</span> 其中，<span class="math inline">\(x\)</span>表示待测试样本，<span class="math inline">\(\tau\)</span>负责控制随距离增加权值的衰减快慢。</p><p>另外，与kNN类似，LWR也是一种懒惰学习算法，即只有给出测试样例时才会训练并预测。因此，这种非参数算法在预测时需要存储训练集，并且参数数量会随训练集大小线性增长。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Introduction</title>
      <link href="/2019/06/02/Machine%20Learning%20Introduction/"/>
      <url>/2019/06/02/Machine%20Learning%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>对一个背后的pattern很复杂的问题，我们无法显式编程求解，就需要ML。如果能做到100%正确并且这个过程并不很复杂，就完全没有必要上ML。</p><p>ML我们并没有也不可能直接考虑所有可能出现的情况，然后用对应的方法解决。此时我们编写的程序其实是在操纵一个学习器，它可以根据模型参数的不同灵活应对输入的情况，并且每组参数都可以很好地处理输入的变化。</p><p>现实生活中有许多不同类型的问题，因此学习器也有很多不同的类型，不同类型的学习器针对不同的问题，当然也可以一对多或者多对一或者多对多。训练就是要根据数据获得一组表现良好的参数，下次给出相似类型的输入，我们的模型（参数固定的学习器）可以获得良好的预测表现。此外，还要有一个衡量当前这组参数表现好坏的措施，这就是objective function，训练时要用algorithm去有策略地调整参数，优化objective/loss function。</p><p>数据的难点在于：数量要够只是基本，数据应该合理反应所有可能的类别，对于特定任务的特征选择也应该慎重，比如简历筛选时如果把历史面试结果作为一个特征，那么就很可能在无意中引入historical injustices。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Topological Sort</title>
      <link href="/2019/06/01/Topological%20Sort/"/>
      <url>/2019/06/01/Topological%20Sort/</url>
      
        <content type="html"><![CDATA[<p>拓扑排序将有向无环图(DAG)的所有顶点排成一个线性序列，满足</p><ul><li>每个结点只出现一次</li><li>任意两个顶点若存在有向边<span class="math inline">\(u\rightarrow v\)</span>，那么在线性序列中<span class="math inline">\(u\)</span>必然在<span class="math inline">\(v\)</span>之前</li></ul><p>非DAG图是不存在拓扑序列的.</p><p>拓扑排序的实现有BFS和DFS的方式，BFS的思想是：</p><ol type="1"><li>将所有入度为0的顶点入队；</li><li>取队首结点输出，删除所有从该结点出发的边，并将这些边到达的顶点的入度减1，若某顶点入度减为0，将其入队；</li><li>重复2，直到队列为空。若进过队的结点数为<span class="math inline">\(n\)</span>，排序成功，否则<strong>图中有环</strong>。</li></ol><p>如果需要按字典序输出，就用优先队列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 复杂度O(V+E) */</span></span><br><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; g;  <span class="comment">// 邻接表</span></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; in;  <span class="comment">// 顶点入度，读入时记录</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> vertexNum = g.<span class="built_in">size</span>();</span><br><span class="line">    queue&lt;<span class="keyword">int</span>&gt; q;   <span class="comment">// 若有多个入度为0的顶点要选择编号最小的，可使用priority_queue</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将所有入度为0的顶点入队 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vertexNum; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == <span class="number">0</span>)</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.<span class="built_in">front</span>();</span><br><span class="line">        cout &lt;&lt; cur &lt;&lt; endl;  <span class="comment">// 输出拓扑序列</span></span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[cur].<span class="built_in">size</span>(); i++)  &#123;</span><br><span class="line">            <span class="keyword">int</span> adj = g[cur][i];  <span class="comment">// front的后继结点</span></span><br><span class="line">            in[adj]--;</span><br><span class="line">            <span class="keyword">if</span>(in[adj] == <span class="number">0</span>)</span><br><span class="line">                q.<span class="built_in">push</span>(adj); </span><br><span class="line">        &#125;</span><br><span class="line">        g[cur].<span class="built_in">clear</span>();   <span class="comment">// 删掉从该顶点出发的所有边</span></span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(cnt == vertexNum)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">// 拓扑排序成功</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 有环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dfs version, reverse ans is the topological sequence</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">states</span> &#123;</span>UNKNOWN, VISITING, VISITED&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasCycle</span><span class="params">(vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph, <span class="keyword">int</span> cur, vector&lt;<span class="keyword">int</span>&gt;&amp; state, vector&lt;<span class="keyword">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state[cur] == VISITING) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (state[cur] == VISITED) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    state[cur] = VISITING;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> neighbors : graph[cur]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">hasCycle</span>(graph, neighbors, state, ans))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    state[cur] = VISITED;</span><br><span class="line">    ans.<span class="built_in">push_back</span>(cur);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图论判环">图论判环</h2><p>对于无向图：并查集/BFS/改进DFS <a href="https://blog.csdn.net/myRealization/article/details/107812221">无向图环</a></p><p>如果DFS过程中存在back edge（指向已经访问过的顶点的边），必然有环。<br />对每个顶点DFS，会在该顶点的连通分量产生深度优先生成树，图中存在环当且仅当树上存在back edge，该back edge要么关联自己，要么关联树上的某个祖先结点。</p><p>对于有向图：拓扑排序有<a href="https://blog.nowcoder.net/n/b2383a6e87454e3da1e09fc635cd9750?from=nowcoder_improve">DFS和BFS两种版本</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematics for Machine Learning</title>
      <link href="/2019/05/24/Mathematics%20for%20Machine%20Learning/"/>
      <url>/2019/05/24/Mathematics%20for%20Machine%20Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p><span class="math inline">\(f(\mathbf{x}) = \boldsymbol{\beta}^\top\mathbf{x}\)</span> <span class="math display">\[\frac{df}{d\mathbf{x}} = \begin{bmatrix}\frac{df}{dx_1} \\\vdots \\\frac{df}{dx_n}\end{bmatrix} = \begin{bmatrix}\beta_1 \\\vdots \\\beta_n\end{bmatrix} = \boldsymbol{\beta}\]</span></p><p><span class="math inline">\(\frac{d}{d\mathbf{x}}(\mathbf{x}^\top A \mathbf{x}) = (\mathbf{A} + \mathbf{A}^\top)\mathbf{x}.\)</span></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2019/05/19/Linux/"/>
      <url>/2019/05/19/Linux/</url>
      
        <content type="html"><![CDATA[<h2 id="linux">Linux</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">pwd  # print working directoty</span><br><span class="line">cd /  # change directory 输入文件夹部分名按tab自动补全 如果文件夹名字含有空格，需要将文件名用&quot;&quot;括起来</span><br><span class="line">mkdir  # make directory</span><br><span class="line">rmdir  # remove directory</span><br><span class="line">rm a.txt  # remove file</span><br><span class="line">ls -l  # list files</span><br><span class="line">touch filename  # create an empty file</span><br><span class="line">cp lab1/original lab2/dup  # 将original复制为dup</span><br><span class="line">cat a.txt  # capture</span><br><span class="line">less a.txt  # q退出</span><br><span class="line">diff a.txt b.txt</span><br><span class="line">head a.txt -n 5  # 查看前5行</span><br><span class="line">tail a.txt -n 5  # 查看后5行</span><br><span class="line">wc -w a.txt  # 查看单词数目 -l行数 -c字符</span><br><span class="line">mv lab1/a.txt lab2/  # 移动</span><br><span class="line">mv lab1/a.txt lab1/newname.txt  # 重命名</span><br><span class="line">rm filename  # delete</span><br><span class="line">xterm  # open a new terminal window</span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line">chmod u-r a.txt  # 作者权限删掉r g-r o-r 小组和其他人删除可读权限</span><br><span class="line">chmod u+r a.txt</span><br><span class="line">chmod go-r a.txt</span><br><span class="line">chmod 444 a.txt  # 100 100 100对应u g o的r w x权限</span><br><span class="line"></span><br><span class="line">grep searchword a.txt  # 包含单词searchword的内容，也可正则</span><br><span class="line">grep ^Hello a.txt  # 以Hello开头的内容</span><br><span class="line">grep searchword a.txt | wc  # 命令组合</span><br><span class="line"></span><br><span class="line">ls &gt; a.txt  # 重定向</span><br></pre></td></tr></table></figure><p>脚本<code>test.sh</code>就是一坨命令，执行脚本就是按照顺序执行这些命令。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh test.sh  # 运行脚本</span><br></pre></td></tr></table></figure></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">a=10  # 赋值不能加空格</span><br><span class="line">echo $a  # 使用变量时加$ echo输出</span><br><span class="line">c=`expr $a + $b`  # 运算符两侧必须加空格</span><br><span class="line">c=`expr $a \* $b`  # \(\)</span><br><span class="line"></span><br><span class="line">if [ $a -gt $b ]  # 比较大小不能用 &gt; &lt; =</span><br><span class="line">then</span><br><span class="line">    echo $a</span><br><span class="line">else</span><br><span class="line">    echo $b</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">for x in 1 2 3  # for x in &#123;1 .. 3&#125;</span><br><span class="line">do</span><br><span class="line">    echo $x</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">x=1</span><br><span class="line">while [ $x -le 10]</span><br><span class="line">do</span><br><span class="line">    echo $x</span><br><span class="line">    x=`expr $x + 1`</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">a=&quot;hello&quot;</span><br><span class="line">b=&quot;world&quot;</span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line">c=`expr $a + $b`</span><br><span class="line">echo $a + $b = $c</span><br><span class="line"></span><br><span class="line">if [ $a = $b ]</span><br><span class="line">if [ $a != $b ]</span><br><span class="line">str3=&quot;$str1$str2&quot;  # 拼接</span><br><span class="line">if [ -z $str1 ]  # 是否为空 -n是否为不空</span><br><span class="line"></span><br><span class="line">arr=(1 2 3)  # 只能用bash test.sh</span><br><span class="line">echo $&#123;arr[1]&#125;</span><br><span class="line">for i in $&#123;arr[@]&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">echo $USER  # global variable 当前登录用户</span><br><span class="line">cd $HOME</span><br><span class="line">cd ~</span><br><span class="line">echo $PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原PATH拼接新路径 不要写成PATH=/home</span></span><br><span class="line">PATH=$PATH:/home/ubuntu/dir  # 可执行程序只能在当前目录下执行，如果要在其他目录执行需要配置环境变量，配置后该目录下的所有可执行程序都可以在任意地方执行</span><br><span class="line"></span><br><span class="line">zip hello.zip *  # 打包所有文件</span><br><span class="line">zip hello.zip -r hello/*  # 递归打包所有子文件夹</span><br><span class="line"></span><br><span class="line">unzip hello.zip</span><br><span class="line"></span><br><span class="line">tar -zcvf hello.tar.gz hello/  # -z使用gzip压缩</span><br><span class="line">tar -zxvf hello.tar.gz  # 解压</span><br><span class="line"></span><br><span class="line">wget url -O newname  # 下载</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random Forest</title>
      <link href="/2019/05/15/Random%20Forest/"/>
      <url>/2019/05/15/Random%20Forest/</url>
      
        <content type="html"><![CDATA[<h2 id="decision-tree">Decision Tree</h2><h2 id="details">Details</h2><p>决策树的发展经历了CART(Classification and Regression Tree), ID3, C4.5等多个阶段： CART是一种二叉树，分类树采用基尼系数，回归树采用平方误差。 ID3主要用于分类，是一种多叉树结构，采用信息增益。 C4.5主要用于分类，是一种多叉树结构，采用信息增益比。 最终的模型为： <span class="math display">\[f(x)=\sum_{i=1}^{m}C_iI(x\in R_i),I(x\in R_i)=\begin{cases}1, &amp; \text{x$\in$ $R_i$}  \\0, &amp; \text{else}\end{cases}\]</span> m表示数据集被划分的子集数目，<span class="math inline">\(C_i\)</span>表示第i个单元的输出值 ## Example ## Implementation ## Properties</p><h2 id="motivation">Motivation</h2><p>Random Forest is some kind of ensemble learning method, just as its name indicates. The base learner is decision tree and RF uses Bagging to integrate. The difference mainly lies in the word 'Random'. The original decision tree selects the best attribute while RF has two steps to select a split attribute for each base learner:</p><ul><li>Select k attributes from <span class="math inline">\(A\)</span> randomly;</li><li>Select the best attribute from the k attributes. If k=1 then it's total random selection; If k=<span class="math inline">\(|A|\)</span> then it's the same as decision tree. The recommended is <span class="math inline">\(k=log_2|A|\)</span>.</li></ul><p>The intuition behind this is to increase the diversity of the base learners. In original bagging method we just use the sample disturbance of the training data. But in RF we add the attribute disturbance thus making the learner generalize very well.</p><p>As you can imagine, RF's performance is worse than Bagging during the early time of the training process. Since we just use a subset of the attributes so the base learner performs not that well. But with the increase of the number of base learners, it will gradually use the whole information and then has a low generation error. By the way, RF is often faster than Bagging since we only use a subset to train the base learners.</p><h2 id="随机森林回归">随机森林回归</h2><p>决策树回归的叶子结点代表一小片区域，落入该区域的训练样例的均值被用来作为该区域的预测值： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211102104210878-1445042394.png" alt="image" /> 例如上图中右下角的叶子结点的值552.899就是落入该区域的5个样本的均值。 随机森林则是由若干棵决策树通过某些“随机”的方式构建而成，包括样本随机和属性随机，最终的预测结果由所有树的平均得到。 但是它不像线性回归那样在预测时可以外推，如果仔细观察最终参与决策的树的某一部分： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211102105550016-162430821.png" alt="image" /> 可以看到：在carat&lt;0.905和z&lt;3.915这个区域共有4个训练样本，因此测试集中任意一个落入此区域的样本都会被预测为4个样本的均值2775.75，自然也就不会超过这4个样本的取值极限。 如果要预测某个target value超出训练集极限的样例，其预测结果仍然是训练集中某些样本的均值。</p><p>缺失值处理：我在科研中见到的都是先用常数填充训练数据和测试数据，再去扔给模型训练和预测。 我使用sklearn中标准的RandomForestRegressor进行了尝试，如果训练数据包含缺失值，那么训练将会报错。 ## Example ## Implementation ## Properties ## Refs <a href="https://neptune.ai/blog/random-forest-regression-when-does-it-fail-and-why">Random Forest Regression: When Does It Fail and Why?</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linked List Cycle</title>
      <link href="/2019/05/11/Linked%20List%20Cycle/"/>
      <url>/2019/05/11/Linked%20List%20Cycle/</url>
      
        <content type="html"><![CDATA[<h2 id="一单链表是否有环">一、单链表是否有环</h2><p><a href="https://leetcode.com/problems/linked-list-cycle/">题目描述</a> 快慢指针：若链表有环，则两指针必在将来某一时刻相遇：</p><ul><li>直观来看：本质上就是物理上的相对运动。快指针每次2步，慢指针每次1步。 如果没有环，快指针先到达链尾，结束； 如果有环，相对速度为1，即相当于慢指针静止，快指针每次1步，则必然在一圈之内相遇。</li><li>那如果快指针每次3步，4步呢？由之前的相对运动，我们知道两个指针不一定相遇。那么什么情况下可以相遇呢？ <img src="https://img-blog.csdnimg.cn/20200309193026391.png" alt="在这里插入图片描述" /> 当S第一次到达环口，F可能已经在环里转了n圈。假设S的速度为<span class="math inline">\(v_s\)</span>，F的速度为<span class="math inline">\(v_f\)</span>，环长为<span class="math inline">\(L\)</span>，经过时间<span class="math inline">\(t\)</span>相遇： <span class="math display">\[disS=L_1, disF=L_1+L_2+nL\]</span> 即问题转化为是否存在正整数<span class="math inline">\(t\)</span>，使得S和F在环内走过的路程相等： <span class="math display">\[v_st\%L=(L_2+nL+v_ft)\%L\]</span> 根据模运算性质： <span class="math display">\[(L_2+nL+(v_f-v_s)t)\%L=0\]</span> 再化简： <span class="math display">\[(L_2+(v_f-v_s)t)\%L=0\]</span> 也就是当<span class="math inline">\(L_2+(v_f-v_s)t\)</span>是环长<span class="math inline">\(L\)</span>的整数倍，快慢指针可以相遇。 回头去看最简单的情形：<span class="math inline">\(v_f-v_s=1\)</span>，则<span class="math inline">\(t=mL-L_2\)</span>，取<span class="math inline">\(m=1,t=L-L_2\)</span>。所以经过<span class="math inline">\(t\)</span>步必然相遇。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 单链表定义</span><br><span class="line">struct ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(int x):val(x),next(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool hasCycle(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line">    if (head == NULL)</span><br><span class="line">   return false;</span><br><span class="line">  ListNode* fast = head;</span><br><span class="line">  ListNode* slow = head;</span><br><span class="line">  while (fast &amp;&amp; fast-&gt;next)</span><br><span class="line">  &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">    slow = slow-&gt;next;</span><br><span class="line">    if(fast == slow)</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure> ## 二、寻找环的入口 <a href="https://leetcode.com/problems/linked-list-cycle-ii/">题目描述</a> 设链头距离环的入口距离为<span class="math inline">\(L_1\)</span>，<strong>相遇点</strong>距离入口距离为<span class="math inline">\(L_3\)</span>，环的长度为<span class="math inline">\(L\)</span>： <img src="https://img-blog.csdnimg.cn/20200309203553400.png" alt="在这里插入图片描述" /> 证明的本质在于求出<span class="math inline">\(L_1\)</span>与<span class="math inline">\(L_3\)</span>的关系。 在（一）中我们已经证明了S从入口到相遇只走了<span class="math inline">\(L-L_2&lt;L\)</span>步，即小于1圈。 由于快指针走过的路程是慢指针的2倍： <span class="math display">\[L_1+L_2+nL+2(L-L_2)=2(L_1+L-L_2)\]</span> 即： <span class="math display">\[L_1=L_2+nL\]</span> 又<span class="math inline">\(L_3=L-(L-L_2)=L_2\)</span>，故有： <span class="math display">\[L_1=nL+L_3\]</span> n表示S第一次到达入口时，快指针已经绕了<span class="math inline">\(n\)</span>圈。 也就是说：设两个指针<span class="math inline">\(p_1, p_2\)</span>，<span class="math inline">\(p_1\)</span>指向链头，<span class="math inline">\(p_2\)</span>指向相遇点，每次都走一步，则两指针必在环的入口相遇。 通俗理解：<span class="math inline">\(p_1\)</span>指针先走<span class="math inline">\(L_3\)</span>步，此时<span class="math inline">\(p_1\)</span>距离环入口还有<span class="math inline">\(L_1-L_3=nL\)</span>步，同时<span class="math inline">\(p_2\)</span>也走了<span class="math inline">\(L_3\)</span>步，刚好到环入口。接着<span class="math inline">\(p_1\)</span>继续走<span class="math inline">\(nL\)</span>步，<span class="math inline">\(p_2\)</span>开始绕环<span class="math inline">\(n\)</span>圈，必相遇。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//单链表定义</span><br><span class="line">struct ListNode&#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    ListNode(int x):val(x),next(NULL) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Solution&#123;</span><br><span class="line">public:</span><br><span class="line">    ListNode* detectCycle(ListNode* head)</span><br><span class="line">    &#123;</span><br><span class="line">        auto fast = head;</span><br><span class="line">        auto slow = head;</span><br><span class="line">        while(fast &amp;&amp; fast-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">            if(fast == slow)</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!fast || !fast-&gt;next)   //无环,fast走到尽头</span><br><span class="line">            return nullptr;</span><br><span class="line"></span><br><span class="line">        slow = head;   //一个指向链头,另一个指向相遇点</span><br><span class="line">        while(slow != fast)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&gt;next;</span><br><span class="line">            slow = slow-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        return slow;    //找到入口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Maximum Subarray</title>
      <link href="/2019/05/05/Maximum%20Subarray/"/>
      <url>/2019/05/05/Maximum%20Subarray/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>给定一个序列<span class="math inline">\(A_0\)</span>、<span class="math inline">\(A_1\)</span>、<span class="math inline">\(A_2\)</span>、...、<span class="math inline">\(A_{n-1}\)</span>，求<span class="math inline">\(A_i+A_{i+1}+...+A_j\)</span>的最大值。 ## 解一 暴力枚举左端点<span class="math inline">\(i\)</span>和右端点<span class="math inline">\(j\)</span>，之后计算<span class="math inline">\(A_i\)</span>和<span class="math inline">\(A_j\)</span>之间的和，时间复杂度<span class="math inline">\(O(n^3)\)</span>，很容易TLE。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#define INF 0x7FFFFFFF</span><br><span class="line"></span><br><span class="line">int sub_sum(int a[],int n)</span><br><span class="line">&#123;</span><br><span class="line">    int MAX = -INF;</span><br><span class="line">    for(int i = 0;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = i; j &lt; n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">   int temp = 0;</span><br><span class="line">   for (int k = i; k &lt;= j; k++)</span><br><span class="line">  &#123;</span><br><span class="line">    temp += a[k];</span><br><span class="line">  &#125;</span><br><span class="line">   if (temp &gt; MAX)</span><br><span class="line">   &#123;</span><br><span class="line">   MAX = temp;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解二">解二</h2><p>输入数据时记录前缀和，预处理<span class="math inline">\(sum[i] = A[0] + ... + A[i]\)</span>，因此<span class="math inline">\(A_i+A_{i+1}+...+A_j=sum[j]-sum[i-1]\)</span>，复杂度优化为<span class="math inline">\(O(n^2)\)</span>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">int sub_sum(int a[],int n)</span><br><span class="line">&#123;</span><br><span class="line">    int MAX = -INF;</span><br><span class="line">    for(int i = 0;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j = i;j &lt; n;j++&#125;</span><br><span class="line">        &#123;</span><br><span class="line">            int temp = sum[j] - sum[i - 1];</span><br><span class="line">            if(temp &gt; MAX)</span><br><span class="line">                MAX = temp;</span><br><span class="line">            else</span><br><span class="line">                temp = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return MAX;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解三">解三</h2><p>动态规划，复杂度<span class="math inline">\(O(n)\)</span>。 定义状态数组<span class="math inline">\(dp[i]\)</span>，表示以<span class="math inline">\(A[i]\)</span>结尾的连续序列的最大和，这样就只有两种情况： 1，该连续序列只有<span class="math inline">\(A[i]\)</span>这一个元素； 2，该序列有多个元素，从之前的<span class="math inline">\(A[p]\)</span>开始，到<span class="math inline">\(A[i]\)</span>结束。 对于1，最大和就是<span class="math inline">\(A[i]\)</span>； 对于2，最大和是<span class="math inline">\(dp[i - 1]+A[i]\)</span>，因为<span class="math inline">\(dp[i]\)</span>要求以<span class="math inline">\(A[i]\)</span>结尾，所以即使<span class="math inline">\(A[i]\)</span>为负数，<span class="math inline">\(dp[i]\)</span>仍然等于<span class="math inline">\(dp[i - 1]+A[i]\)</span>。 所以<strong>状态转移方程</strong>就是： <span class="math display">\[dp[i]=max{\{A[i],dp[i-1]+A[i]\}}\]</span> 边界是<span class="math inline">\(dp[0]=A[0]\)</span>。 所以枚举<span class="math inline">\(i\)</span>，得到<span class="math inline">\(dp\)</span>数组，求出<span class="math inline">\(dp\)</span>数组最大值即可。</p><p>可以看到，每次计算<span class="math inline">\(dp[i]\)</span>只用到<span class="math inline">\(dp[i-1]\)</span>，不直接用到之前的信息，这就是状态的<strong>无后效性</strong>，只有这样，动态规划才可能得到正确结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int dp[5010];</span><br><span class="line">dp[0] = a[0];</span><br><span class="line"></span><br><span class="line">int sub_sum(int a[],int n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i = 1;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        //状态转移方程</span><br><span class="line">        dp[i] = max(a[i],dp[i - 1] + a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int k = 0;</span><br><span class="line">    for(int i = 1;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(dp[i] &gt; dp[k])</span><br><span class="line">            k = i;</span><br><span class="line">    &#125;</span><br><span class="line">    return dp[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了避免使用<span class="math inline">\(dp[]\)</span>数组，可以将空间复杂度优化为<span class="math inline">\(O(1)\)</span>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    int maxSubArray(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">        int allSum = INT_MIN, curSum = 0;</span><br><span class="line">        </span><br><span class="line">        int n = nums.size();</span><br><span class="line">        for(int i = 0;i &lt; n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            curSum = max(nums[i], curSum + nums[i]);</span><br><span class="line">            if(curSum &gt; allSum)</span><br><span class="line">            &#123;</span><br><span class="line">                allSum = curSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        return allSum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tree &amp; Graph Search</title>
      <link href="/2019/05/03/Tree%20&amp;%20Graph%20Search/"/>
      <url>/2019/05/03/Tree%20&amp;%20Graph%20Search/</url>
      
        <content type="html"><![CDATA[<h2 id="tree-search">Tree Search</h2><p>二叉树结点定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node *left;</span><br><span class="line">    Node *right;</span><br><span class="line">    <span class="built_in">Node</span>(): <span class="built_in">val</span>(<span class="number">0</span>), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> x): <span class="built_in">val</span>(x), <span class="built_in">left</span>(<span class="literal">nullptr</span>), <span class="built_in">right</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> x, Node *left, Node *right): <span class="built_in">val</span>(x), <span class="built_in">left</span>(left), <span class="built_in">right</span>(right) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>多叉树结点定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    vector&lt;Node*&gt; children;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Node</span>(<span class="keyword">int</span> _val, vector&lt;Node*&gt; _children) &#123;</span><br><span class="line">        val = _val;</span><br><span class="line">        children = _children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="bfs">BFS</h3><ol type="1"><li>二叉树的层序遍历</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">travel</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    queue&lt;Node *&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node *cur = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left) q.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right) q.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>多叉树的层序遍历</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">level_order</span>(Node* root) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; ans;</span><br><span class="line">    queue&lt;Node*&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(root);</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> size = q.<span class="built_in">size</span>();</span><br><span class="line">        ans.<span class="built_in">push_back</span>(&#123;&#125;);</span><br><span class="line">        <span class="keyword">while</span> (size--) &#123;</span><br><span class="line">            Node* cur = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            ans[depth].<span class="built_in">emplace_back</span>(cur-&gt;val);</span><br><span class="line">            <span class="keyword">for</span> (Node* child : cur-&gt;children) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dfs">DFS</h3><ol type="1"><li>二叉树 先序遍历：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(Node *root, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;left, vec);</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;right, vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代1</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorder</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node*&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node *cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">emplace_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;right) s.<span class="built_in">push</span>(cur-&gt;right);</span><br><span class="line">        <span class="keyword">if</span> (cur-&gt;left) s.<span class="built_in">push</span>(cur-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代2</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">travel</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node *&gt; s;</span><br><span class="line">    Node *cur = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line"></span><br><span class="line">            s.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        cur = cur-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中序遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(Node *root, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;left, vec);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;right, vec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">travel</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node *&gt; s;</span><br><span class="line">    Node *cur = root;</span><br><span class="line">    <span class="comment">// s.push(root)</span></span><br><span class="line">    <span class="comment">// while (!s.empty())</span></span><br><span class="line">    <span class="comment">// 这样也可，不过为了统一</span></span><br><span class="line">    <span class="keyword">while</span> (cur || !s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line"></span><br><span class="line">        cur = cur-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后序遍历：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(Node *root, vector&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;left, vec);</span><br><span class="line">    <span class="built_in">travel</span>(root-&gt;right, vec);</span><br><span class="line">    vec.<span class="built_in">push_back</span>(root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">travel</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node *&gt; s;</span><br><span class="line">    Node *cur = root;</span><br><span class="line">    Node *last_vis = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur &amp;&amp; last_vis != root) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur &amp;&amp; cur != last_vis) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!cur-&gt;right || cur-&gt;right == last_vis) &#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(cur-&gt;val);</span><br><span class="line">            last_vis = cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(cur);</span><br><span class="line">            cur = cur-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>多叉树 先根遍历</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(Node* root, vector&lt;<span class="keyword">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    ans.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">    <span class="keyword">for</span> (Node* child : root-&gt;children) &#123;</span><br><span class="line">        <span class="built_in">preorder</span>(child, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">preorder</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node*&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node* cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">emplace_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = cur-&gt;children.<span class="built_in">rbegin</span>(); it != cur-&gt;children.<span class="built_in">rend</span>(); ++it) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后根遍历</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(Node *root, vector&lt;<span class="keyword">int</span>&gt;&amp; ans)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node *child : root-&gt;children) &#123;</span><br><span class="line">        <span class="built_in">postorder</span>(child, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.<span class="built_in">emplace_back</span>(root-&gt;val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">postorder</span><span class="params">(Node *root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">    stack&lt;Node*&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        Node *cur = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        ans.<span class="built_in">emplace_back</span>(cur-&gt;val);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> it = cur-&gt;children.<span class="built_in">begin</span>(); it != cur-&gt;children.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(*it);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="graph-search">Graph Search</h2><h3 id="graph-representation">Graph Representation</h3><figure><img src="https://img-blog.csdnimg.cn/20200218153739820.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure><ul><li>邻接矩阵</li></ul><table><thead><tr class="header"><th>i/j</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr class="odd"><td>0</td><td><span class="math inline">\(\infty\)</span></td><td>-1</td><td>4</td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td></tr><tr class="even"><td>1</td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td>3</td><td>2</td><td>2</td></tr><tr class="odd"><td>2</td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td></tr><tr class="even"><td>3</td><td><span class="math inline">\(\infty\)</span></td><td>1</td><td>5</td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td></tr><tr class="odd"><td>4</td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td><span class="math inline">\(\infty\)</span></td><td>-3</td><td><span class="math inline">\(\infty\)</span></td></tr></tbody></table><p>用<code>vector&lt;vector&lt;int&gt;&gt; g(n, vector&lt;int&gt;(n, INF))</code>表示，<code>g[i][j]</code>表示从顶点<span class="math inline">\(i\)</span>到顶点<span class="math inline">\(j\)</span>的权重，空间复杂度<span class="math inline">\(O(|V|^2)\)</span>，适用于稠密图，用的不多； - 邻接表：链表比较少用，基本都用动态数组。</p><table><thead><tr class="header"><th>0</th><th>(1,-1)</th><th>(2,4)</th><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr class="odd"><td>1</td><td>(2,3)</td><td>(3,2)</td><td>(4,2)</td><td>-</td><td>-</td></tr><tr class="even"><td>2</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr class="odd"><td>3</td><td>(1,1)</td><td>(2,5)</td><td>-</td><td>-</td><td>-</td></tr><tr class="even"><td>4</td><td>(3,-3)</td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>用<code>vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; g</code>表示，<code>g[i][j].first</code>表示从顶点<span class="math inline">\(i\)</span>出发到达的顶点<span class="math inline">\(k\)</span>，<code>g[i][j].second</code>表示从顶点<span class="math inline">\(i\)</span>到顶点<span class="math inline">\(k\)</span>的权值，空间复杂度<span class="math inline">\(O(|V|+|E|)\)</span>。 - 边表<br />每个三元组表示一条边，上图的所有边表示为：<span class="math inline">\((0,1,-1),(0,2,4),(1,2,3),(1,3,2),(1,4,2),(3,1,1),(3,2,5),(4,3,-3)\)</span> 用<code>vector&lt;vector&lt;int&gt;&gt; e</code>表示，<code>e[i][0]</code>表示顶点<span class="math inline">\(u\)</span>，<code>e[i][1]</code>表示顶点<span class="math inline">\(v\)</span>，<code>e[i][2]</code>表示<span class="math inline">\(u\)</span>到<span class="math inline">\(v\)</span>的权值，空间复杂度<span class="math inline">\(O(|E|)\)</span>。 - 链式前向星<br />空间复杂度<span class="math inline">\(O(n)\)</span>，结合了邻接表和边表，包括边表数组<code>edge</code>和头结点数组<code>head</code>， <img src="https://img-blog.csdnimg.cn/20200725135220669.png" alt="img" /> 从结点2出发的边有4条，第一条边<code>head[2]=8</code>意味着该边存在<code>edge[8]</code>，下一条边存在<code>edge[6]</code>，<code>next==-1</code>表示结束。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to, next, w;  <span class="comment">// 边终点to 下一条边next 权值w</span></span><br><span class="line">&#125; edge[<span class="number">1000000</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[<span class="number">1000000</span>];  <span class="comment">// head[i]表示指向i的第一条边的存储位置</span></span><br><span class="line"><span class="keyword">int</span> cnt;  <span class="comment">// 记录edge的末尾位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; ++i) &#123;</span><br><span class="line">        edge[i].next = <span class="number">-1</span>;</span><br><span class="line">        head[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    edge[cnt].next = head[u];</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历结点i的所有邻接点</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != <span class="number">-1</span>; i = edge[i].next) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="bfs-1">BFS</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    queue = []</span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    parent = &#123;s : <span class="literal">None</span>&#125;  <span class="comment"># for shortest path</span></span><br><span class="line">    queue.append(s)</span><br><span class="line">    marked.add(s)</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(queue) &gt; <span class="number">0</span>):</span><br><span class="line">        cur = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> adj <span class="keyword">in</span> g[cur]:</span><br><span class="line">            <span class="keyword">if</span> adj <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                marked.add(adj)</span><br><span class="line">                queue.append(adj)</span><br><span class="line">                parent[adj] = cur</span><br><span class="line">        <span class="built_in">print</span>(cur)</span><br><span class="line">    <span class="keyword">return</span> parent</span><br></pre></td></tr></table></figure><h3 id="dfs-1">DFS</h3><p>从起点出发，标记走过的点，如果发现没有走过的点，随便选一个向前走，无路可走就回退。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    stack = []</span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    stack.append(s)</span><br><span class="line">    marked.add(s)</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(stack) &gt; <span class="number">0</span>):</span><br><span class="line">        cur = stack.pop()</span><br><span class="line">        <span class="keyword">for</span> adj <span class="keyword">in</span> g[cur]:</span><br><span class="line">            <span class="keyword">if</span> adj <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                marked.add(adj)</span><br><span class="line">                stack.append(adj)</span><br><span class="line">        <span class="built_in">print</span>(cur)</span><br></pre></td></tr></table></figure><p>很不幸的是：上面的代码是错的。举个例子：g有ABCDEF6个结点，边为AB AC BC BD CD CE DE DF，如果走ABDE的话，最终答案应该是ABDECF，但是上述代码的结果是ABDEFC，显然不是合法的DFS结果。</p><p>问题在于标记结点是否访问的时机不对，在D弹出后，直接把EF入栈并标记为已访问，下次到E时发现C已被标记，但此时C很明显并未访问。 不应在入栈时标记，而应该在弹出时标记。因为入栈时并没有真正地访问该节点，出栈时才真正访问。 可以参考<a href="https://github.com/joepachou/NoteBook/issues/116">CS61b</a> 正确的代码如下： <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    stack = []</span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    stack.append(s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(stack) &gt; <span class="number">0</span>):</span><br><span class="line">        cur = stack.pop()</span><br><span class="line">        <span class="keyword">if</span> cur <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">        marked.add(cur)</span><br><span class="line">        <span class="keyword">for</span> adj <span class="keyword">in</span> g[cur]:</span><br><span class="line">            <span class="keyword">if</span> adj <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">                stack.append(adj)</span><br><span class="line">        <span class="built_in">print</span>(cur)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">g, s</span>):</span></span><br><span class="line">    <span class="keyword">global</span> marked</span><br><span class="line">    marked = <span class="built_in">set</span>()</span><br><span class="line">    marked.add(s)</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">for</span> adj <span class="keyword">in</span> g[s]:</span><br><span class="line">        <span class="keyword">if</span> adj <span class="keyword">not</span> <span class="keyword">in</span> marked:</span><br><span class="line">            dfs(g, adj)</span><br></pre></td></tr></table></figure></p><ul><li><strong>判断从V出发能否走到终点</strong> <img src="https://img-blog.csdnimg.cn/20190409221625486.png" alt="在这里插入图片描述" /> <strong>- 判断从V出发能否走到终点，若能，记录路径</strong></li></ul><p>栈的作用就是在走投无路之时留给你的退路。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Node path[MAX_LEN];  <span class="comment">// MAX_LEN取节点总数即可</span></span><br><span class="line"><span class="keyword">int</span> depth;  <span class="comment">// 当前点的深度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(V)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (V为终点) &#123;</span><br><span class="line">        path[depth] = V;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (V为旧点) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    将V标记为旧点;</span><br><span class="line">    path[depth++] = V;</span><br><span class="line"></span><br><span class="line">    对和V相邻的每个节点U &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Dfs</span>(U))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    --depth;   <span class="comment">//从V走不到终点，把V排除出数组,回退到V的父节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    所有点标记为新点;</span><br><span class="line">    depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Dfs</span>(起点)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= depth; i++) &#123;</span><br><span class="line">            cout &lt;&lt; path[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>- 遍历图上所有节点</strong> <img src="https://img-blog.csdnimg.cn/20190409225110387.png" alt="在这里插入图片描述" /></p><p>邻接矩阵存储遍历复杂度<span class="math inline">\(O(n^2)\)</span>，因为对每个节点，都要判断其它所有节点是否相邻。 邻接表遍历复杂度<span class="math inline">\(O(n+e)\)</span>。</p><p>1、<a href="http://poj.org/problem?id=1164">城堡问题</a> 给一个地图以及每个格子周围的墙所代表数字之和，求该地图有多少房间，最大房间的面积。</p><p>分析： 要先判断每个格子周围有什么墙，注意到1，2，4，8的二进制形式<code>0001</code>、<code>0010</code>、<code>0100</code>、<code>1000</code>，所以只要将输入数字与1，2，4，8相与，就能知道该方块周围有什么墙。 把方块看作节点，相邻两个方块如果没有墙，就在这两节点之间连一条边，转换为图。 房间个数：图中的极大连通子图个数 <strong>极大连通子图：一个连通子图，加任意一个图中的其他点就不连通，这个子图就是极大连通子图。</strong></p><p>具体： 对每个房间进行DFS，得到该房间所在的极大连通子图，染色所有能够到达的房间，最后统计共用了几种颜色以及每种颜色的数量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> room[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> color[<span class="number">50</span>][<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;;   <span class="comment">//标记方块是否染色,初始都未被访问</span></span><br><span class="line"><span class="keyword">int</span> maxRoomArea = <span class="number">0</span>, roomNum = <span class="number">0</span>, curRoomArea = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span>   <span class="comment">//从i,j出发遍历极大连通子图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (color[i][j])</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    color[i][j] = roomNum;   <span class="comment">//该方块染色</span></span><br><span class="line">    curRoomArea++;</span><br><span class="line">    <span class="keyword">if</span> ((room[i][j] &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="built_in">Dfs</span>(i, j - <span class="number">1</span>);  <span class="comment">//没有西墙，向西走</span></span><br><span class="line">    <span class="keyword">if</span> ((room[i][j] &amp; <span class="number">2</span>) == <span class="number">0</span>) <span class="built_in">Dfs</span>(i - <span class="number">1</span>, j);</span><br><span class="line">    <span class="keyword">if</span> ((room[i][j] &amp; <span class="number">4</span>) == <span class="number">0</span>) <span class="built_in">Dfs</span>(i, j + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ((room[i][j] &amp; <span class="number">8</span>) == <span class="number">0</span>) <span class="built_in">Dfs</span>(i + <span class="number">1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> row, column;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;row, &amp;column);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;room[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!color[i][j])   <span class="comment">//找到一个新的房间</span></span><br><span class="line">            &#123;</span><br><span class="line">                roomNum++;</span><br><span class="line">                curRoomArea = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">Dfs</span>(i, j);          <span class="comment">//探索该房间（极大连通子图）</span></span><br><span class="line">            &#125;</span><br><span class="line">            maxRoomArea = <span class="built_in">max</span>(curRoomArea, maxRoomArea);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>, roomNum, maxRoomArea);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、<a href="http://bailian.openjudge.cn/practice/4103">踩方格</a> 递归，从<span class="math inline">\((i,j)\)</span>出发走n步的方案数就等于先走一步，从其它三个格子走n-1步的方案数之和。 前提就是该方块没走过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isVisited[<span class="number">20</span>][<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//访问过直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (isVisited[i][j])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//递归边界</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    isVisited[i][j] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以走三个方向</span></span><br><span class="line">    ans += <span class="built_in">Dfs</span>(i - <span class="number">1</span>, j, n - <span class="number">1</span>);</span><br><span class="line">    ans += <span class="built_in">Dfs</span>(i, j - <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line">    ans += <span class="built_in">Dfs</span>(i, j + <span class="number">1</span>, n - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回前表示当前格子可以重新被访问，以后的走法可能会访问到</span></span><br><span class="line">    isVisited[i][j] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">Dfs</span>(<span class="number">20</span>, <span class="number">20</span>, n));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、<a href="http://poj.org/problem?id=1724">ROADS</a> 很多时候，并不需要一条路走到黑，这就是深搜中的<strong>剪枝</strong>。 <img src="https://img-blog.csdnimg.cn/20190414173437346.png" alt="在这里插入图片描述" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*存储边,不需要起点,G(i)表示从i出发*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Road</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> destination, len, toll;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*邻接表存储图*/</span></span><br><span class="line">vector&lt;vector&lt;Road&gt;&gt; <span class="built_in">G</span>(<span class="number">110</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k, n, r;</span><br><span class="line"><span class="keyword">int</span> minLen;   <span class="comment">//探索过的最短的路径</span></span><br><span class="line"><span class="keyword">int</span> totalLen;   <span class="comment">//正在探索的最短路径</span></span><br><span class="line"><span class="keyword">int</span> totalCost;   <span class="comment">//正在探索的花费</span></span><br><span class="line"><span class="keyword">int</span> visited[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> minL[<span class="number">110</span>][<span class="number">10010</span>]; <span class="comment">//minL[i][j]:从1走到城市i，且花了j块钱的最优路径长度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s == n)   <span class="comment">//找到了路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        minLen = <span class="built_in">min</span>(minLen, totalLen);</span><br><span class="line">        <span class="keyword">return</span>;   <span class="comment">//强制结束函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = G[s].<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Road r = G[s][i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*判断有没有足够的钱走到r.destination*/</span></span><br><span class="line">        <span class="keyword">if</span> (totalCost + r.toll &gt; k) <span class="comment">//钱不够，试下一条边</span></span><br><span class="line">            <span class="keyword">continue</span>;     <span class="comment">//可行性剪枝</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!visited[r.destination])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*最优性剪枝*/</span></span><br><span class="line">            <span class="comment">//当前走过的路长度已经大于之前的minLen，就没必要走下去</span></span><br><span class="line">            <span class="keyword">if</span> (totalLen + r.len &gt;= minLen)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//走到r.d时花费同样的钱走过的路长度大于之前相同花费的路长度</span></span><br><span class="line">            <span class="keyword">if</span> (totalLen + r.len &gt;= minL[r.destination][totalCost + r.toll])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            minL[r.destination][totalCost + r.toll] = totalLen + r.len;</span><br><span class="line"></span><br><span class="line">            totalLen += r.len;</span><br><span class="line">            totalCost += r.toll;</span><br><span class="line">            visited[r.destination] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(r.destination);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*不走r.destination*/</span></span><br><span class="line">            visited[r.destination] = <span class="number">0</span>; <span class="comment">//换下条边之前将访问标志清0</span></span><br><span class="line">            totalLen -= r.len;</span><br><span class="line">            totalCost -= r.toll;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从城市1开始深搜整个图，找到所有能到达n的，选最优的*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;n, &amp;r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> source;</span><br><span class="line">        Road r;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;source, &amp;r.destination, &amp;r.len, &amp;r.toll);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source != r.destination)</span><br><span class="line">        &#123;</span><br><span class="line">            G[source].<span class="built_in">push_back</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(visited));</span><br><span class="line">    totalLen = <span class="number">0</span>, totalLen = <span class="number">0</span>;</span><br><span class="line">    minLen = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;   <span class="comment">//置为无穷大</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">110</span>; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10010</span>; j++)</span><br><span class="line">            minL[i][j] = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    visited[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);  <span class="comment">//走完了所有路</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minLen &lt; (<span class="number">1</span> &lt;&lt; <span class="number">30</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, minLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、<a href="http://poj.org/problem?id=1190">生日蛋糕</a> <img src="https://img-blog.csdnimg.cn/20190414175732766.png" alt="在这里插入图片描述" /><img src="https://img-blog.csdnimg.cn/20190414182524737.png" alt="在这里插入图片描述" /> <a href="http://bailian.openjudge.cn/practice/2816/">练习1</a><br /><a href="http://bailian.openjudge.cn/practice/2488/">练习2</a><br /><a href="http://bailian.openjudge.cn/practice/1321/">练习3</a></p><h2 id="refs">Refs</h2><p><a href="https://www.icourse163.org/learn/PKU-1001894005?tid=1205957211#/learn/content?type=detail&amp;id=1210422520">郭炜老师MOOC</a><br /><a href="http://faculty.cs.niu.edu/~mcmahon/CS241/Notes/Data_Structures/binary_tree_traversals.html">Binary Tree Traversals</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Character Array and Character Pointer</title>
      <link href="/2019/04/29/Character%20Array%20and%20Character%20Pointer/"/>
      <url>/2019/04/29/Character%20Array%20and%20Character%20Pointer/</url>
      
        <content type="html"><![CDATA[<p>最近复习数据结构实验时，碰到这么一行代码，看的有点不爽。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef char** HuffmanCode;</span><br></pre></td></tr></table></figure><p>借此梳理下数组和指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int* p; //指针变量p中存的地址代表的内存单元中的数据是整型</span><br></pre></td></tr></table></figure><p>在32位平台下，由于p存的是地址，故p的值是32位。 不论p指向什么类型的数据，指针变量p本身都是整型。</p><p>c中没有<code>string</code>类型，所以一般用字符数组表示字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char str[15] = &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure><p>c规定数组名表示数组在内存中的首地址，就是<code>str = &amp;str[0]</code>，我们一般输出字符串时<code>printf(&quot;%s&quot;,str);</code>，首地址就可以输出整个字符串。</p><p>在c中可以这么干：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char *s;</span><br><span class="line">s = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure><p>一个字符串赋值给一个指针变量？？</p><p>事实上，c的编译器会给字符串常量分配内存，假设<code>&quot;Hello&quot;</code>的地址是<code>0x0000000000404000 0x0000000000404001 0x0000000000404002 0x0000000000404003 0x0000000000404004 0x0000000000404005</code>，（我是64位环境） 其实是<code>s = &quot;Hello&quot; = 0x0000000000404000</code>，c编译器把这个串看作首地址。</p><p>做个测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%s\n&quot;,s);</span><br><span class="line">printf(&quot;%s\n&quot;,0x0000000000404000);</span><br><span class="line">这两行的效果是一样的。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char str[10];</span><br><span class="line">char* s;</span><br></pre></td></tr></table></figure><p><code>str</code>表示首地址，<code>s</code>也保存首地址，所以可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = str;</span><br><span class="line">但是不可以 str = s;</span><br></pre></td></tr></table></figure><p>因为数组名是一个常量，不能被赋值。 事实上，<code>char str[10]</code>编译器会分配10个内存单元，而<code>char* s</code>只是定义了一个指针变量，32位环境下只分配4个字节，用来保存字符串首地址。</p><p>不信测试下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sizeof(str) = 10;</span><br><span class="line">sizeof(s) = 4;   //分配四个字节来保存地址</span><br></pre></td></tr></table></figure><p>所以数组名和指针变量本质上是不同的。</p><p>接下来我们看看<code>char**与char* a[]</code>： 对于<code>char* a[]</code>，a实质上还是一个数组，这个数组保存的元素是<code>char*</code>类型的，<code>char*</code>也就是存着地址的变量。</p><p>所以可以这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char* a[] = &#123;&quot;me&quot;,&quot;you&quot;,&quot;him&quot;&#125;;</span><br></pre></td></tr></table></figure><p>这时在32位环境下<code>sizeof(a) = 12</code>，因为a中的3个元素都是<code>char*</code>指针，而指针变量占4个字节。 可以打印出来看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;%p %p %p\n&quot;,a[0],a[1],a[2]);</span><br><span class="line">printf(&quot;%p %p %p\n&quot;,&amp;a[0],&amp;a[1],&amp;a[2]);</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2019021915473671.png" alt="在这里插入图片描述" /> 数组中3个元素保存了3个地址，也就是3个字符串的首地址。</p><p>对于<code>char** s</code>： 二级指针变量s保存一级指针<code>char*</code>的地址，我们可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = a;</span><br></pre></td></tr></table></figure><p>数组名<code>a=&amp;a[0]=62FE30</code>，而这个地址中（即a[0]）保存的是<code>404000</code>这个地址，也就是字符串<code>&quot;me&quot;</code>的首地址，即：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*s = 404000 = &quot;me&quot;;</span><br></pre></td></tr></table></figure><p>易错点1： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char** s = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure> 这是错的，因为s是<code>char**</code> ，而&quot;Hello&quot;是<code>char*</code>。 虽然都是地址，但是&quot;Hello&quot;表示的地址中内容是H，char型； s存的地址中的内容（<code>*s</code>）是<code>char*</code>型，指针类型。</p><p>易错点2： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char** s;</span><br><span class="line">*s = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure> 这样编译不会错，但是运行时<code>printf(&quot;%s&quot;,*s);</code>就会崩溃。</p><p>假设<code>s=0x1000</code>，在<code>0x1000</code>内存单元中存的是&quot;Hello&quot;的地址<code>0x2000</code>，即<code>*s = 0x2000</code>，这样执行时先找到<code>0x1000</code>，然后是<code>0x2000</code>，没有问题。</p><p>但<code>char** s;</code>，s存的是一个随机的地址，也就是野指针，<code>*s</code>就可能会崩溃。</p><p>所以要先分配一个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char** s;</span><br><span class="line">s = (char**) malloc(sizeof(char**));</span><br><span class="line">*s = &quot;Hello&quot;;</span><br></pre></td></tr></table></figure><p>这样s就有了可用的地址。</p><p>参考： https://blog.csdn.net/liusicheng2008_liu/article/details/80412586</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm Exercises</title>
      <link href="/2019/04/24/Algorithm%20Exercises/"/>
      <url>/2019/04/24/Algorithm%20Exercises/</url>
      
        <content type="html"><![CDATA[<p>汇总一些常见的算法题目，<a href="https://github.com/EIMadrigal/AlgorithmAnswer">参考代码</a> 注：部分题目没有合适的oj地址</p><h2 id="枚举">枚举</h2><p><a href="http://poj.org/problem?id=1543">Perfect Cubes</a> <a href="http://poj.org/problem?id=1006">Biorhythms</a> <a href="http://poj.org/problem?id=1013">Counterfeit Dollar</a> <a href="http://poj.org/problem?id=1222">EXTENDED LIGHTS OUT</a> <a href="http://cxsjsxmooc.openjudge.cn/2019t2springsum2/001/">特殊密码锁</a> <a href="http://cxsjsxmooc.openjudge.cn/2019t2springsum2/002/">拨钟问题</a></p><h2 id="递归">递归</h2><p><a href="http://bailian.openjudge.cn/practice/2730/">nn的阶乘</a> <a href="http://bailian.openjudge.cn/practice/4147/">汉诺塔问题</a> <a href="http://bailian.openjudge.cn/practice/2698/">N皇后问题</a> <a href="http://bailian.openjudge.cn/practice/2694/">逆波兰表达式</a> <a href="http://bailian.openjudge.cn/practice/4132/">四则运算表达式求值</a> <a href="http://bailian.openjudge.cn/practice/4017/">爬楼梯</a> <a href="http://bailian.openjudge.cn/practice/1664/">放苹果</a> <a href="http://bailian.openjudge.cn/practice/2787/">算24</a> <a href="http://bailian.openjudge.cn/practice/2748/">全排列</a></p><h2 id="二分">二分</h2><p><a href="http://bailian.openjudge.cn/practice/4142/">二分法求方程的根</a> <a href="http://bailian.openjudge.cn/practice/4143/">和为给定数</a> <a href="http://poj.org/problem?id=2456">Aggressive Cows</a></p><h2 id="分治">分治</h2><p><a href="http://noi.openjudge.cn/ch0204/7617/">输出前k大的数</a> <a href="http://noi.openjudge.cn/ch0204/7622/">排列的逆序数</a></p><h2 id="动态规划">动态规划</h2><p><a href="http://poj.org/problem?id=1163">The Triangle</a> <a href="http://bailian.openjudge.cn/practice/2757">最长上升子序列</a> <a href="http://poj.org/problem?id=1458">最长公共子序列</a> <a href="http://bailian.openjudge.cn/practice/4152/">最佳加法表达式</a> <a href="http://poj.org/problem?id=1661">Help Jimmy</a> <a href="http://bailian.openjudge.cn/practice/2755/">神奇的口袋</a> <a href="http://poj.org/problem?id=1088">滑雪</a> <a href="http://poj.org/problem?id=3624">0-1背包问题</a> <a href="http://noi.openjudge.cn/ch0405/6047/">分蛋糕</a></p><h2 id="深搜">深搜</h2><p><a href="http://poj.org/problem?id=1164">The Castle</a> <a href="http://bailian.openjudge.cn/practice/4103/">踩方格</a> <a href="http://poj.org/problem?id=1724">ROADS</a> <a href="http://poj.org/problem?id=1190">生日蛋糕</a></p><h2 id="广搜">广搜</h2><p><a href="http://poj.org/problem?id=3278">Catch That Cow</a> <a href="http://bailian.openjudge.cn/practice/4127/">迷宫问题</a> <a href="http://bailian.openjudge.cn/practice/4115/">鸣人和佐助</a> <a href="http://poj.org/problem?id=1077">Eight</a></p><h2 id="贪心">贪心</h2><p><a href="http://bailian.openjudge.cn/practice/4110">Santa Clau's Gifts</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 4</title>
      <link href="/2019/04/15/INTERVIEW%204/"/>
      <url>/2019/04/15/INTERVIEW%204/</url>
      
        <content type="html"><![CDATA[<p>120min, 5题。本菜鸡怒跪。</p><ol type="1"><li>变身程序员 <img src="https://img2018.cnblogs.com/blog/1260581/201904/1260581-20190415113449318-2123072016.png" alt="img" /></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(读取时可以按行读取，直到读到空行为止，再对读取过的所有行做转换处理)</span><br><span class="line">输出描述：</span><br><span class="line">如果能将所有的产品经理变成程序员，输出最小的分钟数；</span><br><span class="line">如果不能将所有的产品经理变成程序员，输出-1。</span><br><span class="line">示例1：</span><br><span class="line">输入：</span><br><span class="line">0 2</span><br><span class="line">1 0</span><br><span class="line">输出：</span><br><span class="line">-1</span><br><span class="line">示例2：</span><br><span class="line">输入：</span><br><span class="line">1 2 1</span><br><span class="line">1 1 0</span><br><span class="line">0 1 1</span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">示例3：</span><br><span class="line">输入：1 2</span><br><span class="line">2 1</span><br><span class="line">1 2</span><br><span class="line">0 1</span><br><span class="line">0 1</span><br><span class="line">1 1</span><br><span class="line">输出：</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>此题与<a href="https://leetcode.com/problems/rotting-oranges/">rotting-oranges</a>类似。 基本思想就是将所有的程序员入队，BFS所有的产品经理，最后检查是否还有产品经理存在。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">int</span> time;</span><br><span class="line">    <span class="built_in">node</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">node</span>(<span class="keyword">int</span> xx, <span class="keyword">int</span> yy, <span class="keyword">int</span> t) :<span class="built_in">x</span>(xx), <span class="built_in">y</span>(yy), <span class="built_in">time</span>(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">queue&lt;node&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> grid[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> row = <span class="number">0</span>, col = <span class="number">0</span>;</span><br><span class="line">    string str;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*按行读取输入*/</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">getline</span>(cin, str))</span><br><span class="line">    &#123;</span><br><span class="line">        col = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] != <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                grid[row][col++] = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        row++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; row;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将所有程序员入队</span></span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(i, j, <span class="number">0</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    node s;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        s = q.<span class="built_in">front</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*四个方向遍历*/</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> newx = s.x + dir[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> newy = s.y + dir[i][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//没有越界并且找到一枚产品经理</span></span><br><span class="line">            <span class="keyword">if</span> (newx &gt;= <span class="number">0</span> &amp;&amp; newx &lt; row &amp;&amp; newy &gt;= <span class="number">0</span> &amp;&amp; newy &lt; col &amp;&amp; grid[newx][newy] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                grid[newx][newy] = <span class="number">2</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">node</span>(newx, newy, s.time + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s.time);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2" type="1"><li>特征提取 <img src="https://img2018.cnblogs.com/blog/1260581/201904/1260581-20190415113606327-1298909116.png" alt="img" /></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入：</span><br><span class="line">1</span><br><span class="line">8</span><br><span class="line">2 1 1 2 2</span><br><span class="line">2 1 1 1 4 2 1 1 2 2</span><br><span class="line">2 2 2 1 4</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1</span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">说明：</span><br><span class="line">特征&lt;1，1&gt;在连续的帧中出现3次，相比其他特征连续出现的次数大，所以输出3</span><br><span class="line">备注：</span><br><span class="line">如果没有长度大于2的特征运动，返回1</span><br></pre></td></tr></table></figure><p>可以使用pair存储当前特征，使用map存储当前特征上一次出现的行数以及当前特征连续出现的长度。 <del>还是对C++不熟唉</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M, fea_num, res;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (N--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;M);</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>=&quot;&quot;&gt; cur;</span><br><span class="line">        <span class="comment">//当前特征上一次出现的行数以及连续出现的长度</span></span><br><span class="line">        map&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>=&quot;&quot;&gt;, <span class="keyword">int</span>&gt; lastIndex, length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;fea_num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fea_num; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;cur.first, &amp;cur.second);</span><br><span class="line">                <span class="keyword">if</span> (lastIndex[cur] == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    length[cur]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    length[cur] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                lastIndex[cur] = i + <span class="number">1</span>;</span><br><span class="line">                res = <span class="built_in">max</span>(res, length[cur]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res &lt;= <span class="number">2</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li>机器人跳跃 <img src="https://img2018.cnblogs.com/blog/1260581/201904/1260581-20190415113621644-2143156756.png" alt="img" /></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例1：</span><br><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">3 4 3 2 4</span><br><span class="line">输出：</span><br><span class="line">4</span><br><span class="line">示例2：</span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">4 4 4</span><br><span class="line">输出：</span><br><span class="line">4</span><br><span class="line">示例3：</span><br><span class="line">输入：</span><br><span class="line">3</span><br><span class="line">1 6 4</span><br><span class="line">输出：</span><br><span class="line">3</span><br><span class="line">备注：</span><br><span class="line">1 &lt;= N &lt;= 10^5</span><br><span class="line">1 &lt;= H(i) &lt;= 10^5</span><br></pre></td></tr></table></figure><p><del>据说是小学数学，还想了半天。</del> 根据题意可推出：<span class="math inline">\(dp[k + 1] = 2*dp[k] - H[k + 1]\)</span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">H</span><span class="params">(N + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;H[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(N + <span class="number">1</span>)</span></span>;  <span class="comment">//dp[k]表示从第k级开始需要的能量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="built_in">ceil</span>((dp[i + <span class="number">1</span>] + H[i + <span class="number">1</span>]) / <span class="number">2.0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4" type="1"><li>毕业旅行问题 <img src="https://img2018.cnblogs.com/blog/1260581/201904/1260581-20190418161743511-1863478998.png" alt="img" /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入：</span><br><span class="line">4</span><br><span class="line">0 2 6 5</span><br><span class="line">2 0 4 4</span><br><span class="line">6 4 0 2</span><br><span class="line">5 4 2 0</span><br><span class="line">输出：</span><br><span class="line">13</span><br></pre></td></tr></table></figure></li></ol><p>典型的TSP问题，据说动态规划能够得到理论最优解，<del>然而本渣看不懂状态转移方程</del>。 贪心算法：从某城市出发，每次在未到达的城市中选择最近的一个，直到遍历完所有城市，最后回到出发地。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 1&lt;&lt;30;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m[<span class="number">20</span>][<span class="number">20</span>], res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> edge_count = <span class="number">0</span>, flag[<span class="number">20</span>] = &#123; <span class="number">1</span>,<span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>, next;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (edge_count &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> min = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!flag[j] &amp;&amp; m[cur][j] &amp;&amp; m[cur][j] &lt; min)</span><br><span class="line">            &#123;</span><br><span class="line">                next = j;</span><br><span class="line">                min = m[cur][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res += m[cur][next];</span><br><span class="line">        flag[next] = <span class="number">1</span>;</span><br><span class="line">        edge_count++;</span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res += m[cur][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="5" type="1"><li>过河 <img src="https://img2018.cnblogs.com/blog/1260581/201904/1260581-20190415113646291-699967742.png" alt="img" /></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line">输入：</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">1 2</span><br><span class="line">4</span><br><span class="line">1 1 1 1</span><br><span class="line">输出：</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>每次过河只能2个或3个人，这种过河问题遵循<strong>能者多劳</strong>原则，即花费时间少的人折返去接其他人。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100010</span>], dp[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (N--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">sort</span>(a, a + n);</span><br><span class="line">        dp[<span class="number">2</span>] = a[<span class="number">1</span>], dp[<span class="number">3</span>] = a[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//前i个人过河的最短时间</span></span><br><span class="line">            dp[i] = <span class="built_in">min</span>( dp[i - <span class="number">1</span>] + a[<span class="number">0</span>] + a[i - <span class="number">1</span>],dp[i - <span class="number">2</span>] + a[<span class="number">1</span>] + a[i - <span class="number">1</span>] );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> </algorithm></cstdio></cstdio></int></int></vector></cmath></cstdio>&lt;/pair&lt;int,&gt;&lt;/int,&gt;</algorithm></map></utility></cstdio></node></queue></string></algorithm></cstdio></iostream></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple Math Problems</title>
      <link href="/2019/04/10/Simple%20Math%20Problems/"/>
      <url>/2019/04/10/Simple%20Math%20Problems/</url>
      
        <content type="html"><![CDATA[<h2 id="最大公约数-最小公倍数">最大公约数 &amp; 最小公倍数</h2><p>Euclid's Algorithm：若<span class="math inline">\(b\neq0\)</span>，那么<span class="math inline">\(gcd(a,b)=gcd(b,a\%b)\)</span>。 若<span class="math inline">\(a&lt;b\)</span>，定理会先交换a和b。 注意：0和任意正整数a的gcd是a。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !b ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 时间复杂度<span class="math inline">\(O(lgb)\)</span>，因为每次递归问题规模都会缩减一半以上。 最小公倍数<span class="math inline">\(lcm=\frac{a*b}{gcd}\)</span>。</p><ul><li>扩展欧几里得算法 可以计算出满足下式的三元组<span class="math inline">\((d,x,y)\)</span>： <span class="math display">\[d = GCD(a, b) = ax + by\]</span> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Euclid_extend</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>* x, <span class="keyword">int</span>* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">0</span> == b) &#123;</span><br><span class="line">        *x = <span class="number">1</span>;</span><br><span class="line">        *y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> r = Euclid_extend(b,a%b,x,y);</span><br><span class="line">        <span class="keyword">int</span> temp = *x;</span><br><span class="line">        *x = *y;</span><br><span class="line">        *y = temp - (*y)*(a/b);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <em>简单证明：</em> <span class="math inline">\(b=0\)</span>是递归基，易得一组解<span class="math inline">\(x=1,y=0\)</span>; <span class="math inline">\(b \neq0\)</span>时： 首先递归求解： <span class="math display">\[d&#39;=gcd(b,a\%b)=bx&#39;+(a\%b)y&#39; \ \ \ \ \  \ \ \ \ \ \ \ \ \ (1)\]</span> 我们知道： <span class="math display">\[d=gcd(a,b)=d&#39;=gcd(b,a\%b)\ \ \ \ \ \ \ \ \ \ \ \ \ (2)\]</span> <span class="math display">\[a\%b=a-b*\biggl\lfloor a/b \biggr\rfloor\ \ \ \ \ \ \ \ \ \ \ (3)\]</span> 将(2)(3)式带入(1)： <span class="math display">\[d=bx&#39;+(a-b\biggl\lfloor a/b \biggr\rfloor)y&#39;=ay&#39;+b(x&#39;-\biggl\lfloor a/b \biggr\rfloor y&#39;)\]</span> 所以，令<span class="math inline">\(x=y&#39;\)</span>、<span class="math inline">\(y=x&#39;-\biggl\lfloor a/b \biggr\rfloor y&#39;\)</span>，就可以满足<span class="math inline">\(d=ax+by\)</span>。</li></ul><h2 id="分数">分数</h2><p>PAT甲1088是比较经典的分数处理问题，求2个分数的和、差、积、商，输出最简形式。 表示、化简、运算、输出，代码阐释得很清楚。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !b ? a : <span class="built_in">gcd</span>(b,a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Fraction</span> &#123;</span></span><br><span class="line">        ll nume,deno;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">reduction</span><span class="params">(Fraction a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.deno &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                a.deno = -a.deno;</span><br><span class="line">                a.nume = -a.nume;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.nume == <span class="number">0</span>) &#123;</span><br><span class="line">                a.deno = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">int</span> d = <span class="built_in">gcd</span>(<span class="built_in">abs</span>(a.nume),<span class="built_in">abs</span>(a.deno));</span><br><span class="line">               a.nume /= d;</span><br><span class="line">               a.deno /= d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">add</span><span class="params">(Fraction a,Fraction b)</span> </span>&#123;</span><br><span class="line">        Fraction res;</span><br><span class="line">        res.deno = a.deno * b.deno;</span><br><span class="line">        res.nume = a.deno * b.nume + a.nume * b.deno;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduction</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">sub</span><span class="params">(Fraction a,Fraction b)</span> </span>&#123;</span><br><span class="line">        Fraction res;</span><br><span class="line">        res.deno = a.deno * b.deno;</span><br><span class="line">        res.nume = a.nume * b.deno - a.deno * b.nume;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduction</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">times</span><span class="params">(Fraction a,Fraction b)</span> </span>&#123;</span><br><span class="line">        Fraction res;</span><br><span class="line">        res.deno = a.deno * b.deno;</span><br><span class="line">        res.nume = a.nume * b.nume;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduction</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Fraction <span class="title">divide</span><span class="params">(Fraction a,Fraction b)</span> </span>&#123;</span><br><span class="line">        Fraction res;</span><br><span class="line">        res.deno = a.deno * b.nume;</span><br><span class="line">        res.nume = a.nume * b.deno;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">reduction</span>(res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showFrac</span><span class="params">(Fraction a)</span> </span>&#123;</span><br><span class="line">        a = <span class="built_in">reduction</span>(a);</span><br><span class="line">        <span class="keyword">if</span>(a.nume &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.deno == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,a.nume);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">abs</span>(a.nume) &gt; <span class="built_in">abs</span>(a.deno)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld/%lld&quot;</span>,a.nume / a.deno,<span class="built_in">abs</span>(a.nume) % a.deno,a.deno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld&quot;</span>,a.nume,a.deno);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.nume &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Fraction a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld/%lld%lld/%lld&quot;</span>,&amp;a.nume,&amp;a.deno,&amp;b.nume,&amp;b.deno);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">showFrac</span>(a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; + &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(<span class="built_in">add</span>(a,b));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">showFrac</span>(a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; - &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(<span class="built_in">sub</span>(a,b));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">showFrac</span>(a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; * &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(<span class="built_in">times</span>(a,b));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">showFrac</span>(a);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; / &quot;</span>);</span><br><span class="line">        <span class="built_in">showFrac</span>(b);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; = &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(b.nume == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Inf\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">showFrac</span>(<span class="built_in">divide</span>(a,b));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="素数">素数</h2><p>1、判断素数 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)  <span class="comment">// 1不是素数，也不是合数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> square_root = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= square_root; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、打素数表</p><p>第一种方法是枚举判断。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line"><span class="keyword">int</span> prime[maxn], num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime_table</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i)) &#123;</span><br><span class="line">            prime[num++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二种是Eratosthenes筛法，复杂度<span class="math inline">\(O(nloglogn)\)</span> <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211224154934702-698444567.png" alt="image" /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isprime[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seive</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">fill</span>(isprime, isprime + n + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (isprime[i])</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i * i; j &lt;= n; j += i)</span><br><span class="line">                isprime[j] = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进一步的优化是欧拉筛，复杂度<span class="math inline">\(O(n)\)</span> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> isprime[maxn];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; primes;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seive</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    std::<span class="built_in">fill</span>(isprime, isprime + n + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isprime[i])</span><br><span class="line">            primes.<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p : primes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p * i &gt; n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            isprime[p * i] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 3、分解质因子 注意：1要特判。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">factor</span>&#123;</span></span><br><span class="line">        <span class="keyword">int</span> x,cnt; <span class="comment">//x为质因子,cnt为该质因子个数</span></span><br><span class="line">&#125;fac[<span class="number">20</span>];</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;  <span class="comment">//记录不同因子个数</span></span><br><span class="line"><span class="comment">//枚举小于等于sqrt(n)内的所有质因子,判断哪个是n的因子</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;prime[i] &lt;= <span class="built_in">sqrt</span>(n);i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(n % prime[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">                fac[num].x = prime[i];</span><br><span class="line">                fac[num].cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(n % prime[i] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        fac[num].cnt++;</span><br><span class="line">                        n /= primep[i];</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果n仍然大于1,说明n有一个大于sqrt(n)的质因子</span></span><br><span class="line"><span class="keyword">if</span>(n != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">        fac[num].x = n;</span><br><span class="line">        fac[num++].cnt = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reference">Reference</h2><p><a href="https://zhuanlan.zhihu.com/p/100051075">素数筛</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mobile Communication</title>
      <link href="/2019/04/03/Mobile%20Communication/"/>
      <url>/2019/04/03/Mobile%20Communication/</url>
      
        <content type="html"><![CDATA[<p>最近面试有被问到LTE，感觉说得不太清楚，重新整理一遍。</p><h2 id="第一代移动通信系统">第一代移动通信系统</h2><p>1G，诞生于1980年左右。<strong>模拟通信系统</strong>，抗干扰性能差，使用FDMA技术，主要用来传输<strong>话音</strong>信号，最拉风的就是“大哥大”。<br />采用蜂窝组网，又叫小区制移动通信。将网络服务区划分为许多cell，每个cell设置一个基站，移动站的发送和接收都要通过基站进行。<br />1G的制式有很多种：瑞士、荷兰、俄罗斯等使用的NMT，美国、澳大利亚使用的AMPS，英国使用的TACS等。</p><h2 id="第二代移动通信系统">第二代移动通信系统</h2><p>2G是<strong>数字通信系统</strong>，因此抗干扰能力大大增强。同时引入了CDMA和TDMA技术，提供了<strong>低速数字通信</strong>（短信）服务。<br />2G的制式主要是欧洲的GSM(Global System for Mobile Communication)。<br />不久，2G就演变为了支持<strong>数据服务</strong>的2.5G（能上网）。2.5G包括了GPRS(General Packet Radio Service)和EDGE(Enhanced Data rate for GSM Evolution)。</p><h2 id="第三代移动通信系统">第三代移动通信系统</h2><p>3G主要采用了CDMA技术，使用混合的交换机制（电路交换、分组交换），可以提供丰富的多媒体服务（话音、数据、视频等）。<br />3G的标准主要有三种：欧洲的WCDMA（中国联通采用）、美国的CDMA2000（中国电信使用）、中国的TD-SCDMA（中国移动使用）。<br />制定标准的过程也是利益冲突与妥协的过程，欧洲这边成立了3GPP组织，美国主导了3GPP2组织，中国当然是加入了3GPP。</p><h2 id="第四代移动通信系统">第四代移动通信系统</h2><p>国际电信联盟（ITU）提出了4G的需求，4G的大名是IMT-Advanced(International Mobile Telecommunications-Advanced)。<br />4G标准的制定者，一个是3GPP，一个是IEEE。<br />3GPP提出了LTE(Long-Term Evolution)和LTE-Advanced，IEEE提出了WirelessMAN-Advanced。<br />LTE是3G和4G之间的过渡技术，也被称为3.9G。由于高通放弃了3GPP2转而投向LTE的怀抱，所以LTE应用得很广泛。</p><p>LTE相比于2G/3G频率变高、频段变宽，根据香农定理，提高频谱带宽或者信噪比可以提高信道容量，但是无线通信中要提升信噪比是比较困难的。高频段频谱资源丰富，相对低频段来说比较纯净，干扰较小，可分配的带宽比较大，同频段的连续频谱进行载波聚合也比较容易。</p><p>缺点的话：高频段路径损耗大、绕射能力差，因此覆盖距离和覆盖深度都不如低频段，当然频段过低可能造成越区覆盖，进而信噪比恶化，切换失败导致掉话。因此需要频段适中来组网。</p><p>EPC(Evolved Packet Core)：<a href="https://www.zhihu.com/question/22365275/answer/21805286">演进的分组核心网</a>是4G的核心网，</p><p>PTN(Packet Transport Network)：3G/4G的分组传送网，用于传输IP包和以太网帧，</p><p>数据通信网络：</p><h2 id="部分部门内网禁止访问互联网">部分部门内网禁止访问互联网</h2><p><img src="https://img-blog.csdnimg.cn/b40f033d64a74b91bb7c24677814398a.png" alt="网络拓扑结构" /> 假设一台PC机为普通部门，可以接入外网；另一台PC机为涉密部门，不能接入外网。两台PC机与三层交换机连接，三层交换机与路由器1连接，路由器通过PTN传输与能连接公网的路由器2连接。<br />可接入外网的PC机在三层交换机当中有路由表，可以通过PTN传输与公网连接，禁止接入外网的PC机无法查到路由表，不能与公网连接。<br />配置三层交换机与两个路由器。路由器通过PTN传输与另一台能访问公网的路由器相连接。</p><p>同一部门位于相同的子网段设置为同一VLAN互通，不同的部门位于不同的网段通过三层交换机的路由功能，实现不同VLAN间互通。</p><p>在配置三层交换机与路由器R1的OSPF协议时，私密部门的网段不加入路由协议中。</p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 3</title>
      <link href="/2019/04/01/INTERVIEW%203/"/>
      <url>/2019/04/01/INTERVIEW%203/</url>
      
        <content type="html"><![CDATA[<p><em>菊厂的面试本来没打算记录，因为当时投的是非技术岗（技术支持）。为了全面，就寥做记录。</em> <em>菊厂的面试因为有口头保密协议，所以不能透露具体题目。</em></p><h1 id="群面">0 群面</h1><p>简历通过筛选后，会有短信通知去面试。 非技术岗第一轮是所谓“集体面试”，持续1.5h，菊厂两种形式：小组讨论（6人及以下）、小组辩论（12人分2组，6人/组）。 小组讨论一般是3位面试官会给一个问题，要求讨论之后给出一个解决方案； 小组辩论在分好组之后，会有一个简短的自我介绍环节； 接着拿到辩题，会有15~20Min左右的组内讨论时间； 讨论完毕后，每组需要选一个发言人阐述本方论点（建议口才不是很好的同学不要抢这个发言人）； 再下来就是针对对方的论点论据进行辩论（这时候一定要积极举手回答）； 最后会让每个人选一个要淘汰的本组同学并阐明理由，之后面试官进行总结。 群面结束后，没有通过的人就可以回家了。 我其实比较讨厌辩论，感觉就是两组人围绕着两个极端去互相反驳对方，可是明明很多时候是完全可以trade-off的，并不是非此即彼。</p><h1 id="半技术面">1 半技术面</h1><p>之所以叫做半技术面，是因为菊厂非技术岗的二面有点XX。据说会根据你的专业背景提问，如果不太对口就不会提问技术问题。 很不幸，我的面试官原来也是学通信的。简单聊了下简历上的项目之后，就开始疯狂追问网络问题，我可能没太get到他的point，交流不太顺畅，这一面表现不太好。 不过不知道是不是因为长太帅了（捂脸~），这一面竟然给过了。</p><h1 id="高管面">2 高管面</h1><p>通过二面后，会把你请到一个逼格有点高的地方，等着被高管临幸。 这种聊的就比较随意了，侃天侃地侃人生。 你的人生有嘛规划啊，你遇到最大的挫折是嘛啊，怎么克服的啊，你了解华为公司嘛...... 如果要把你派到非洲，愿不愿意啊，三年你愿意，十年你愿意么？ 总之，华为的文化就是你要绝对服从公司的安排，不怕吃苦，不怕牺牲，为公司倾情奉献。。。 最后你有什么问题的话，可以问他。</p><h1 id="英语测试">3 英语测试</h1><p>如果通过前三轮面试，最后有一个英语测试。 这个不知道什么标准，反正差不多三部分：1、单选题；2、朗读句子？（记不清了）；3、给2个topic，说一段话。 我这感人的口语水平，第三部分噼里啪啦自己都不知道说的啥。。。 全部完成后，就可以回去等消息了。 P.s. 即使四轮面试全部通过，也不意味着就能拿到offer。熟悉菊厂的同学都知道有个资源池，过面试后先进池子里泡着，公司会根据HC和前一批的违约情况从池子里分批捞人，建议不要一棵树上吊死。 <em>其它菊厂面经 ：https://zhuanlan.zhihu.com/p/24427674</em></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 2</title>
      <link href="/2019/03/28/INTERVIEW%202/"/>
      <url>/2019/03/28/INTERVIEW%202/</url>
      
        <content type="html"><![CDATA[<p>吐槽下ZZ的面试安排：面试时间12：30不说了，周围没有饭店，中午就没吃饭。。。不像其他公司给每个人安排不同的面试时间，这样可以节约大家的时间，SPDB是把一大批人都安排在了12：30，而且面试是5个面试官对一个人，生生地把可以并行的工作给整废了，大部分时间都浪费在了无意义的等待上。</p><h2 id="机试">机试</h2><p>50min三道题，考察地很基础，基本之前都练过。利用的是<a href="http://hustoj.com/oj/">华科的OJ</a>，IDE有Dev-C++、Eclipse、PyCharm，Dev-C++没太用过，所以调试得很慢很慢。。。</p><ol type="1"><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2051">十进制转二进制</a> “除基取余，逆序排列”。每次将要转换的数除以基数Q，将余数作为<strong>低位</strong>存储直到商为0，将所有位由高到低输出即可。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>, num[<span class="number">40</span>];</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            num[len++] = n % <span class="number">2</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, num[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>之所以用do...while循环，是因为如果输入为0，用while会直接跳出循环，结果出错。 2. 求出200以内所有3的倍数的数字和 没啥好说的。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(i % <span class="number">3</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 3. <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805415005503488">质因子分解</a> 这题寒假练过，不过机考时候忘了，素数表打的好像有问题。。。幸亏测试数据弱，就手工写了一个数组存了前面20个素数，结果AC了。。。</p><ul><li>如果一个正整数n是一个合数，那么它的因子必然是在<span class="math inline">\(\sqrt n\)</span>左右两侧成对出现；</li><li>推广到质因子，如果n存在[2,n]内的质因子，那么这些质因子要么全部小于等于<span class="math inline">\(\sqrt n\)</span>，要么只有一个大于<span class="math inline">\(\sqrt n\)</span>，其余都小于等于<span class="math inline">\(\sqrt n\)</span>。</li></ul><p>所以算法是： 1）枚举1~<span class="math inline">\(\sqrt n\)</span>内的所有质因子，判断其是否是n的因子； 2）如果1）结束后<span class="math inline">\(n\geq 1\)</span>，那么其必然有且仅有一个大于<span class="math inline">\(\sqrt n\)</span>的质因子，记录该因子； 3）输入是1要特判。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是int范围，数组开10足够了，</span></span><br><span class="line"><span class="comment">//因为2*3*5*7*11*13*17*19*23*29就超过int了，所以我手工写一个数组也足够了。。。</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fac</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> cnt;  <span class="comment">//质因子x的个数</span></span><br><span class="line">&#125;fac[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == a)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(<span class="number">1.0</span>*a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= sqr; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(a % i))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prime[maxn], num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打素数表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">primeTable</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isPrime</span>(i))</span><br><span class="line">        &#123;</span><br><span class="line">            prime[num++] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">primeTable</span>();  <span class="comment">//记得写，我好像没写这句。。。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">int</span> diffFacNum = <span class="number">0</span>;  <span class="comment">//n的不同质因子个数</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld=&quot;</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == n)  <span class="comment">//特判1</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(<span class="number">1.0</span>*n);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//枚举2~sqrt(n)的质因子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; prime[i] &lt;= sqr; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % prime[i] == <span class="number">0</span>)  <span class="comment">//如果该质因子是n的因子</span></span><br><span class="line">            &#123;</span><br><span class="line">                fac[diffFacNum].x = prime[i];</span><br><span class="line">                fac[diffFacNum].cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="comment">//计算该质因子的个数</span></span><br><span class="line">                <span class="keyword">while</span> (n % prime[i] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    fac[diffFacNum].cnt++;</span><br><span class="line">                    n /= prime[i];</span><br><span class="line">                &#125;</span><br><span class="line">                diffFacNum++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//必有一个大于sqrt(n)的质因子</span></span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fac[diffFacNum].x = n;</span><br><span class="line">            fac[diffFacNum++].cnt = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; diffFacNum; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, fac[i].x);</span><br><span class="line">            <span class="keyword">if</span> (fac[i].cnt &gt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;^%d&quot;</span>, fac[i].cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="面试">面试</h2><p>面试期间也被问到了一道题： 大致意思就是有一个正整数n，找出一个比n大且每位数字之和=n的每位数字之和的最小数，比如输入050，那么输出104。 我开始的思路是从n开始向上枚举，直到找到满足要求的数； 其实更优的解法是：对于在050~099之间的数根本不用考虑，因为必然不满足每位数字之和=n的每位数字之和，这样可以提高效率。</p><h2 id="其它">其它</h2><p>1、语言：Java多态、C的数据类型； 2、数据结构：链表是否有环（烂大街了）； 3、操作系统：进程状态及转换、进程线程区别。 </cmath></cstdio></cstdio></cstdio></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bias-Variance Analysis</title>
      <link href="/2019/03/25/Bias-Variance%20Analysis/"/>
      <url>/2019/03/25/Bias-Variance%20Analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="motivation">Motivation</h2><p>对于机器学习模型<span class="math inline">\(g\)</span>的泛化性能的分析不仅可以通过实验的方式进行评估，还可以从理论上进行分析，这也是learning theory研究的一部分。</p><h2 id="推导">推导</h2><p>首先假设无噪，定义在训练集<span class="math inline">\(D\)</span>上学习到的模型<span class="math inline">\(g^{(D)}\)</span>的期望泛化误差为： <span class="math display">\[E_{out}(g^{(D)})=E_x[(g^{(D)}(x)-f(x))^2]\]</span> 先使用小学数学做点预备： <span class="math display">\[E_D[g^{(D)}(x)]=\bar g(x)\\E_D[g^{(D)}(x)^2]-\bar g(x)^2=E_D[(g^{(D)}(x)-\bar g(x))^2]=var(x)\\\bar g(x)^2-2E_D[g^{(D)}(x)]f(x)+f(x)^2=(\bar g(x)-f(x))^2=bias(x)^2\]</span> 不同的方式会生成不同的训练集<span class="math inline">\(D\)</span>，因此<span class="math inline">\(g\)</span>的总的期望泛化误差为： <span class="math display">\[E_D[E_{out}(g^{(D)})]=E_D[E_x[(g^{(D)}(x)-f(x))^2]]=E_x[E_D[(g^{(D)}(x)-f(x))^2]]\\=E_x[E_D[g^{(D)}(x)^2]-2E_D[g^{(D)}(x)]f(x)+f(x)^2]\\=E_x[E_D[g^{(D)}(x)^2]-\bar g(x)^2+\bar g(x)^2-2E_D[g^{(D)}(x)]f(x)+f(x)^2]\\=E_x[var(x)+bias(x)^2]=E_x[var(x)]+E_x[bias(x)^2]=var+bias^2\]</span></p><p>如果数据有噪，还是用MSE推一个漂亮的分解，其他的损失函数可能没有这么好搞：<br />以下推导针对单条测试样例<span class="math inline">\((x,y)\)</span>，其中<span class="math inline">\(y=f(x)+\epsilon,E_D(\epsilon)=0,V_D(\epsilon)=\sigma^2\)</span>，噪声只需要均值为0即可，甚至都不需要是高斯分布。 <span class="math display">\[E_D[(g^{(D)}(x)-y)^2]=E_D[(f(x)+\epsilon-g^{(D)}(x))^2]\\=E_D[\epsilon^2]+E_D[(g^{(D)}(x)-f(x))^2]+E_D[2\epsilon(g^{(D)}(x)-f(x))]\\=V_D[\epsilon]+E_D[\epsilon]^2+E_D[(g^{(D)}(x)-f(x))^2]+E_D[\epsilon]E_D[2(g^{(D)}(x)-f(x)]\\=\sigma^2+E_D[(g^{(D)}(x)-f(x))^2]\\=\sigma^2+E_D[g^{(D)}(x)-f(x)]^2+V_D[g^{(D)}(x)-f(x)]\\=\sigma^2+(f(x)-E_D[g^{(D)}(x)])^2+V_D[g^{(D)}(x)]\\=\sigma^2+(\bar g(x)-f(x))^2+var(x)=\sigma^2+bias(x)^2+var(x)\]</span> 其中测试样例噪声<span class="math inline">\(\epsilon\)</span>与<span class="math inline">\(f(x),g^{(D)}(x)\)</span>均独立，因此拆为乘积。</p><p>可以看到：bias表达的是所有可能的训练数据集训练出的所有模型的平均值与真实值的差异，variance表达的是同等规模的不同的训练数据集学习到的模型之间的差异。<br />当训练数据无穷多时，数据扰动对模型的泛化性能没有影响，variance就为0，此时复杂模型的bias通常更低，泛化能力也就更强。<br />训练数据较少时，复杂模型的variance很大，此时即使训练误差很低，泛化误差也会很高，即所谓的过拟合。</p><h2 id="refs">Refs</h2><p><a href="https://nbviewer.org/github/tournami/Learning-From-Data-MOOC/blob/master/Homework%204.html">Bias and Variance</a><br /><a href="https://engineering.purdue.edu/ChanGroup/ECE595/files/chapter4.pdf">Learning Theory</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java FAQ</title>
      <link href="/2019/03/21/Java%20FAQ/"/>
      <url>/2019/03/21/Java%20FAQ/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li>Jar包本来在project structure中，按绿色按钮也可以执行，但从命令行就会报错：找不到对应的包。 Idea为了从命令行编译程序，必须将jar包的路径添加到系统变量classpath中，再在idea中project structure中添加该jar，重启计算机。 ## 多线程 Java有2种方式实现多线程：</li></ol><p>继承<code>Thread</code>类</p><p>单线程程序即只有主方法的线程，该线程由JVM负责启动，其他线程由程序员负责启动。<code>Thread</code>类中实例化的对象代表一个线程，继承后重写<code>run()</code>方法，将该线程的功能实现放在<code>run()</code>方法中，调用<code>Thread</code>类中的<code>start()</code>方法启动线程，<code>start()</code>方法会调用覆盖后的<code>run()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>Runnable</code>接口</p><p>第一种方法的缺陷在于：如果程序需要继承其他类而非<code>Thread</code>类，但Java是单继承语言，此时就无法通过该方式实现多线程，此时就需要采用第二种方法。创建<code>Runnable</code>对象后，将其传递给<code>Thread</code>类的构造方法，调用<code>start()</code>方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里比较疑惑的地方在于：Java中接口和抽象类是不能实例化的，即<code>Runnable</code>接口是不能实例化的，但是代码中却<code>new Runnable()</code>。这里实际上首先构造了一个<code>implements Runnable</code>的匿名内部类，然后构造了该类的一个实例，接着用<code>Runnable</code>表示该类的类型。</p><p>不使用匿名内部类： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test implements Runnable &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        System.out.println(&quot;Hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Test hello = new Test();</span><br><span class="line">        Thread thread = new Thread(hello);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>K-Nearest Neighbors</title>
      <link href="/2019/03/07/K-Nearest%20Neighbors/"/>
      <url>/2019/03/07/K-Nearest%20Neighbors/</url>
      
        <content type="html"><![CDATA[<p>k-NN可以做分类及回归，对新的测试实例t，在训练集中找与t<strong>最近</strong>的k个实例，用投票法决定t属于哪个类，显然这是一种懒惰学习。</p><p>既然要找最近的k个，就会涉及距离度量问题，下面以2个样本点（每个点有n个维度）间的距离为例枚举一些度量方式：</p><ol type="1"><li>Minkowski距离：<span class="math inline">\(\sqrt[p]{\sum_{i=1}^{n}|x_{1i}-x_{2i}|^p}\)</span>，p=1时是曼哈顿距离，p=2时是欧氏距离，<span class="math inline">\(p\to\infty\)</span>时是切比雪夫距离<span class="math inline">\(max_{i}|x_{1i}-x_{2i}|\)</span></li><li>标准欧式距离：为了克服欧氏距离各个维度数据粒度不一致对最终结果的影响，将每个维度标准化后采用欧氏距离的计算方法：<span class="math inline">\(y_{1i}=\cfrac{x_{1i}-u_i}{s_i}\)</span>，<span class="math inline">\(\sqrt{\sum_{i=1}^{n}(y_{1i}-y_{2i})^2}=\sqrt{\sum_{i=1}^{n}\cfrac{(x_{1i}-x_{2i})^2}{s_i^2}}\)</span></li><li>Mahalanobis Distance：修正了各维度之间的相关性及粒度不一致性 样本向量<span class="math inline">\(x\)</span>到均值向量<span class="math inline">\(u\)</span>之间的马氏距离： <img src="https://img-blog.csdnimg.cn/20210201184937356.png" alt="在这里插入图片描述" /> 样本向量<span class="math inline">\(x\)</span>到样本向量<span class="math inline">\(y\)</span>之间的马氏距离： <img src="https://img-blog.csdnimg.cn/20210201185035296.png" alt="在这里插入图片描述" /> 如果协方差矩阵是单位阵，即每个维度之间没有相关关系，即欧氏距离；如果协方差矩阵是对角阵，即标准欧氏距离</li><li>Bhattacharyya Distance：衡量概率分布的相似性， <span class="math inline">\(D_B(p,q)=-ln(BC(p,q)),BC(p,q)=\sum\sqrt{p(x)q(x)},BC(p,q)=\int\sqrt{p(x)q(x)}dx\)</span></li><li>余弦相似性</li><li>Jaccard Similarity Coefficient：衡量集合相似性：<span class="math inline">\(J(A,B)=\cfrac{|A\cap B|}{|A\cup B|}\)</span> Jaccard Distance：集合区分度：<span class="math inline">\(1-J(A,B)\)</span> 假设有4个二值维度，样例A={0111}，B={1011}，则<span class="math inline">\(J=\frac{M_{11}}{M_{01}+M_{10}+M_{11}},J^{&#39;}=1-J\)</span>，<span class="math inline">\(M_{11}\)</span>表示A和B中均为1的维度个数</li><li>Pearson Correlation Coefficient： 总体Pearson系数：<span class="math inline">\(\rho=\frac{Cov(X,Y)}{\sqrt{DXDY}}\)</span> 相关距离：<span class="math inline">\(1-\rho\)</span> 样本Pearson系数：<span class="math inline">\(r=\frac{\sum(X_i-\bar X)(Y_i-\bar Y)}{\sqrt{\sum(X_i-\bar X)^2\sum(Y_i-\bar Y)^2}}=\frac{1}{n-1}\sum(\frac{X_i-\bar X}{S_x})(\frac{Y_i-\bar Y}{S_y})\)</span></li></ol><p>除了距离度量，还有k的选择：k太小容易过拟合，k太大会使得与测试实例较远的训练样例也会起作用。</p><p>kNN的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NearestNeighbor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">self, X, y</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; X is N*D &quot;&quot;&quot;</span></span><br><span class="line">        self.Xtr = X</span><br><span class="line">        self.ytr = y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; X is N*D &quot;&quot;&quot;</span></span><br><span class="line">        num_test = X.shape[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># make sure output type matches input type</span></span><br><span class="line">        Ypred = np.zeros(num_test, dtype = self.ytr.dtype)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_test):</span><br><span class="line">            distances = np.<span class="built_in">sum</span>(np.<span class="built_in">abs</span>(self.Xtr - X[i,:]), axis = <span class="number">1</span>)</span><br><span class="line">            min_index = np.argmin(distances)</span><br><span class="line">            Ypred[i] = self.ytr[min_index]</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> Ypred</span><br></pre></td></tr></table></figure><p>为了加快预测速度，可以使用k-d tree来存储训练集，本质上也是一种平衡二叉树： 建树的过程可以递归进行：</p><ul><li>确定划分域：对训练集，统计每个维度的方差，选择方差最大的属性，意味着沿着该维度数据比较分散，容易获得较高的分辨率</li><li>确定结点：将数据集按照划分域排序，正中间的点选为结点</li><li>确定左(值小于父亲)右（值大于父亲）孩子</li><li>设置左右孩子的parent域</li></ul><p>往往训练样例的维度是很高的，所以很难每个维度都去分割，所以sklearn中的kNN如果用k-d tree实现，会有一个参数<code>leaf_size</code>控制树的深度。 建好后，就可以快速查找测试样例的邻居。</p><p>假设训练集为<span class="math inline">\(X_{m\times k}\)</span>，测试集为<span class="math inline">\(Y_{n\times k}\)</span>，此时需要计算训练集中每条样本与测试集中每条样本的距离，为了加速矩阵运算，不能使用循环，最终结果为<span class="math inline">\(R_{m\times n}=X\circ X+Y\circ Y-2XY^T\)</span>，具体推导可以参考<a href="https://zhuanlan.zhihu.com/p/146076139">NumPy之计算两个矩阵的成对平方欧氏距离</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 1</title>
      <link href="/2019/03/06/INTERVIEW%201/"/>
      <url>/2019/03/06/INTERVIEW%201/</url>
      
        <content type="html"><![CDATA[<h2 id="数据对齐存储">数据对齐存储</h2><p>在32位系统中：int占4Bytes，short占2Bytes，char占1Byte，加起来应该是7Bytes，但是下面这段代码输出却是8。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">short</span> y;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>计算机对于基本类型数据在内存中的存/储位置有些限制，即<strong>内存对齐</strong>。 处理器取数据一般不按照单个字节，而是双字节、四字节等进行，假设这种存取粒度为4Bytes，也就是说处理器只能从首地址为4的倍数的地址读取数据。如果没有对齐存储，取数据会很麻烦，可能需要两次读取并且剔除掉无用的字节。 每个编译器都有默认的对齐模数，那么<strong>有效对齐值=min{对齐模数，结构体中最长数据类型长度}。</strong> <strong>规则1：第一个成员offset为0，其后成员的offset=min{有效对齐值，该类型字节数}；</strong> <strong>规则2：结构体总大小必须为有效对齐值的整数倍，否则编译器会自动填充。</strong> 再看前面的例子，int占0<sub>3，short占4</sub>5，char占6，总长度为7，不是4的整数倍，所以地址7是填充字节，共8Bytes。</p><h2 id="栈-堆不是数据结构中的栈和堆">栈 &amp; 堆（不是数据结构中的栈和堆）</h2><ol type="1"><li>内存栈区 编译器自动进行分配和释放，存放局部变量、函数的参数等。 Windows下栈向低地址扩展，大小只有几MB，如果开一个很大的局部数组，就会提示stack overflow。</li><li>内存堆区 malloc或者new返回的内存区域，使用完需要用户free或delete，否则容易内存泄漏。如果程序员不释放，那么结束时由操作系统回收。 堆向高地址扩展，由于系统采用空闲链表存储空闲内存，所以是不连续的。系统在收到内存申请的请求后，会由低地址向高地址遍历空闲链表，找到第一个满足的空闲块，删除该结点，并将该块的首地址返回。如果分配的空间大于申请的，会将剩余部分重新链接回空闲链表。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在Heap中开辟10Bytes，同时在Stack中压入p，p的值为10Bytes的首地址</span></span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li>常数区 存放字符串常量等，程序结束由系统回收。</li><li>静态区 存放全局变量或者静态变量，初始化的和没有初始化的分别存放在不同的区域，程序结束后由系统释放。</li><li>代码区 存放程序代码。 ## 其它 排序复杂度、人工智能概念、模型的建立等。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C/C++ FAQ</title>
      <link href="/2019/03/04/C%20&amp;%20C++%20FAQ/"/>
      <url>/2019/03/04/C%20&amp;%20C++%20FAQ/</url>
      
        <content type="html"><![CDATA[<h2 id="指针和引用">指针和引用</h2><ol type="1"><li>指针是一个新的变量，存储另一个变量的地址，可以通过指针修改另一个变量；引用是一个别名，对引用的操作就是对变量本身的操作。</li><li>指针可以有多级；引用只有一级。</li><li>指针的大小一般4B；引用的大小一般取决于被引用对象大小。</li><li>指针可以为空；引用不能为空。</li><li>传参选择：返回被调函数局部变量的内存时传指针，使用后及时释放避免内存泄漏；返回局部变量的引用没有意义，会自动销毁。传指针需要单独开辟内存；在对栈空间大小敏感时（如递归）传引用，无需创建临时变量，开销更小。类对象作为参数时传引用是C++传递类对象的标准方式。</li></ol><h2 id="空类">空类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// sizeof(A) = 1</span></span><br></pre></td></tr></table></figure><p>空类的大小之所以为1，因为标准规定完整对象的大小&gt;0，否则两个不同对象可能拥有相同的地址，故编译器会生成1B占位符。 那么两个对象为什么不能地址相同呢？</p><blockquote><p>There would be no way to distinguish between these two objects when referencing them with pointers.</p></blockquote><p>空类中到底都有什么呢？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">A</span>();  <span class="comment">// 默认构造函数</span></span><br><span class="line">    <span class="built_in">A</span>(<span class="keyword">const</span> A&amp;);  <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    ~<span class="built_in">A</span>();  <span class="comment">// 析构函数</span></span><br><span class="line">    A&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> A&amp;);  <span class="comment">// 赋值运算符</span></span><br><span class="line">    A* <span class="keyword">operator</span>&amp;();  <span class="comment">// 取址运算符（非const）</span></span><br><span class="line">    <span class="keyword">const</span> A* <span class="keyword">operator</span>&amp;() <span class="keyword">const</span>;  <span class="comment">// 取址运算符（const）</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>仅仅声明一个类，不会创建这些函数。只有当定义类的对象时，才会产生。 ## 多态和虚函数 面向对象的语言的特点就是封装、继承和多态。封装和继承都比较好理解，那么多态到底什么意思？ 简单来说：不同对象接收相同的消息产生不同的行为。 C++中的多态分为静态多态(函数和运算符重载)和动态多态(继承和虚函数)。 定义虚函数<code>f</code>，是为了用基类的引用或指针调用派生类的<code>f</code>，最终调用哪个<code>f</code>取决于传入的实参，即在运行时选择函数的版本，也就是所谓的动态绑定。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Base&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;  <span class="comment">// 覆盖Base::f</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Derived&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">h</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Base* p = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    p-&gt;<span class="built_in">f</span>();  <span class="comment">// 调用派生类的f()</span></span><br><span class="line">    <span class="keyword">delete</span> p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基类指针<code>p</code>调用虚函数<code>f</code>，<code>f</code>作用的可能是基类对象，也可能是派生类对象，这就是多态（同样消息作用于不同类型对象产生不同的行为）的一种方式，即动态多态。 正因为编译器无法确定使用哪个虚函数，所以所有的<strong>虚函数必须定义</strong>，否则编译器会报错。</p><p>构造函数不能是虚函数，因为构造对象时必须明确知道其类型。如果是虚函数，调用时只需要提供接口，编译器无法知道你想构造继承树的哪个类型。 C++他爹Bjarne Stroustrup是这么说的： &gt; A virtual call is a mechanism to get work done given partial information. In particular, &quot;virtual&quot; allows us to call a function knowing only an interfaces and not the exact type of the object. To create an object you need complete information. In particular, you need to know the exact type of what you want to create. Consequently, a &quot;call to a constructor&quot; cannot be virtual.</p><p>析构函数是虚函数，因为要确保执行相应对象的析构函数。如果基类指针指向派生类对象，会调用派生类的析构函数，然后调用基类的析构函数。 <img src="https://img-blog.csdnimg.cn/20200229202936650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /> ## 纯虚函数 与虚函数必须定义相反，纯虚函数无须定义（要定义必须在类的外部），含有纯虚函数的类是<strong>抽象基类</strong>。 抽象基类定义好接口，继承该类的其他类可以覆盖这个接口。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>= <span class="number">0</span>;  <span class="comment">// 声明纯虚函数</span></span><br></pre></td></tr></table></figure><p>之所以要引入纯虚函数，是因为很多时候基类产生对象是没有意义的。比如动物类可以派生出狗、猪等子类，但动物类生成对象毫无意义。 因此，不能创建抽象基类的对象，派生类必须覆盖(override)以定义自己的<code>f</code>，否则派生类仍然是抽象基类。 ## 重载&amp;覆盖&amp;重写</p><ul><li>重载(overload)：在类内部发生。函数名相同，参数个数、参数类型、参数顺序至少有一种不同。返回值类型可以相同，也可不同；</li><li>覆盖(override)：覆盖基类的虚函数。函数名相同，参数相同，基类函数必须是虚函数；</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">D1</span> :</span>B &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">const</span> <span class="keyword">override</span></span>;  <span class="comment">// 正确：f1与基类中的f1匹配</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span>)</span> <span class="keyword">override</span></span>;  <span class="comment">// 错误：B没有形如f2(int)的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f3</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">// 错误：f3不是虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f4</span><span class="params">()</span> <span class="keyword">override</span></span>;  <span class="comment">// 错误：B没有名为f4的函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p>重写(overwrite)：派生类的函数屏蔽了同名的基类函数： 派生类函数与基类函数同名，参数不同。不论基类函数是否为虚函数，都会被隐藏； 派生类函数与基类函数同名，参数相同。基类函数不为虚函数，会被隐藏； ## static C++中<code>static</code>关键字用来<strong>声明类的成员</strong>：</p></li><li>类的静态成员变量或函数属于类而非对象，只有一份副本；</li><li>静态成员函数没有<code>this</code>指针，只能访问类的静态数据；</li><li>静态成员函数不能定义为虚函数；</li><li><p>静态成员变量初始化<code>int Base::name = 0</code></p></li></ul><p>如果不是在类中声明成员，还有下面用法：</p><ul><li>隐藏作用：多文件编译时，定义的全局变量和函数都是整个工程可见的，只要使用时加上<code>extern</code>关键字即可。如果加上<code>static</code>关键字，那么该变量或函数就变为<strong>仅当前文件</strong>可见，这样我们可以在不同文件中定义同名的变量或函数而不用担心冲突。</li><li><p>全局生存期：<code>static</code>变量存储在静态数据区，默认值为0，<strong>只被初始化一次</strong>，即使作为局部变量，生存期也为整个程序，但作用域与普通变量相同，退出函数后即使变量存在，但不能使用。 ## const</p></li><li><p>定义const对象：一旦创建其值不能改变，故const对象必须初始化。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> bufSize = <span class="number">512</span>;  <span class="comment">// the same as the previous one</span></span><br></pre></td></tr></table></figure><p>由于const对象默认只在文件内有效，所以如果要在文件间共享：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file1.cpp定义并初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="number">512</span>;</span><br><span class="line"><span class="comment">// file1.h可以仅声明，不初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize;</span><br></pre></td></tr></table></figure><ul><li>常量指针（const pointer）：指针本身（存在指针中的地址）不可变。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>* <span class="keyword">const</span> p = &amp;num;  <span class="comment">// p将一直指向num</span></span><br></pre></td></tr></table></figure><ul><li>指向常量的指针（pointer to const）：指针指向的对象不可变。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span>* p = &amp;pi;  <span class="comment">// 错误，p是一个普通指针</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span>* p = &amp;pi;  <span class="comment">// 正确</span></span><br><span class="line">*p = <span class="number">4.1</span>;  <span class="comment">// 错误，不能改变*p的值 </span></span><br></pre></td></tr></table></figure><ul><li>修饰成员函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> <span class="keyword">const</span></span>;  <span class="comment">// 不能改变数据成员，const对象不能调用非const成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>修饰类对象</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f2</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A obj;  <span class="comment">// obj为常量对象，任何成员都不能被修改，任何非const成员函数都不能被调用</span></span><br><span class="line">obj.<span class="built_in">f1</span>();  <span class="comment">// 错误</span></span><br><span class="line">obj.<span class="built_in">f2</span>();  <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A* obj  = <span class="keyword">new</span> <span class="built_in">A</span>();</span><br><span class="line">obj-&gt;<span class="built_in">f1</span>();  <span class="comment">// 错误</span></span><br><span class="line">obj-&gt;<span class="built_in">f2</span>();  <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><ul><li>转为非const</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pc;  <span class="comment">// pc指向内容不可变</span></span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(pc);  <span class="comment">// 正确，但是通过p写值是未定义行为</span></span><br></pre></td></tr></table></figure><h2 id="类型转换">类型转换</h2><p>类型转换分为隐式转换和显式转换。 显式转换有四种：</p><ul><li><code>static_cast</code> 没有底层const都可以，使用比较普遍。 基类-&gt;派生类：不安全 主要执行非多态转换，代替C中的转换。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* p = &amp;d;</span><br><span class="line"><span class="keyword">double</span>* dp = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>*&gt;(p);</span><br></pre></td></tr></table></figure><ul><li><code>dynamic_cast</code> 运行时类型检查， 将基类指针或引用安全转换为派生类的指针或引用：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// type是类，且有虚函数</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>&lt;type*&gt;(e);  <span class="comment">//e是指针</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>&lt;type&amp;&gt;(e);  <span class="comment">//e是左值</span></span><br><span class="line"><span class="keyword">dynamic_cast</span>&lt;type&amp;&amp;&gt;(e);  <span class="comment">//e不是左值</span></span><br></pre></td></tr></table></figure><ul><li><code>const_cast</code> 改变底层const。 常量指针转为非常量指针。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* cp;</span><br><span class="line"><span class="keyword">char</span>* q = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(cp);  <span class="comment">// wrong, static_cast不能用于底层const</span></span><br><span class="line"><span class="keyword">char</span>* p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(cp);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><code>reinterpret_cast</code> 比较危险，不太用。处理无关类型转换，重新解释对象的比特模型。 ## new/delete/malloc/free <code>new/delete</code>是C++运算符，需要编译器支持，所以不需要指定大小，返回相应对象类型的指针，分配失败会抛出<code>std::bad_alloc</code>异常，<code>new</code>会调用<code>operator new()</code>申请内存(用<code>malloc</code>实现)，调用构造函数初始化成员变量，返回相应指针，<code>delete</code>先调用析构函数，再调用<code>operator delete()</code>函数释放内存(用<code>free</code>实现)； <code>malloc/free</code>是库函数，不由编译器控制，需要显式指出大小，返回<code>void*</code>，需要强制类型转换，分配失败返回<code>NULL</code>指针，无法完成对象的构造和析构。</li></ul><h2 id="智能指针">智能指针</h2><p><code>new</code>完后没有<code>delete</code>，内存泄漏。为了减少程序员的负担，引入智能指针：</p><ul><li><code>shared_ptr</code> 允许多个指针指向同一个对象。通常与<code>make_shared</code>函数结合食用：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shared_ptr&lt;string&gt; p = make_shared&lt;string&gt;(<span class="number">10</span>, <span class="string">&#x27;9&#x27;</span>);</span><br></pre></td></tr></table></figure><p>实现方式一般是reference counting，在堆上申请资源并返回指针后，在堆上申请一个共享的引用计数器，每来一个指针指向该对象，++计数器。当计数器为0时，会自动释放指向的对象。 2个指针成员，一个指向对象，一个指向计数器 面试有可能被要求手撕一个： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mySharePtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">mySharePtr</span>() :<span class="built_in">refCnt</span>(<span class="literal">nullptr</span>), <span class="built_in">ptr</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mySharePtr</span>(T* res) :<span class="built_in">refCnt</span>(<span class="literal">nullptr</span>), <span class="built_in">ptr</span>(res) &#123;</span><br><span class="line">        <span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">mySharePtr</span>(<span class="keyword">const</span> mySharePtr&lt;T&gt;&amp; p) :<span class="built_in">refCnt</span>(p.refCnt), <span class="built_in">ptr</span>(p.ptr) &#123;</span><br><span class="line">        <span class="built_in">add</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">mySharePtr</span>() &#123;</span><br><span class="line">        <span class="built_in">remove</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// lvalue is assigned, --counter</span></span><br><span class="line">    mySharePtr&lt;T&gt;&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> mySharePtr&lt;T&gt;&amp; that) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;that) &#123;</span><br><span class="line">            <span class="built_in">remove</span>();</span><br><span class="line">            <span class="keyword">this</span>-&gt;ptr = that.ptr;</span><br><span class="line">            <span class="keyword">this</span>-&gt;refCnt = that.refCnt;</span><br><span class="line">            <span class="built_in">add</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> mySharePtr&lt;T&gt;&amp; other) &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr == other.ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> mySharePtr&lt;T&gt;&amp; other) &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">operator</span>==(other);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ptr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numRef</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refCnt) &#123;</span><br><span class="line">            <span class="keyword">return</span> *refCnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// if null, create counter = 1, else ++counter</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refCnt) &#123;</span><br><span class="line">            ++(*refCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            refCnt = <span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --counter, if counter = 0, free memory</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (refCnt) &#123;</span><br><span class="line">            --(*refCnt);</span><br><span class="line">            <span class="keyword">if</span> (*refCnt == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> refCnt;</span><br><span class="line">                <span class="keyword">delete</span> ptr;</span><br><span class="line">                refCnt = <span class="literal">nullptr</span>;</span><br><span class="line">                ptr = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span>* refCnt;</span><br><span class="line">    T* ptr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li><code>unique_ptr</code> 看名字就知道，独占对象。 ##指针和引用 引用只是一个别名，不是一种数据类型，不占存储空间，不能建立数组的引用 引用必须初始化，指针不必 引用初始化后不能改变，指针可以改变指向的对象 不存在指向空值的引用，存在指向空值的指针 ## 成员变量初始化顺序 基类静态变量/全局变量：静态成员变量必须类外初始化 派生类静态变量/全局变量 基类成员变量：按照在类中定义的顺序，而不是初始化列表中的顺序 派生类成员变量 ## TODO 初始化列表好处： 1、const成员变量只能 2、引用只能 3、效率：初始化列表比赋值操作少一次默认构造函数，因为程序要默认构造临时对象（等号右边）后才能赋值</li></ul><p>函数缺省： 某个参数有默认值，缺省参数仍在后边 调用时如果略去一个参数传递，则略去后面所有</p><p>异常处理： 抛出异常，没有被特定的catch语句捕获，函数调用堆栈会被解退（函数终止，销毁局部变量，控制权转到调用它的那个函数）， 并在下一个外层try..catch捕获，最后没有任何catch捕获，调用terminate，abort退出。</p><p>传参时传引用与传指针效果相同 传引用，没有产生实参的副本，直接对实参操作 传指针，被调函数需要给形参分配空间，可读性差，需要传地址做实参，传引用更简单清晰</p><p>预处理、编译、汇编、链接</p><p>操作系统 * 用户告诉操作系统执行hello程序 * 操作系统到硬盘找到该程序 * 由编译程序将用户源程序编译成若干个目标模块 * 由链接程序将目标模块和相应的库函数链接成装入模块 * 操作系统分配内存，由装入程序将装入模块装入内存 * 为执行hello程序创建执行环境（创建新进程） * 操作系统设置CPU上下文环境，并跳到程序开始处 * 程序的第一条指令执行 * 程序执行与printf对应的系统调用 * 操作系统分配设备 * 执行显示驱动程序 * 窗口系统将像素写入存储映像区</p><pre><code>（1）每个节点或者是黑色，或者是红色。</code></pre><p>　　(2)根节点是黑色。</p><p>　　(3)每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]</p><p>　　(4)如果一个节点是红色的，则它的子节点必须是黑色的。</p><p>　　(5)从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。[这里指到叶子节点的路径]</p><p>模板特化、偏特化 内存池</p><p>volatile： 加volatile的关键字不进行编译器优化，保证对特殊地址的稳定访问 不能把他放在cache或寄存器中重复使用 防止优化编译器把变量从内存装入 CPU 寄存器 两个线程有可能一个使用内存中的变量，一个使用寄存器中的变量，这会造成程序的错误执行</p><p>拷贝构造： 创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象 通过使用另一个同类型的对象来初始化新创建的对象。 复制对象把它作为参数传递给函数。 复制对象，并从函数返回这个对象。</p><p>map key类型：必须支持&lt;运算符</p><p>数据库缓存一致： 并发操作导致不一致，本质上修改数据库和删除缓存耦合在一起，使得其他操作有可能读出脏数据 解决方案：解耦，延迟双删：写-&gt;删缓存-&gt;修改数据库-&gt;延时-&gt;再次删缓存 二：内存队列：写修改数据库，将数据id放入队列，消费者线程消费即可</p><p>浏览器： DNS解析（DNS缓存、OS缓存、路由器缓存、递归搜索）、尝试建立TCP连接、发送HTTP请求(get)、服务器处理请求（查询） 返回HTML，浏览器解析渲染、关闭TCP连接</p><p>线性探测、拉链、再哈希、公共溢出区</p><p>UDP对实时性要求高，数据准确性要求不是太高的场合、视频通话、QQ主要UDP为主，TCP为辅 ## Resource <a href="https://en.cppreference.com/w/">cppreference</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>INTERVIEW 0</title>
      <link href="/2019/02/28/INTERVIEW%200/"/>
      <url>/2019/02/28/INTERVIEW%200/</url>
      
        <content type="html"><![CDATA[<h2 id="造成网络延迟的可能原因">造成网络延迟的可能原因</h2><ol type="1"><li>WiFi所有用户上下行流量共用一个信道，当用户太多或者有人在下载大的资源时带宽不够，丢包；</li><li>线路质量不佳导致信噪比太低，比如光纤损耗太大等。</li></ol><h2 id="ipv6优势">IPv6优势</h2><ol type="1"><li>IPv4地址不够用，IPv6有<span class="math inline">\(2^{128}\)</span>个地址；</li><li>使用更小的路由表，转发速度更快；</li><li>扩充了DHCP协议，支持自动配置；安全性更高，有更好的头部格式，允许扩容......</li></ol><h2 id="找到单向无环链表的中间元素若结点总数为偶数返回第二个元素">找到单向无环链表的中间元素，若结点总数为偶数，返回第二个元素</h2><p><a href="https://leetcode.com/problems/middle-of-the-linked-list/">leetcode类似题目</a></p><p>只扫描一遍的做法：设两个指针，初始指向头结点，p1每次走两步，p2每次走一步，p1到达链尾，p2到达中间。假设链表带有头结点。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*单链表定义*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode* next;</span><br><span class="line">    <span class="built_in">ListNode</span>(<span class="keyword">int</span> x) :<span class="built_in">val</span>(x), <span class="built_in">next</span>(<span class="literal">NULL</span>) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">ListNode * <span class="title">middle</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        ListNode* fast = head;</span><br><span class="line">        ListNode* slow = head;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;amp;&amp;amp; fast-&amp;gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            fast = fast-&amp;gt;next-&amp;gt;next;</span><br><span class="line">            slow = slow-&amp;gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="给出四个点坐标判断是否是凸四边形">给出四个点坐标，判断是否是凸四边形</h2><p>不妨扩展下该问题，给出任意n个点，判断<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2108">是否凸多边形</a>。</p><p>凸多边形就是所有内角均小于180°，方法有好几种，这里利用定点凹凸性判断： 设当前三个连续的顶点<span class="math inline">\(P_0, P_1, P_2\)</span>，计算向量<span class="math inline">\(P_0P_1\)</span>, <span class="math inline">\(P_1P_2\)</span>的叉积，若结果为正，表示多边形顶点逆时针转；若结果为负，两向量夹角大于180°，则为凹多边形。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;p[<span class="number">600000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cross_p</span><span class="params">(point a, point b,point c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (b.x - a.x) * (c.y - b.y) - (c.x - b.x) * (b.y - a.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isConvex</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//叉积量值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cross_p</span>(p[i], p[(i + <span class="number">1</span>) % n], p[(i + <span class="number">2</span>) % n]) &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;p[i].x, &amp;p[i].y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isConvex</span>(n))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;convex\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;concave\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="两个位数在10万位以内的数乘法">两个位数在10万位以内的数乘法</h2><p><a href="https://leetcode.com/problems/multiply-strings/">高精度</a></p><p>高精度乘法，模仿我们笔算的过程。每一位<span class="math inline">\(res[i + j]\)</span>的构成：<span class="math inline">\(res[i + j] + carry + a[i] * b[j]\)</span>，注意去掉结果的前导0。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">multiply</span><span class="params">(string num1, string num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">120</span>], b[<span class="number">120</span>], res[<span class="number">250</span>];</span><br><span class="line">        <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(b));</span><br><span class="line">        <span class="built_in">memset</span>(res, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(res));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> lena = num1.<span class="built_in">size</span>(), lenb = num2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lena; i++)</span><br><span class="line">            a[i] = num1[lena - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenb; i++)</span><br><span class="line">            b[i] = num2[lenb - i - <span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lenb; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lena; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                res[i + j] = res[i + j] + a[j] * b[i] + carry;</span><br><span class="line">                carry = res[i + j] / <span class="number">10</span>;</span><br><span class="line">                res[i + j] %= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            res[i + lena] = carry;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len_res = lena + lenb;</span><br><span class="line">        <span class="comment">//去掉结果的前导0,若结果为0，保留一个0</span></span><br><span class="line">        <span class="keyword">while</span> (res[len_res - <span class="number">1</span>] == <span class="number">0</span> &amp;&amp; len_res &gt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len_res--;</span><br><span class="line">        &#125;</span><br><span class="line">        　　　　　　　<span class="comment">//使用字符串流将整数转为字符串</span></span><br><span class="line">        stringstream ans;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = len_res - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            ans &lt;&lt; res[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.<span class="built_in">str</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="其它">其它</h2><ol type="1"><li>操作系统：CPU调度，用户态&amp;内核态，IPC，各种锁，实时系统；</li><li>数据结构：判断有向图是否存在回路（拓扑排序、求最短路、关键路径、BFS），排序（快排、冒泡、选择、插入），链表是否有环；</li><li>计网：ARP、TCP/UDP、NAT、802.11ac协议，ping过程；</li><li>C++多态。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统 FAQ</title>
      <link href="/2019/02/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20FAQ/"/>
      <url>/2019/02/22/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20FAQ/</url>
      
        <content type="html"><![CDATA[<h2 id="进程和线程">进程和线程</h2><ol type="1"><li>联系: 线程存在于进程内部, 一个进程可以有多个线程, 一个线程只能属于一个进程.</li><li>区别: 进程是运行时程序的封装, 是系统进行资源分配和资源调度的基本单位; 线程是进程的子任务, 是CPU分配和调度的基本单位. 进程创建需要系统分配内存, CPU和文件句柄等资源, 销毁时要进行相应的回收, 因此进程的管理开销大; 线程开销小. 进程间不会互相影响; 一个线程崩溃会导致进程崩溃, 从而影响其他线程.</li></ol><h2 id="进程调度算法">进程调度算法</h2><ol type="1"><li>先来先服务(FCFS): 按照到达任务队列的顺序调度, 非抢占式, 易于实现, 效率低性能差, 有利于CPU繁忙型作业(长作业)不利于IO繁忙型(短作业).</li><li>短作业优先(SJF): 每次从任务队列选择预计时间最短的作业运行, 非抢占式, 性能最优, 平均周转时间最低, 吞吐量大, 不利于长作业, 会出现饥饿现象, 完全未考虑作业的优先级, 不能用于实时系统.</li><li>最短剩余时间优先: 首先选择预计时间最短的作业运行, 如果新作业服务时间小于当前作业的剩余时间, 抢占CPU.</li><li>高响应比优先: 在后备作业队列中选择响应比最高的, 非抢占式, 需要计算响应比耗费资源. <span class="math inline">\(响应比=1+\frac{等待时间}{服务时间}\)</span></li><li>时间片轮转(RR): 可以响应所有用户的请求, 适于分时系统.</li><li>多级反馈队列: UNIX使用的调度算法. 多个不同优先级的队列按照RR调度, 如果未完成就进入下一优先级, 新来进程可以根据优先级抢占.</li></ol><h2 id="死锁">死锁</h2><ol type="1"><li>原因: (1) 系统资源不足; (2) 进程推进顺序不当; (3) 资源分配不当.</li><li>必要条件: (1) 互斥访问: 一个资源每次只能被一个进程访问; (2) 占有并请求: 进程因请求资源阻塞时对已占有的资源保持不放; (3) 不可剥夺: 进程已经获取的资源不能被强制剥夺; (4) 循环等待: 多个进程间形成资源的循环等待关系.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Science Roadmap</title>
      <link href="/2019/02/15/Computer%20Science%20Roadmap/"/>
      <url>/2019/02/15/Computer%20Science%20Roadmap/</url>
      
        <content type="html"><![CDATA[<p>有感于国内令人发指的CS教育（尤其某校的计算机基本就是一堆SB在自嗨自娱自乐而已），决定自学为主。<br />主要资源是四大的比较完整的课程：video+reading+lab</p><ul><li><a href="https://github.com/prakhar1989/awesome-courses">Awesome CS Courses</a></li><li><a href="https://conanhujinming.github.io/comments-for-awesome-courses/">名校公开课程评价网</a></li><li><a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a></li><li><a href="https://github.com/huangrt01/CS-notes">RT Huang的自学笔记</a></li><li><a href="https://learn-sys.github.io/">LEARNSYS</a></li><li><a href="https://github.com/ossu/computer-science">OSSU</a></li></ul><p>video比较费时间，而且我看视频总是来不及反应，好像不太适合我，所以一般只在看不懂材料时去针对性地看看视频。（当然一些讲得非常好的视频除外）</p><h2 id="basics">Basics</h2><ul><li><strong>Programming Languages</strong>: 精通C，熟悉1~2门(Java/Python/C++/Go)，了解一门(Haskell/Rust/)，掌握debug技巧</li><li><strong>Tools/Frameworks</strong>: 熟悉Linux系统的各项操作，最好看下源码，掌握Git等工具和框架</li><li><strong>Math</strong>: Linear Algebra/Probability/Statistics/Combinatorial Mathematics/Discrete Mathematics/Calculus 现用现学</li><li><strong>Core Courses</strong>: DS/Algorithms/OS/Organization/Network/DB</li></ul><h2 id="coding-interview">Coding Interview</h2><p>这方面<strong>很弱很弱</strong>，要勤奋练习，经常性在blog<strong>分析总结</strong>，<strong>穿透做过的题目及变种</strong>。</p><p>不要抱着可能撞到原题的心态去准备，反复练习提升自己的能力，需要有较多的训练量。</p><p><strong>Python快速过，Java也行，千万不要用C++浪费生命！！！</strong></p><p>复杂度最优，Google Doc/白纸练习，Bug-Free<br />easy: 5-10min medium: 15-20min hard: 20-30min</p><p>G实习：中文2轮：45min, 自我介绍+warm-up+hard, 1~2道medium题，白板<br />G校招：4轮（3中+1英），同上</p><ul><li><strong>Data structure</strong>：哈希表、堆、AVL、链表动手实现一遍，B+树啥的都能扯扯~</li><li><strong>Algorithms</strong><br /><a href="https://leetcode-cn.com/problemset/lcof/">《剑指offer》</a><br /><a href="https://leetcode-cn.com/problemset/lcci/">Cracking the Coding Interview</a><br /><a href="https://leetcode.com/">Leetcode</a><br /><a href="https://www.nowcoder.com/">牛客笔试题</a><br /></li><li><strong>System design</strong></li><li>八股文<br /><a href="https://www.zhihu.com/question/308850392/answer/1324509357">如何学习设计模式？</a></li></ul><h2 id="projectspaper">Projects/Paper</h2><p><strong>选一个前沿的、不太讨厌的方向，研究研究，做点小项目</strong>，具体的方向可以参考<a href="http://csrankings.org/">CSRankings</a></p><ul><li>实习项目</li><li>学校大作业</li><li>兴趣项目：AutoML-ID, CMU 15-319, CS231n的3个小项目</li><li>开源项目</li></ul><h2 id="others">Others</h2><ul><li>GPA/数学/英语</li><li>比赛奖项</li><li>沟通交流能力</li><li>面试技巧<br />面经技巧只是锦上添花，最重要的还是及格的实力。nothing replaces hard work.<br />面经是告诉你这家公司面试的时候喜欢问哪些知识，而不是告诉你他们喜欢问哪些特定的问题。<br />更是一次需要充满着沟通与交流的谈话，让面试官认为他/她愿意成为你的同事</li></ul><p><strong>关于项目</strong><br />背景主要包括场景、问题定义、需求、自己负责的部分扮演的角色等等。<br />指出项目中的困难点和解决方案</p><p><strong>关于paper</strong>：research的背景</p><p><strong>关于做题</strong><br />1. 问清题目：数据范围是多少？这个数组的大小范围是多少？能不能给个样例？如果输入是这个，那输出应该是什么<br />2. 确认函数签名<br />3. 确认思路：修改输入数据<br />4. 确认corner case处理方式<br />5. 编码过程中不断交流<br />6. 主动测试：写完后不要急于告诉面试官写完了，手动跑一个样例：在屏幕上写出中间变量的当前取值，然后用鼠标光标告诉面试官现在程序跑到了哪一行代码，当前各个变量的取值是多少等等<br />7. 主动分析复杂度<br />8. 讨论算法的trade-off</p><p><strong>关于其它</strong><br />先拿一些自己不target的公司练练手<br />虽然我不太懂，但是可以试着说一下<br />说出自己的insight:cache不友好<br />获得监督信息与正反馈<br />模拟面试</p><h2 id="how-to-learn">How to learn</h2><p>It is very important to take classes around my future work. It doesn't matter you learn it slowly, the most important part is that you <strong>take it seriously</strong> and build a <strong>solid foundation</strong>.<br />根据大佬们的经验，一门课大概要花150-300小时，每天2小时至少也要2个半月，所以千万千万不要着急，不要急于求成，总想着完成任务，多多反思自己到底学到了什么？真的透彻地理解了吗？又有多少内化到自身的知识体系？<br />还有就是最好按照他们的课表时间上课，同时上的课最好不要超过2门（经过血泪实践，我只能1门单线程┭┮﹏┭┮，他们课程内容实在太充实了...，然后自己还有一堆屁事...）</p><p><strong>严格遵守学术规范</strong>，独立完成之后可以参考别人，修正自己。</p><p>Recently I've changed my way to learn new things. Previously I just wanted to understand the new things and tried to memorize all the details of a specific problem, or just translated others' materials into my words, which melted my brain and showed a very low efficiency. The reason why I learn things this way (passively) is mostly due to the Chinese's cramming education. But for me, heuristic teaching (actively) is more appropriate. The specific problem/model/algorithm is important, but the <strong>motivation</strong> is much more important. <strong>Everything has its motivation.</strong> So I decide to write my blogs with the following components:</p><ol type="1"><li>Motivation: What problems do we meet? Why propose this one?</li><li>Details: Mathematical derivation or tricky things.</li><li>Example: Use a handy example to illustrate.</li><li>Implementation: Code it out or use it to <strong>solve the problem</strong>.</li><li>Properties: <strong>When</strong> should/can we use the method? When shouldn't/can't? <strong>Why</strong>? What's the benefits and drawbacks if we use it?</li><li>Can we make some improvements on the off-the-shelf method for a specific problem?</li></ol><h2 id="todo-done-list">TODO &amp; DONE LIST</h2><p>Count the courses I've taken so far:</p><ol type="1"><li>Introduction to Computer Science. Harvard University<br />&quot;This is CS 50&quot;. It should be the first class of CS rather than Haoqiang Tan's C Programming Language.</li><li>Linear Algebra. Massachusetts Institute of Technology<br />If you want to learn Linear Algebra, just follow this one and you'll be fine.</li><li>Mathematics for Computer Science. Massachusetts Institute of Technology<br />Very interesting course but I only took several lectures. SAD~</li><li>Data Structures. University of California, Berkeley<br />Strong recommend for Data Structure. You'll pick up Java from the interesting projects.</li><li>Introduction to Computer Systems. Carnegie Mellon University<br />If you only want to take one system course, then select this one. But I haven't finished the whole lectures and labs. SAD again~</li><li>Introduction to Database Systems. Carnegie Mellon University<br />Hard for me. Just finished lab1. I'll come back one day~</li><li>Machine Learning. Stanford University<br />It's almost the first course I took after I found the true CS courses. But I forgot a lot. Sorry Andrew~</li><li>Positive Psychology. Harvard University<br />When I start to be anxious or depressed I'll go and find the lecture. Tal is an amazing teacher and I'm sure you'll become happier.</li><li>Convolutional Neural Networks for Visual Recognition. Stanford University<br />High quality, especially its readings.</li><li>Introduction to Computer Networking. Stanford University<br />Lab is amazing!</li></ol><p>Go + CS5412 + 6.828 + 6.824 + 6.031 + SICP + 6.033 + CS262</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP 3-Way Handshake</title>
      <link href="/2019/01/04/TCP%203-Way%20Handshake/"/>
      <url>/2019/01/04/TCP%203-Way%20Handshake/</url>
      
        <content type="html"><![CDATA[<p>TCP是面向连接的协议，其数据传输过程分为建立连接、数据传送、释放连接三个阶段。 ## 0 建立连接 建立连接的过程也就是常说的“三次握手”：</p><ul><li>客户端向服务器端发送一个SYN报文（SYN=1表示这是一个连接请求或连接接收报文），并随机选取一个起始序号x；</li><li>服务器端应答一个SYN报文，同时ACK（确认位）置1【ACK=1时TCP报文段首部中的ack（确认号字段）才有效】，随机选取一个服务器端的起始序号y，并将ack字段设为x+1，表示已经收到客户端发来的SYN报文，期待收到序号为x+1的下一个报文；</li><li><p>客户端应答一个ACK报文，将序号设为x+1，并且ack字段设为y+1，表示已经收到服务器端的SYN报文，期待收到序号为y+1的下一个报文。 <em>注：序列号seq也称ISN(Initial Sequence Number)</em> <img src="https://img-blog.csdnimg.cn/20190920214108996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="图片来自百度" /> 之所以要采用三次握手机制而不是两次或四次，要从握手机制的目的说起： 握手主要是为了确认<strong>双方的发送、接收能力</strong>是否正常，顺带初始化序号seq，为以后的数据传送做好准备，所以： 第一次握手：服务器收到客户端发来的网络包，<strong>服务器就明白</strong>客户端的发送能力、服务器的接收能力正常； 第二次握手：服务器发包，客户端收到后，<strong>客户端就明白</strong>服务器的发送、接收，客户端的发送、接收都是正常的； 二次握手后，客户端倒是全明白了，但是<strong>服务器端无法确认客户端能否正常接收、服务器是否正常发送</strong>，所以两次握手不够； 第三次握手：服务器收到客户端发送的网络包，服务器确认了自己上次的发送正常、客户端接收也正常，所以四次握手是多余的。 ## 1 补充问题</p></li><li>序列号(ISN)之所以随机生成，是为了避免被攻击（若固定，则下一次传送的ack就显而易见）；</li><li>前两次握手不可以携带数据，第三次可以携带。第一次握手服务器端接收能力未知，如果携带数据就可能丢失。第二次客户端接收能力未知，如果携带数据也可能丢失。第三次客户端知道服务器接收正常，并且自己已经处于ESTABLISHED状态；</li><li><p>服务器发出SYN报文后，处于SYN-RCVD状态，此时不同的连接请求会被放在<strong>半连接队列</strong>里，三次握手完成后的连接请求被放在<strong>全连接队列</strong>里。</p></li></ul><h2 id="连接释放">2 连接释放</h2><p>连接释放的过程也就是常说的“四次挥手”： P.S. <em>图中以客户端发起释放请求为例</em></p><ol type="1"><li>客户端发送释放请求，将FIN（终止位）置1，表示客户端已经发完数据，请求释放；</li><li>服务器发一个ACK报文，确认号ack为u+1，这时从客户端到服务器的连接被释放，处于<strong>半关闭状态</strong>；</li><li>如果服务器也要断开连接，就向客户端发送连接释放报文（FIN=1）；</li><li>客户端发送一个应答报文，序列号seq为u+1，等待一段时间（2MSL）确保服务器收到ACK报文，之后关闭连接。</li></ol><p><img src="https://img-blog.csdnimg.cn/20190920223118842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=,size_16,color_FFFFFF,t_70" alt="图片源自百度" /> 客户端之所以要等待2MSL时间才关闭，有两个原因：</p><ul><li>一旦服务器没有收到ACK报文，服务器就会重发FIN报文，客户端再次收到FIN报文，就知道之前发送的ACK报文丢失，会重置时间等待计时器为2MSL并重传ACK报文。 如果没有这段等待时间，万一服务器没有正常接收ACK报文，接下来重传的FIN报文段就无法到达客户端，服务器无法正常关闭。</li><li>客户端发完最后一个ACK报文，经过2MSL，本次连接产生的报文都会从网络中消失，避免下一次新连接出现本次旧的连接请求报文段。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell Sort</title>
      <link href="/2019/01/03/Shell%20Sort/"/>
      <url>/2019/01/03/Shell%20Sort/</url>
      
        <content type="html"><![CDATA[<h2 id="思想">思想</h2><p>希尔排序(Shell Sort)是基于插入排序的一种<strong>不稳定</strong>排序方法。 1，将整个序列分为h个子序列； 2，第一趟将每个子序列进行插入排序； 3，第二趟将增量缩小，重复2； 4，直至增量为1，就是简单插入排序。</p><p>eg: <img src="https://img-blog.csdn.net/20180707130824188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /> <img src="https://img-blog.csdn.net/20180707130836718?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /> ## 实现 ##</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAXSIZE 100</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    int a[MAXSIZE + 1];  //a[1]~a[MAXSIZE]存储元素</span><br><span class="line">    int length;</span><br><span class="line">&#125;Sqlist;</span><br><span class="line"></span><br><span class="line">/*升序排列*/</span><br><span class="line">void Shell_Sort(Sqlist* L)</span><br><span class="line">&#123;</span><br><span class="line">    int h = 1;</span><br><span class="line">    while (h &lt; L-&gt;length / 3)</span><br><span class="line">        h = 3 * h + 1;         //增量取值</span><br><span class="line">    while (h &gt;= 1)</span><br><span class="line">    &#123;</span><br><span class="line">        //从增量的那组进行插入排序</span><br><span class="line">        for (int i = h; i &lt;= L-&gt;length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int j = i;</span><br><span class="line">            int get = L-&gt;a[j];</span><br><span class="line">            //同组元素中与其前一个比较</span><br><span class="line">            while (j - h &gt;= 0 &amp;&amp; L-&gt;a[j - h] &gt; get)</span><br><span class="line">            &#123;</span><br><span class="line">                L-&gt;a[j] = L-&gt;a[j - h];</span><br><span class="line">                j = j - h;</span><br><span class="line">            &#125;</span><br><span class="line">            L-&gt;a[j] = get;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / 3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)</span><br><span class="line">&#123;</span><br><span class="line">    Sqlist L;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;, &amp;(L.length));</span><br><span class="line">    for (int i = 1; i &lt;= L.length; i++)</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;(L.a[i]));</span><br><span class="line"></span><br><span class="line">    Shell_Sort(&amp;L);</span><br><span class="line"></span><br><span class="line">    for (int i = 1; i &lt;= L.length; i++)</span><br><span class="line">        printf(&quot;%d &quot;, L.a[i]);</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复杂度">复杂度</h2><p>希尔排序最优时间复杂度<span class="math inline">\(O(n)\)</span>，最差情况下也突破了平方级别的运行时间。 对于最差情况，之前的冒泡、选择要消除逆序，采用交换相邻元素的方法，也就是每次只能消除一个逆序，那么希尔每次交换隔得很远的元素，每次可以消除多个逆序，这样就节省了大量的交换时间。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络 FAQ</title>
      <link href="/2019/01/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20FAQ/"/>
      <url>/2019/01/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%20FAQ/</url>
      
        <content type="html"><![CDATA[<h2 id="tcp连接">TCP连接</h2><p>建立TCP连接的过程需要使用一些系统调用</p><h2 id="tcp可靠传输">TCP可靠传输</h2><ul><li>校验和：伪首部+TCP header二进制相加取反</li><li>seq + ack</li><li>超时重传</li><li>流量控制：可变大小的滑动窗宽recv_win</li><li>拥塞控制：慢启动，拥塞避免，快速重传，快速恢复<br />发送方维持拥塞窗口cwnd记录网络链路的拥塞程度，发送窗口=min{recv_win, cwnd}</li></ul><ol type="1"><li>慢启动<br />cwnd指数增加{1, 2, 4, 8, 16, ...}，超过阈值时开始拥塞避免算法</li><li>拥塞避免<br />cwnd线性增加</li><li>快速重传<br />TCP收到乱序包时就会发ACK，发送方连续收到3个重复的ack时，慢启动阈值减半，cwnd设为阈值+3，线性增加</li><li>快速恢复<br />超时仍然没有收到ACK，慢启动阈值减半，cwnd=1慢启动</li></ol><h2 id="udp">UDP</h2><p>应用场景：实时音视频传输，DNS协议 - 对延迟要求高，可靠性要求低，无法忍受重传，需要看到实时的图像和声音，中间丢一帧完全没事。 - 网络非常可靠，不需要考虑UDP丢包的问题。 - NAT穿透只能用UDP</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notations</title>
      <link href="/2018/12/24/Notations/"/>
      <url>/2018/12/24/Notations/</url>
      
        <content type="html"><![CDATA[<p>下面四种记号是为了建立函数间的相对级别。 CLRS上的一张图很直观： <img src="https://img-blog.csdn.net/20180517130818654" alt="这里写图片描述" /></p><h2 id="大o记号"><strong>大O记号</strong></h2><p>定义：如果存在正常数<span class="math inline">\(c\)</span>和<span class="math inline">\(n_0\)</span>，使得当<span class="math inline">\(N\ge n_o\)</span>时<span class="math inline">\(T(N)\le cf(N)\)</span>，记<span class="math inline">\(T(N)=O(f(N))\)</span>。</p><p>举个栗子： 当<span class="math inline">\(N &lt; 1000\)</span>时，<span class="math inline">\(1000N\gt N^2\)</span>，但<span class="math inline">\(N^2\)</span>增长率更大，所以最终<span class="math inline">\(N^2\)</span>会更大，即<span class="math inline">\(O(N^2)=1000N\)</span>。</p><p>也就是说，总会存在某个点<span class="math inline">\(n_0\)</span>，从这个点以后<span class="math inline">\(cf(N)\)</span>至少和<span class="math inline">\(T(N)\)</span>一样大，忽略常数因子，即<span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>小于等于<span class="math inline">\(f(N)\)</span>的增长率。</p><p>那么为什么这个常数因子<span class="math inline">\(c\)</span>可以忽略呢？ 当<span class="math inline">\(N\ge n_o\)</span>时，<span class="math inline">\(T(N)\le cf(N)\)</span>，也就是<span class="math inline">\(\frac{T(N)}{f(N)}\le c\)</span>。此时如果<span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>大于<span class="math inline">\(f(N)\)</span>的增长率，那么<span class="math inline">\(\frac{T(N)}{f(N)}\)</span>不可能小于某个常数，也就是<span class="math inline">\(c\)</span>不存在，与我们的前提条件矛盾，所以说忽略掉常数因子后，<span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>仍然小于等于<span class="math inline">\(f(N)\)</span>的增长率。</p><p>那么既然<span class="math inline">\(T(N)\)</span>是以不快于<span class="math inline">\(f(N)\)</span>的速度增长，也就可以说<span class="math inline">\(f(N)\)</span>是<span class="math inline">\(T(N)\)</span>的一个上界(upper bound)，即<strong>最坏情况</strong>。</p><h2 id="omega记号"><strong><span class="math inline">\(\Omega\)</span>记号</strong></h2><p>定义：如果存在正常数<span class="math inline">\(c\)</span>和<span class="math inline">\(n_0\)</span>，使得当<span class="math inline">\(N\ge n_o\)</span>时<span class="math inline">\(T(N)\ge cg(n)\)</span>，记<span class="math inline">\(T(N)=\Omega(g(n))\)</span>。</p><p>与上述大O的分析类似，可知： <span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>大于等于<span class="math inline">\(g(N)\)</span>的增长率，<span class="math inline">\(g(N)\)</span>是<span class="math inline">\(T(N)\)</span>的一个下界(lower bound)，即<strong>最好情况</strong>。</p><h2 id="theta记号"><strong><span class="math inline">\(\Theta\)</span>记号</strong></h2><p>定义：当且仅当<span class="math inline">\(T(N)=\Omega(h(n))\)</span>、<span class="math inline">\(T(N)=O(h(n))\)</span>时， <span class="math inline">\(T(N)=\Theta(f(n))\)</span>。</p><p>那么这个就是说<span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>等于<span class="math inline">\(h(N)\)</span>的增长率，即<strong>最坏情况和最好情况相同</strong>。</p><h2 id="小o记号"><strong>小o记号</strong></h2><p>定义：若<span class="math inline">\(T(N)=O(p(n))\)</span>且<span class="math inline">\(T(N)\neq\Theta(p(n))\)</span>时， <span class="math inline">\(T(N)=o(f(n))\)</span>。</p><p>与大O不同，小o表示<span class="math inline">\(T(N)\)</span>的<strong>增长率</strong>小于<span class="math inline">\(p(N)\)</span>的增长率，不包括等于。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nakamori Akina</title>
      <link href="/2018/11/18/Nakamori%20Akina/"/>
      <url>/2018/11/18/Nakamori%20Akina/</url>
      
        <content type="html"><![CDATA[<p>听过中森明菜的歌以后，一直想写点什么。恰好前段时间看过她的一个<a href="https://b23.tv/av13810011">访谈</a>，节目里已经39岁左右的明菜看着已经有些衰老，但是那份属于她的天真却好像要溢出屏幕。</p><p>节目里主持人问她为什么不用手机还在用电话卡，像是昭和时代穿越来的一样，她回答说自己没什么朋友去联系，一个人也不怎么去其他地方。看到这，我马上想到了《难破船》的热评：</p><p><img src="https://img2020.cnblogs.com/blog/1260581/202005/1260581-20200518233734136-841229768.jpg" /></p><p>你可能很难想象患有严重社交障碍的她当年是怎样的风姿绰约： 安利1：李健的《车站》大家应该都听过，翻唱的水准很高，不过我还是更喜欢<a href="https://b23.tv/av5270243">《駅》</a>，这是竹内玛莉亚专门为中森明菜创作的歌曲； 安利2：<a href="https://b23.tv/av7033508">《难破船》</a>的混剪视频，惊为天人。</p><p>上世纪70年代的日本乐坛是山口百惠的天下，然而在1980年，只有20岁的山口百惠突然宣布退出娱乐圈，随后与三浦友和结婚，如此退隐使得日本乐坛出现了一片巨大的空白。</p><p>中森明菜通过选秀节目出道，甜美的外表、独特的嗓音加上经纪公司的宣传，她迅速蹿红，被誉为继山口百惠之后新的“歌姬”。</p><p>80年代中期，凭借《ミ・アモーレ》和《DESIRE -情热-》，中森明菜连续两年获得日本唱片大赏。热情的舞台形象和不俗的唱功使得她成为了当时日本乐坛无可动摇的霸主，甚至被人称为“昭和时代的Lady Gaga”。后来据徐克回忆：《倩女幽魂》的聂小倩本来是邀请中森明菜扮演的，不过被拒绝了。</p><p>与在事业上的蒸蒸日上不同的是，她与近藤真彦的恋情危机开始逐渐爆发。近藤被誉为“日本第一渣男”，与松田圣子、梅艳芳等女星之间有着无数绯闻，媒体的报导更是推波助澜，中森明菜受到了很大的打击。也正是在这时候，她发布了单曲《难破船》，曲风开始变得哀伤深沉。</p><p>爱情的坎坷加上家人的天坑，中森明菜于1989年在近藤的住所割腕自杀，不过在送往医院后得救。在这一年的最后一天，为了挽救不断下滑的人气，近藤哄骗着明菜说会在记者会上宣布两人结婚，并特意在会场挂上了金屏风（婚礼常用装饰）。</p><p>傻傻的明菜出席之后，近藤在记者会上翻脸，把所有错误全部归因于明菜一个人，并且声称明菜的自杀与自己丝毫没有关系，也完全没有和明菜结婚的打算。而深陷爱情之中的明菜一个人承担了所有过错，在发布会上道歉。</p><p>之后近藤迅速与某富家女子成婚，并且利用权势限制明菜的发展。</p><p>回过头来再去听《难破船》，只觉得情到深处无怨尤：</p><blockquote><p>折れた翼広げたまま 展开折断的翅膀</p><p>あなたの上に落ちて行きたい</p><p>好想坠落在你身上</p><p>海の底へ沈んだなら 如果能沉入海底</p><p>泣きたいだけ抱いてほしい 好想你能拥抱我到尽情哭泣</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Arts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏感词过滤</title>
      <link href="/2018/09/24/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/"/>
      <url>/2018/09/24/%E6%95%8F%E6%84%9F%E8%AF%8D%E8%BF%87%E6%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="需求">需求</h2><p>在一个非常大的文件中存在着很多敏感词，现在需要将这些敏感词全部替换为*，时间响应要求较高（几百毫秒）。 ## 思路 要做这个事，首先需要知道哪些词是敏感的，因此需要有一个敏感词词库。 例如文本是&quot;abcdefghi&quot;，长度为<span class="math inline">\(n\)</span>，敏感词库是{&quot;de&quot;, &quot;bca&quot;, &quot;bcf&quot;}，词库长度为<span class="math inline">\(l_1\)</span>，每个词的长度为<span class="math inline">\(l_2\)</span>。</p><p>比较直接的做法：对每个敏感词，利用暴力匹配或KMP算法查找并作替换，这些单模式串匹配算法的缺点很明显，需要多次扫描文本<span class="math inline">\(O(n(l_1+l_2))\)</span>。</p><p>目前主流的做法主要是多模式串匹配算法： 1. Trie树：将敏感词库建树，用3个指针去搞，<a href="https://zhuanlan.zhihu.com/p/65115496">具体在这里</a>，查询复杂度<span class="math inline">\(O(nl_2)\)</span>，建树复杂度<span class="math inline">\(O(l_1l_2)\)</span>。 2. AC自动机：是Trie树的扩展，增加了一个fail指针，避免指针回溯，<a href="https://www.cnblogs.com/shengyang17/p/13719653.html">具体在这里</a>，复杂度一般优于Trie树。 3. DFA确定有穷自动机：利用状态转移，<a href="https://blog.csdn.net/weixin_36586120/article/details/113482752">具体在这里</a>，时间复杂度<span class="math inline">\(O(n)\)</span>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Onedrive File Open Problem</title>
      <link href="/2018/08/16/Onedrive%20File%20Open%20Problem/"/>
      <url>/2018/08/16/Onedrive%20File%20Open%20Problem/</url>
      
        <content type="html"><![CDATA[<p>在用Onenote 2016写笔记时，同步到Onedrive后就变成了Internet快捷方式，而且直接打开时会出现提示： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108200433406-2018295429.png" alt="image" /></p><h2 id="原因">原因</h2><p>用Onenote客户端在Onedrive上创建的笔记本是一种特殊文件，用Onedrive客户端将文件同步到本地的话，就会变成Internet快捷方式，不能直接打开； 但是如果用Onedrive网页版的话，就可以正常使用。</p><h2 id="解决">解决</h2><p>在Onenote客户端，“文件”-&gt;“打开”，找到你的笔记本，打开即可看到内容。</p><h2 id="参考">参考</h2><p><a href="http://cn.onenotegem.com/24120352653838239064/-onedrive-onenote-internet-url">onedrive-onenote-internet-url</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON Introduction</title>
      <link href="/2018/07/14/JSON%20Introduction/"/>
      <url>/2018/07/14/JSON%20Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="理解">理解</h2><p>JSON（JavaScript Object Notation），一种轻量级的数据交换格式，基于JS的一个子集，但其数据格式与语言无关。 通俗来说，如果你是PHP，要和JS互相发送信息，那么这时候就可以先将PHP发的信息转为JSON，再发给JS。 那么有人要问了，为什么自己不能直接学会PHP和JS，直接先将PHP的信息转为JS，不就OK了？ 没错，但是如果你要发给C++，发给Python，发给其他各种各样的语言呢？难道你要学会所有语言，再去发信息？显然不可能。 所以： &gt; You are now able to learn only one programming language, in addition to the communications language, JSON, in order to communicate with ANY other programming language.</p><p>但要注意：JSON并不是编程语言，只是一种规定的数据格式，这种格式的数据便于计算机处理。 JSON比较规范的定义是： &gt; JSON is the text grammer/format for the information that is being sent between programming language.</p><p>除了JSON以外，还有一种用于交流的数据格式，XML（Extensiable Markup Language）。但是JSON更加流行。</p><h2 id="格式">格式</h2><p>JSON有两种结构： 1，Object：对象用<code>&#123;</code>开始，用<code>&#125;</code>结束，对象中的一系列非排序的pair中，名称和值之间用<code>:</code>分开； 2，Array：数组用<code>[</code>开始，用<code>]</code>结束，数组成员之间用<code>,</code>分开。 名称（name）是字符串； 值（value）可以是：字符串、数值、对象、布尔值、数组或者<code>null</code>。 字符串：用<code>&quot;&quot;</code>表示； 数值：可以是小数或负数，也可用<code>e</code>、<code>E</code>表示为指数格式； 对象：就是上述的Object； 布尔值：<code>true</code>或<code>false</code>； 数组：就是上述的Array。 举个栗子： <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object &amp; Array</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Andrew&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="string">&quot;36&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;number&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;mobile&quot;</span>: <span class="string">&quot;12345678&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;fax&quot;</span>: <span class="string">&quot;87654321&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;address&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;city&quot;</span>: <span class="string">&quot;Beijing&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;code&quot;</span>: <span class="string">&quot;10000&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考">参考</h2><p><a href="https://www.quora.com/What-is-JSON-2/answers/50464172?share=8534699f&amp;srid=5OZ0m">quora</a> <a href="https://zh.wikipedia.org/wiki/JSON">wiki</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>System Call</title>
      <link href="/2018/07/02/System%20Call/"/>
      <url>/2018/07/02/System%20Call/</url>
      
        <content type="html"><![CDATA[<h2 id="内容">内容</h2><p>设计系统调用，将系统的相关信息(CPU型号、操作系统的版本号、系统中的进程等类似于Windows的任务管理器的信息)以文本形式列表显示于屏幕，并编写用户程序予以验证。</p><h2 id="思想">思想</h2><ul><li>系统调用是应用程序和操作系统内核之间的功能接口，可以使用户使用操作系统提供的有关设备管理、输入输出系统、文件系统和进程控制、通信以及存储管理等方面的功能，不必了解系统程序的内部结构和有关硬件细节，从而减轻用户负担、保护系统以及提高系统资源利用率的作用。</li><li>模块是在内核空间运行的程序，实际上是一种目标文件，不能单独运行但其代码可在运行时链接到系统中作为内核的一部分运行或卸载。Linux内核模块是一个编译好的、具有特定格式的独立目标文件，用户可以通过系统提供的一组与模块相关的命令将模块加载进内核，当内核模块被加载后，有如下特点：</li><li>与内核一起运行在相同的内核态和内核地址空间；</li><li>运行时与内核具有同样的特权级；</li><li>可方便地访问内核中的各种数据结构。</li><li>内核模块还可以很容易地被移出内核，当用户不再需要某模块功能时，可以从内核卸载以节省系统主存开销。</li><li>用户修改代码后，只需重新编译加载模块，不必重新编译内核和引导系统。</li></ul><h2 id="基础知识">基础知识</h2><ul><li>内核模块编程与用户态编程的区别：</li></ul><ol type="1"><li>内核模块编程不能使用C函数库，内核模块只能使用一些内核函数。比如，输出信息时使用内核函数<code>printk</code>，而不是标准库函数<code>printf</code>。</li><li>内核模块代码运行在核心态，这意味着函数使用的栈是核心栈，这个空间非常有限，一般是4KB或者8KB，所以不能定义占用很大空间的自动变量。</li><li>内核代码为了节省开销，不能使用浮点运算。</li></ol><ul><li>典型内核模块组成：</li></ul><ol type="1"><li>头文件声明。其中<code>module.h</code>和<code>init.h</code>是必不可少的。<code>Module.h</code>包含加载模块时需要的函数和符号定义；<code>init.h</code>包含模块初始化和清理函数的定义。如果在加载时允许用户传递参数，模块中还应包含<code>moduleparam.h</code>头文件。</li><li>模块许可声明。从内核2.4.10版本开始，模块必须通过<code>MODULE_LICENSE</code>宏声明此模块的许可证，否则在加载模块时会显示&quot;kernel tainted(内核被污染)&quot;的警告信息。从<code>linux/module.h</code>文件中可以看到，被内核接受的许可证有GPL、GPL v2、GPL and additional rights、Dual BSD/GPL、Dual MPL/GPL、Dual MIT/GPL和Proprietaty。</li><li>初始化和清理函数声明。 内核模块必须调用宏<code>module_init</code>和<code>module_exit</code>去注册初始化和清理函数。初始化和清理函数必须在宏<code>module_init</code>和<code>module_exit</code>使用前定义，否则会出现编译错误。这两个函数配对使用，例如当初始化函数申请了一个资源，那么清理函数就应该释放这个资源，使得模块不留下任何副作用。除了模块初始化函数和清理函数，还可以根据需要设计编写其它函数。</li></ol><ul><li>proc文件系统 在linux操作系统中，提供了一套在用户态检查内核状态和系统特征的机制，就是进程文件系统(process file system)。 Proc文件系统将进程信息、系统的硬件信息(包括CPU、内存状态及网卡等各种硬件设备)、系统相关机制(中断、I/O)等内容全部映射为虚拟的linux文件。它以一种特殊的文件系统的方式，为访问系统内核数据的操作提供接口。这些文件的内容都不存在于任何存储设备上，而是在读/写的时候才根据系统中的有关信息生成出来，或者映射到系统中的有关变量或者数据结构。 系统中当前运行的每一个每一个进程都有一个对应的目录在/proc下，以进程的ID为目录名： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108195514838-1179859005.png" alt="image" /></li></ul><p>除了与进程有关的子目录，/proc还有一些内核信息的目录： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108195533943-914673534.png" alt="image" /></p><h2 id="实现">实现</h2><p><a href="https://github.com/EIMadrigal/system_call">源代码、实现过程及结果</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>进程软中断通信</title>
      <link href="/2018/06/30/%E8%BF%9B%E7%A8%8B%E8%BD%AF%E4%B8%AD%E6%96%AD%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/06/30/%E8%BF%9B%E7%A8%8B%E8%BD%AF%E4%B8%AD%E6%96%AD%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="描述">描述</h2><p>使用系统调用fork()创建两个子进程，再用系统调用signal()让父进程捕捉键盘上发出的中断信号（即按ctrl+c键），当父进程接收到这两个软中断的某一个后，父进程用系统调用kill()向两个子进程分别发出整数值为16和17软中断信号，子进程获得对应软中断信号，然后分别输出下列信息后终止： Child process 1 is killed by parent !! Child process 2 is killed by parent !! 父进程调用wait()函数等待两个子进程终止后，输入以下信息，结束进程执行： Parent process is killed!!</p><p>流程图： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108194427772-238897206.png" alt="image" /></p><h2 id="实现">实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> wait_flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop1</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> pid1,pid2;</span><br><span class="line"></span><br><span class="line">    signal(<span class="number">2</span>,stop1);   <span class="comment">//signal 3 is ctrl+\,signal 2 is ctrl+c</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((pid1 = fork()) == <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(pid1 &gt; <span class="number">0</span>)      <span class="comment">//now is in the parent process</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((pid2 = fork()) == <span class="number">-1</span>);   <span class="comment">//creat child process 2</span></span><br><span class="line">        <span class="keyword">if</span>(pid2 &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sleep(<span class="number">5</span>);       <span class="comment">//sleep函数被信号中断后，就会导致延时失效，直接跳到sleep的下一行</span></span><br><span class="line">            kill(pid1,<span class="number">16</span>);  <span class="comment">//kill process1,send 16</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">            kill(pid2,<span class="number">17</span>); <span class="comment">//kill process2, send 17</span></span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nParent process is killed!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            signal(<span class="number">17</span>,stop2);   <span class="comment">//wait for 2 about 17</span></span><br><span class="line">            <span class="keyword">while</span>(wait_flag)</span><br><span class="line">                ;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\nChild process 2 is killed by parent!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        signal(<span class="number">16</span>,stop2);</span><br><span class="line">        <span class="keyword">while</span>(wait_flag)</span><br><span class="line">            ;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\nChild process 1 is killed by parent!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);   <span class="comment">//execute normally and quit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nParent process catches the interruption signal!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stop2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    wait_flag = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nChild process catches the interruption signal!\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果">结果</h2><p>5s内没有按终止键： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108194549740-1526578900.png" alt="image" /></p><p>5s内按下ctrl+c： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108194609530-785223659.png" alt="image" /></p><h2 id="附">附</h2><p>系统调用signal(sig,function)：捕捉中断信号sig后执行function规定的操作。 参数定义：<code>int sig</code>，<code>void* func()</code> sig共有19个值： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108194710456-891175051.png" alt="image" /></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Sorting</title>
      <link href="/2018/05/25/Sorting/"/>
      <url>/2018/05/25/Sorting/</url>
      
        <content type="html"><![CDATA[<h2 id="bubble-sort">Bubble Sort</h2><p>冒泡排序也许是大部分人CS生涯里学到的第一种排序算法，它的基本思想是：依次比较两个相邻记录的关键字，如果逆序就进行交换，直到没有逆序的记录。</p><p>每一趟排序可以将前<span class="math inline">\(i\)</span>个元素的最大值冒泡到最后，因此共需<span class="math inline">\(n-1\)</span>趟；每一趟都要比较<span class="math inline">\(j\)</span>和<span class="math inline">\(j+1\)</span>的值，因此<span class="math inline">\(j\)</span>取值为<span class="math inline">\([0,i-1]\)</span>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">                <span class="built_in">swap</span>(nums[j], nums[j + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt; r; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[k] &gt; nums[k + <span class="number">1</span>])</span><br><span class="line">            <span class="built_in">swap</span>(nums[k], nums[k + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bubble</span>(nums, l, r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序也是可以稍稍优化的：试想如果序列是<span class="math inline">\([2,1,3,4,5]\)</span>，其实我们只需交换前两个元素，即第一趟有交换，走完第二趟发现没有交换时就可以结束了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> has_swap = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span> &amp;&amp; has_swap; --i) &#123;</span><br><span class="line">        has_swap = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &gt; nums[j + <span class="number">1</span>])</span><br><span class="line">                <span class="built_in">swap</span>(nums[j], nums[j + <span class="number">1</span>]);</span><br><span class="line">                has_swap = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于最后优化的代码，可以看到： 最好的情况就是待排序列已经全部有序，这样要进行<span class="math inline">\(n-1\)</span>次比较，时间复杂度O(n)； 最坏的情况就是待排序列全部逆序，需要进行n(n-1)/2次比较，并且还有等数量级的交换，时间复杂度<span class="math inline">\(O(n^2)\)</span>。</p><h2 id="selection-sort">Selection Sort</h2><p>所谓选择排序，就是持续选择<span class="math inline">\([i+1,n-1]\)</span>中最小的元素并与<span class="math inline">\(i\)</span>交换，因此前面的部分必然全局有序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selection_sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> min_id = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j] &lt; nums[min_id]) min_id = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">swap</span>(nums[i], nums[min_id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序需要N次交换以及<span class="math inline">\(\frac{N^2}{2}\)</span>次比较，数据移动次数与数组大小呈线性关系，移动次数是最少的。 时间复杂度<span class="math inline">\(O(n^2)\)</span>。</p><h2 id="insertion-sort">Insertion Sort</h2><p>插入排序其实就是打牌：每次拿到一张牌<span class="math inline">\(i\)</span>，从<span class="math inline">\(i-1\)</span>开始向前扫描寻找第一个使得<span class="math inline">\(cur&gt;nums[j]\)</span>的位置<span class="math inline">\(j\)</span>，找到位置后将<span class="math inline">\([j+1,i-1]\)</span>所有元素向后移一位，接着将拿到的牌放到<span class="math inline">\(j+1\)</span>。不能保证前面的部分全局有序，因为后面拿到的牌可能是最小的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = nums[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; cur &lt; nums[j]) &#123;</span><br><span class="line">            nums[j + <span class="number">1</span>] = nums[j];</span><br><span class="line">            --j;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[j + <span class="number">1</span>] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好情况：元素全部有序，<span class="math inline">\(N-1\)</span>次比较、<span class="math inline">\(0\)</span>次交换；复杂度<span class="math inline">\(O(n)\)</span>。 最坏情况：元素全部逆序，大约<span class="math inline">\(\frac{N^2}{2}\)</span>次比较和<span class="math inline">\(\frac{N^2}{2}\)</span>次交换，复杂度<span class="math inline">\(O(n^2)\)</span>。 平均情况下：大约<span class="math inline">\(\frac{N^2}{4}\)</span>次比较和<span class="math inline">\(\frac{N^2}{4}\)</span>次交换，复杂度<span class="math inline">\(O(n^2)\)</span>。 ## 折半插入排序 直接插入排序前面的子序列是有序的，所以如果是顺序表，那么可以先折半查找出元素的待插入位置，再统一移动该位置之后的所有元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">void insertionSortOptimized(int A[], int n)</span><br><span class="line">&#123;</span><br><span class="line">    //将A[i]插入到合适位置</span><br><span class="line">    for (int i = 1; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int tmp = A[i];</span><br><span class="line">        int low = 0, high = i - 1;</span><br><span class="line">        while (low &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            int mid = (low + high) &gt;&gt; 1;</span><br><span class="line">            if (A[mid] &gt; tmp)</span><br><span class="line">            &#123;</span><br><span class="line">                high = mid - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                low = mid + 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //统一后移元素</span><br><span class="line">        for (int j = i - 1; j &gt;= low; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            A[j + 1] = A[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        A[low] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：折半插入排序将元素比较次数减少为<span class="math inline">\(O(nlogn)\)</span>，但是移动次数依然是<span class="math inline">\(O(n^2)\)</span>，故总的时间复杂度为<span class="math inline">\(O(n^2)\)</span>。</p><h2 id="merge-sort">Merge Sort</h2><p>归并排序是将几个有序表归并为一个新的有序表，初始时可以看作<span class="math inline">\(n\)</span>个有序子表，2路归并排序将其合并为<span class="math inline">\(n/2\)</span>个有序子表：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">tmp</span><span class="params">(high - low + <span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = low; <span class="comment">// 左有序开始位置</span></span><br><span class="line">    <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">// 右有序开始位置</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[i] &lt; num[j]) &#123;</span><br><span class="line">            tmp[k++] = num[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[k++] = num[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        tmp[k++] = num[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high)</span><br><span class="line">        tmp[k++] = num[j++];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">        num[low + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mid = (low + high) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">mergeSort</span>(num, low, mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(num, mid + <span class="number">1</span>, high);</span><br><span class="line">    <span class="built_in">Merge</span>(num, low, mid, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：需要辅助数组，空间复杂度<span class="math inline">\(O(n)\)</span>；<br />每一趟归并<span class="math inline">\(O(n)\)</span>，需要<span class="math inline">\(O(logn)\)</span>趟归并，故时间复杂度<span class="math inline">\(O(nlogn)\)</span>。</p><h2 id="heap-sort">Heap Sort</h2><p>堆是一种将数组看作complete binary tree的数据结构，分为大顶堆（parent&gt;=children）和小顶堆（parent&lt;=children），由于父结点和孩子结点这种奇妙的大小关系，堆也被用来做排序了...对于一颗完全二叉树，结点<span class="math inline">\(i\)</span>的父结点为<span class="math inline">\((i-1)//2\)</span>，孩子结点为<span class="math inline">\(2i+1,2i+2\)</span>。</p><p>排序前先要建堆，有2种主要的建堆方法（以大顶堆为例）：</p><ol type="1"><li>Top-down<br />Top-down的方式主要通过<code>HeapInsert</code>的方法，从空heap开始，每次插入并向上调整<code>sift_up</code>一个元素，复杂度<span class="math inline">\(O(nlgn)\)</span>。</li><li>Bottom-up<br />Bottom-up的方式主要依赖于一种叫做<code>heapify</code>的操作，你也可以叫它嬉皮化。对某个结点a进行<code>heapify</code>非常简单：对比a以及a两个孩子<span class="math inline">\(c_1,c_2\)</span>的值，如果a是最大的，操作结束；否则将a与<span class="math inline">\(max(c_1,c_2)\)</span>交换，递归直到a变为叶子结点或者a是三者中最大值，<code>heapify</code>操作的复杂度为<span class="math inline">\(O(lgn)\)</span>。<br />可以发现：一次<code>heapify</code>下沉操作<code>sift_down</code>只能保证从a向下交换的路径上的每一棵局部小子树满足堆的性质（即只对原数组的部分位置进行了调整），并不能保证整棵树都满足堆的性质，甚至无法保证向下交换的整条路径满足根结点最大（如<code>[3 2 4 0 1 6 8]</code>对根操作后变为<code>[4 2 8 0 1 6 3]</code>），所以为了建堆，需要从最后一个非叶子结点<span class="math inline">\((n-1-1)//2\)</span>（也即最后一个结点的父结点）开始，对之前的每个结点都进行<code>heapify</code>操作，这样就可以保证整棵树都满足堆的性质。时间复杂度为<span class="math inline">\(O(n)\)</span>，<a href="https://stackoverflow.com/questions/9755721/how-can-building-a-heap-be-on-time-complexity">How can building a heap be O(n) time complexity?</a><br />那么<code>heapify</code>建堆能不能从前向后进行呢？答案是不能，还是上面那个例子。从前往后最大元素调不到堆顶，从后往前则已经保证了父结点是最大的，因此最大元素可以一直向上调。</li></ol><p>建好堆后，堆顶元素即为最大值，此时将堆顶（数组的第一个元素）和最后一个元素交换，则最后一个元素有序（最大值），但破坏了大顶堆性质，对堆顶元素进行<code>heapify</code>下沉操作（只需<code>heapify</code>前n-1个元素），保持大根堆即可： <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在[start, end]范围内对nums[start]向下调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">2</span> * start + <span class="number">1</span>, right = <span class="number">2</span> * start + <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> max_idx = start;</span><br><span class="line">    <span class="keyword">if</span> (left &lt;= end &amp;&amp; nums[left] &gt; nums[max_idx]) max_idx = left;</span><br><span class="line">    <span class="keyword">if</span> (right &lt;= end &amp;&amp; nums[right] &gt; nums[max_idx]) max_idx = right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (max_idx != start) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(nums[start], nums[max_idx]);</span><br><span class="line">        <span class="built_in">heapify</span>(nums, max_idx, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapify_iter</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> parent = start, child = <span class="number">2</span> * parent + <span class="number">1</span>;  <span class="comment">// parent和child作为双指针迭代</span></span><br><span class="line">    <span class="keyword">while</span> (child &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child + <span class="number">1</span> &lt;= end &amp;&amp; nums[child + <span class="number">1</span>] &gt; nums[child]) ++child;</span><br><span class="line">        <span class="keyword">if</span> (nums[parent] &gt;= nums[child]) <span class="keyword">break</span>;  <span class="comment">// 父亲最大无法继续下沉</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">swap</span>(nums[parent], nums[child]);</span><br><span class="line">            parent = child;</span><br><span class="line">            child = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_heap</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> last_idx = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (last_idx - <span class="number">1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="built_in">heapify</span>(nums, i, last_idx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">build_heap</span>(nums);</span><br><span class="line">    <span class="keyword">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="built_in">swap</span>(nums[<span class="number">0</span>], nums[i]);</span><br><span class="line">        <span class="built_in">heapify</span>(nums, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> Bottom-up方式的堆排序时间复杂度<span class="math inline">\(O(nlogn)\)</span>。<br />一般求前<span class="math inline">\(K\)</span>大元素都采用堆排序，因为只需要调整<span class="math inline">\(K\)</span>次，故<span class="math inline">\(O(nlogK)\)</span>，而快排要将所有元素排完后才能取出前<span class="math inline">\(K\)</span>个。</p><h2 id="希尔排序">希尔排序</h2><p>基本思想：将待排序表分为若干<span class="math inline">\(A[i], A[i+d], A[i+2d]...\)</span>子表，<span class="math inline">\(d\)</span>称为增量，对这些子表执行直接插入排序，当整个表中的元素“基本有序”时，对整个表来一次直接插入排序。 由于需要快速定位某个子表中的元素，所以只能用于顺序表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void shellSort(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    const int n = nums.size();</span><br><span class="line">    for (int d = n &gt;&gt; 1; d &gt; 0; d &gt;&gt;= 1) // 增量选之前的一半</span><br><span class="line">        for (int i = d; i &lt; n; ++i)  // 将nums[i]插入有序子表</span><br><span class="line">            if (nums[i] &lt; nums[i - d]) &#123;</span><br><span class="line">                int tmp = nums[i];</span><br><span class="line">                int j;</span><br><span class="line">                // 查找插入位置</span><br><span class="line">                for (j = i - d; j &gt;= 0 &amp;&amp; tmp &lt; nums[j]; j -= d)</span><br><span class="line">                    nums[j + d] = nums[j];  // 后移</span><br><span class="line">                nums[j + d] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：时间复杂度依赖于选取的增量序列，大约是<span class="math inline">\(O(n^{1.3})\)</span>，最坏是<span class="math inline">\(O(n^2)\)</span>。</p><h2 id="quick-sort">Quick Sort</h2><p>分治。 选一个<code>pivot</code>，将比<code>pivot</code>小的元素放在左边，比<code>pivot</code>大的元素放在右边，对左右两个子数组递归调用<code>QuickSort</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数组共分为3段：</span></span><br><span class="line"><span class="comment"> * (l, smaller_idx]：比pivot小的</span></span><br><span class="line"><span class="comment"> * [smaller_idx + 1, i - 1]：比pivot大的</span></span><br><span class="line"><span class="comment"> * [i, r]：还未访问的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));  <span class="comment">// use system time as seed</span></span><br><span class="line">    <span class="keyword">int</span> pivotIndex = l + <span class="built_in">rand</span>() % (r - l + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">swap</span>(nums[pivotIndex], nums[l]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> smaller_idx = l;  <span class="comment">// 当前时刻刚好小于等于pivot的元素索引</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &lt;= nums[l]) &#123;  <span class="comment">// 发现比pivot小的</span></span><br><span class="line">            <span class="comment">// 加一后指向第一个比pivot大的</span></span><br><span class="line">            <span class="built_in">swap</span>(nums[++smaller_idx], nums[i]);  <span class="comment">// 将比pivot小的nums[i]换到前面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(nums[smaller_idx], nums[l]);</span><br><span class="line">    <span class="keyword">return</span> smaller_idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot = num[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; num[high] &gt;= pivot) &#123;</span><br><span class="line">            --high;</span><br><span class="line">        &#125;</span><br><span class="line">        num[low] = num[high];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; num[low] &lt;= pivot) &#123;</span><br><span class="line">            ++low;</span><br><span class="line">        &#125;</span><br><span class="line">        num[high] = num[low];</span><br><span class="line">    &#125;</span><br><span class="line">    num[low] = pivot;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qSort</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot_idx = <span class="built_in">partition</span>(num, low, high);</span><br><span class="line">        <span class="built_in">qSort</span>(num, low, pivot_idx - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">qSort</span>(num, pivot_idx + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归，用栈保存要操作的范围的下标</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qSortNotR</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; num, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.<span class="built_in">push</span>(low);</span><br><span class="line">    s.<span class="built_in">push</span>(high);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> l = s.<span class="built_in">top</span>();</span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">int</span> pivotPos = <span class="built_in">partition</span>(num, l, r);</span><br><span class="line">        <span class="keyword">if</span> (l &lt; pivotPos - <span class="number">1</span>) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(l);</span><br><span class="line">            s.<span class="built_in">push</span>(pivotPos - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pivotPos + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">            s.<span class="built_in">push</span>(pivotPos + <span class="number">1</span>);</span><br><span class="line">            s.<span class="built_in">push</span>(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>划分的两个子问题规模分别为0和n时，时间复杂度最坏为<span class="math inline">\(O(n^2)\)</span>； 两个子问题规模相同时，时间复杂度最好为<span class="math inline">\(O(nlgn)\)</span>，平均性能更接近最好情况。 假设输入数据的所有排列不是等概率的，那么为了避免最坏情况的发生，选择pivot可以<strong>随机</strong>进行，这样被pivot分开的两个子问题规模会接近<span class="math inline">\(n/2\)</span>。</p><p>复杂度的证明既可以用主定理，也可以自己推导，在最优情况下： <span class="math display">\[T(n)=2T(n/2)+n \\T(n)=2(2T(n/4)+n/2)+n=4T(n/4)+2n \\T(n)=4(2T(n/8)+n/4)+2n=8T(n/8)+3n \\... \\T(n)=nT(1)+nlogn=n+nlogn\]</span></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Random Number Generator</title>
      <link href="/2018/05/24/Random%20Number%20Generator/"/>
      <url>/2018/05/24/Random%20Number%20Generator/</url>
      
        <content type="html"><![CDATA[<p><code>rand()</code>函数可以产生[0,RAND_MAX]之间的均匀的<strong>伪随机数</strong>，它定义在头文件<code>stdlib.h</code>中，函数原型： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p>C标准库的实现是： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*rand: return pseudo-number integer on 0...32767*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next*<span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next/<span class="number">65536</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*srand: set seed for rand()*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果没有初始化“随机数种子”，那么默认初始种子是1，1*1103515245+12345，return得到第一个伪随机数，接着将这个结果作为下次的种子，带入式子得到第二个伪随机数... 之所以定义为<code>unsigned int</code>，是防止数值溢出后不会出现负值。 直接调用<code>rand()</code>，会导致产生的是同一套随机数，所以我们使用<code>srand()</code>来初始化随机数种子。 要注意的是：不同编译器计算随机数的方法不尽相同，所以即使给<code>srand()</code>传递相同的参数，也可能产生不同的随机数序列。 举个栗子： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*产生0-9的随机数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  <span class="comment">//初始化随机数种子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,rand()%<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>利用<code>rand()%n</code>产生[0,n)之间的随机数，那么一旦<span class="math inline">\(n&gt;RAND\_MAX\)</span>，这种做法就会失效。 如果你对精度的要求不高，可以采用如下办法： 先用<code>rand()/RAND_MAX</code>，得到[0,1]之间的随机实数，然后扩大n-1倍，四舍五入，就可得到[0,n-1]之间的随机数。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*产生10个[0,99999]之间的随机数*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">100000</span>;</span><br><span class="line">    <span class="keyword">double</span> random_doub;</span><br><span class="line">    <span class="keyword">int</span> random_num;</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>));  <span class="comment">//初始化随机数种子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        random_doub = (<span class="keyword">double</span>)rand() / RAND_MAX; <span class="comment">//生成[0,1]之间的随机数</span></span><br><span class="line">        random_num = (<span class="keyword">int</span>)((n - <span class="number">1</span>)*random_doub + <span class="number">0.5</span>); <span class="comment">//生成[0,n-1]之间的随机数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,random_num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108194141397-884629663.png" alt="image" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Function-time()</title>
      <link href="/2018/05/23/Function-time()/"/>
      <url>/2018/05/23/Function-time()/</url>
      
        <content type="html"><![CDATA[<p><code>time()</code>函数返回自1970年1月1日0点以来经过的秒数，每秒变化一次? <code>time()</code>函数定义在头文件<code>&lt;time.h&gt;</code>中，原型是： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">time_t</span> <span class="title">time</span><span class="params">(<span class="keyword">time_t</span> *arg)</span></span>;</span><br></pre></td></tr></table></figure></p><p>如果<code>arg</code>不是空指针，那么函数返回<code>time_t</code>类型的calendar time，并且把结果保存在<code>arg</code>指向的对象； 如果<code>arg == NULL</code>，那么函数只是返回一个值，值不能存储在空指针指向的对象。 之前不明白为什么要设计一个参数<code>arg</code>，直接返回一个值就好了啊？ 有大神说，这是因为： &gt; 很久很久以前，据说<code>time_t</code>是个<code>struct</code>，那时候c语言不支持函数返回<code>struct</code>，所以只能用指针传进去。</p><p>那么<code>time_t</code>到底是什么类型呢？ 看看cppreference.com的定义：</p><blockquote><p>The encoding of calendar time in <code>time_t</code> is unspecified, but most systems conform to POSIX specification and return a value of integral type holding the number of seconds since the Epoch.Implementations in which <code>time_t</code> is a 32-bit signed interger(many historical implementations) fail in the year 2038.</p></blockquote><p>就是说：C标准委员会并没有定义<code>time_t</code>的精度，也没有指定标准的Epoch，所以这取决于你的operating system以及你的compiler。 如果你的系统支持<strong>POSIX标准</strong>(包括很多类Unix系统、Windows系统)，那么<code>time_t</code>是一个<code>signed int 32</code>，最大表示范围是2147483647秒，标准Epoch是1970年1月1日0点，所以最终时间就是2038年1月19日，这就是著名的<a href="https://en.wikipedia.org/wiki/Year_2038_problem">2038年问题</a>。</p><p>那么这个函数的实现，GNU C Library是这么写的： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span>                <span class="comment">/* For NULL.  */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Return the current time as a `time_t&#x27; and also put it in *T if T is</span></span><br><span class="line"><span class="comment">   not NULL.  Time is represented as seconds from Jan 1 00:00:00 1970.  */</span></span><br><span class="line"><span class="function"><span class="keyword">time_t</span></span></span><br><span class="line"><span class="function"><span class="title">time</span> <span class="params">(<span class="keyword">time_t</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">tv</span>;</span></span><br><span class="line">  <span class="keyword">time_t</span> result;</span><br><span class="line">  <span class="keyword">if</span> (__gettimeofday (&amp;tv, (struct timezone *) <span class="literal">NULL</span>))</span><br><span class="line">    result = (<span class="keyword">time_t</span>) <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = (<span class="keyword">time_t</span>) tv.tv_sec;</span><br><span class="line">  <span class="keyword">if</span> (t != <span class="literal">NULL</span>)</span><br><span class="line">    *t = result;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_def (time)</span><br></pre></td></tr></table></figure></p><p>如果返回<code>time_t</code>类型的值，说明调用成功； 如果返回<code>(time_t)(-1)</code>，说明无法取得现在的时间，调用失败。 举个栗子，获得当前时间： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">time_t</span> current = time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">char</span>* <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*把日期和时间转为字符串*/</span></span><br><span class="line">    <span class="built_in">string</span> = ctime(&amp;current);</span><br><span class="line">    <span class="keyword">if</span> (current == (<span class="keyword">time_t</span>)<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Fail to get the current time!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The current time is %s&quot;</span>, <span class="built_in">string</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%d seconds since the Epoch)\n&quot;</span>,current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108191119700-2067131670.png" alt="image" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FTP Protocol</title>
      <link href="/2018/05/22/FTP%20Protocol/"/>
      <url>/2018/05/22/FTP%20Protocol/</url>
      
        <content type="html"><![CDATA[<p>FTP(File Transfer Protocol)是因特网上的一种文件传送协议。</p><h2 id="基本原理">基本原理</h2><p>FTP协议基于客户/服务器模式，属于应用层，使用TCP可靠的运输服务。 FTP的服务器进程由<strong>1个主进程</strong>和<strong>若干从进程</strong>组成：主进程负责接受新请求，从进程负责处理单个请求。这样，1个FTP服务器就可以同时为多个客户进程服务。</p><h2 id="工作过程">工作过程</h2><p>FTP工作分为主动模式和被动模式。 不论哪种模式，首先，客户从一个随机的端口N(1024-65535)向服务器的命令端口21发起请求，建立起<strong>控制连接</strong>。 - 主动模式 客户随机打开某个端口(1024-65535)，在这个端口等待服务器的数据，所以要通过控制连接告诉服务器自己用哪个端口传送数据，接着服务器收到文件传送命令以及客户端口号，从自己的数据端口20向客户发起数据连接。 FTP传送完一个文件，数据连接就会关闭，而控制连接贯穿整个会话。</p><ul><li>被动模式 如果客户被防火墙限制，不能接受到来的TCP连接，这时候就需要被动模式来传输： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108185312740-1401371750.png" alt="image" /> 首先，客户通过控制连接向服务器发送命令PASV； 接着，服务器向客户发送自己的IP地址和自己打算用来传送数据的端口号； 最后，客户通过刚才接收的IP地址和服务器端口号，用自己任意一个端口(1024-65535)向服务器开的那个端口建立数据连接。 通俗点，就是： 主动模式：建立数据通道，服务器主动去连接客户； <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108185349044-1665399483.png" alt="image" /> 被动模式：建立数据通道，服务器被动地被客户连接。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108185409921-1806947979.png" alt="image" /></li></ul><p>再通俗点，就是： 主动模式： 客户：我开了一个端口，你来连我吧； 被动模式： 客户：mmp，被防火墙搞了，收不到你发来的数据连接了； 服务器：哦，没事，我开了个端口，你连我就好了。</p><h2 id="参考">参考</h2><p><a href="www.serv-u.com/kb/1138/Active-and-Passive-FTP-Transfers-Defined">Active and Passive FTP Transfers Defined</a> <a href="https://en.wikipedia.org/wiki/File_Transfer_Protocol">wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File Operations</title>
      <link href="/2018/05/19/File%20Operations/"/>
      <url>/2018/05/19/File%20Operations/</url>
      
        <content type="html"><![CDATA[<p>在刷题测试程序时，为了避免每次都手工输入，我们可以把输入数据保存在文件中；为了避免输出太长，我们将输出也写入文件中，方便与标准答案文件进行比较。 文件使用一般有两种方法：输入输出重定向、fopen。</p><ul><li>重定向 这种方法比较简单，只要在main()函数的开始加上： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">freopen(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br></pre></td></tr></table></figure></li></ul><p>就可以将标准I/O(键盘输入、屏幕输出)转为读写文件。 万一比赛要求标准I/O，而你还想用文件操作来测试代码时，提交时切记删除重定向语句。 为了避免你忘记这茬，可以如下处理： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NATIVE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NATIVE</span></span><br><span class="line">    freopen(<span class="string">&quot;input.txt&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//your code here</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样子，本机测试时可以使用重定向；如果要求标准I/O，提交时只需删掉<code>#define NATIVE</code>即可。</p><ul><li>fopen 如果比赛要求使用文件读写，但禁止重定向方式，这时可以使用fopen方式： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE *fin, *fout;</span><br><span class="line">    fin = fopen(<span class="string">&quot;input.txt&quot;</span>.<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    fout = fopen(<span class="string">&quot;output.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把scanf改为fscanf,把printf改为fprintf</span></span><br><span class="line">    <span class="built_in">fscanf</span>(fin,<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    <span class="built_in">fprintf</span>(fout,<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">    <span class="comment">//your code here</span></span><br><span class="line"></span><br><span class="line">    fclose(fin);</span><br><span class="line">    fclose(fout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这时候，如果要求标准I/O，只需要： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fin = <span class="built_in">stdin</span>;</span><br><span class="line">fout = <span class="built_in">stdout</span>;</span><br></pre></td></tr></table></figure></p><p>最后，简单说下<strong>文件比较</strong>(windows下)： 进入cmd，如果两个文件在同一目录： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span> 1.txt 2.txt</span><br></pre></td></tr></table></figure></p><p>如果两个文件不在同一目录： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span> <span class="string">&quot;c:\1.txt&quot;</span> <span class="string">&quot;d:\2.txt&quot;</span></span><br></pre></td></tr></table></figure></p><p>可以使用<code>fc /?</code>查看fc命令的一些参数： <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108184941074-1492015913.png" alt="image" /></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2018/05/19/Git/"/>
      <url>/2018/05/19/Git/</url>
      
        <content type="html"><![CDATA[<p>Git是版本控制系统的一种，用来维护多人协作项目的开发进程。</p><p>首先来看看单人开发的需求，最原始的VCS就在你我身边😂： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229105452773-1749378952.png" alt="image" /></p><p>假如在本地保存了多个版本，<code>HEAD</code>总是指向最新的版本： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229110354288-1305060165.png" alt="image" /></p><p>如果Version 3出现了严重的bug，可以回退到Version 2继续操作。但是如果Version 3包含了很多我们希望保留的change，就需要将其与Version 2比对，而后将这些changes拷贝到Version 2，一个好的VCS就需要支持<code>diff</code>操作帮程序员们找到两个版本之间的差异。</p><p>除此之外，为了防止本地机器故障，我们希望把本地的所有版本都在云上备份，这样即使你的设备原地爆炸，也不用担心被老板炒鱿鱼。 <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229111609065-1819873752.png" alt="image" /> 另外，你可以借助云的中转实现多地工作。当然偶尔也会出现一些小问题：假如现在云上和本地的稳定版本都是Version 5，你996下班后还想为公司做贡献，就在家里开始对Version 5一顿操作得到了Version 5L却忘了上传，第二天上班在公司又是对Version 5一通different的操作得到了Version 5D并上传，第二天下班从云上直接拉取Version 5D到本地，价值几个亿的Version 5L就再也找不到了...这里就需要<code>merge</code>操作来合并分支。</p><p>更重要的是，程序员们可以随时随地借助云上的备份进行协作，完成超大项目的撕逼工作。 为了保证出bug有人背锅，还需要记录who/when/what，VCS里叫做<code>annotate/blame</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git init  # 将该目录用Git管理</span><br><span class="line">git add haha.txt kaka.txt  # 将haha.txt，kaka.txt添加到仓库</span><br><span class="line">git commit -m &quot;upload&quot;  # 将文件提交到仓库，本次提交说明是upload</span><br><span class="line">git remote add origin git@github.com:EIMadrigal/Leetcode.git  # 将本地仓库与远程仓库关联</span><br><span class="line">git push -u origin main  # 将本地库的内容第一次推送到远程仓库</span><br><span class="line">git push origin main  # 以后的推送</span><br><span class="line">git rm -r --cached haha  # 删除文件夹haha</span><br><span class="line">git status  # 查看仓库的状态</span><br><span class="line">git diff  # 查看具体修改的内容</span><br><span class="line">git log  # 查看提交历史纪录</span><br><span class="line">git show  # 提交详情</span><br><span class="line">git checkout -- [file]  # 回退</span><br><span class="line">git reset --hard HEAD^  # HEAD表示当前版本，HEAD^表示上一个版本</span><br><span class="line">git reflog  # 查看命令的历史纪录</span><br></pre></td></tr></table></figure><p><a href="https://www.v2ex.com/t/786515">Windows怎么设置cmd/git bash走代理</a></p><h2 id="refs">Refs</h2><p><a href="https://missing.csail.mit.edu/2020/version-control/">Version Control (Git)</a> <a href="https://web.mit.edu/6.031/www/fa21/classes/05-version-control">Reading 5: Version Control</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim Introduction</title>
      <link href="/2018/05/18/Vim%20Introduction/"/>
      <url>/2018/05/18/Vim%20Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="配置">配置</h2><p>安装原生态的Vim之后，界面是这样的： <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211114103208063-1995368165.png" alt="image" /> 行号，没有；自动缩进，没有；括号匹配，没有.</p><p>为了我们使用的方便，进行一些基本的配置： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/vim/vimrc</span><br></pre></td></tr></table></figure> 进入配置界面: <img src="https://img2020.cnblogs.com/blog/1260581/202111/1260581-20211114103509711-1162498509.png" alt="image" /></p><p>可以删掉注释或添加新的配置: <img src="https://img2020.cnblogs.com/blog/1260581/202007/1260581-20200703081231240-949289722.png" alt="image" /></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set number  # 左侧显示行号</span><br><span class="line">set ts=4  # Tab键长度4个空格</span><br><span class="line">set expandtab  # 输入Tab自动转换为空格</span><br><span class="line">set cursorline  # 突出显示当前行</span><br><span class="line">set autoindent  # 自动缩进</span><br><span class="line">set showmatch  # 显示括号匹配</span><br><span class="line">syntax on</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><p>Vim有三种模式：输入模式、命令模式和末行命令模式。 输入模式用来输入文字，命令模式用来下达编排文件的操作指令，末行命令模式用来进行文件存档、离开编辑器等操作: <img src="https://img2020.cnblogs.com/blog/1260581/202007/1260581-20200703081319488-2115051699.png" alt="image" /></p><ol type="1"><li>进入及离开 末行模式下： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:w  # 保存当前文件</span><br><span class="line">:x  # 保存文件并退出</span><br><span class="line">:q!  # 放弃此次编辑并强制退出</span><br><span class="line">:wq a.txt  # 保存退出</span><br><span class="line">:syntax on  # 一次性语法高亮</span><br><span class="line">:set number  # 一次性显示行号</span><br></pre></td></tr></table></figure></li><li>基本编辑 命令模式下按v进入visual模式： <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d  # 选中目标文字段，按d(delete)剪切</span><br><span class="line">y  # 选中目标文字段，按y(yank)复制</span><br><span class="line">p  # 移动光标到目标位置，按p(put)粘贴</span><br></pre></td></tr></table></figure></li></ol><p>命令模式: hjkl和方向键类似,w可以按词向后移动,b按词向前移动,ctrl+f/ctrl+b与pageup/down功能一样 88gg直接跳到第88行 10j向下跳10行 10k向上跳10行 /Node高亮所有Node以后 按n后跳 按shift+n前跳 cc/dd/yy,按u取消操作 c2c删掉连续2行 p粘贴,按u取消操作</p><p>编辑模式: ctrl+n自动补全</p><p>插件: vim plug vim awesome</p><h2 id="中文输入">中文输入</h2><p>确保键盘输入系统选中fcitx，搜狗拼音输入法基于fcitx(Free Chinese Input Toy for X)框架，所以要选中fcitx： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229103046336-1159122227.png" alt="image" /></p><p>下载并安装搜狗输入法<a href="https://pinyin.sogou.com/linux/?r=pinyin">安装包</a>，切换到安装包所在的目录，改下安装包的名字，不然太长了不方便，我这里改为<code>ha.deb</code>，之后安装： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i ha.deb</span><br></pre></td></tr></table></figure></p><p>这里可能会提示依赖关系不满足(没提示的话跳过即可)： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229103335451-1935103123.png" alt="image" /></p><p>这是由于你的电脑可能没有安装有关fictx的内容，修复依赖关系： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></p><p>顺利的话，桌面右上角会出现键盘图标： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229103537949-1620971579.png" alt="image" /> 可以看到搜狗输入法已经安装。</p><p>如果看不到搜狗的图标(尤其是第一次安装)，重启系统。 右键键盘图标，选择configure(或者搜fcitx configuration)： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229103624730-632103575.png" alt="image" /></p><p>你现在应该没有Sogou Pinyin这一项，点那个+号： <img src="https://img2020.cnblogs.com/blog/1260581/202112/1260581-20211229103646985-2704756.png" alt="image" /></p><p>取消Only Show Current Language前的对号，搜索Sogou Pinyin，点击OK。 现在，输入法应该已经安装好了。可以去桌面那个键盘图标看看了~</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISA Introduction</title>
      <link href="/2018/05/16/ISA%20Introduction/"/>
      <url>/2018/05/16/ISA%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>介绍一下X86、MIPS、ARM三种指令集：</p><h2 id="x86指令集">X86指令集</h2><p>X86指令集是典型的CISC(Complex Instruction Set Computer)指令集。 X86指令集外部看起来是CISC指令集，事实上，它是采用类RISC内核，将部分复杂指令通过micro-op模式进行翻译成简单指令，再处理。 X86指令集的几个特性</p><ul><li>后向兼容 Intel每推出一代新处理器，总会兼容以前处理器的feature。这是由于长期积累的用户习惯和生态环境不容更改，否则没法赚钱了~ 后向兼容导致指令集愈发庞大、愈发复杂，同时功耗也会比较大，不过由于Intel超高的工艺水平，这都不是事。</li><li>变长指令 X86指令集采用变长指令(1-15Bytes)，一般每条指令为2-3Bytes。这样可以提高码字的利用率，但也使得译码以及读取指令时比较复杂，因为不知道一条指令应该读多长。</li><li>多种寻址方式 X86指令集可以采用多种寻址方式，比如立即寻址、寄存器寻址、寄存器相对寻址……</li><li>通用寄存器个数有限 X86-32的系统有8个通用寄存器，之后X86-64系统扩展到了16个。</li><li>指令执行时，最多只能有一个操作数在内存里，另一个操作数必为立即数或者寄存器。</li><li>由于后向兼容以及类RISC内核，导致功耗增加；同时，有很多复杂的指令利用率很低。</li></ul><h2 id="mips指令集">MIPS指令集</h2><p>MIPS指令集是典型的RISC(Reduced Instruction Set Computer)指令集。 精简指令集系统的设计思想就是：把复杂指令集中一些不常用的指令踢出指令集，这些复杂指令由日益强大的软件技术(编译)去实现，这样使得每个指令的流水线分段比较均匀，充分利用了处理器的流水线结构，提高了主频。 MIPS指令集以32个寄存器为中心，只能通过<strong>Load/Store</strong>指令访问内存，其余涉及计算的指令都从寄存器堆中读取数据，并且将计算结果写入寄存器堆中。 另外，MIPS指令的格式比较规整，所有指令长度一致，指令操作码都在固定的位置；寻址方式、对于每条指令的操作都很简单。 那么CISC与RISC的区别是什么呢？ 最大的区别在于：RISC只能通过<strong>Load/Store</strong>指令访问内存，而CISC指令集则没有这个限制。</p><h2 id="arm指令集">ARM指令集</h2><p>ARM指令集属于RISC指令集，每条指令32位。 ARM也有16位的压缩指令集，这是为了避免32位出现的码字浪费，提高运行速度推出的。</p><ul><li>ARM指令由于属于RISC指令集，一般完成的操作比较简单。程序员可以通过多条简单的指令组合实现一个复杂的操作。</li><li>同样的，ARM指令集也是只能通过<strong>Load/Store</strong>指令读取内存中的数据到寄存器，其余的指令只能对寄存器的操作数进行处理。</li><li>大多数指令长度相同，字段位置(尤其是操作码的位置)固定，且具有“条件执行”模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fourier Transform</title>
      <link href="/2018/05/06/Fourier%20Transform/"/>
      <url>/2018/05/06/Fourier%20Transform/</url>
      
        <content type="html"><![CDATA[<p>为了在统一框架里分析周期信号与非周期信号，可以给周期信号也建立傅里叶变换。 有两种方法求周期信号的傅里叶变换：</p><ol type="1"><li><p>利用傅里叶级数进行构造 对于周期信号<em><span class="math inline">\(x(t)\)</span></em>，其傅里叶级数展开式为： <span class="math display">\[x(t) = \sum_{k = -\infty}^{+\infty}a_ke^{jkw_0t}\]</span> 系数<span class="math inline">\(a_k\)</span>表示为： <img src="https://img-blog.csdn.net/20180510103617263?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /> 由于 <img src="https://img-blog.csdn.net/20180510104202240?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /> 说明周期性复指数信号的频谱是一个冲激，那么我们推广这个关系，可得： <img src="https://img-blog.csdn.net/20180510104448987?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0VJTWFkcmlnYWw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" /> 表明：周期信号的傅里叶变换由一系列等间隔的冲激函数线性组合而成，每个冲激分别位于信号各次谐波的频率处，其强度是傅里叶级数系数的<span class="math inline">\(2\pi\)</span>倍。</p></li><li><p>周期延拓 这种方法先将<span class="math inline">\(x(t)\)</span>在一个周期内截断，得信号<span class="math inline">\(x_T(t)\)</span>，求出<span class="math inline">\(x_T(t)\)</span>的傅里叶变换<span class="math inline">\(X_T(w)\)</span>，再对<span class="math inline">\(X_T(w)\)</span>周期延拓得<span class="math inline">\(X(w)\)</span>。 具体来说： 根据<span class="math inline">\(\delta\)</span>函数性质，有： <span class="math display">\[x(t) = x_T(t)*\sum_{k = -\infty}^{+\infty}\delta(t - kT)\]</span> 设周期冲激串<span class="math inline">\(\sum_{k = -\infty}^{+\infty}\delta(t - kT)\)</span>的傅里叶变换为<span class="math inline">\(F(w)\)</span>， 由时域卷积定理： <span class="math display">\[X(w) = X_T(w)F(w)\]</span> 又时域周期为T的周期冲激串的傅里叶变换在频域是一个周期为<span class="math inline">\(\frac{2\pi}{T}\)</span>的周期冲激串，即： <span class="math display">\[F(w) = \frac{2\pi}{T}\sum_{k = -\infty}^{+\infty}\delta(w - \frac{2\pi k}{T})\]</span> 故可得： <span class="math display">\[X(w) = \frac{2\pi}{T}X_T(w)\sum_{k = -\infty}^{+\infty}\delta(w - \frac{2\pi k}{T})\]</span> 也就是： <span class="math display">\[X(w) = w_0\sum_{k = -\infty}^{+\infty}X_T(kw_0)\delta(w - kw_0)\]</span> 我们对比两种方法得到的结果，可知： 周期信号傅里叶级数的系数<span class="math inline">\(a_k = \frac{1}{T}X_T(kw_0)\)</span></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Information Engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Process/Thread Synchronization</title>
      <link href="/2018/04/28/Process%20&amp;%20Thread%20Synchronization/"/>
      <url>/2018/04/28/Process%20&amp;%20Thread%20Synchronization/</url>
      
        <content type="html"><![CDATA[<h2 id="进程同步">进程同步</h2><p>进程间同步和进程间通信没必要区分过于清楚，一般能通信的机制也能用于同步。进程间通信（IPC）有以下几种： - 信号量（semaphores）：低级通信方式，分为整型和记录型； - 共享内存（shared memory）：高级方式； - 消息队列（message passing）：高级方式； - 管道通信（pipe）：高级方式。 - 套接字（socket）：网络上不同进程通信 - 信号（signal）：</p><p>进程间同步方式有： - 信号量（semaphores）： - 管程（monitors）：</p><p>由于进程之间一般是独立的，所以进程同步机制大多不需要锁。</p><h2 id="线程同步">线程同步</h2><p>线程同步机制有以下几种：</p><ul><li>互斥锁（mutex）：排他性访问共享数据，用来保护临界区。某个线程加锁后，其它要加锁的线程将被阻塞，申请失败进入休眠，直到锁被释放。</li><li>读写锁（ReadWriteLock）：用于读者-写者问题，共有三种状态：不加锁、读模式加锁、写模式加锁。每次只有一个线程可以占用写模式的锁，但可以有多个线程占有读模式锁。</li><li>自旋锁（spinlock）：专为多处理器并发引入，不断循环测试锁的状态，申请线程不会休眠，忙等锁。</li><li>条件变量（condition variables）</li><li>信号量（semaphores）：有更多取值空间，实现更复杂的同步。</li></ul><p>信号量和PV原语的使用可归纳为三种情形： 1. 把信号量视为<strong>加锁标志位</strong>，其目的是为了实现对某个<strong>唯一的共享数据</strong>的<strong>互斥访问</strong>，如各个进程间的某共享变量，数据库中的某个记录。 共享数据的值与信号量本身的值没有直接关系，信号量的作用仅仅是作为加锁标志位。其特征是<strong>信号量初始值为1</strong>，然后在一个进程内部对它进行配对的PV操作。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P(mutex);  <span class="comment">// mutex的初始值为1</span></span><br><span class="line">访问该共享数据;</span><br><span class="line">V(mutex);</span><br><span class="line">非临界区</span><br></pre></td></tr></table></figure></p><ol start="2" type="1"><li><p>把信号量视为某种类型的<strong>共享资源的剩余个数</strong>，目的是实现对这种类型的共享资源的访问，如各种I/O设备。 信号量的取值具有实际意义，即为<strong>空闲资源的个数</strong>。多个进程可以同时使用这种类型的资源，直到所有空闲资源均已用完。 其特征是信号量的<strong>初始值为<span class="math inline">\(N\geq 1\)</span></strong>，然后<strong>在一个进程内部对它进行配对的PV操作</strong>。 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">P(resource);  <span class="comment">// resource的初始值为N</span></span><br><span class="line">使用该资源;</span><br><span class="line">V(resource);</span><br><span class="line">非临界区</span><br></pre></td></tr></table></figure></p></li><li><p>把信号量作为<strong>进程间同步</strong>的工具，利用它来设定<strong>两个进程在运行时的先后顺序</strong>。比如，它可以是某个共享资源的当前个数，但是由一个进程负责生成该资源，而另一个进程负责消费该资源，由此引发了两个进程间的先后顺序。 其特征是信号量的<strong>初始值为<span class="math inline">\(N\geq 0\)</span></strong>，然后<strong>在一个进程里对其使用V原语，增加资源个数，而在另一个进程里对其使用P原语，减少资源个数，</strong>从而实现两个进程之间的同步关系。 <img src="https://img2020.cnblogs.com/blog/1260581/202201/1260581-20220108183225108-1461792452.png" alt="image" /></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Process Synchronization-Example 2</title>
      <link href="/2018/04/20/Process%20Synchronization-Example%202/"/>
      <url>/2018/04/20/Process%20Synchronization-Example%202/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>理发店有一位理发师，一把理发椅和N把供等候的顾客坐的椅子。 如果没有顾客，理发师在理发椅上睡觉； 当有一个顾客到来时，他必须先唤醒理发师； 如果顾客来时理发师正在理发，如果有空椅子，坐下等待，否则离开。 用PV操作解决上述问题中的同步和互斥关系。</p><h2 id="分析">分析</h2><p>将顾客看作N个生产者，理发师是1个消费者。 理发师和椅子是临界资源，故顾客间是互斥关系； 理发师和顾客是同步关系。</p><p>信号量设置： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Semaphore barberReady = <span class="number">0</span>  互斥量，只能取<span class="number">0</span>或<span class="number">1</span>  </span><br><span class="line">Semaphore accessSeat = <span class="number">1</span>  互斥量，如果为<span class="number">1</span>，表明椅子数可以增加或减少，相当于给椅子加锁，避免两个顾客同时坐一把椅子</span><br><span class="line">Semaphore num_wait = <span class="number">0</span>   坐在椅子上等待的顾客数</span><br><span class="line"><span class="keyword">int</span> seat_free    空着的椅子数目</span><br></pre></td></tr></table></figure> <a href="https://en.wikipedia.org/wiki/Sleeping_barber_problem">参考wiki</a></p><h2 id="解答">解答</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*顾客进程*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P(accessSeat);  <span class="comment">//试图坐下</span></span><br><span class="line">        <span class="keyword">if</span>(seat_free &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            seat_free--;  <span class="comment">//坐下</span></span><br><span class="line">            V(num_wait);  <span class="comment">//试图唤醒理发师，</span></span><br><span class="line">            V(accessSeat);  <span class="comment">//不用再锁着椅子</span></span><br><span class="line">            P(baberReady); <span class="comment">//等待理发师ready</span></span><br><span class="line">            理发;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            V(accessSeat);  <span class="comment">//释放加在椅子上的锁</span></span><br><span class="line">            离开;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*理发师进程*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">barber</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        P(num_wait);   <span class="comment">//尝试获得一位顾客，如果没有，去睡觉</span></span><br><span class="line">        P(accessSeat);   <span class="comment">//尝试获得椅子锁，更改空闲椅子数目</span></span><br><span class="line">        seat_free++;    <span class="comment">//空椅子加1</span></span><br><span class="line">        V(baberReady);    <span class="comment">//理发师准备好了</span></span><br><span class="line">        V(accessSeat);    <span class="comment">//无需继续锁着椅子</span></span><br><span class="line">        理发;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Process Synchronization-Example 1</title>
      <link href="/2018/04/11/Process%20Synchronization-Example%201/"/>
      <url>/2018/04/11/Process%20Synchronization-Example%201/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述">问题描述</h2><p>把学生和监考老师都看作进程，学生有N人，教师1人。考场门口每次只能进出一个人，进考场原则是先来先进。当N个学生都进入考场后，教师才能发卷子。学生交卷后可以离开考场，教师要等收上来全部卷子并封装卷子后才能离开考场。问： - 需要设置几个进程？ - 用PV操作解决上述问题的同步互斥关系。</p><h2 id="分析">分析</h2><blockquote><p>考场门口每次只能进出一个人</p></blockquote><p>考场门口是共享资源。</p><blockquote><p>当N个学生都进入考场后，教师才能发卷子 教师要等收上来全部卷子并封装卷子后才能离开考场</p></blockquote><p>这是两个同步行为。</p><p>信号量设置： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">door = <span class="number">1</span>    <span class="comment">//能否进出门口</span></span><br><span class="line">mutex1 = <span class="number">1</span></span><br><span class="line">mutex2 = <span class="number">1</span>   <span class="comment">//互斥信号量</span></span><br><span class="line">sr = <span class="number">0</span>   <span class="comment">//学生是否到齐</span></span><br><span class="line">eb = <span class="number">0</span>    <span class="comment">//考试开始</span></span><br><span class="line">eo = <span class="number">0</span>     <span class="comment">//考试结束</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num_stu = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num_paper = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="解答">解答</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*学生进程*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">student</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(door);</span><br><span class="line">    进门;</span><br><span class="line">    V(door);</span><br><span class="line">    P(mutex1);  <span class="comment">//增加学生人数</span></span><br><span class="line">    num_stu++;</span><br><span class="line">    <span class="keyword">if</span>(num_stu == N)</span><br><span class="line">    V(sr);</span><br><span class="line">    V(mutex1);</span><br><span class="line">    P(eb);  <span class="comment">//等教师宣布开始考试</span></span><br><span class="line">    考试;</span><br><span class="line">    交卷;</span><br><span class="line">    P(mutex2);   <span class="comment">//增加试卷份数</span></span><br><span class="line">    num_paper++;</span><br><span class="line">    <span class="keyword">if</span>(num_paper == N)</span><br><span class="line">    V(eo);</span><br><span class="line">    V(mutex2);</span><br><span class="line">    P(door);</span><br><span class="line">    出门;</span><br><span class="line">    V(door);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*教师进程*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">teacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    P(door);</span><br><span class="line">    进门;</span><br><span class="line">    V(door);</span><br><span class="line">    P(sr);  <span class="comment">//最后一个学生唤醒老师</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= N;i++)</span><br><span class="line">    发卷子;</span><br><span class="line">    V(eb);     <span class="comment">//开始考试</span></span><br><span class="line">    P(eo);   <span class="comment">//等待考试结束</span></span><br><span class="line">    封装;</span><br><span class="line">    P(door);</span><br><span class="line">    出门;</span><br><span class="line">    V(door);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pattern Matching</title>
      <link href="/2018/04/02/Pattern%20Matching/"/>
      <url>/2018/04/02/Pattern%20Matching/</url>
      
        <content type="html"><![CDATA[<p>字符串模式匹配，即子串的定位操作。就是判断主串S中是否存在给定的子串，如果存在，那么返回子串在S中的位置，否则返回-1。 实现这种操作有两种算法：</p><h2 id="朴素的模式匹配算法">朴素的模式匹配算法</h2><p>设主串S长度为n，子串T长度为m。 对于主串的每个字符，做长度为m的循环，判断是否与子串匹配。 最好的情况就是一开始就匹配成功，时间复杂度<span class="math inline">\(O(1)\)</span>；最坏的情况就是每次匹配失败都是在T的最后一个元素，复杂度<span class="math inline">\(O(nm)\)</span>;平均情况复杂度<span class="math inline">\(O(n+m)\)</span>。 <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">match</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t.<span class="built_in">size</span>() &gt; s.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.<span class="built_in">size</span>() &amp;&amp; j &lt; t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t[j] == s[i]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == t.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="kmp算法">KMP算法</h2><p>KMP主要分两步： 1. 进行T的自匹配，这一步关键在于得到Next数组，从T的第一位开始对自身匹配，在某一位置能匹配的最长长度即是当前位置Next值。 Next中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度，将Next[0] = -1。 举例来说：T=ababaca，前缀为pre，后缀为post。 i = 1: 要处理&quot;a&quot;, pre = &quot;&quot;, post = &quot;&quot;, Next[1] = 0; i = 2: 要处理&quot;ab&quot;, pre = a, post = b, Next[2] = 0; i = 3: 要处理&quot;aba&quot;, pre = {a, ab}, post = {ba, a}, Next[3] = 1; i = 4: 要处理&quot;abab&quot;, pre = {a, ab, aba}, post = {bab, ab, b}, Next[4] = 2; i = 5: 要处理&quot;ababa&quot;, pre = {a, ab, aba, abab}, post = {baba, aba, ba, a}, Next[5] = 3; ...... Next数组{-1，0，0，1，2，3，0，1} 2. S与T的匹配，这步的匹配和朴素匹配没有太大差异，只是主串S的指针不用回溯，而将子串的指针j回溯到Next[j]位置。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nextCompute</span><span class="params">(string t, vector&lt;<span class="keyword">int</span>&gt;&amp; next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || t[i] == t[j]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KMP</span><span class="params">(string s, string t)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">next</span><span class="params">(t.size() + <span class="number">1</span>, <span class="number">-1</span>)</span></span>;</span><br><span class="line">    <span class="built_in">nextCompute</span>(t, next);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; (<span class="keyword">int</span>)s.<span class="built_in">size</span>() &amp;&amp; j &lt; (<span class="keyword">int</span>)t.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">-1</span> || s[i] == t[j]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == t.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="改进kmp算法">改进KMP算法</h2><p>主要改进了Next数组。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 计算next数组 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">next_compute</span><span class="params">(<span class="keyword">char</span> T[], <span class="keyword">int</span>* next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="built_in">strlen</span>(T)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">-1</span> == j || T[i] == T[j]) &#123;   <span class="comment">// 自匹配</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span> (T[i] != T[j])</span><br><span class="line">                next[i] = j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                next[i] = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];  <span class="comment">// 字符不同，j值回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级树</title>
      <link href="/2018/03/29/B%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
      <url>/2018/03/29/B%E6%A0%91%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>为了避免BST退化为单链表，出现了AVL树，但终究是二叉树，难堪大用。</p><h2 id="b-trees">B-Trees</h2><p>B-Trees可以认为是一种泛化的BST，BST的每个结点只存储单个key，因此最好情况下只能将key space划分为两半，查询复杂度<span class="math inline">\(O(log_2n)\)</span>，为了进一步提高查询的效率，可以令每个结点存储任意数量的排好序的key，即所谓的多路查找树，每个结点的k个key可以将key space划分为k+1段，每个子树负责一段。</p><p>b阶B-Tree有着如下性质：</p><ul><li>所有叶子结点都处在同样的深度，即绝对平衡；</li><li>所有非叶结点都有着<span class="math inline">\(b-1\)</span>~<span class="math inline">\(2b-1\)</span>不等的key；</li><li>根结点最多有<span class="math inline">\(2b-1\)</span>个key。</li></ul><p>2阶B-Tree又叫2-3-4树，因为每个结点可以存储1-3个key，即可以有2-4个分叉，因此得名。</p><p><img src="https://img-blog.csdnimg.cn/18941cde817d4500892631525dfc53b4.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><p>B-Tree的多key存储虽然会减小查询代价，但会导致插入和删除的代价增加，那么人们为啥还要用呢？本质上还是因为磁盘的访问太过耗时，访问磁盘数据的时间由3部分组成：</p><ol type="1"><li>磁头移动到相应的磁道所耗费的时间，大概10ms左右；</li><li>磁头旋转到相应的扇区所耗费的时间，大概4-5ms左右；</li><li>在扇区读写数据所耗费的时间，基本可以忽略。</li></ol><p>因此，任意一块扇区的访问（读或写）大致需要15ms，数据一般被排列为相邻扇区组成的磁盘块，B-Tree可以极大地减少访问次数，尽管使得磁盘块内的读写代价增加，但这些代价相比于磁盘访问耗时可以忽略不计。</p><p>可以通过一个例子感受下B-Tree和BST的差距：假设数据库有<span class="math inline">\(n=10^6\)</span>条记录，每条记录包含4B的key（如id等）和50B的信息，扇区大小512B，指针大小4B。</p><ul><li>如果选择BST来存储，每个结点共有62B（key+value+2*pointer），每个扇区可以存储8个记录，由于访问次序是随机的，因此不太可能接连访问同一个扇区内的记录（该情况磁头无需大规模移动，即访问2个记录的时间和访问1个记录相同），故访问每条记录均需要15ms，在<span class="math inline">\(n=10^6\)</span>条记录中查找任意一条记录最好情况下需要<span class="math inline">\(log_2n=20\)</span>次查询，共耗时0.3s左右。</li><li>如果选择4阶B-Tree来存储，每个结点共有414B（最多8个孩子+7个key+8个指针+1个整数记录当前结点的key数目），在<span class="math inline">\(n=10^6\)</span>条记录中查找任意一条记录需要<span class="math inline">\(log_4n=10\)</span>次结点查询（0.15s）以及在该结点内部查找对应记录的时间（可忽略），性能大大提升。</li></ul><h2 id="b-trees-1">B+ Trees</h2><p>B+ Tree的非叶结点只存储key，叶子结点存储(key, value)并且将所有叶子链成单链表。</p><h2 id="红黑树">红黑树</h2><p>是具有如下性质的BST：</p><ul><li>每个结点要么红要么黑；</li><li>根结点是黑；</li><li>红色结点不能有红色孩子；</li><li>所有从根到null的路径均含有相同数目的黑色结点。</li></ul><h2 id="reference">Reference</h2><p><a href="https://web.stanford.edu/class/archive/cs/cs166/cs166.1146/lectures/02/Small02.pdf">Balanced Trees</a> <a href="https://www.cs.utexas.edu/users/djimenez/utsa/cs3343/lecture16.html">B-Trees</a> <a href="https://web.stanford.edu/class/cs346/2015/notes/Blink.pdf">B+ Review</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Damaged Hard Drive and Reinstall System</title>
      <link href="/2018/03/29/Damaged%20Hard%20Drive%20and%20Reinstall%20System/"/>
      <url>/2018/03/29/Damaged%20Hard%20Drive%20and%20Reinstall%20System/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由">缘由</h2><p>我是ACER笔记本，电脑从桌子上重摔，之后几天可以正常使用。可是后来看完视频准备退出的时候，发现所有页面已经卡死了，内存占用已经超过了80%，任务管理器没有反应，不得已按了电源键强制关机。 接着就再也启动不了，开机后一直显示No bootable device。 进入BIOS发现检测不到硬盘，估计是硬盘损坏了。啊~所有数据全都GG了！！！</p><h2 id="硬盘处理">硬盘处理</h2><p>先是用WinPE启动盘进入DiskGenius查看，没有我的HDD； 接着拆机，把硬盘重新插拔一下（也许是连接松了呢<sub>），还是没用； 最后用硬盘盒子接到室友电脑，还是无法检测，这下彻底确认硬盘凉了； 拿去维修店，专业人员检测后说是磁头坏了，修复数据1T要800RMB，哇穷</sub> 换块新的要480，有点坑哦！ 还是自己买一块希捷的，加上各种优惠，不到300RMB。</p><h2 id="重装系统">重装系统</h2><p>第一次重装系统，折腾了很久，试错的细节记不清了，只说一下大体的步骤：</p><ol type="1"><li>插上新硬盘之后，先用WinPE启动，用DiskGenius将硬盘的MBR格式转为GPT格式，此时不用分区；</li><li>插上U盘启动盘，重启电脑，按F2进入BIOS，切记关掉Boot Security，否则系统无法安装；</li><li>如果出现安装程序无法创建新的系统分区，也无法定位现有系统分区的提示，建议如下处理：</li></ol><ol type="a"><li>在安装界面按Shift+F10进入命令行；<ol start="2" type="a"><li>输入diskpart启动磁盘程序，接着输入list disk查看电脑的硬盘；</li><li>按提示输入select disk 0，选中编号为0的磁盘，输入clean，删除硬盘所有数据；</li><li>输入convert GPT，转换格式，然后list partition，查看分区情况；</li><li>输入<code>create partition efi size*100</code>，创建EFI分区，大小100MB；</li><li>输入<code>create partition msr size*128</code>，创建MSR分区，大小128MB；</li><li>输入<code>create partition primary size*50000</code>，创建主分区，大小50GB。(建议这个系统盘分的大一点，否则以后清理很麻烦)；</li><li>输入list partition，查看分区情况。 P.s. 遇到这种情况，网上有的说可以重新插拔u盘启动盘，刷新；或者利用Windows自带的引导文件安装，具体的可以自己试试~</li></ol></li></ol><ol start="4" type="1"><li>下来一路Next，装系统即可。</li></ol><h2 id="再次遭殃">再次遭殃</h2><p>距离上次硬盘事件已经过去了一年半，当我开心地吃着零食追着剧，想把页面切到咪咕下几首歌时，电脑瞬间卡死。 后来反思了一下：一是我习惯长期不关电脑，只是进入睡眠状态，可能资源本身已经占用很多了；二是打开的页面太多，而且切换太过频繁。 强制关机后就Game Over了<sub>（遇到这种情况，一定不要继续操作，等着吧！等到听不到硬盘的转动声再按电源键！！！） BIOS偶尔还能检测到HDD，经过专业人士检测：硬盘损坏，600RMB修复1T，好像比上次便宜了一些</sub> 一般机械硬盘保修期都是2年，所以就免费换了块新的~ 建议有条件的直接上固态吧，条件差点的可以固态装系统、机械存文件，没条件的就凑合用吧。。。 这次数据损失不大，吃了一堑还是有点用的，不过备份频率得改为一周一次了。 重装系统可以去老毛桃做个启动盘，把Windows的ISO镜像拷到U盘根目录，开机进入Win PE系统后，里面有个一键装机的软件~ 不过不知道是不是由于机型的原因，那个软件我的本用不了（垃圾Acer）： 所以就利用UltraISO把ISO镜像写入到U盘，插上之后开机，就会进入Windows的安装引导程序，分区也会在其中的一步引导你去做。 不同机型可能稍有差异，具体步骤可以参考<a href="https://blog.csdn.net/weixin_43175701/article/details/84349445">笔记本换硬盘装系统完整教程</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完美主义</title>
      <link href="/2018/03/29/%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89/"/>
      <url>/2018/03/29/%E5%AE%8C%E7%BE%8E%E4%B8%BB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacci Sequence</title>
      <link href="/2018/02/07/Fibonacci%20Sequence/"/>
      <url>/2018/02/07/Fibonacci%20Sequence/</url>
      
        <content type="html"><![CDATA[<h2 id="递归">递归</h2><p>斐波那契数列定义： <span class="math display">\[F(n)=\left\{\begin{matrix}0, n=0\\1, n=1\\F(n-1)+F(n-2), n&gt;1\end{matrix}\right.\]</span> 递归解法最直观，但是复杂度也最高：<span class="math inline">\(O(2^n)\)</span> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="comment">//细节可以处理非法输入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 为了避免重复计算，可以将每一步计算得到的<span class="math inline">\(F(i)\)</span>存起来，这样的话时间复杂度降为<span class="math inline">\(O(n)\)</span>，但空间复杂度升为<span class="math inline">\(O(n)\)</span>。</p><h2 id="通项">通项</h2><p>求解通项的方法有好几种，下面展示一种用线性代数求解的方法： 斐波那契数列的递推公式是二阶差分方程，先用一点小技巧将其化为一阶： <span class="math display">\[\begin{cases}F_{k+2}=F_{k+1}+F_{k}\text{}\\F_{k+1}=F_{k+1}\text{}\\\end{cases}\]</span> 我们令<span class="math inline">\(u_k=\begin{bmatrix}F_{k+1}\\F_{k}\\\end{bmatrix}\)</span>，那么<span class="math inline">\(u_{k+1}=\begin{bmatrix}F_{k+2}\\F_{k+1}\\\end{bmatrix}=\begin{bmatrix}1\ 1\\1\ 0\\\end{bmatrix}u_k\)</span>。 矩阵<span class="math inline">\(A=\begin{bmatrix} 1\ 1\\1\ 0\\\end{bmatrix}\)</span>，令<span class="math inline">\(det(A-\lambda I)=\lambda^2-\lambda-1=0\)</span>，求得<span class="math inline">\(\lambda=\frac{1\pm \sqrt5}{2}\)</span>，对应于两个特征值的特征向量为<span class="math inline">\(x_1=\begin{bmatrix} \lambda_1\\ 1\\ \end{bmatrix},x_2=\begin{bmatrix} \lambda_2\\ 1\\ \end{bmatrix}\)</span>。 求得特征值和特征向量后，我们将<span class="math inline">\(u_0=\begin{bmatrix} F_1\\ F_0\\ \end{bmatrix}=\begin{bmatrix} 1\\ 0\\ \end{bmatrix}=c_1x_1+c_2x_2\)</span>，解得<span class="math inline">\(c_1=-\frac{1}{\sqrt5}, c_2=\frac{1}{\sqrt5}\)</span> 故 <span class="math inline">\(u_k=S\Lambda^{k}c=\begin{bmatrix} c_1\lambda_1^{k+1}+c_2\lambda_2^{k+1}\\c_1\lambda_1^{k}+c_2\lambda_2^{k}\\\end{bmatrix}\)</span> 所以通项公式可以表示为<span class="math inline">\(F(n)=C_1\lambda_1^n+C_2\lambda_2^n\)</span>。 故斐波那契数列的通项公式为：<span class="math inline">\(F(n)=\frac{1}{\sqrt5}[(\frac{1+\sqrt5}{2})^n-(\frac{1-\sqrt5}{2})^n]\)</span> 用公式求解的复杂度为<span class="math inline">\(O(1)\)</span>，但是由于无理数在计算机中的存储不是精确的，所以结果的精度很难保证。</p><h2 id="分治">分治</h2><p>通过矩阵形式的递推： <span class="math display">\[\begin{bmatrix}F(n)\\ F(n-1)\end{bmatrix}=\begin{bmatrix}1\  1\\ 1\  0\end{bmatrix}\begin{bmatrix}F(n-1)\\ F(n-2)\end{bmatrix}\]</span> 不断向下递推，可以得到： <span class="math display">\[\begin{bmatrix}F(n)\\ F(n-1)\end{bmatrix}={\begin{bmatrix}1\  1\\ 1\  0\end{bmatrix}}^{n-1}\begin{bmatrix}F(1)\\ F(0)\end{bmatrix}\]</span> 接下来就是求解矩阵的高次方，通过<a href="https://baike.baidu.com/item/快速幂/5500243">快速幂</a>可以在<span class="math inline">\(O(logn)\)</span>时间内进行计算： 整数的快速幂代码： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans *= a;</span><br><span class="line">        a *= a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">raise</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> <span class="built_in">exp</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> half = raise(base, <span class="built_in">exp</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> base * half * half;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> half * half;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将传入的参数改为矩阵，乘法改为矩阵乘法，就可以得到矩阵快速幂： 以二阶矩阵为例，求解斐波那契数列： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;base,ans;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">multi</span><span class="params">(Matrix a, Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="comment">//第i行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)  <span class="comment">//第j列</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.a[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                res.a[i][j] += a.a[i][k] * b.a[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    base.a[<span class="number">0</span>][<span class="number">0</span>] = base.a[<span class="number">0</span>][<span class="number">1</span>] = base.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    base.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;   <span class="comment">//初始化矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果矩阵初始化为单位阵</span></span><br><span class="line">    ans.a[<span class="number">0</span>][<span class="number">0</span>] = ans.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    ans.a[<span class="number">1</span>][<span class="number">0</span>] = ans.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = multi(ans, base);</span><br><span class="line">        &#125;</span><br><span class="line">        base = multi(base, base);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    QuickPow(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.a[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="动态规划">动态规划</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;++i) &#123;</span><br><span class="line">        ans = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="refs">Refs</h2><p><a href="https://www.zhihu.com/question/28062458/answer/39763094">斐波那契数列</a></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linear Algebra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hardware Introduction</title>
      <link href="/2018/01/20/Hardware%20Introduction/"/>
      <url>/2018/01/20/Hardware%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>计算机硬件组成可以概括为下图： <img src="https://img-blog.csdnimg.cn/36738bbcb45545f2a2b98519a5d8f838.png" alt="img" /></p><h2 id="cpu">CPU</h2><p>CPU生产商主要是Intel和AMD。 Intel的产品主要有四种：</p><ul><li>Celeron(赛扬)：低端处理器</li><li>Pentium(奔腾)：比赛扬强，比酷睿弱</li><li>Xeon(至强)：属于服务器处理器 -E3 -E5 -E7</li><li>Core(酷睿) -i3 -i5 -i7</li></ul><p>AMD产品主要有三种： - FX系列：旗舰级多核处理器，AMD FX-8350 - Athlon(速龙)系列：入门级多核处理器，AMD Athlon X4 870K - A系列(APU)：A4，A6，A8，A10依次增强，集成了核心显卡，A10-7870K</p><p>以Core i7-4770K为例，Core系列i7级别第4代处理器，770代表性能编号，代数相同，编号越大，性能越好；K代表可超频。 笔记本CPU可能带有后缀U/Y/M等： - U：超低功耗笔记本CPU - Y：极低功耗笔记本CPU，比U更省电 - M：笔记本CPU</p><h2 id="显卡">显卡</h2><p>显卡分为核显和独显，核显集成于CPU内部，独显与CPU独立。 独显由GPU(图形处理器)和其他结构(显存，散热模块，PCB板等)组成。 目前生产GPU的主流厂商有三家：AMD，NVIDIA，Intel： - AMD(A卡) -HD系列：AMD HD 7970 x2---第7代高端(数字9代表高端，8中端，7低端)双核GPU，第三位7代表性能，3，5，7，9依次增强，x2代表双核心。 -R系列：AMD R9 M290X---R9：R系列高端；M：笔记本GPU；290X：2代高性能增强型GPU。</p><ul><li><p>NVIDIA(N卡) NVIDIA GTX 980 TI：X表示性能比GT系列更强；980：9代高性能；TI：增强型。</p></li><li><p>Intel(I卡) I卡都是核显，有两个系列： -HD系列：HD P4600---P：企业级；4600：代表性能，一般数字越大，性能越好。 -Iris(锐炬)系列：Iris Pro 5200---Pro：专业版；5200：代表性能，同上。</p></li></ul><p>显存：SDDR3，DDR3，GDDR3，GDDR5，同容量下性能依次增加。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang FAQ</title>
      <link href="/2017/01/30/Golang%20FAQ/"/>
      <url>/2017/01/30/Golang%20FAQ/</url>
      
        <content type="html"><![CDATA[<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build  <span class="comment">// 编译</span></span><br><span class="line"><span class="keyword">go</span> run  <span class="comment">// 编译运行</span></span><br><span class="line"><span class="keyword">go</span> fmt  <span class="comment">// format</span></span><br><span class="line"><span class="keyword">go</span> install</span><br><span class="line"><span class="keyword">go</span> get</span><br><span class="line"><span class="keyword">go</span> test</span><br></pre></td></tr></table></figure><p>types of package 1. 可执行包：只有名称为main才是 2. reusable：其它都是库</p><p>bool string int float64</p><p>Go不是面向对象的语言，因此没有class/instance的概念</p><figure><img src="https://img-blog.csdnimg.cn/54aa480dbe924f0a86bdb02b6af3c73a.png" alt="在这里插入图片描述" /><figcaption>在这里插入图片描述</figcaption></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit and Turtle</title>
      <link href="/2016/10/15/Rabbit%20and%20Turtle/"/>
      <url>/2016/10/15/Rabbit%20and%20Turtle/</url>
      
        <content type="html"><![CDATA[<p>知乎上有这样一个问题：<a href="https://www.zhihu.com/question/22364825/answer/27255001">如果兔子都在拼命奔跑，是什么给了作为乌龟的你前进的动力？</a><br />随着视野的不断开阔，我们难免怀疑自身前进的意义，曾经有很长一段时间我也深陷其中，直到看到余亦多先生的回答才有所感悟。</p><blockquote><p>我想每个人成长的经历中，都会或多或少曾被“自卑”的情绪所笼罩。我自己就是一个一直纠缠于“失败者”情结的人。</p><p>小时候因为痴肥，体育课上在同学面前抬不起头；搬到大城市，因为口音以及内向的性格，成为全班男生的出气筒；到了高中，进到全省理科实验班，才知道有些学霸的智商，是自己一辈子都无法企及的；初到美国，被身边同学认为是FOB，来自第三世界国家的乡巴佬；混进所谓的世界名校，看到身边一大波牛人，陷入平庸的沮丧；好不容易挤到纽约华尔街，看到名校中选出的所谓“精华”，才开始面对自己综合能力的缺失。</p><p>再回到香港，身边很多投行同事的业务能力与人际能力都远胜于我，只能在高压力的环境下苟延残喘；从乙方转到甲方开始做PE投资后，当跟索罗斯的儿子同桌斗智斗勇时，才能深刻体会“家学渊源”与“赢在起跑线”对一个人的意义。</p><p>由外资换到国企，开始看到体制内藏龙卧虎的主流玩家真正在玩什么，才意识到以前在边缘化外资环境下膨胀出各种不接地气的泡沫有多么可笑；随后开始接触到保险、银行以及其他金融领域的强人们，才知道在整个金融大版图中，十倍百倍于自己原来折腾的小池塘规模的资金，是在做什么。</p><p>分享了上面一大段，其实我想说的，最重要是如下几点：<br />1、就像talich老师在我去斯坦福念书以前赠我的那句话： 到了那儿，不用指望成为牛人，但至少你知道大海有多宽，能看到牛人在做什么，就够了。<br />对乌龟来讲，兔子存在的意义在于，至少让它知道这世界还有“兔子”的存在，以及兔子跑得有多快。盗用一句标语：让你看到更大的世界，这本身就是最大的意义。<br />2、兔子的存在，能够让乌龟直面自己就是一只乌龟这个事实。有勇气面对真实的自己，才能准确的定位自己的位置，也才能冷静的思考最适合自己的人生规划。而这，很多时候恰恰是最知易行难的事。<br />3、其实人越往后走，越会深刻体会到“阶级”的不可逾越性。愤青的时候会咒骂：“这世界为什么这么不公平。”可当你不再被荷尔蒙冲昏头脑时，也许你会开始思考：既然现在是这种情况，那我应该做点什么呢？当你绞尽心机让自己变得更好的同时，也许你也在让这个世界变得更好。</p><p>当樱木花道完成两万球的训练之后，他才知道流川枫有多厉害。<br />因为在一次比赛中，他看到流川枫的一个中投，这个起跳，这个姿势，这个弧线，竟然是他训练中想象的最完美的画面。<br />他很气，紧握这拳头，又不甘心，他问教练：这只狐狸是从什么时候开始打篮球的？<br />安西教练：你应该好好的盯着流川枫的姿势，尽可能的模仿他，然后用3倍于他的训练量训练。这样，你才有可能在高中阶段之内超越他。<br />流川枫是那只兔子，幸运的是，樱木大概也是。</p><p>题主的困惑在于，樱木是个天才，尚且如此，而你，可能只是木暮。<br />李宗盛有一首歌，歌词是这样的： 最近比较烦比较烦比较烦，我看那远方怎么也看不到岸，那个后面还有一班天才追赶，写一首皆大欢喜的歌，是越来越难。</p><p>中年危机全都是这样的：<br />前面比你牛逼的人一眼都望不到岸，后面一班天才，比你有精力，比你聪明，比你学历高，比你国际化。而你，小孩成绩你得操心，老婆吃秘书的醋你也得操心，父母身体逐渐糟糕，最可怕的是你头发越来越少，身体越来越胖。</p><p>题主的困惑在于，比你天才的那个人，还比你努力；比题主的困惑更可怕的是，这个比你努力的天才，还比你年轻，比你有精力，这意味着，即使你想努力，你也没有那个精力努力。这就更无力了。</p><p>《蜗居》里面，宋思明想抢郭海藻。他比小贝成熟、稳重、懂得女孩的心思，样貌也不差；他有钱，有人际，能帮海藻解决问题。<br />若是宋思明未婚，小贝拿什么跟人家拼？小贝可能一辈子都达不到宋思明的高度，即使拼尽全力。<br />这才是无力感。<br />所以，我们能做什么。</p><p>如果你是个绝对的蠢蛋，那我只能说，请你尽量少的认识这个世界，最好一辈子不要离开你生活的地方，有时候知道的越多，越痛苦。当你看到那么繁华的城市，那么美丽的女孩，那么高端大气上档次的生活都与你无关的时候，更多的痛苦便会袭来。<br />如果你是个笨蛋，又不肯努力，那也请你知道少一点。<br />如果你不是个绝对的蠢蛋，又愿意努力，请你参考第一段安西老师的话：盯着那只兔子的每一个动作，能学多少学多少，然后以他三倍的训练量训练。</p><p>兔子一定会打盹的，即使牛逼如牛顿，30岁之后也再无建树；也不是每个像科比一样的天才，都知道洛杉矶凌晨四点的样子；你知道洛克李吗？火影里那个相信笨鸟先飞的热血少年，他说，努力的天才也是天才。<br />我曾经在一个答案中说过，勤奋，可能是这个世界上最被高估的美德。但是对于一个毫无天赋的人来讲，可以依仗的就只有勤奋了。</p><p>如此，即便你还是追不上兔子，你可以是乌龟里跑得快的那一个。<br />如此，即便你是木暮，你也能做成一个，每天都比昨天好一点点的木暮。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实习 &amp; 秋招心路</title>
      <link href="/2015/01/13/%E5%AE%9E%E4%B9%A0%20&amp;%20%E7%A7%8B%E6%8B%9B%E5%BF%83%E8%B7%AF/"/>
      <url>/2015/01/13/%E5%AE%9E%E4%B9%A0%20&amp;%20%E7%A7%8B%E6%8B%9B%E5%BF%83%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c23ca660f6c1db3789e85ca9ce5434cfa7002bb8cb33ca0062300728868f6b63">418fac4f173397084caccc18ab9f089e90c7a29408af94da76702e54e165326bdfdb094b510cf25885a0cd4bebf25c3098269290c38e51dbe8fc8f30997c967214e0e69f3e3a952f38f01524d5f58199e7bbe01a6a39208a11e276f34232a5134b820e0a201550f0314f96369caf56eb94c148eb15b68f4cd0f42ffb8c143394f03678bf60d55aa73a8ff35cb16f69571f8b985ca1caa11c54eb31b71a3ff7078ee91bb72df458707b5c04defa8c85bec87c942f5eb74cec86ac02493cbc5b1f7350bf6f50ed97a90f5146e612312b9b6f1b804344ed570bb3d188b0831f14cd3b17f027e0af742b88e0f4d334c527dd3e20e2898a825e06a140929381a8149e1a875cde504165cecb6cb25cfa03b776c96ddd894eafd4f64cca0dc7bb24e3e5aab005fd9cd018954bbcce3ee4db9ba7bf235124257cee2c2d5027a698c448543cb239f6aa92da8af3c56ea190222e06fd7945aa763b1a09b12e450ec0fe9395</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
