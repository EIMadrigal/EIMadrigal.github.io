<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Computer Science Roadmap</title>
      <link href="/2019/02/15/Computer%20Science%20Roadmap/"/>
      <url>/2019/02/15/Computer%20Science%20Roadmap/</url>
      
        <content type="html"><![CDATA[<p>有感于国内令人发指的CS教育（尤其某校的计算机基本就是一堆SB在自嗨自娱自乐而已），决定自学为主。<br>主要资源是四大的比较完整的课程：video+reading+lab</p><ul><li><a href="https://github.com/prakhar1989/awesome-courses">Awesome CS Courses</a></li><li><a href="https://conanhujinming.github.io/comments-for-awesome-courses/">名校公开课程评价网</a></li><li><a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a></li><li><a href="https://github.com/huangrt01/CS-notes">RT Huang的自学笔记</a></li><li><a href="https://learn-sys.github.io/">LEARNSYS</a></li><li><a href="https://github.com/ossu/computer-science">OSSU</a></li><li><a href="https://www.zhihu.com/question/308850392/answer/1324509357">如何学习设计模式？</a></li></ul><p>video比较费时间，而且我看视频总是来不及反应，好像不太适合我，所以一般只在看不懂材料时去针对性地看看视频。（当然一些讲得非常好的视频除外）</p><hr><h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul><li><strong>Programming Languages</strong>: 精通C，熟悉1~2门(Java/Python/C++/Go)，了解一门(Haskell/Rust/)，掌握debug技巧</li><li><strong>Tools/Frameworks</strong>: 熟悉Linux系统的各项操作，最好看下源码，掌握Git等工具和框架</li><li><strong>Math</strong>: Linear Algebra/Probability/Statistics/Combinatorial Mathematics/Discrete Mathematics/Calculus 现用现学</li><li><strong>Core Courses</strong>: DS/Algorithms/OS/Organization/Network/DB</li></ul><h2 id="Coding-Interview"><a href="#Coding-Interview" class="headerlink" title="Coding Interview"></a>Coding Interview</h2><p>这方面<strong>很弱很弱</strong>，要勤奋练习，经常性在blog<strong>分析总结</strong>，<strong>穿透做过的题目及变种</strong>。</p><p>不要抱着可能撞到原题的心态去准备，反复练习提升自己的能力，需要有较多的训练量。</p><p><strong>Python快速过，Java也行，千万不要用C++浪费生命！！！</strong></p><p>复杂度最优，Google Doc/白纸练习，Bug-Free<br>easy 5min medium 10<del>15min hard 15</del>20min</p><p>G实习：中文2轮：45min, 自我介绍+warm-up+hard, 1~2道medium题，白板<br>G校招：4轮（3中+1英），同上</p><ul><li><strong>Data structure</strong>：哈希表、堆、AVL、链表动手实现一遍，B树啥的都能扯扯~</li><li><strong>Algorithms</strong><br><a href="https://leetcode-cn.com/problemset/lcof/">《剑指offer》</a> 67/67<br><a href="https://leetcode-cn.com/problemset/lcci/">Cracking the Coding Interview</a> 40+/109<br><a href="https://leetcode.com/">Leetcode</a> 310+/700+<br><a href="https://www.nowcoder.com/">牛客笔试题</a></li><li><strong>System design</strong></li></ul><h2 id="Projects-Paper"><a href="#Projects-Paper" class="headerlink" title="Projects/Paper"></a>Projects/Paper</h2><p><strong>选一个前沿的、不太讨厌的方向，研究研究，做点小项目</strong>，具体的方向可以参考<a href="http://csrankings.org/">CSRankings</a></p><ul><li>实习项目</li><li>学校大作业</li><li>兴趣项目：AutoML-ID, CMU 15-319, CS231n的3个小项目</li><li>开源项目</li></ul><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul><li>GPA/数学/英语</li><li>比赛奖项</li><li>沟通交流能力</li><li>面试技巧<br>面经技巧只是锦上添花，最重要的还是及格的实力。nothing replaces hard work.<br>面经是告诉你这家公司面试的时候喜欢问哪些知识，而不是告诉你他们喜欢问哪些特定的问题。<br>更是一次需要充满着沟通与交流的谈话，让面试官认为他/她愿意成为你的同事</li></ul><p><strong>关于项目</strong><br>背景主要包括场景、问题定义、需求、自己负责的部分扮演的角色等等。<br>指出项目中的困难点和解决方案</p><p><strong>关于paper</strong>：research的背景</p><p><strong>关于做题</strong></p><ol><li>问清题目：数据范围是多少？这个数组的大小范围是多少？能不能给个样例？如果输入是这个，那输出应该是什么</li><li>确认函数签名</li><li>确认思路：修改输入数据</li><li>确认corner case处理方式</li><li>编码过程中不断交流</li><li>主动测试：写完后不要急于告诉面试官写完了，手动跑一个样例：在屏幕上写出中间变量的当前取值，然后用鼠标光标告诉面试官现在程序跑到了哪一行代码，当前各个变量的取值是多少等等</li><li>主动分析复杂度</li><li>讨论算法的trade-off</li></ol><p><strong>关于其它</strong><br>先拿一些自己不target的公司练练手<br>虽然我不太懂，但是可以试着说一下<br>说出自己的insight:cache不友好<br>获得监督信息与正反馈<br>模拟面试</p><h2 id="How-to-learn"><a href="#How-to-learn" class="headerlink" title="How to learn"></a>How to learn</h2><p>It is very important to take classes around my future work. It doesn’t matter you learn it slowly, the most important part is that you <strong>take it seriously</strong> and build a <strong>solid foundation</strong>.<br>根据大佬们的经验，一门课大概要花150-300小时，每天2小时至少也要2个半月，所以千万千万不要着急，不要急于求成，总想着完成任务，多多反思自己到底学到了什么？真的透彻地理解了吗？又有多少内化到自身的知识体系？<br>还有就是最好按照他们的课表时间上课，同时上的课最好不要超过2门（经过血泪实践，我只能1门单线程┭┮﹏┭┮，他们课程内容实在太充实了…，然后自己还有一堆屁事…）</p><p><strong>严格遵守学术规范</strong>，独立完成之后可以参考别人，修正自己。</p><p>Recently I’ve changed my way to learn new things. Previously I just wanted to understand the new things and tried to memorize all the details of a specific problem, or just translated others’ materials into my words, which melted my brain and showed a very low efficiency. The reason why I learn things this way (passively) is mostly due to the Chinese’s cramming education. But for me, heuristic teaching (actively) is more appropriate. The specific problem/model/algorithm is important, but the <strong>motivation</strong> is much more important. <strong>Everything has its motivation.</strong> So I decide to write my blogs with the following components:</p><ol><li>Motivation: What problems do we meet? Why propose this one?</li><li>Details: Mathematical derivation or tricky things.</li><li>Example: Use a handy example to illustrate.</li><li>Implementation: Code it out or use it to <strong>solve the problem</strong>.</li><li>Properties: <strong>When</strong> should/can we use the method? When shouldn’t/can’t? <strong>Why</strong>? What’s the benefits and drawbacks if we use it?</li><li>Can we make some improvements on the off-the-shelf method for a specific problem?</li></ol><h2 id="TODO-amp-DONE-LIST"><a href="#TODO-amp-DONE-LIST" class="headerlink" title="TODO &amp; DONE LIST"></a>TODO &amp; DONE LIST</h2><p>Count the courses I’ve taken so far:</p><ol><li>Introduction to Computer Science. Harvard University<br>“This is CS 50”. It should be the first class of CS rather than Haoqiang Tan’s C Programming Language.</li><li>Linear Algebra. Massachusetts Institute of Technology<br>If you want to learn Linear Algebra, just follow this one and you’ll be fine.</li><li>Mathematics for Computer Science. Massachusetts Institute of Technology<br>Very interesting course but I only took several lectures. SAD~</li><li>Data Structures. University of California, Berkeley<br>Strong recommend for Data Structure. You’ll pick up Java from the interesting projects.</li><li>Introduction to Computer Systems. Carnegie Mellon University<br>If you only want to take one system course, then select this one. But I haven’t finished the whole lectures and labs. SAD again~</li><li>Introduction to Database Systems. Carnegie Mellon University<br>Hard for me. Just finished lab1. I’ll come back one day~</li><li>Machine Learning. Stanford University<br>It’s almost the first course I took after I found the true CS courses. But I forgot a lot. Sorry Andrew~</li><li>Positive Psychology. Harvard University<br>When I start to be anxious or depressed I’ll go and find the lecture. Tal is an amazing teacher and I’m sure you’ll become happier.</li><li>Convolutional Neural Networks for Visual Recognition. Stanford University<br>High quality, especially its readings.</li></ol><p>CS144 + Go + CS5412 + 6.828 + 6.824 + 6.031 + SICP + 6.033 + CS262</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
