<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>痛撞南墙才回头---高考五年记</title>
      <link href="/2020/06/08/%E7%97%9B%E6%92%9E%E5%8D%97%E5%A2%99%E6%89%8D%E5%9B%9E%E5%A4%B4---%E9%AB%98%E8%80%83%E4%BA%94%E5%B9%B4%E8%AE%B0/"/>
      <url>/2020/06/08/%E7%97%9B%E6%92%9E%E5%8D%97%E5%A2%99%E6%89%8D%E5%9B%9E%E5%A4%B4---%E9%AB%98%E8%80%83%E4%BA%94%E5%B9%B4%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">0 前言</h2><p>距离2015年高考已经过去了整整5年，这段日子埋藏着太多不堪。尽管现如今我已经开始了全新的生活，但仍想把自己曾经的问题和思考展示出来，一来当作对过去的告别，二来也希望这些教训能给境遇类似的人一些启发。</p><p>这篇文章字字血泪、句句属实，我不想熬制鸡汤或者贩卖焦虑。文中的一些想法都是通过亲身经历、思考、与前辈同学交流得到的，可能不太成熟，欢迎大家批评指正。</p><hr />认真去划决定命运的小船，却不知道未来会漂向哪里。<p align="right">——题记</p><h2 id="高中故事">1 高中故事</h2><p>文章题目虽然是高考五年记，但其实主题与高考并没有多大关系，而且上大学以后，我很少主动提起高考这档子事，只是为了故事完整，就从高中时代讲起。</p><p>高中三年是在一所县城高中，高考压力很小，学习也是波澜不惊。我并没有像传说中那么拼命学习，努力程度连初中都不如。相反，我的高中自在安逸，回想起来让人有些后怕。作为典型的“小县城学霸”，由于比较轻松就能考到前几名，所以我将大把大把的课余时间拿去运动，以至于已经主次不分。</p><p>做题总是很无聊，而我不知道是因为骄傲，还是因为懒散，遇到难题总是放弃思考、看看答案了事，看不懂就去睡觉，每天做些简单题（毫无必要）保持自信。事实上，我隐约知道外面有更大的世界，但却不知道那个世界是什么样子。那时我几乎没有可以追赶的目标（不像初中），这也许是高考失败的一个原因吧。自负、虚荣以及平日的偷懒终于在高三时酿成了苦果，那几次大型模考理综难度激增，跟平时训练完全不是一个套路。理综彻底被完爆的我后来再也没得过第一，化学甚至长期徘徊在及格边缘。看到这，你也许以为我会发奋努力上演逆袭神话，但现实永远是残酷的。实际上我并没有多少改变：该踢球踢球，该偷懒偷懒，甚至在四五月份时我都打算放弃物理，想着随便混几分算了。高考的目标也变得无所谓起来，反正那一直都是挂在墙上终将被戳破的泡沫罢了。到最后我干脆抱着爱考哪考哪的弃疗心态，只希望尽快毕业。</p><p>我之前对于“小县城学霸”这个词一直嗤之以鼻，即使高中物理老师曾经不止一次强调过我们只是一个县城中学。不过当时我觉得学霸就是学霸（现在显然我自己并不是），厉害的人到哪都那么厉害，哪有什么小县城不小县城。不过后来当这类人的思维方式深深影响我的时候，才发现原来老一辈人的说法未必都是错的，“不听老人言，吃亏在眼前”这句古语也并非空穴来风。</p><p>2015年的高考和往年一样平淡无奇，出分后我异常平静（要是没上600该多好，那我就坚持复读了）。我想学物流管理或者工商管理，前者是因为我喜欢看到井井有条的交通运输网，最终将东西错落有致地归位，后者则纯粹是因为高大上。不过很不幸，这些想法并没有得到亲戚父母的支持，他们说那些专业虚无缥缈，毕业后不好找工作。</p><p>信息的闭塞使得我（包括那些已经工作的亲朋）并不了解各个专业的细节以及未来可能的职业轨迹，我甚至搞不清电子信息与计算机之间的关系。<strong>18岁前的我们只知道读书，习以为常的主流价值观就是“努力学习，考高分，上好大学”，在这样主流价值观的裹挟下，很多人相信 “一分耕耘，一分收获”，彷佛只要足够拼命学习，一切都会迎刃而解。然而这种简单的线性的思维方式完全是对真实生活的一种片面归纳，强行被灌输的这些价值观念是否契合当代社会真实的发展轨迹，甚至是否正确，都有待商榷。也许当某一天我们突然发现自己的世界观无法解释见识到的种种现象时，才会在深夜里辗转反侧痛哭流涕的同时，试图去打破曾经的桎梏，而人生信条的崩塌和重塑无疑会是极具撕裂感的、漫长的过程。</strong></p><p>此时的我们对社会的认知极度匮乏，高中也完全没有相关的职业指导教育，盲目地填报志愿，这是当时很多人的通病，我也不例外。在西工大三航学院、厦大经济学和西安交大的来回纠结中，最后一天将交大的专业大致按照历年录取分的高低依次填进志愿表，这在现在看来是多么不可思议的一件事，而我，最后就是这么干的。就这样，稀里糊涂地来到了交大电子信息类。 ## 2 懵懂时光 到大学后，集体住宿搞得我很不适应，晚上总是很晚才睡着，早上起个大早去跑操，结果就是几乎所有早上的课我都一睡而过。那些课程我也着实提不起兴趣，考试总是随缘突击，结果就是期末挂了一门工程制图，那种空间想象能力我差到不可救药。我个人对新环境的适应一直都很慢，所以进入一个崭新的阶段，开始时总是做得十分差劲。</p><p>不过好在我并非一个一成不变的人，于是开始尝试去改变。由于迟迟找不到方向所在，试错的过程持续了将近两年半的时间。选修了一门职业规划的课程，想借此明确未来的打算，弥补这本该是很早前就完成的人生必修课，不过这门课与大学物理一样无趣；参加了数模比赛，虽然得了奖，但除了提升软件安装和论文写作技能以外，并没有什么新奇之处；参加了社团的支教，这是我当时唯一觉得价值非凡的事情，这段经历也对我后来的想法产生了重大影响，可是这并没有从本质上解决我的问题：<strong>我未来到底想干嘛</strong>？辅修了金融学，也不过帮助我提早排除了一个未来可能从事的行业而已；去奶茶店进行所谓的“创业”，半年后店铺出租，我“失业”了；甚至于无聊到搞了一个公众号，想看看自己有没有自媒体运营方面的喜好，最后也是无功而返。</p><p>说来倒也有些矛盾，除了少数大神一直都有明确的方向或者可以兼顾方方面面以外，我们大多普通人，大学里如果一直不停尝试各种方向去试图寻找兴趣，那必然会分散精力，成绩不够好带来的代价就是后期通过更多时间和精力去弥补。可是如果很少尝试，一条道走到黑，那后果也是可想而知。两种决定都会付出代价，只是时间早晚而已。</p><p>我想既然这些都无济于事，就先提高绩点吧。于是从大二下学期直到毕业，我都在认真学习。即使信号与系统、模电数电那些专业课依然没有学懂，但我发现考试与学没学懂关系并没有那么密切，我居然拿到了在大学的第一个100分。欣喜之余，我隐约觉得这里面有什么问题，但是也懒得思考。</p><p><strong>生活就是这么奇妙，收获的成果有时并不与你的付出成正比</strong>。很快我就发现即使我再努力学习，平均分最高也不过89，全系排名好的时候30多，差的时候50多，那时我才初步意识到<strong>人与人的差距有时候不是通过努力就可以弥补的</strong>。</p><p>成绩上不去，我就想试着去开发一下自己的科研禀赋。于是大三寒假我报了ML方向的一个组，不过我压根没有见过报名的那个教授本人，而是被直接分在了一个副教授手下，并进而被分给了他的一个博士。见不到leader本人我完全不觉得惊讶，毕竟IEEE Fellow怎么可能去带一个本科生？但令我不能理解的是我明明报的是ML，但平时的工作却完全是网络通信方向，又是讨厌的信号和从未搞懂的相位。看了一个寒假的论文，帮助他们测试实验数据，在组会上讲论文，尽管我还不知道自己想做什么，但却知道自己厌恶什么。随着时间推移，我愈发觉得自己正在南辕北辙，加之实验室不在一个校区，后来也就主动退出了，科研初探随即宣告失败。</p><p>到此为止，能想到的方式我都一一尝试，可是收效甚微。那段时间我时常在球场散步，一圈又一圈，脑子里就想着两个问题：<strong>我到底喜欢做什么？我未来到底要干嘛？</strong></p><p>人生总有想不明白的问题，苦苦思索不得其解，只能先搁置起来。事情在大三下学期出现了转机，我们系开放了两门CS的课：OS和微机原理，加上ACM大佬们的影响，我开始发现计算机课程的乐趣，那是我第一次认认真真、彻彻底底搞懂了一门课，甚至于我竟然乐意废寝忘食去完成课程的Project。正反馈也来得恰到好处，两门课我都拿到了90+的成绩，那时我隐约有了转CS的想法。顺便要纠正一下，很多人误以为通信转CS很容易，事实上除了三四门相同的专业课以外，通信与CS本科期间学习的东西就像是两条平行线，通信转CS和转金融没什么差别。可能是听到太多科班CS大佬的故事，我始终觉得自己与科班出身的差距无异于一条鸿沟，以至于敬畏到忘记自己该学些什么，尽管后来发现事实并非如此，<strong>人有时候总是自己吓唬自己</strong>。</p><p>说到这就难免谈到劝退的话题，生/化/环/材被黑的体无完肤，大家都要去金融/CS，有时候我也会想：作为所谓的名校学生，我们享受了比较优质的教育资源，然而却少有人愿意投身基础科学研究，这才是科技兴盛的基石，过去不久的华为中兴就是典型的正反例。也难怪有人戏谑“中国只有互联网，没有计算机科学”，我们的互联网公司都在模仿美帝，腾讯学习ICQ，百度学习Google，阿里学习eBay，可是我们却没有看到美帝不仅有这些应用层的公司，还有Intel，Apple，Qualcomm等一大批芯片硬件厂商作为基石，而我们的BAT又有谁做基石呢？一股脑转去高薪行业，这会不会有些太过自私了呢？曾经的理想主义色彩淡薄了许多，我是否也变成了所谓的“精致的利己主义者”，而忽略了对社会的那份责任？但转念又一想，如果一个社会逼得许多人转去金融/CS，那是不是这个社会本身出现了问题呢？遇到一些不顺心的事，千万不要想不开，很多时候不是你的问题，而是整个社会的运行机制出现了偏差。</p><p>由此也可以看出：<strong>世俗意义上的成功更重要的决定因素是历史的进程，选择远远比努力重要得多，而信息和自我定位则会很大程度上左右你的选择。某些情况下努力可能只占1分，而成长环境、家境状况、历史进程、个人选择、贵人相助甚至运气则可能占9分，甚至99分。</strong> ## 3 曲折岁月 时间飞逝，一转眼三年已如白驹过隙。大一的成绩太差，总成绩大概只落在了全系40多名，掐指一算就知道在保研边缘，如果出国的大佬比较多，我也许会有机会。所以我不敢怠慢，两手准备，保研自然最好，若是失败也不能耽误考研。</p><p>大概是8月份回校的，那阵就看数学，没什么状态，大概心里还是侥幸着能够保送，也不知道专业课该看计算机还是通信的。9月大家人心惶惶，有出国考T考G的，有各种保外保内的，还有穿着西装到处参加面试的，大家也都比较焦虑，放弃考研的也大有人在。浑浑噩噩就到了9月中旬，保研名额给到了第42名，而我是第45名。颇具戏剧性的是，之前坊间传言会有20多个专硕名额，搞得人心惶惶，我还幻想着保专硕算了，后来也不了了之。</p><p>这下本以为彻底死心，考虑到自己当时备考效率极低，根本看不进去书，加上周围的同学纷纷拿到了offer，我下定决心找工作。于是就完善简历，练练编程的题目，投了华为、中兴、网易等几个公司的研发岗，差不多耗了一个礼拜，也收到了陆陆续续的笔面试通知。没想到生活总是会有<del>意外的惊喜</del> ，系里通知有一个国防科大的普通生定向保送名额，在我前面的2个人都放弃了，再加上军校的缘故，我竟然没怎么思考就选择了放弃，这该是第一波坑操作。</p><p>后来不知怎么滴，也许是和老师朋友聊了很多，也许觉得自己还是太菜，莫名其妙又想读研了，稀里糊涂就推掉了所有的面试，一是不够自信，二来不想分心。又把书重新拿了起来，滚去复习。奇怪的是：这次竟然可以静下心来，仔仔细细做题了。这该死的第二波坑操作，事实证明：<strong>秋招远比春招重要并且容易得多</strong>，这一点我会在后面解释。</p><p>时间来到了9月底，这下终于可以安心复习了。出于对通信专业课的阴影，我还是选了CS，还有是因为大三时几门计算机的课学的还不错，倒也饶有兴趣。</p><p>那，选哪个学校好呢？我心想，既然要考研了，本科比不过他们，研究生的学校可不能输给他们。殊不知这就是典型的“高中生心态”，<strong>没有根据自己的定位和当前的规划去做出恰当的选择，而是冲着高大上的标签去做决定，这样的决定显然是冲动并且幼稚的</strong>。清北太难了，比XJTU好的就ZJU、SJTU、FDU、NJU，最想去的是SJTU，查了之后才知道2018年SJTU CS就招了两个学硕、10几个专硕，我想难度太大了，遂杀掉（题外，2019SJTU CS难度蛮低的）。之后查了这几所之后，发现NJU分数又低、招人又多，就开始复习NJU的专业课。</p><p>专业课一共有5门，很难，每天看的头昏眼花。屋漏偏逢连夜雨，10月招生简章出来后，NJU的名额还是和往年一样多，结果过了差不多一个礼拜，官网突然把名额杀了一半，剩20几个了。我想，这也变难了，再加上群里大家信誓旦旦的样子，和朋友商量后，我在来回纠结和迷之自信中又换了学校（题外，我的分去年上NJU没啥问题）。就剩ZJU和FDU了，FDU虽然好考，但专硕却不提供住宿，还恰是从这一年开始，ZJU就这样成了唯一的选择。结果表明，复习时间真的太过紧张，尤其是专业课。408的难度相信都有所耳闻，时而做对，时而连着错很多，心情也像过山车似的起起伏伏，无数次都有撕掉卷子的冲动。我只能死马当作活马医，其实直到最后，我甚至连习题集都没有做完，很多知识点也是一知半解。这该死的第三波骚操作。</p><p>当时和几个出国狗一起自习，看过他们托福考出来的欣喜，也见过GRE 310的落寞，当然还有那一起吃饭时互吐的苦水。我说考完的日子就舒服了，说我已经列好了长长的TODO List。他们说，其实你有没有想过，这本身就是人生啊！</p><p>12月的日子很难熬，临近考试，觉得自己不是在查漏补缺，而是在女娲补天。心情总是飘忽不定，仿若过山车一般，题目全对了会喜上眉梢，英语阅读5错4时又觉人生无望，揉过的专业课卷子冷静下来还是只能乖乖去看。</p><p>说来我算是一个乐观主义者，或许是<strong>人总是愿意相信对自己有利的事情</strong>。寒假可能有一丝落榜的焦虑，但大部分时间我还是在准备机试，每天都在做算法题（题外，这大概是唯一正确的事了，春招用上了）。 ## 4 折戟沉沙 出成绩后就得知没有过线，我顿觉失望与惶恐。稍一比较，才发现别人的生活多姿多彩，自己反而是一直学习却连考试都考不好的傻逼。当天的我十分慌张，立刻去查找调剂信息。得知中科大软院收校外调剂，心情才稍稍舒缓了些。虽然学费贵点，但去中科大读个硕士还是不错的。</p><p>看着94分的专业课，我一时语塞。有些不甘心的我一遍又一遍回忆着这大半年发生的事情: 本科通信、三跨浙大、备考也算不上充分，落榜也实属正常。我一直尝试重新认识自己，可现在愈发地不认识，像是一个完完全全的陌生人。刚开学后的那两天我处于弃疗状态，觉得什么都无所谓了，爱咋咋滴吧，调去差点的也行，随便找份工作也行。</p><p>冷静了几天，又觉得这些挫折并非坏事，现在受挫总比将来走向社会好。况且成年人应当为自己的错误付出代价，不论是选择出了问题，还是不够努力。挫折对于我而言绝对谈不上财富，只是希望让我这个转变缓慢的人长点教训。我不是一个一蹶不振的人，也不是度量狭小，只是受了打击，犯了错，总得学点什么，不是吗？积极的心态很重要，凡事总要向前看，过去的就过去吧。工作要好好找，调剂也要努力争取，解决好当下，求一份心安。</p><p>鸡蛋不能放在同一个篮子里，我又迅速确定了其它几个调剂的学校，排除了调剂本校和浙大相关专业的可能。后来也在老师和同学的推荐下了解了一些研究所，但大多是军工性质，我并不想去。很无聊的名校情节以及差强人意的总分使我把比本科差的学校都直接排除，最后就确定了3个：科软、山东大学、中科院成都所。</p><p>我想着这3个再差也能去一个吧，但是<strong>现实远比想象的更加要命</strong>。直到3月10几号才知道科软从今年开始不收校外生；接着是山大，学硕调剂有3个名额，专硕有11个，我想着报个人多的，却不知再次选择出错：专硕的分数高的吓人，没有拿到复试资格，而学硕反而分数低的多。拖了最长时间的就是中科院，预调剂很早就填了，我甚至都填完了政审表，傻傻地把这个当成最后的救命稻草，直到3月底没看到名单，我还是相信会来的，这大概因为我实在想要这个硕士吧。到了4月10日，我对比了去年的招生人数和今年一志愿人数，发现可能不会再有调剂了（之前发邮件问了但没有回信）。</p><p>期间也不敢落下春招，当时想得太简单：不能既没学上，又没工作。一口气投了十几份简历，所幸除了冲突和放弃的之外，都拿到了笔面试通知。因为我是半路CS，再加上春招已经没有大公司的职位，所以也投了一些非技术岗。</p><p>说个题外话，找工作一定要在秋招，因为春招只是秋招的补录，名额少、难度大。拿我作为反例，春招想要投递大公司（BAT），都已经没了HC，错过这一次你就再也不是应届生了，自然也就没了校招的待遇。我后来才了解到：阿里巴巴光是实习生转正和提前批就已经占掉了绝大部分HC，甚至于秋招都已经没什么机会了。</p><p>那段时间我几乎没怎么休息，也没心思去休息，只希望3月底可以确定去处，未来的不确定对人真是煎熬。认真去准备的有五家：TP、OPPO、浦发总行、华为和字节跳动。前三家都给了offer，华为没有了消息，字节跳动则是笔试挂掉了。后来突然发现自己跪在了哪里，华为这种公司，或者说几乎所有公司，都需要你来好好干活。但我的致命错误就在于太老实，而没有学会伪装。我甚至在主管面说自己还是想继续深造，如此愚蠢的错误我接连犯了很多次，这是学会的第一课。</p><p>我其实很讨厌面试时看重忠心的公司，现代企业本来就该是我付出劳动力、你付给我报酬，我当然会把份内的事做好，你也不要占用我其他时间。情怀不能当饭吃，这种忽悠我觉得非常小儿科，甚至不是现代企业所需要的管理方式。</p><p>找工作的心态一直在“卧槽，我还挺牛B的”/“唉，我真傻B”之间来回切换：某司HR主动打电话问我要不要去；那么简单的题目竟然不会做；某司竟然直接免掉了高管面；我怎么问了那么傻X的问题……唯一的共同点在于N轮面试真的会把人榨干。</p><p>后来拒了TP，其实OPPO也没签，一直在等菊厂的结果，直到打听到别人已经拿到了offer，才确认自己凉了。这时OPPO已经快要截止，唯一庆幸的就是自己联系了一起去面试的同学，这才没有傻等下去。虽然我知道不能以偏概全，但OPPO的HR在招聘过程中展现出来的专业素养比某为不知道高到哪里去了，“店大欺客”的道理是明摆着的。</p><p>一步一步把一手好牌打成了今天这个样子，我终于体会到其实<strong>人生的道路是由很多因素共同决定的，并且很多机会都是转瞬即逝</strong>。另外，自己也就是中人之资、半吊子水平而已。</p><p>尽管如此，起初拿到offer后，看着协议上的薪资，我有些兴奋：虽然package不大，但就我了解的情况，也算是比较好的待遇了。我庆幸自己搭上了CS的末班车，还被邀请给下一届分享找工作的经验，甚至开始早早谋划起在另一个城市的生活...... ## 5 痛定思痛 草草签约以后，我总觉得哪里不对劲，却说不上来。<strong>我发现自己比之前进步一点的是遇到不明白的问题，会去思考、去交流、去尝试得到一个答案，尽管这个答案不甚完美，甚至在上帝视角下都不一定正确，但这也比敷衍了事强上一万倍。</strong></p><p>考研失败就像压垮骆驼的最后一根稻草，让我开始跳出虚荣的怪圈，真正重新认识、评估自己。是不是一切从开始就错了呢？为什么在给予别人建议时头头是道，到了自己就非得撞得头破血流呢？万千世界，大家虽然所处位置不同，但每个人都在寻找自己的局部最优，而且结果好像都不错。唯独我，好像学习率太大，损失函数竟有些发散，距离最优点也越来越远。<strong>那种疼痛感，就像从崖边跌落，远比在平地上摔倒更令人刻骨铭心。</strong></p><p>我像过电影般一遍遍回忆这几年的事情，也时常和各种背景的人聊天（徐老师的<a href="https://www.cnblogs.com/EIMadrigal/p/11973810.html">文章</a>给了我很大启发，我也和徐老师交流过，人很nice）。我逐渐开始发现自己的问题：周围都是IT的同学，大多都想着高薪买房，目前看来的确不错，但或许正是在这种<strong>单线程思维</strong>的浸染以及<strong>同质化的比较</strong>下，我也在不知不觉中迷失了自我，这种象牙塔带来的禁锢总有一天要被打破。更加本质的原因在于我自己<strong>本身没有一个清晰的定位并且没有明确的职业规划，哪怕只是五年、十年的规划</strong>。兜兜转转又回到了那个熟悉而又陌生的问题：我未来到底想做什么？媒体软文总是告诉我们要不忘初心、坚持梦想，却从来不告诉我们怎样寻找初心？怎样选择梦想？</p><p>与在国内互联网公司实习的同学交流后，我看到了高薪背后的挣扎：长时间的加班使得很多人到一定年龄后只能主动退出。以前我从来没有想明白：为什么某为每年从各大高校招聘那么多人，企业利润总是有限的，招那么多人怎么能消化呢？某为又不像国企，政府有命令必须帮助国家解决就业，国家养活完全可以理解。后来当我某一天突然看到了某为的离职率，才明白其实不过是数量巨大的新人换旧人而已。很多年轻人几乎没有自己的生活，疲惫而又无奈。这才是普通大众的真实情况，我们不该只看到某某大佬创业成功去纳斯达克敲钟，某某大佬又融到了C轮，这种“<strong>幸存者偏差</strong>”掩盖了“<strong>一将功成万骨枯</strong>”的现实，也让我重新审视自己：你愿意一直从事这样的职业吗？显然，答案是否定的，因为我始终觉得工作不该成为生活的主旋律，还有很多更有意义的事情等着我去完成。</p><p>顺便插一句：如果你不确定自己要干嘛，<strong>趁早去实习</strong>，接触真实的工作环境远比在象牙塔里意淫要实在得多，提早打破学校里单一价值评价体系带来的桎梏。此外，实习的好处也自不必多说，牛逼公司的实习永远都是简历上最耀眼的闪光点，甚至于在互联网，实习经历大于其它GPA、获奖、社团所带来的价值之和。</p><p>被碾压的感觉与证明自己的情绪混在一起，使得我对自己没有明确的定位。而选择上的失误更多的不是来自于信息的匮乏，而是选择的依据出现了问题：<strong>没有基于未来的职业规划来做出决定，反倒是冲着高大上的标签或者亲朋好友的期待，这样的选择能有多少理智的成分呢</strong>？扪心自问，之前那一连串的操作都是基于一个错误而又功利的方向进行，真正想要的和你实际做的完全是两码事，两者间的夹角至少也有80度，甚至可能是钝角，量出这个角度我花了整整一年，而有的人则花了五年、十年甚至一辈子，这样无头苍蝇乱撞般的努力毫无意义，甚至可能起到反作用。</p><p>是的，之前的选择出了很大的问题，现在的锅确实也得背着。可是这并不是彻底击倒我的理由，换句话说，我应该去纠正之前的错误，而不是一蹶不振。之前说过：选择比努力重要，但<strong>通过交流、经历、思考不断纠正方向的能力则比选择还要重要</strong>，这样才会带来螺旋式的上升而不是断崖式下降。</p><p>明白了错误的主要原因和以后的职业规划后，再一次重新做出的选择看起来那么自然和水到渠成。再强调一遍：<strong>你对自己的定位评估会影响你的选择，而选择却远比努力更重要。你的定位应该取决于你对自己未来的规划，而不是那些高大上的标签或者亲戚朋友的看法，这会让你失去对自己的准确判断，德不配位，必然撞墙。</strong></p><p>不撞南墙不回头，这一年撞得头破血流，跟自己的无知、幼稚、局限斗争了一年。同样，也成长了一年，甚至比以往任何时候都成长地更快。有时候回过头去想，如果这一路很顺利的话，现在又会是怎样一番景象？如果当初选择了保送，如果选择了秋招工作，如果没有选择ZJU计算机，如果调剂到地球科学系，如果去工作了，如果……可惜没如果，所以从过去汲取教训后，最好向前看。盗用一句台词：</p><blockquote><p>You have got to put the past behind you before you can move on. ## 6 自食其果 放弃这个比较有诱惑力的工作而去赌一个未知的将来，要说没有压力肯定没人相信，但我当时的决定却相当清晰，即使违约的事情还没有谈妥，即使二战期间的食宿还没有着落。因为我在用未来的职业规划当作决策目标，不再过多考虑暂时的收益，因此决定不再是冲动的。我一直以为自己是悲惨的，大四的最后才确定初步的生涯规划，但实际上我又是幸运的，因为还有一大批人甚至中年以前都没有明白。</p></blockquote><p>真的要感谢我有一对开明的父母，当我不停地自我怀疑和否定之前的观点与行为，他们总会给予无限的鼓励与支持。</p><p>度过了煽情的毕业季，处理完违约的事情，考完驾照后，我便开始逐渐矫正自己的生活，为过去的错误买单。又是8月回校，心境却大有不同，坚定目标后，事情也不是一帆风顺。记得李健有一句歌词：等待和耕耘，谁更辛苦？我的答案是等待，那段时间我偶有焦虑，填补焦虑最好的方式就是找些事情做，可是闲下来之后，<strong>等待的日子却最是难熬</strong>。</p><p>每段崭新的日子一开始总是来不及悲伤。尽管我十分讨厌把相同的事情做两次以上，但或许是因为新鲜感，刚去的几周学习状态感觉还不错。逐渐理顺了生活之后，最难熬的一段日子在9月底10月初到来。接下来的几周我严重失眠：经常是晚上8/9点睡觉，躺床上思考很多事情，凌晨2/3点才入睡，然后就一直睡到大中午才起床，接着去吃饭学习，生物钟彻底陷入混乱。虽然我不止一次告诉自己：几个月很快就会过去，也明白路该怎么走，但是<strong>心病难医</strong>，还是会经常抱怨Why always me/Why always the wrong answer。我希望时光过得快一些，每天复习都数着日子。虽然看起来还算正常，但我有些担心会不会在哪一瞬间突然崩溃。我尝试了很多种方法试图让自己平静，回归正常的作息。</p><p>由于学校很傻逼的支付系统，扫码吃饭可供选择的窗口少得可怜，不过比物质上的单一更加要命的是心理上的波动。那段日子我真真切切感受到了人生的艰难：每天和活人说话不超过10句，我擅长独处，但还是一度怀疑自己能否忍受这样的孤独？能否坚持下去？接下来的日子又该如何度过？</p><p>幸好我有自己的日常爱好和排遣方式。除了正常的复习时间，我尝试用音乐、文学和足球去填补漫长的空闲：去看各种人物的访谈，从李健到村上春树；去听各种风格的音乐，从钢琴曲到摇滚乐，后来我惊讶地发现自己一年里竟然听了8000多首歌；去了解各种军事话题，从二战到伊拉克战争；去看各式各样的人生轨迹，从职业选择到人生理想。那段时间最开心的事情就是写博客、听音乐和刷评论，那就像是我自己的避风港。每隔一段时间我就会迷上一个大师：从Richard Clayderman到Beethoven, 从石进到周杰伦，从Joe Hisaishi到Maksim，从李健到Akina，甚至无聊到去扒一些<a href="https://www.cnblogs.com/EIMadrigal/p/11421473.html">抄袭的作品</a>、在足球APP上和人撕逼。</p><p align="center"></p><center class="half"><img src="https://img-blog.csdnimg.cn/2021050914403540.jpg" height="25%" width="25%"/>图片更新于2021.5.9</center><p>为了调整生物钟，我决定用早起对抗失眠，学了很多<a href="https://zhuanlan.zhihu.com/p/34952593">快速入睡</a>的技巧。深夜自我怀疑的时候，就去回想毕设导师对我能力的认可，她告诉我不能因为一次失误就这样自暴自弃，甚至在毕设答辩时，其他老师问我将来什么打算，我回答工作，老师仍然在表达惋惜。为了避免枯燥，我试图在每天晚上为第二天制定计划，并在完成小小的目标后奖励自己一顿美食（每隔一段时间都会去某个固定的小店吃饭）。后来不知是因为生活的惯性还是出于对第二人生的追求，我的效率渐渐提高，并养成了程序化的一天：早餐、学习、午饭、午休、学习、晚饭、学习、跑步、洗澡、沙雕视频（美食/老剧）、维护博客、睡觉。不可否认的是，尽管有时候仍然觉得自己像个可笑的小丑，但情况一直在好转。这种井井有条的生活给予了我长期的专注，使我得以脱离苦海。 <img src="https://img-blog.csdnimg.cn/20200528111916687.png" alt="在这里插入图片" /> 于是从10月下旬直到考前，我都变得异常平静。<strong>在那段低谷的日子里，收到了许多老师、前辈、同学以及食堂大叔的照顾和鼓励，也包括那些远在网络彼岸的未曾谋面的陌生人，在此一并感谢~</strong></p><p>我原本坚定地以为，高考考成那个鬼样子是因为没有认真去学，去复读一年肯定会有巨大的提高。不过经历了那几个月，现在我觉得结果真的未可知：心态、压力等等因素共同作用下导致的结果可能会谬之千里。</p><p>在这一年里，我听到过太多的诉苦：工作后的同学又想回来读研，而且固执地认为研究生的待遇好、升职快；还遇到了许多正在读研的学长学姐后悔自己没有早早去工作挣钱，积累社会经验。两种想法没有对错，还是那句老掉牙的话：因人而异。不置可否的是，<strong>人都是有损失厌恶的，比较必然带来不快，乃至伤害</strong>。以前我总是转不过这个弯来，或者更确切地说，潜意识里不想让自己转过这个弯。如果放眼整个社会，你会发现，<strong>人生从来就不是什么公平的游戏</strong>，别人比你少读几年书、多挣一些钱根本就是没什么大不了的事。有一大堆人压根不需要读书、打工挣钱，就可以家财万贯，你奋斗一辈子可能都无法到达别人的起点，难道我们就放弃生活了吗？大家都是普通人，甚至夸张一些，都是社会最底层的人，没有谁比谁高贵或卑微，为什么要比来比去互相伤害呢？</p><p>将读研作为缓冲的人无非两种情况：不知道自己要做啥；知道了要做什么但时间已经不足以得到理想的结果，别无选择。对我个人而言，如果去工作，可能以后选择的权利会少一些。三年的缓冲一是为了弥补之前犯下的错误，二是为了让自己将来有一些小小的选择权，不用一直996。基于职业规划的前提下，我想该怎么做也已经非常明确了。当然这只是我自己的情况，其他人，比如本科时已经积攒够了资本，那大可以直接工作；对于立志进入学术界的同学，那继续出国深造才是最好的选择，所以才说因人而异。</p><p>初试后我压根没有对答案，只是小小放松了一下，庆祝这段岁月的结束，也是迎接下一段更加艰难的旅程。终于松了口气，不为别的，只为有时间做自己的事情了，<strong>自由的感觉真好</strong>。</p><p>回家后，一边等待成绩，一边准备实习。找实习的过程并没有比这半年的生活轻松多少，本来打算3月份复试后立即找实习，拿到录取资格就可以算是在校生。结果人算不如天算，没想到疫情居然持续了这么久，2/3月的时候遥遥无期，也不知道什么时候复试，如果复试拖到4/5月，结束后就只剩6/7/8这3个月，很多公司都是至少实习3个月，这样找实习的时间几乎没有。所以从2月份开始，通过各位前辈和同学的内推，大大小小投了国内外几十家互联网企业：网易、字节、华为、深信服、微软、依图、百度、腾讯、小米、Amazon、IBM、Intel、广联达......起初我觉得非常奇怪，除了2家公司打电话了解情况后，其他的都杳无音讯，唯一的机会来自于网易，不过我的面试实在糟糕。后来特意查了一下，发现非在读生签实习协议违反劳动合同法。知道这事以后，我也就基本放弃，不再强求，如意算盘再一次落空。 ## 7 重新起跑 2月中旬看到初试成绩后，我觉得应该没什么问题，复试准备得很放松，把更多时间用来思考问题、夯实基础以及整理散落的片段。</p><p>复试虽然延期了2个月，但一切顺利。感谢我交的老师，面试时仍然在鼓励我，问的最多的就是去年的经历，告诉我不要以为没去ZJU就亏了，告诉我XJTU也不差，结束时说欢迎我来交大的确有些感动。在打趣的过程中，我能感觉到老师们那种不服气的精神，但同时我也明白品质和实力几无关系，就像托尔斯泰说的：<strong>只有伟大的作品，没有伟大的作家</strong>。我十分清醒，自己的水平目前确实很low，只有按照计划踏踏实实去做。</p><p>初试成绩公布后，我就联系了一堆老师，除了直接拒绝的，剩下某老师告诉我复试后才能确定名额，拟录取名单公布后，该老师问我是否读博，在得到否定的回答后，告诉我2天后跟他确认。但实际上，学硕名额非常紧张，有几个老师主动联系，我也意识到再等下去无济于事，赶快联系想跟的其他老师，很不幸的是：学硕名额几乎全都告罄。剩下一些不太想做的方向，出于无奈，只能群发了5个老师碰一碰运气。只要能实习、人品不至于太难以言表，是否push我都没什么问题，因为我只是要个学位证而已，即使这样也还是从下午3点找到晚上10点。</p><p>一年多的时间，我个人也变得更加平静，所以早早联系的老师一直吊着我，最后放我鸽子，我也无所谓。甚至看到自己出现在拟录取名单的第一行时，我也少有欣喜，脑子里想的只是烟酒生期间去哪实习，经济独立要怎么做，能不能早点拿到毕业证。</p><p>实习无望，只有做些其它事来消耗日子：拿到王道的助教资格，可能是这几个月为数不多的好消息。</p><p>人在回顾前一阶段的自己时，大多会觉得幼稚，正如现在翻看几年前的朋友圈，尴尬癌就会复发，所谓的成长究竟是好事还是坏事呢？<strong>随机漫步的人生又有谁说的清楚</strong>？甚至一年前我都从来没想过会是今天这个局面，顺便推荐一本有点虚无主义色彩的书《随机漫步的傻瓜》，看完后你可能会发现运气和概率竟然在人生中扮演了如此重要的角色。</p><p><strong>喜欢什么，就放手去做吧。人生的许多问题，只有自己亲身经历过，才能够给出回答</strong>。如雷军在<a href="https://v.qq.com/x/page/m0857uh1apx.html">采访</a>中所说：</p><blockquote><p>雷布斯：人生不要太多的勉强，不要强迫自己做什么。我觉得做自己喜欢的事情，可能是最佳的选择。因为你喜欢这个方向，喜欢做这件事情，我觉得爱好比什么强迫都管用。 主持人：如果不知道自己喜欢什么呢？ 雷布斯：那就看直觉。 主持人：也没有直觉？ 雷布斯：那就撞上什么干什么，这些冥冥之中姻缘注定的，反正撞到什么是什么。人生就是这样的一场经历嘛。你撞到这个事情，你不知道自己喜不喜欢，你先干了再说，你不喜欢还可以改。不要怕选择，你不喜欢可以改。 主持人：可能大家总是怕选错吧，走弯路吧？ 雷布斯：这个选错是必然的事，每个人都会做很多很多的选择，我觉得选择一定会出错。关键是提高选对的成功率，而不是说怕选错。每个人一辈子，可能做了一千个选择、一万个选择，怎么让你重要的选择不出错，或者少出错，这是关键，那些小的选择，无所谓对与错。</p></blockquote><p>人啊，总是逃不过真香定律：本科时黑的最起劲的一个地方，迟到了一年，几个月后又将重新去往。不过这次与五年前不同的是：我知道了<strong>Who am I</strong>，也弄清了<strong>Where am I going</strong>，以及大致明白了<strong>How to get there</strong>。 ## 8 小结 折腾了这么多，成长的阵痛依然历历在目。有些时候道理就在那里，可是不痛撞南墙就是明白不了。撞得头破血流才体会到了下面这些道理（不保证正确，只是我现在的看法，每个人都会有局限，仅供参考）： 1. <strong>选择比努力更重要，你的当前状态就是由之前的每一步决定和行为导致的。获取足够的信息是做出正确决定的前提，多和不同背景的人交流（多约饭）是获取信息的一种方式；</strong> 2. <strong>做决定时多考虑未来的职业规划，少考虑沉没成本，更不要冲着高大上的标签或者亲朋好友的期待；</strong> 3. <strong>独立思考和自我纠错会是极其重要并且稀缺的品性，这种能力的提高都需要亲身实践（跳几次坑就明白了）；</strong> 4. <strong>世俗意义下的成功评价标准与你在哪所学校读书、成绩有多好、科研多牛逼并不是强相关，所以非名校的同学完全没有必要自暴自弃，主动获取信息并做出明智的决定，最后比名校学生优秀的大有人在，我已经亲身见识过很多这类人了；</strong> 5. <strong>对于名校同学，千万不要沉迷于学校牌子、竞赛获奖这些光环带来的麻醉中，个人差异远比学校和专业的差异大得多，趁早找到自己的生涯规划：多去申请实习或者通过其他方式进而提前排除错误选项，越早付出的代价越小；</strong> 6. <strong>不要用战术上的勤奋掩盖战略上的失败，做事前先想明白Why，再去考虑How；</strong> 7. <strong>一尘不染的事情是没有的，完美只存在于梦境中，认清过去的错误，面对当下的现实，未来重新做人；</strong> 8. <strong>综上，想要避免痛苦，就要尽早认清自己曾经、现在、将来一直都是loser的事实，每天做个乐呵呵的傻逼，也挺好。</strong></p><p>伏案涕零，不知所言！</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Science Roadmap</title>
      <link href="/2019/02/15/Computer%20Science%20Roadmap/"/>
      <url>/2019/02/15/Computer%20Science%20Roadmap/</url>
      
        <content type="html"><![CDATA[<p>有感于国内令人发指的CS教育（尤其某校的计算机基本就是一堆SB在自嗨自娱自乐而已），决定自学为主。 主要资源是四大的比较完整的课程：video+reading+lab - <a href="https://github.com/prakhar1989/awesome-courses">Awesome CS Courses</a> - <a href="https://conanhujinming.github.io/comments-for-awesome-courses/">名校公开课程评价网</a> - <a href="https://teachyourselfcs.com/">Teach Yourself Computer Science</a> - <a href="https://github.com/huangrt01/CS-notes">RT Huang的自学笔记</a> - <a href="https://learn-sys.github.io/">LEARNSYS</a> - <a href="https://github.com/ossu/computer-science">OSSU</a> - <a href="https://www.zhihu.com/question/308850392/answer/1324509357">如何学习设计模式？</a></p><p>video比较费时间，而且我看视频总是来不及反应，好像不太适合我，所以一般只在看不懂材料时去针对性地看看视频。（当然一些讲得非常好的视频除外）</p><hr /><h2 id="basics">Basics</h2><ul><li><strong>Programming Languages</strong>: 精通C，熟悉1~2门(Java/Python/C++/Go)，了解一门(Haskell/Rust/)，掌握debug技巧</li><li><strong>Tools/Frameworks</strong>: 熟悉Linux系统的各项操作，最好看下源码，掌握Git等工具和框架</li><li><strong>Math</strong>: Linear Algebra/Probability/Statistics/Combinatorial Mathematics/Discrete Mathematics/Calculus 现用现学</li><li><strong>Core Courses</strong>: DS/Algorithms/OS/Organization/Network/DB</li></ul><h2 id="coding-interview">Coding Interview</h2><p>这方面<strong>很弱很弱</strong>，要勤奋练习，经常性在blog<strong>分析总结</strong>，<strong>穿透做过的题目及变种</strong>。</p><p>不要抱着可能撞到原题的心态去准备，反复练习提升自己的能力，需要有较多的训练量。</p><p><strong>Python快速过，Java也行，千万不要用C++浪费生命！！！</strong></p><p>复杂度最优，Google Doc/白纸练习，Bug-Free easy 5min medium 10~15min hard 15~20min</p><p>G实习：中文2轮：45min, 自我介绍+warm-up+hard, 1~2道medium题，白板 G校招：4轮（3中+1英），同上</p><ul><li><strong>Data structure</strong>：哈希表、堆、AVL、链表动手实现一遍，B树啥的都能扯扯~</li><li><strong>Algorithms</strong> <a href="https://leetcode-cn.com/problemset/lcof/">《剑指offer》</a> 67/67 <a href="https://leetcode-cn.com/problemset/lcci/">Cracking the Coding Interview</a> 40+/109 <a href="https://leetcode.com/">Leetcode</a> 310+/700+ <a href="https://www.nowcoder.com/">牛客笔试题</a></li><li><strong>System design</strong></li></ul><h2 id="projectspaper">Projects/Paper</h2><p><strong>选一个前沿的、不太讨厌的方向，研究研究，做点小项目</strong>，具体的方向可以参考<a href="http://csrankings.org/">CSRankings</a></p><ul><li>实习项目</li><li>学校大作业</li><li>兴趣项目：AutoML-ID, CMU 15-319, CS231n的3个小项目</li><li>开源项目</li></ul><h2 id="others">Others</h2><ul><li>GPA/数学/英语</li><li>比赛奖项</li><li>沟通交流能力</li><li>面试技巧 面经技巧只是锦上添花，最重要的还是及格的实力。nothing replaces hard work. 面经是告诉你这家公司面试的时候喜欢问哪些知识，而不是告诉你他们喜欢问哪些特定的问题。 更是一次需要充满着沟通与交流的谈话，让面试官认为他/她愿意成为你的同事</li></ul><p><strong>关于项目</strong> 背景主要包括场景、问题定义、需求、自己负责的部分扮演的角色等等。 指出项目中的困难点和解决方案</p><p><strong>关于paper</strong>：research的背景</p><p><strong>关于做题</strong> 1. 问清题目：数据范围是多少？这个数组的大小范围是多少？能不能给个样例？如果输入是这个，那输出应该是什么 2. 确认函数签名 3. 确认思路：修改输入数据 4. 确认corner case处理方式 5. 编码过程中不断交流 6. 主动测试：写完后不要急于告诉面试官写完了，手动跑一个样例：在屏幕上写出中间变量的当前取值，然后用鼠标光标告诉面试官现在程序跑到了哪一行代码，当前各个变量的取值是多少等等 7. 主动分析复杂度 8. 讨论算法的trade-off</p><p><strong>关于其它</strong> 先拿一些自己不target的公司练练手 虽然我不太懂，但是可以试着说一下 说出自己的insight:cache不友好 获得监督信息与正反馈 模拟面试</p><h2 id="how-to-learn">How to learn</h2><p>It is very important to take classes around my future work. It doesn't matter you learn it slowly, the most important part is that you <strong>take it seriously</strong> and build a <strong>solid foundation</strong>. 根据大佬们的经验，一门课大概要花150-300小时，每天2小时至少也要2个半月，所以千万千万不要着急，不要急于求成，总想着完成任务，多多反思自己到底学到了什么？真的透彻地理解了吗？又有多少内化到自身的知识体系？ 还有就是最好按照他们的课表时间上课，同时上的课最好不要超过2门（经过血泪实践，我只能1门单线程┭┮﹏┭┮，他们课程内容实在太充实了...，然后自己还有一堆屁事...）</p><p><strong>严格遵守学术规范</strong>，独立完成之后可以参考别人，修正自己。</p><p>Recently I've changed my way to learn new things. Previously I just wanted to understand the new things and tried to memorize all the details of a specific problem, or just translated others' materials into my words, which melted my brain and showed a very low efficiency. The reason why I learn things this way (passively) is mostly due to the Chinese's cramming education. But for me, heuristic teaching (actively) is more appropriate. The specific problem/model/algorithm is important, but the <strong>motivation</strong> is much more important. <strong>Everything has its motivation.</strong> So I decide to write my blogs with the following components:</p><ol type="1"><li>Motivation: What problems do we meet? Why propose this one?</li><li>Details: Mathematical derivation or tricky things.</li><li>Example: Use a handy example to illustrate.</li><li>Implementation: Code it out or use it to <strong>solve the problem</strong>.</li><li>Properties: <strong>When</strong> should/can we use the method? When shouldn't/can't? <strong>Why</strong>? What's the benefits and drawbacks if we use it?</li><li>Can we make some improvements on the off-the-shelf method for a specific problem?</li></ol><h2 id="todo-done-list">TODO &amp; DONE LIST</h2><p>Count the courses I've taken so far: 1. Introduction to Computer Science. Harvard University "This is CS 50". It should be the first class of CS rather than Haoqiang Tan's C Programming Language. 2. Linear Algebra. Massachusetts Institute of Technology If you want to learn Linear Algebra, just follow this one and you'll be fine. 3. Mathematics for Computer Science. Massachusetts Institute of Technology Very interesting course but I only took several lectures. SAD~ 4. Data Structures. University of California, Berkeley Strong recommend for Data Structure. You'll pick up Java from the interesting projects. 5. Introduction to Computer Systems. Carnegie Mellon University If you only want to take one system course, then select this one. But I haven't finished the whole lectures and labs. SAD again~ 6. Introduction to Database Systems. Carnegie Mellon University Hard for me. Just finished lab1. I'll come back one day~ 7. Machine Learning. Stanford University It's almost the first course I took after I found the true CS courses. But I forgot a lot. Sorry Andrew~ 8. Positive Psychology. Harvard University When I start to be anxious or depressed I'll go and find the lecture. Tal is an amazing teacher and I'm sure you'll become happier. 9. Convolutional Neural Networks for Visual Recognition. Stanford University High quality, especially its readings.</p><p>CS144 + Go + CS5412 + 6.828 + 6.824 + 6.031 + SICP + 6.033 + CS262</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interview </tag>
            
            <tag> Experience </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fibonacci Sequence</title>
      <link href="/2018/02/07/Fibonacci%20Sequence/"/>
      <url>/2018/02/07/Fibonacci%20Sequence/</url>
      
        <content type="html"><![CDATA[<h2 id="递归">递归</h2><p>斐波那契数列定义： <span class="math display">\[F(n)=\left\{\begin{matrix}0, n=0\\1, n=1\\F(n-1)+F(n-2), n&gt;1\end{matrix}\right.\]</span> 递归解法最直观，但是复杂度也最高：<span class="math inline">\(O(2^n)\)</span> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="comment">//细节可以处理非法输入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1</span> == n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 为了避免重复计算，可以将每一步计算得到的<span class="math inline">\(F(i)\)</span>存起来，这样的话时间复杂度降为<span class="math inline">\(O(n)\)</span>，但空间复杂度升为<span class="math inline">\(O(n)\)</span>。</p><h2 id="通项">通项</h2><p>求解通项的方法有好几种，下面展示一种用线性代数求解的方法： 斐波那契数列的递推公式是二阶差分方程，先用一点小技巧将其化为一阶： <span class="math display">\[\begin{cases}F_{k+2}=F_{k+1}+F_{k}\text{}\\F_{k+1}=F_{k+1}\text{}\\\end{cases}\]</span> 我们令<span class="math inline">\(u_k=\begin{bmatrix}F_{k+1}\\F_{k}\\\end{bmatrix}\)</span>，那么<span class="math inline">\(u_{k+1}=\begin{bmatrix}F_{k+2}\\F_{k+1}\\\end{bmatrix}=\begin{bmatrix}1\ 1\\1\ 0\\\end{bmatrix}u_k\)</span>。 矩阵<span class="math inline">\(A=\begin{bmatrix} 1\ 1\\1\ 0\\\end{bmatrix}\)</span>，令<span class="math inline">\(det(A-\lambda I)=\lambda^2-\lambda-1=0\)</span>，求得<span class="math inline">\(\lambda=\frac{1\pm \sqrt5}{2}\)</span>，对应于两个特征值的特征向量为<span class="math inline">\(x_1=\begin{bmatrix} \lambda_1\\ 1\\ \end{bmatrix},x_2=\begin{bmatrix} \lambda_2\\ 1\\ \end{bmatrix}\)</span>。 求得特征值和特征向量后，我们将<span class="math inline">\(u_0=\begin{bmatrix} F_1\\ F_0\\ \end{bmatrix}=\begin{bmatrix} 1\\ 0\\ \end{bmatrix}=c_1x_1+c_2x_2\)</span>，解得<span class="math inline">\(c_1=-\frac{1}{\sqrt5}, c_2=\frac{1}{\sqrt5}\)</span> 故 <span class="math inline">\(u_k=S\Lambda^{k}c=\begin{bmatrix} c_1\lambda_1^{k+1}+c_2\lambda_2^{k+1}\\c_1\lambda_1^{k}+c_2\lambda_2^{k}\\\end{bmatrix}\)</span> 所以通项公式可以表示为<span class="math inline">\(F(n)=C_1\lambda_1^n+C_2\lambda_2^n\)</span>。 故斐波那契数列的通项公式为：<span class="math inline">\(F(n)=\frac{1}{\sqrt5}[(\frac{1+\sqrt5}{2})^n-(\frac{1-\sqrt5}{2})^n]\)</span> 用公式求解的复杂度为<span class="math inline">\(O(1)\)</span>，但是由于无理数在计算机中的存储不是精确的，所以结果的精度很难保证。</p><h2 id="分治">分治</h2><p>通过矩阵形式的递推： <span class="math display">\[\begin{bmatrix}F(n)\\ F(n-1)\end{bmatrix}=\begin{bmatrix}1\  1\\ 1\  0\end{bmatrix}\begin{bmatrix}F(n-1)\\ F(n-2)\end{bmatrix}\]</span> 不断向下递推，可以得到： <span class="math display">\[\begin{bmatrix}F(n)\\ F(n-1)\end{bmatrix}={\begin{bmatrix}1\  1\\ 1\  0\end{bmatrix}}^{n-1}\begin{bmatrix}F(1)\\ F(0)\end{bmatrix}\]</span> 接下来就是求解矩阵的高次方，通过<a href="https://baike.baidu.com/item/快速幂/5500243">快速幂</a>可以在<span class="math inline">\(O(logn)\)</span>时间内进行计算： 整数的快速幂代码： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            ans *= a;</span><br><span class="line">        a *= a;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">raise</span><span class="params">(<span class="keyword">int</span> base, <span class="keyword">int</span> <span class="built_in">exp</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> half = raise(base, <span class="built_in">exp</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> base * half * half;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> half * half;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将传入的参数改为矩阵，乘法改为矩阵乘法，就可以得到矩阵快速幂： 以二阶矩阵为例，求解斐波那契数列： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;base,ans;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">multi</span><span class="params">(Matrix a, Matrix b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Matrix res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) <span class="comment">//第i行</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)  <span class="comment">//第j列</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.a[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)</span><br><span class="line">                res.a[i][j] += a.a[i][k] * b.a[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">QuickPow</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    base.a[<span class="number">0</span>][<span class="number">0</span>] = base.a[<span class="number">0</span>][<span class="number">1</span>] = base.a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    base.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;   <span class="comment">//初始化矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果矩阵初始化为单位阵</span></span><br><span class="line">    ans.a[<span class="number">0</span>][<span class="number">0</span>] = ans.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    ans.a[<span class="number">1</span>][<span class="number">0</span>] = ans.a[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = multi(ans, base);</span><br><span class="line">        &#125;</span><br><span class="line">        base = multi(base, base);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    QuickPow(n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans.a[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="动态规划">动态规划</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;++i) &#123;</span><br><span class="line">        ans = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="refs">Refs</h2><p><a href="https://www.zhihu.com/question/28062458/answer/39763094">斐波那契数列</a></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linear Algebra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hardware Introduction</title>
      <link href="/2018/01/20/Hardware%20Introduction/"/>
      <url>/2018/01/20/Hardware%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>计算机硬件组成可以概括为下图： <img src="https://img-blog.csdnimg.cn/36738bbcb45545f2a2b98519a5d8f838.png" alt="img" /></p><h2 id="cpu">CPU</h2><p>CPU生产商主要是Intel和AMD。 Intel的产品主要有四种：</p><ul><li>Celeron(赛扬)：低端处理器</li><li>Pentium(奔腾)：比赛扬强，比酷睿弱</li><li>Xeon(至强)：属于服务器处理器 -E3 -E5 -E7</li><li>Core(酷睿) -i3 -i5 -i7</li></ul><p>AMD产品主要有三种： - FX系列：旗舰级多核处理器，AMD FX-8350 - Athlon(速龙)系列：入门级多核处理器，AMD Athlon X4 870K - A系列(APU)：A4，A6，A8，A10依次增强，集成了核心显卡，A10-7870K</p><p>以Core i7-4770K为例，Core系列i7级别第4代处理器，770代表性能编号，代数相同，编号越大，性能越好；K代表可超频。 笔记本CPU可能带有后缀U/Y/M等： - U：超低功耗笔记本CPU - Y：极低功耗笔记本CPU，比U更省电 - M：笔记本CPU</p><h2 id="显卡">显卡</h2><p>显卡分为核显和独显，核显集成于CPU内部，独显与CPU独立。 独显由GPU(图形处理器)和其他结构(显存，散热模块，PCB板等)组成。 目前生产GPU的主流厂商有三家：AMD，NVIDIA，Intel： - AMD(A卡) -HD系列：AMD HD 7970 x2---第7代高端(数字9代表高端，8中端，7低端)双核GPU，第三位7代表性能，3，5，7，9依次增强，x2代表双核心。 -R系列：AMD R9 M290X---R9：R系列高端；M：笔记本GPU；290X：2代高性能增强型GPU。</p><ul><li><p>NVIDIA(N卡) NVIDIA GTX 980 TI：X表示性能比GT系列更强；980：9代高性能；TI：增强型。</p></li><li><p>Intel(I卡) I卡都是核显，有两个系列： -HD系列：HD P4600---P：企业级；4600：代表性能，一般数字越大，性能越好。 -Iris(锐炬)系列：Iris Pro 5200---Pro：专业版；5200：代表性能，同上。</p></li></ul><p>显存：SDDR3，DDR3，GDDR3，GDDR5，同容量下性能依次增加。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Science </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit and Turtle</title>
      <link href="/2016/10/15/Rabbit%20and%20Turtle/"/>
      <url>/2016/10/15/Rabbit%20and%20Turtle/</url>
      
        <content type="html"><![CDATA[<p>知乎上有这样一个问题：<a href="https://www.zhihu.com/question/22364825/answer/27255001">如果兔子都在拼命奔跑，是什么给了作为乌龟的你前进的动力？</a> 随着视野的不断开阔，我们难免怀疑自身前进的意义，曾经有很长一段时间我也深陷其中，直到看到余亦多先生的回答才有所感悟。</p><blockquote><p>我想每个人成长的经历中，都会或多或少曾被“自卑”的情绪所笼罩。我自己就是一个一直纠缠于“失败者”情结的人。</p><p>小时候因为痴肥，体育课上在同学面前抬不起头；搬到大城市，因为口音以及内向的性格，成为全班男生的出气筒；到了高中，进到全省理科实验班，才知道有些学霸的智商，是自己一辈子都无法企及的；初到美国，被身边同学认为是FOB，来自第三世界国家的乡巴佬；混进所谓的世界名校，看到身边一大波牛人，陷入平庸的沮丧；好不容易挤到纽约华尔街，看到名校中选出的所谓“精华”，才开始面对自己综合能力的缺失。</p><p>再回到香港，身边很多投行同事的业务能力与人际能力都远胜于我，只能在高压力的环境下苟延残喘；从乙方转到甲方开始做PE投资后，当跟索罗斯的儿子同桌斗智斗勇时，才能深刻体会“家学渊源”与“赢在起跑线”对一个人的意义。</p><p>由外资换到国企，开始看到体制内藏龙卧虎的主流玩家真正在玩什么，才意识到以前在边缘化外资环境下膨胀出各种不接地气的泡沫有多么可笑；随后开始接触到保险、银行以及其他金融领域的强人们，才知道在整个金融大版图中，十倍百倍于自己原来折腾的小池塘规模的资金，是在做什么。</p><p>分享了上面一大段，其实我想说的，最重要是如下几点：<br />1、就像talich老师在我去斯坦福念书以前赠我的那句话： 到了那儿，不用指望成为牛人，但至少你知道大海有多宽，能看到牛人在做什么，就够了。 对乌龟来讲，兔子存在的意义在于，至少让它知道这世界还有“兔子”的存在，以及兔子跑得有多快。盗用一句标语：让你看到更大的世界，这本身就是最大的意义。 2、兔子的存在，能够让乌龟直面自己就是一只乌龟这个事实。有勇气面对真实的自己，才能准确的定位自己的位置，也才能冷静的思考最适合自己的人生规划。而这，很多时候恰恰是最知易行难的事。 3、其实人越往后走，越会深刻体会到“阶级”的不可逾越性。愤青的时候会咒骂：“这世界为什么这么不公平。”可当你不再被荷尔蒙冲昏头脑时，也许你会开始思考：既然现在是这种情况，那我应该做点什么呢？当你绞尽心机让自己变得更好的同时，也许你也在让这个世界变得更好。</p><p>当樱木花道完成两万球的训练之后，他才知道流川枫有多厉害。 因为在一次比赛中，他看到流川枫的一个中投，这个起跳，这个姿势，这个弧线，竟然是他训练中想象的最完美的画面。 他很气，紧握这拳头，又不甘心，他问教练：这只狐狸是从什么时候开始打篮球的？ 安西教练：你应该好好的盯着流川枫的姿势，尽可能的模仿他，然后用3倍于他的训练量训练。这样，你才有可能在高中阶段之内超越他。 流川枫是那只兔子，幸运的是，樱木大概也是。</p><p>题主的困惑在于，樱木是个天才，尚且如此，而你，可能只是木暮。 李宗盛有一首歌，歌词是这样的： 最近比较烦比较烦比较烦，我看那远方怎么也看不到岸，那个后面还有一班天才追赶，写一首皆大欢喜的歌，是越来越难。</p><p>中年危机全都是这样的： 前面比你牛逼的人一眼都望不到岸，后面一班天才，比你有精力，比你聪明，比你学历高，比你国际化。而你，小孩成绩你得操心，老婆吃秘书的醋你也得操心，父母身体逐渐糟糕，最可怕的是你头发越来越少，身体越来越胖。</p><p>题主的困惑在于，比你天才的那个人，还比你努力；比题主的困惑更可怕的是，这个比你努力的天才，还比你年轻，比你有精力，这意味着，即使你想努力，你也没有那个精力努力。这就更无力了。</p><p>《蜗居》里面，宋思明想抢郭海藻。他比小贝成熟、稳重、懂得女孩的心思，样貌也不差；他有钱，有人际，能帮海藻解决问题。 若是宋思明未婚，小贝拿什么跟人家拼？小贝可能一辈子都达不到宋思明的高度，即使拼尽全力。 这才是无力感。 所以，我们能做什么。</p><p>如果你是个绝对的蠢蛋，那我只能说，请你尽量少的认识这个世界，最好一辈子不要离开你生活的地方，有时候知道的越多，越痛苦。当你看到那么繁华的城市，那么美丽的女孩，那么高端大气上档次的生活都与你无关的时候，更多的痛苦便会袭来。 如果你是个笨蛋，又不肯努力，那也请你知道少一点。 如果你不是个绝对的蠢蛋，又愿意努力，请你参考第一段安西老师的话：盯着那只兔子的每一个动作，能学多少学多少，然后以他三倍的训练量训练。</p><p>兔子一定会打盹的，即使牛逼如牛顿，30岁之后也再无建树；也不是每个像科比一样的天才，都知道洛杉矶凌晨四点的样子；你知道洛克李吗？火影里那个相信笨鸟先飞的热血少年，他说，努力的天才也是天才。 我曾经在一个答案中说过，勤奋，可能是这个世界上最被高估的美德。但是对于一个毫无天赋的人来讲，可以依仗的就只有勤奋了。</p><p>如此，即便你还是追不上兔子，你可以是乌龟里跑得快的那一个。 如此，即便你是木暮，你也能做成一个，每天都比昨天好一点点的木暮。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Predecessor </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
